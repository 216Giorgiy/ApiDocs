### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext
  commentId: T:Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext
  id: FormContext
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures
  children:
  - Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.CanRenderAtEndOfForm
  - Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.EndOfFormContent
  - Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.FormData
  - Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.HasAntiforgeryToken
  - Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.HasEndOfFormContent
  - Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.HasFormData
  - Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.RenderedField(System.String)
  - Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.RenderedField(System.String,System.Boolean)
  langs:
  - csharp
  - vb
  name: FormContext
  nameWithType: FormContext
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/FormContext.cs
      branch: dev
      repo: https://github.com/aspnet/mvc
    id: FormContext
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/FormContext.cs
    startLine: 16
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  summary: "\nInformation about the current &lt;form&gt;.\n"
  remarks: "\nLiteral &lt;form&gt; elements in a view will share the default <see cref=\"T:Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext\"></see> instance unless tag\nhelpers are enabled.\n"
  example: []
  syntax:
    content: public class FormContext
    content.vb: Public Class FormContext
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.FormData
  commentId: P:Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.FormData
  id: FormData
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext
  langs:
  - csharp
  - vb
  name: FormData
  nameWithType: FormContext.FormData
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.FormData
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/FormContext.cs
      branch: dev
      repo: https://github.com/aspnet/mvc
    id: FormData
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/FormContext.cs
    startLine: 26
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  summary: "\nGets a property bag for any information you wish to associate with a &lt;form/&gt; in an\n<see cref=\"T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper\"></see> implementation or extension method.\n"
  example: []
  syntax:
    content: public IDictionary<string, object> FormData { get; }
    content.vb: Public ReadOnly Property FormData As IDictionary(Of String, Object)
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.HasAntiforgeryToken
  commentId: P:Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.HasAntiforgeryToken
  id: HasAntiforgeryToken
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext
  langs:
  - csharp
  - vb
  name: HasAntiforgeryToken
  nameWithType: FormContext.HasAntiforgeryToken
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.HasAntiforgeryToken
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/FormContext.cs
      branch: dev
      repo: https://github.com/aspnet/mvc
    id: HasAntiforgeryToken
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/FormContext.cs
    startLine: 46
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  summary: "\nGets or sets an indication the current &lt;form&gt; element contains an antiforgery token. Do not use\nunless <see cref=\"P:Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.CanRenderAtEndOfForm\"></see> is <code>true</code>.\n"
  example: []
  syntax:
    content: public bool HasAntiforgeryToken { get; set; }
    content.vb: Public Property HasAntiforgeryToken As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the current &lt;form&gt; element contains an antiforgery token; <code>false</code> otherwise.\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.HasFormData
  commentId: P:Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.HasFormData
  id: HasFormData
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext
  langs:
  - csharp
  - vb
  name: HasFormData
  nameWithType: FormContext.HasFormData
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.HasFormData
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/FormContext.cs
      branch: dev
      repo: https://github.com/aspnet/mvc
    id: HasFormData
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/FormContext.cs
    startLine: 54
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  summary: "\nGets an indication the <see cref=\"P:Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.FormData\"></see> property bag has been used and likely contains entries.\n"
  example: []
  syntax:
    content: public bool HasFormData { get; }
    content.vb: Public ReadOnly Property HasFormData As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the backing field for <see cref=\"P:Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.FormData\"></see> is non-<code>null</code>; <code>false</code> otherwise.\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.HasEndOfFormContent
  commentId: P:Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.HasEndOfFormContent
  id: HasEndOfFormContent
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext
  langs:
  - csharp
  - vb
  name: HasEndOfFormContent
  nameWithType: FormContext.HasEndOfFormContent
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.HasEndOfFormContent
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/FormContext.cs
      branch: dev
      repo: https://github.com/aspnet/mvc
    id: HasEndOfFormContent
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/FormContext.cs
    startLine: 63
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  summary: "\nGets an indication the <see cref=\"P:Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.EndOfFormContent\"></see> collection has been used and likely contains entries.\n"
  example: []
  syntax:
    content: public bool HasEndOfFormContent { get; }
    content.vb: Public ReadOnly Property HasEndOfFormContent As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the backing field for <see cref=\"P:Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.EndOfFormContent\"></see> is non-<code>null</code>; <code>false</code>\notherwise.\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.EndOfFormContent
  commentId: P:Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.EndOfFormContent
  id: EndOfFormContent
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext
  langs:
  - csharp
  - vb
  name: EndOfFormContent
  nameWithType: FormContext.EndOfFormContent
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.EndOfFormContent
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/FormContext.cs
      branch: dev
      repo: https://github.com/aspnet/mvc
    id: EndOfFormContent
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/FormContext.cs
    startLine: 69
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  summary: "\nGets an <see cref=\"T:Microsoft.AspNetCore.Html.IHtmlContent\"></see> collection that should be rendered just prior to the next &lt;/form&gt;\nend tag. Do not use unless <see cref=\"P:Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.CanRenderAtEndOfForm\"></see> is <code>true</code>.\n"
  example: []
  syntax:
    content: public IList<IHtmlContent> EndOfFormContent { get; }
    content.vb: Public ReadOnly Property EndOfFormContent As IList(Of IHtmlContent)
    parameters: []
    return:
      type: System.Collections.Generic.IList{Microsoft.AspNetCore.Html.IHtmlContent}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.CanRenderAtEndOfForm
  commentId: P:Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.CanRenderAtEndOfForm
  id: CanRenderAtEndOfForm
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext
  langs:
  - csharp
  - vb
  name: CanRenderAtEndOfForm
  nameWithType: FormContext.CanRenderAtEndOfForm
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.CanRenderAtEndOfForm
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/FormContext.cs
      branch: dev
      repo: https://github.com/aspnet/mvc
    id: CanRenderAtEndOfForm
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/FormContext.cs
    startLine: 92
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  summary: "\nGets or sets an indication whether extra content can be rendered at the end of the content of this\n&lt;form&gt; element. That is, <see cref=\"P:Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.EndOfFormContent\"></see> will be rendered just prior to the\n&lt;/form&gt; end tag.\n"
  example: []
  syntax:
    content: public bool CanRenderAtEndOfForm { get; set; }
    content.vb: Public Property CanRenderAtEndOfForm As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the framework will render <see cref=\"P:Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.EndOfFormContent\"></see>; <code>false</code> otherwise. In\nparticular, <code>true</code> if the current &lt;form&gt; is associated with a tag helper or will be generated by\nan HTML helper; <code>false</code> when using the default <see cref=\"T:Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext\"></see> instance.\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.RenderedField(System.String)
  commentId: M:Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.RenderedField(System.String)
  id: RenderedField(System.String)
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext
  langs:
  - csharp
  - vb
  name: RenderedField(String)
  nameWithType: FormContext.RenderedField(String)
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.RenderedField(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/FormContext.cs
      branch: dev
      repo: https://github.com/aspnet/mvc
    id: RenderedField
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/FormContext.cs
    startLine: 119
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  summary: "\nReturns an indication based on <see cref=\"P:Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.RenderedFields\"></see> that the given <em>fieldName</em> has\nbeen rendered in this &lt;form&gt;.\n"
  example: []
  syntax:
    content: public bool RenderedField(string fieldName)
    content.vb: Public Function RenderedField(fieldName As String) As Boolean
    parameters:
    - id: fieldName
      type: System.String
      description: The full HTML name of a field that may have been rendered.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the given <em>fieldName</em> has been rendered; <code>false</code> otherwise.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.RenderedField(System.String,System.Boolean)
  commentId: M:Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.RenderedField(System.String,System.Boolean)
  id: RenderedField(System.String,System.Boolean)
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext
  langs:
  - csharp
  - vb
  name: RenderedField(String, Boolean)
  nameWithType: FormContext.RenderedField(String, Boolean)
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.RenderedField(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/FormContext.cs
      branch: dev
      repo: https://github.com/aspnet/mvc
    id: RenderedField
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/FormContext.cs
    startLine: 138
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  summary: "\nUpdates <see cref=\"P:Microsoft.AspNetCore.Mvc.ViewFeatures.FormContext.RenderedFields\"></see> to indicate <em>fieldName</em> has been rendered in this\n&lt;form&gt;.\n"
  example: []
  syntax:
    content: public void RenderedField(string fieldName, bool value)
    content.vb: Public Sub RenderedField(fieldName As String, value As Boolean)
    parameters:
    - id: fieldName
      type: System.String
      description: The full HTML name of a field that may have been rendered.
    - id: value
      type: System.Boolean
      description: If <code>true</code>, the given <em>fieldName</em> has been rendered.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures
  commentId: N:Microsoft.AspNetCore.Mvc.ViewFeatures
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.ViewFeatures
  nameWithType: Microsoft.AspNetCore.Mvc.ViewFeatures
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Object>
  nameWithType: IDictionary<String, Object>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>
  nameWithType.vb: IDictionary(Of String, Object)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object)
  name.vb: IDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IList{Microsoft.AspNetCore.Html.IHtmlContent}
  commentId: T:System.Collections.Generic.IList{Microsoft.AspNetCore.Html.IHtmlContent}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<IHtmlContent>
  nameWithType: IList<IHtmlContent>
  fullName: System.Collections.Generic.IList<Microsoft.AspNetCore.Html.IHtmlContent>
  nameWithType.vb: IList(Of IHtmlContent)
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.AspNetCore.Html.IHtmlContent)
  name.vb: IList(Of IHtmlContent)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Html.IHtmlContent
    name: IHtmlContent
    nameWithType: IHtmlContent
    fullName: Microsoft.AspNetCore.Html.IHtmlContent
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Html.IHtmlContent
    name: IHtmlContent
    nameWithType: IHtmlContent
    fullName: Microsoft.AspNetCore.Html.IHtmlContent
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
