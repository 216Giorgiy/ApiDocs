### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher
  commentId: T:Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher
  id: PhysicalFilesWatcher
  parent: Microsoft.Extensions.FileProviders.Physical
  children:
  - Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.#ctor(System.String,System.IO.FileSystemWatcher,System.Boolean)
  - Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.CreateFileChangeToken(System.String)
  - Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.Dispose
  langs:
  - csharp
  - vb
  name: PhysicalFilesWatcher
  nameWithType: PhysicalFilesWatcher
  fullName: Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Physical/PhysicalFilesWatcher.cs
      branch: dev
      repo: https://github.com/aspnet/filesystem
    id: PhysicalFilesWatcher
    path: src/Microsoft.Extensions.FileProviders.Physical/PhysicalFilesWatcher.cs
    startLine: 24
  assemblies:
  - Microsoft.Extensions.FileProviders.Physical
  namespace: Microsoft.Extensions.FileProviders.Physical
  summary: "\n<p>\nA file watcher that watches a physical filesystem for changes.\n</p>\n<p>\nTriggers events on <see cref=\"T:Microsoft.Extensions.Primitives.IChangeToken\"></see> when files are created, change, renamed, or deleted.\n</p>\n"
  example: []
  syntax:
    content: 'public class PhysicalFilesWatcher : IDisposable'
    content.vb: >-
      Public Class PhysicalFilesWatcher
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.#ctor(System.String,System.IO.FileSystemWatcher,System.Boolean)
  commentId: M:Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.#ctor(System.String,System.IO.FileSystemWatcher,System.Boolean)
  id: '#ctor(System.String,System.IO.FileSystemWatcher,System.Boolean)'
  parent: Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher
  langs:
  - csharp
  - vb
  name: PhysicalFilesWatcher(String, FileSystemWatcher, Boolean)
  nameWithType: PhysicalFilesWatcher.PhysicalFilesWatcher(String, FileSystemWatcher, Boolean)
  fullName: Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.PhysicalFilesWatcher(System.String, System.IO.FileSystemWatcher, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Physical/PhysicalFilesWatcher.cs
      branch: dev
      repo: https://github.com/aspnet/filesystem
    id: .ctor
    path: src/Microsoft.Extensions.FileProviders.Physical/PhysicalFilesWatcher.cs
    startLine: 44
  assemblies:
  - Microsoft.Extensions.FileProviders.Physical
  namespace: Microsoft.Extensions.FileProviders.Physical
  summary: "\nInitializes an instance of <see cref=\"T:Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher\"></see> that watches files in <em>rootDirectory</em>.\nWraps an instance of <see cref=\"T:System.IO.FileSystemWatcher\"></see>\n"
  example: []
  syntax:
    content: public PhysicalFilesWatcher(string rootDirectory, FileSystemWatcher fileSystemWatcher, bool pollForChanges)
    content.vb: Public Sub New(rootDirectory As String, fileSystemWatcher As FileSystemWatcher, pollForChanges As Boolean)
    parameters:
    - id: rootDirectory
      type: System.String
      description: Root directory for the watcher
    - id: fileSystemWatcher
      type: System.IO.FileSystemWatcher
      description: The wrapped watcher that is watching <em>rootDirectory</em>
    - id: pollForChanges
      type: System.Boolean
      description: "\nTrue when the watcher should use polling to trigger instances of\n<see cref=\"T:Microsoft.Extensions.Primitives.IChangeToken\"></see> created by <see cref=\"M:Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.CreateFileChangeToken(System.String)\"></see>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.CreateFileChangeToken(System.String)
  commentId: M:Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.CreateFileChangeToken(System.String)
  id: CreateFileChangeToken(System.String)
  parent: Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher
  langs:
  - csharp
  - vb
  name: CreateFileChangeToken(String)
  nameWithType: PhysicalFilesWatcher.CreateFileChangeToken(String)
  fullName: Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.CreateFileChangeToken(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Physical/PhysicalFilesWatcher.cs
      branch: dev
      repo: https://github.com/aspnet/filesystem
    id: CreateFileChangeToken
    path: src/Microsoft.Extensions.FileProviders.Physical/PhysicalFilesWatcher.cs
    startLine: 75
  assemblies:
  - Microsoft.Extensions.FileProviders.Physical
  namespace: Microsoft.Extensions.FileProviders.Physical
  summary: "\n<p>\nCreates an instance of <see cref=\"T:Microsoft.Extensions.Primitives.IChangeToken\"></see> for all files and directories that match the\n<em>filter</em>\n</p>\n<p>\nGlobbing patterns are relative to the root directory given in the constructor\n<seealso cref=\"M:Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.#ctor(System.String,System.IO.FileSystemWatcher,System.Boolean)\"></seealso>. Globbing patterns \nare interpreted by <seealso cref=\"T:Microsoft.Extensions.FileSystemGlobbing.Matcher\"></seealso>.\n</p>\n"
  example: []
  syntax:
    content: public IChangeToken CreateFileChangeToken(string filter)
    content.vb: Public Function CreateFileChangeToken(filter As String) As IChangeToken
    parameters:
    - id: filter
      type: System.String
      description: A globbing pattern for files and directories to watch
    return:
      type: Microsoft.Extensions.Primitives.IChangeToken
      description: A change token for all files that match the filter
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: When <em>filter</em> is null
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.Dispose
  commentId: M:Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.Dispose
  id: Dispose
  parent: Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: PhysicalFilesWatcher.Dispose()
  fullName: Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.Dispose()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Physical/PhysicalFilesWatcher.cs
      branch: dev
      repo: https://github.com/aspnet/filesystem
    id: Dispose
    path: src/Microsoft.Extensions.FileProviders.Physical/PhysicalFilesWatcher.cs
    startLine: 155
  assemblies:
  - Microsoft.Extensions.FileProviders.Physical
  namespace: Microsoft.Extensions.FileProviders.Physical
  summary: "\nDisposes the file watcher\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Extensions.FileProviders.Physical
  commentId: N:Microsoft.Extensions.FileProviders.Physical
  isExternal: false
  name: Microsoft.Extensions.FileProviders.Physical
  nameWithType: Microsoft.Extensions.FileProviders.Physical
  fullName: Microsoft.Extensions.FileProviders.Physical
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.FileSystemWatcher
  commentId: T:System.IO.FileSystemWatcher
  parent: System.IO
  isExternal: true
  name: FileSystemWatcher
  nameWithType: FileSystemWatcher
  fullName: System.IO.FileSystemWatcher
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: Microsoft.Extensions.Primitives.IChangeToken
  commentId: T:Microsoft.Extensions.Primitives.IChangeToken
  parent: Microsoft.Extensions.Primitives
  isExternal: false
  name: IChangeToken
  nameWithType: IChangeToken
  fullName: Microsoft.Extensions.Primitives.IChangeToken
- uid: Microsoft.Extensions.Primitives
  commentId: N:Microsoft.Extensions.Primitives
  isExternal: false
  name: Microsoft.Extensions.Primitives
  nameWithType: Microsoft.Extensions.Primitives
  fullName: Microsoft.Extensions.Primitives
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
