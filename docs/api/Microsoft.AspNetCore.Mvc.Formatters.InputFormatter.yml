### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter
  commentId: T:Microsoft.AspNetCore.Mvc.Formatters.InputFormatter
  id: InputFormatter
  parent: Microsoft.AspNetCore.Mvc.Formatters
  children:
  - Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.CanRead(InputFormatterContext)
  - Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.CanReadType(System.Type)
  - Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.GetDefaultValueForType(System.Type)
  - Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.GetSupportedContentTypes(System.String,System.Type)
  - Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.ReadAsync(InputFormatterContext)
  - Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.ReadRequestBodyAsync(InputFormatterContext)
  - Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.SupportedMediaTypes
  langs:
  - csharp
  - vb
  name: InputFormatter
  nameWithType: InputFormatter
  fullName: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Core/Formatters/InputFormatter.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: InputFormatter
    path: ../aspnet/Mvc/src/Microsoft.AspNetCore.Mvc.Core/Formatters/InputFormatter.cs
    startLine: 15
  assemblies:
  - Microsoft.AspNetCore.Mvc.Core
  namespace: Microsoft.AspNetCore.Mvc.Formatters
  summary: "\nReads an object from the request body.\n"
  example: []
  syntax:
    content: 'public abstract class InputFormatter : IInputFormatter, IApiRequestFormatMetadataProvider'
    content.vb: >-
      Public MustInherit Class InputFormatter
          Inherits IInputFormatter
          Implements IApiRequestFormatMetadataProvider
  inheritance:
  - System.Object
  derivedClasses:
  - Microsoft.AspNetCore.Mvc.Formatters.TextInputFormatter
  implements:
  - Microsoft.AspNetCore.Mvc.ApiExplorer.IApiRequestFormatMetadataProvider
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.SupportedMediaTypes
  commentId: P:Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.SupportedMediaTypes
  id: SupportedMediaTypes
  parent: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter
  langs:
  - csharp
  - vb
  name: SupportedMediaTypes
  nameWithType: InputFormatter.SupportedMediaTypes
  fullName: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.SupportedMediaTypes
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Core/Formatters/InputFormatter.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: SupportedMediaTypes
    path: ../aspnet/Mvc/src/Microsoft.AspNetCore.Mvc.Core/Formatters/InputFormatter.cs
    startLine: 21
  assemblies:
  - Microsoft.AspNetCore.Mvc.Core
  namespace: Microsoft.AspNetCore.Mvc.Formatters
  summary: "\nGets the mutable collection of media type elements supported by\nthis <xref href=\"Microsoft.AspNetCore.Mvc.Formatters.InputFormatter\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public MediaTypeCollection SupportedMediaTypes { get; }
    parameters: []
    return:
      type: Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection
    content.vb: Public ReadOnly Property SupportedMediaTypes As MediaTypeCollection
  overload: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.SupportedMediaTypes*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.GetDefaultValueForType(System.Type)
  commentId: M:Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.GetDefaultValueForType(System.Type)
  id: GetDefaultValueForType(System.Type)
  parent: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter
  langs:
  - csharp
  - vb
  name: GetDefaultValueForType(Type)
  nameWithType: InputFormatter.GetDefaultValueForType(Type)
  fullName: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.GetDefaultValueForType(System.Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Core/Formatters/InputFormatter.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: GetDefaultValueForType
    path: ../aspnet/Mvc/src/Microsoft.AspNetCore.Mvc.Core/Formatters/InputFormatter.cs
    startLine: 28
  assemblies:
  - Microsoft.AspNetCore.Mvc.Core
  namespace: Microsoft.AspNetCore.Mvc.Formatters
  summary: "\nGets the default value for a given type. Used to return a default value when the body contains no content.\n"
  example: []
  syntax:
    content: protected virtual object GetDefaultValueForType(Type modelType)
    parameters:
    - id: modelType
      type: System.Type
      description: The type of the value.
    return:
      type: System.Object
      description: The default value for the <span class="paramref">modelType</span> type.
    content.vb: Protected Overridable Function GetDefaultValueForType(modelType As Type) As Object
  overload: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.GetDefaultValueForType*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.CanRead(InputFormatterContext)
  commentId: M:Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.CanRead(InputFormatterContext)
  id: CanRead(InputFormatterContext)
  parent: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter
  langs:
  - csharp
  - vb
  name: CanRead(InputFormatterContext)
  nameWithType: InputFormatter.CanRead(InputFormatterContext)
  fullName: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.CanRead(InputFormatterContext)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Core/Formatters/InputFormatter.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: CanRead
    path: ../aspnet/Mvc/src/Microsoft.AspNetCore.Mvc.Core/Formatters/InputFormatter.cs
    startLine: 44
  assemblies:
  - Microsoft.AspNetCore.Mvc.Core
  namespace: Microsoft.AspNetCore.Mvc.Formatters
  example: []
  syntax:
    content: public virtual bool CanRead(InputFormatterContext context)
    parameters:
    - id: context
      type: InputFormatterContext
    return:
      type: System.Boolean
    content.vb: Public Overridable Function CanRead(context As InputFormatterContext) As Boolean
  overload: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.CanRead*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.CanReadType(System.Type)
  commentId: M:Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.CanReadType(System.Type)
  id: CanReadType(System.Type)
  parent: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter
  langs:
  - csharp
  - vb
  name: CanReadType(Type)
  nameWithType: InputFormatter.CanReadType(Type)
  fullName: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.CanReadType(System.Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Core/Formatters/InputFormatter.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: CanReadType
    path: ../aspnet/Mvc/src/Microsoft.AspNetCore.Mvc.Core/Formatters/InputFormatter.cs
    startLine: 91
  assemblies:
  - Microsoft.AspNetCore.Mvc.Core
  namespace: Microsoft.AspNetCore.Mvc.Formatters
  summary: "\nDetermines whether this <xref href=\"Microsoft.AspNetCore.Mvc.Formatters.InputFormatter\" data-throw-if-not-resolved=\"false\"></xref> can deserialize an object of the given\n<span class=\"paramref\">type</span>.\n"
  example: []
  syntax:
    content: protected virtual bool CanReadType(Type type)
    parameters:
    - id: type
      type: System.Type
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of object that will be read.
    return:
      type: System.Boolean
      description: <code>true</code> if the <span class="paramref">type</span> can be read, otherwise <code>false</code>.
    content.vb: Protected Overridable Function CanReadType(type As Type) As Boolean
  overload: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.CanReadType*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.ReadAsync(InputFormatterContext)
  commentId: M:Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.ReadAsync(InputFormatterContext)
  id: ReadAsync(InputFormatterContext)
  parent: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter
  langs:
  - csharp
  - vb
  name: ReadAsync(InputFormatterContext)
  nameWithType: InputFormatter.ReadAsync(InputFormatterContext)
  fullName: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.ReadAsync(InputFormatterContext)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Core/Formatters/InputFormatter.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ReadAsync
    path: ../aspnet/Mvc/src/Microsoft.AspNetCore.Mvc.Core/Formatters/InputFormatter.cs
    startLine: 97
  assemblies:
  - Microsoft.AspNetCore.Mvc.Core
  namespace: Microsoft.AspNetCore.Mvc.Formatters
  example: []
  syntax:
    content: public virtual Task<InputFormatterResult> ReadAsync(InputFormatterContext context)
    parameters:
    - id: context
      type: InputFormatterContext
    return:
      type: System.Threading.Tasks.Task{InputFormatterResult}
    content.vb: Public Overridable Function ReadAsync(context As InputFormatterContext) As Task(Of InputFormatterResult)
  overload: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.ReadAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.ReadRequestBodyAsync(InputFormatterContext)
  commentId: M:Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.ReadRequestBodyAsync(InputFormatterContext)
  id: ReadRequestBodyAsync(InputFormatterContext)
  parent: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter
  langs:
  - csharp
  - vb
  name: ReadRequestBodyAsync(InputFormatterContext)
  nameWithType: InputFormatter.ReadRequestBodyAsync(InputFormatterContext)
  fullName: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.ReadRequestBodyAsync(InputFormatterContext)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Core/Formatters/InputFormatter.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ReadRequestBodyAsync
    path: ../aspnet/Mvc/src/Microsoft.AspNetCore.Mvc.Core/Formatters/InputFormatter.cs
    startLine: 118
  assemblies:
  - Microsoft.AspNetCore.Mvc.Core
  namespace: Microsoft.AspNetCore.Mvc.Formatters
  summary: "\nReads an object from the request body.\n"
  example: []
  syntax:
    content: public abstract Task<InputFormatterResult> ReadRequestBodyAsync(InputFormatterContext context)
    parameters:
    - id: context
      type: InputFormatterContext
      description: The <see cref="!:InputFormatterContext"></see>.
    return:
      type: System.Threading.Tasks.Task{InputFormatterResult}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that on completion deserializes the request body.
    content.vb: Public MustOverride Function ReadRequestBodyAsync(context As InputFormatterContext) As Task(Of InputFormatterResult)
  overload: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.ReadRequestBodyAsync*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.GetSupportedContentTypes(System.String,System.Type)
  commentId: M:Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.GetSupportedContentTypes(System.String,System.Type)
  id: GetSupportedContentTypes(System.String,System.Type)
  parent: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter
  langs:
  - csharp
  - vb
  name: GetSupportedContentTypes(String, Type)
  nameWithType: InputFormatter.GetSupportedContentTypes(String, Type)
  fullName: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.GetSupportedContentTypes(System.String, System.Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Core/Formatters/InputFormatter.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: GetSupportedContentTypes
    path: ../aspnet/Mvc/src/Microsoft.AspNetCore.Mvc.Core/Formatters/InputFormatter.cs
    startLine: 121
  assemblies:
  - Microsoft.AspNetCore.Mvc.Core
  namespace: Microsoft.AspNetCore.Mvc.Formatters
  summary: "\nGets a filtered list of content types which are supported by the <see cref=\"!:Formatters.IInputFormatter\"></see>\nfor the <span class=\"paramref\">objectType</span> and <span class=\"paramref\">contentType</span>.\n"
  example: []
  syntax:
    content: public virtual IReadOnlyList<string> GetSupportedContentTypes(string contentType, Type objectType)
    parameters:
    - id: contentType
      type: System.String
      description: "\nThe content type for which the supported content types are desired, or <code>null</code> if any content\ntype can be used.\n"
    - id: objectType
      type: System.Type
      description: "\nThe <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> for which the supported content types are desired.\n"
    return:
      type: System.Collections.Generic.IReadOnlyList{System.String}
      description: Content types which are supported by the <see cref="!:Formatters.IInputFormatter"></see>.
    content.vb: Public Overridable Function GetSupportedContentTypes(contentType As String, objectType As Type) As IReadOnlyList(Of String)
  overload: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.GetSupportedContentTypes*
  implements:
  - Microsoft.AspNetCore.Mvc.ApiExplorer.IApiRequestFormatMetadataProvider.GetSupportedContentTypes(System.String,System.Type)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: Microsoft.AspNetCore.Mvc.Formatters
  commentId: N:Microsoft.AspNetCore.Mvc.Formatters
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.Formatters
  nameWithType: Microsoft.AspNetCore.Mvc.Formatters
  fullName: Microsoft.AspNetCore.Mvc.Formatters
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.AspNetCore.Mvc.ApiExplorer.IApiRequestFormatMetadataProvider
  commentId: T:Microsoft.AspNetCore.Mvc.ApiExplorer.IApiRequestFormatMetadataProvider
  parent: Microsoft.AspNetCore.Mvc.ApiExplorer
  isExternal: false
  name: IApiRequestFormatMetadataProvider
  nameWithType: IApiRequestFormatMetadataProvider
  fullName: Microsoft.AspNetCore.Mvc.ApiExplorer.IApiRequestFormatMetadataProvider
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Mvc.ApiExplorer
  commentId: N:Microsoft.AspNetCore.Mvc.ApiExplorer
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.ApiExplorer
  nameWithType: Microsoft.AspNetCore.Mvc.ApiExplorer
  fullName: Microsoft.AspNetCore.Mvc.ApiExplorer
- uid: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter
  commentId: T:Microsoft.AspNetCore.Mvc.Formatters.InputFormatter
  parent: Microsoft.AspNetCore.Mvc.Formatters
  isExternal: false
  name: InputFormatter
  nameWithType: InputFormatter
  fullName: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter
- uid: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.SupportedMediaTypes*
  commentId: Overload:Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.SupportedMediaTypes
  isExternal: false
  name: SupportedMediaTypes
  nameWithType: InputFormatter.SupportedMediaTypes
  fullName: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.SupportedMediaTypes
- uid: Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection
  commentId: T:Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection
  parent: Microsoft.AspNetCore.Mvc.Formatters
  isExternal: false
  name: MediaTypeCollection
  nameWithType: MediaTypeCollection
  fullName: Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection
- uid: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.GetDefaultValueForType*
  commentId: Overload:Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.GetDefaultValueForType
  isExternal: false
  name: GetDefaultValueForType
  nameWithType: InputFormatter.GetDefaultValueForType
  fullName: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.GetDefaultValueForType
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.CanRead*
  commentId: Overload:Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.CanRead
  isExternal: false
  name: CanRead
  nameWithType: InputFormatter.CanRead
  fullName: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.CanRead
- uid: InputFormatterContext
  isExternal: true
  name: InputFormatterContext
  nameWithType: InputFormatterContext
  fullName: InputFormatterContext
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.CanReadType*
  commentId: Overload:Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.CanReadType
  isExternal: false
  name: CanReadType
  nameWithType: InputFormatter.CanReadType
  fullName: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.CanReadType
- uid: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.ReadAsync*
  commentId: Overload:Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.ReadAsync
  isExternal: false
  name: ReadAsync
  nameWithType: InputFormatter.ReadAsync
  fullName: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.ReadAsync
- uid: System.Threading.Tasks.Task{InputFormatterResult}
  commentId: T:System.Threading.Tasks.Task{InputFormatterResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<InputFormatterResult>
  nameWithType: Task<InputFormatterResult>
  fullName: System.Threading.Tasks.Task<InputFormatterResult>
  nameWithType.vb: Task(Of InputFormatterResult)
  fullName.vb: System.Threading.Tasks.Task(Of InputFormatterResult)
  name.vb: Task(Of InputFormatterResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InputFormatterResult
    name: InputFormatterResult
    nameWithType: InputFormatterResult
    fullName: InputFormatterResult
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InputFormatterResult
    name: InputFormatterResult
    nameWithType: InputFormatterResult
    fullName: InputFormatterResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.ReadRequestBodyAsync*
  commentId: Overload:Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.ReadRequestBodyAsync
  isExternal: false
  name: ReadRequestBodyAsync
  nameWithType: InputFormatter.ReadRequestBodyAsync
  fullName: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.ReadRequestBodyAsync
- uid: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.GetSupportedContentTypes*
  commentId: Overload:Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.GetSupportedContentTypes
  isExternal: false
  name: GetSupportedContentTypes
  nameWithType: InputFormatter.GetSupportedContentTypes
  fullName: Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.GetSupportedContentTypes
- uid: Microsoft.AspNetCore.Mvc.ApiExplorer.IApiRequestFormatMetadataProvider.GetSupportedContentTypes(System.String,System.Type)
  commentId: M:Microsoft.AspNetCore.Mvc.ApiExplorer.IApiRequestFormatMetadataProvider.GetSupportedContentTypes(System.String,System.Type)
  parent: Microsoft.AspNetCore.Mvc.ApiExplorer.IApiRequestFormatMetadataProvider
  isExternal: true
  name: GetSupportedContentTypes(String, Type)
  nameWithType: IApiRequestFormatMetadataProvider.GetSupportedContentTypes(String, Type)
  fullName: Microsoft.AspNetCore.Mvc.ApiExplorer.IApiRequestFormatMetadataProvider.GetSupportedContentTypes(System.String, System.Type)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.ApiExplorer.IApiRequestFormatMetadataProvider.GetSupportedContentTypes(System.String,System.Type)
    name: GetSupportedContentTypes
    nameWithType: IApiRequestFormatMetadataProvider.GetSupportedContentTypes
    fullName: Microsoft.AspNetCore.Mvc.ApiExplorer.IApiRequestFormatMetadataProvider.GetSupportedContentTypes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.ApiExplorer.IApiRequestFormatMetadataProvider.GetSupportedContentTypes(System.String,System.Type)
    name: GetSupportedContentTypes
    nameWithType: IApiRequestFormatMetadataProvider.GetSupportedContentTypes
    fullName: Microsoft.AspNetCore.Mvc.ApiExplorer.IApiRequestFormatMetadataProvider.GetSupportedContentTypes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IReadOnlyList{System.String}
  commentId: T:System.Collections.Generic.IReadOnlyList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<String>
  nameWithType: IReadOnlyList<String>
  fullName: System.Collections.Generic.IReadOnlyList<System.String>
  nameWithType.vb: IReadOnlyList(Of String)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of System.String)
  name.vb: IReadOnlyList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
shouldSkipMarkup: true
