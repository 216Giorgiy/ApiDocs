### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder
  commentId: T:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder
  id: ComplexTypeModelBinder
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.Binders
  children:
  - Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.#ctor(System.Collections.Generic.IDictionary{ModelMetadata,IModelBinder})
  - Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindModelAsync(ModelBindingContext)
  - Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindProperty(ModelBindingContext)
  - Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.CanBindProperty(ModelBindingContext,ModelMetadata)
  - Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.CreateModel(ModelBindingContext)
  - Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.SetProperty(ModelBindingContext,System.String,ModelMetadata,ModelBindingResult)
  langs:
  - csharp
  - vb
  name: ComplexTypeModelBinder
  nameWithType: ComplexTypeModelBinder
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/ComplexTypeModelBinder.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ComplexTypeModelBinder
    path: ../aspnet/Mvc/src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/ComplexTypeModelBinder.cs
    startLine: 15
  assemblies:
  - Microsoft.AspNetCore.Mvc.Core
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding.Binders
  summary: "\n<see cref=\"!:IModelBinder\"></see> implementation for binding complex types.\n"
  example: []
  syntax:
    content: 'public class ComplexTypeModelBinder : IModelBinder'
    content.vb: >-
      Public Class ComplexTypeModelBinder
          Inherits IModelBinder
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.#ctor(System.Collections.Generic.IDictionary{ModelMetadata,IModelBinder})
  commentId: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.#ctor(System.Collections.Generic.IDictionary{ModelMetadata,IModelBinder})
  id: '#ctor(System.Collections.Generic.IDictionary{ModelMetadata,IModelBinder})'
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder
  langs:
  - csharp
  - vb
  name: ComplexTypeModelBinder(IDictionary<ModelMetadata, IModelBinder>)
  nameWithType: ComplexTypeModelBinder.ComplexTypeModelBinder(IDictionary<ModelMetadata, IModelBinder>)
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.ComplexTypeModelBinder(System.Collections.Generic.IDictionary<ModelMetadata, IModelBinder>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/ComplexTypeModelBinder.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: .ctor
    path: ../aspnet/Mvc/src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/ComplexTypeModelBinder.cs
    startLine: 26
  assemblies:
  - Microsoft.AspNetCore.Mvc.Core
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding.Binders
  summary: "\nCreates a new <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ComplexTypeModelBinder(IDictionary<ModelMetadata, IModelBinder> propertyBinders)
    parameters:
    - id: propertyBinders
      type: System.Collections.Generic.IDictionary{ModelMetadata,IModelBinder}
      description: "\nThe <xref href=\"System.Collections.Generic.IDictionary%602\" data-throw-if-not-resolved=\"false\"></xref> of binders to use for binding properties.\n"
    content.vb: Public Sub New(propertyBinders As IDictionary(Of ModelMetadata, IModelBinder))
  overload: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.#ctor*
  nameWithType.vb: ComplexTypeModelBinder.ComplexTypeModelBinder(IDictionary(Of ModelMetadata, IModelBinder))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.ComplexTypeModelBinder(System.Collections.Generic.IDictionary(Of ModelMetadata, IModelBinder))
  name.vb: ComplexTypeModelBinder(IDictionary(Of ModelMetadata, IModelBinder))
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindModelAsync(ModelBindingContext)
  commentId: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindModelAsync(ModelBindingContext)
  id: BindModelAsync(ModelBindingContext)
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder
  langs:
  - csharp
  - vb
  name: BindModelAsync(ModelBindingContext)
  nameWithType: ComplexTypeModelBinder.BindModelAsync(ModelBindingContext)
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindModelAsync(ModelBindingContext)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/ComplexTypeModelBinder.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: BindModelAsync
    path: ../aspnet/Mvc/src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/ComplexTypeModelBinder.cs
    startLine: 37
  assemblies:
  - Microsoft.AspNetCore.Mvc.Core
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding.Binders
  example: []
  syntax:
    content: public Task BindModelAsync(ModelBindingContext bindingContext)
    parameters:
    - id: bindingContext
      type: ModelBindingContext
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function BindModelAsync(bindingContext As ModelBindingContext) As Task
  overload: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindModelAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.CanBindProperty(ModelBindingContext,ModelMetadata)
  commentId: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.CanBindProperty(ModelBindingContext,ModelMetadata)
  id: CanBindProperty(ModelBindingContext,ModelMetadata)
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder
  langs:
  - csharp
  - vb
  name: CanBindProperty(ModelBindingContext, ModelMetadata)
  nameWithType: ComplexTypeModelBinder.CanBindProperty(ModelBindingContext, ModelMetadata)
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.CanBindProperty(ModelBindingContext, ModelMetadata)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/ComplexTypeModelBinder.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: CanBindProperty
    path: ../aspnet/Mvc/src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/ComplexTypeModelBinder.cs
    startLine: 116
  assemblies:
  - Microsoft.AspNetCore.Mvc.Core
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding.Binders
  summary: "\nGets a value indicating whether or not the model property identified by <span class=\"paramref\">propertyMetadata</span>\ncan be bound.\n"
  example: []
  syntax:
    content: protected virtual bool CanBindProperty(ModelBindingContext bindingContext, ModelMetadata propertyMetadata)
    parameters:
    - id: bindingContext
      type: ModelBindingContext
      description: The <see cref="!:ModelBindingContext"></see> for the container model.
    - id: propertyMetadata
      type: ModelMetadata
      description: The <see cref="!:ModelMetadata"></see> for the model property.
    return:
      type: System.Boolean
      description: <code>true</code> if the model property can be bound, otherwise <code>false</code>.
    content.vb: Protected Overridable Function CanBindProperty(bindingContext As ModelBindingContext, propertyMetadata As ModelMetadata) As Boolean
  overload: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.CanBindProperty*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindProperty(ModelBindingContext)
  commentId: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindProperty(ModelBindingContext)
  id: BindProperty(ModelBindingContext)
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder
  langs:
  - csharp
  - vb
  name: BindProperty(ModelBindingContext)
  nameWithType: ComplexTypeModelBinder.BindProperty(ModelBindingContext)
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindProperty(ModelBindingContext)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/ComplexTypeModelBinder.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: BindProperty
    path: ../aspnet/Mvc/src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/ComplexTypeModelBinder.cs
    startLine: 150
  assemblies:
  - Microsoft.AspNetCore.Mvc.Core
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding.Binders
  summary: "\nAttempts to bind a property of the model.\n"
  example: []
  syntax:
    content: protected virtual Task BindProperty(ModelBindingContext bindingContext)
    parameters:
    - id: bindingContext
      type: ModelBindingContext
      description: The <see cref="!:ModelBindingContext"></see> for the model property.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that when completed will set <see cref=\"!:ModelBindingContext.Result\"></see> to the\nresult of model binding.\n"
    content.vb: Protected Overridable Function BindProperty(bindingContext As ModelBindingContext) As Task
  overload: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindProperty*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.CreateModel(ModelBindingContext)
  commentId: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.CreateModel(ModelBindingContext)
  id: CreateModel(ModelBindingContext)
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder
  langs:
  - csharp
  - vb
  name: CreateModel(ModelBindingContext)
  nameWithType: ComplexTypeModelBinder.CreateModel(ModelBindingContext)
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.CreateModel(ModelBindingContext)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/ComplexTypeModelBinder.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: CreateModel
    path: ../aspnet/Mvc/src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/ComplexTypeModelBinder.cs
    startLine: 313
  assemblies:
  - Microsoft.AspNetCore.Mvc.Core
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding.Binders
  summary: "\nCreates suitable <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> for given <span class=\"paramref\">bindingContext</span>.\n"
  example: []
  syntax:
    content: protected virtual object CreateModel(ModelBindingContext bindingContext)
    parameters:
    - id: bindingContext
      type: ModelBindingContext
      description: The <see cref="!:ModelBindingContext"></see>.
    return:
      type: System.Object
      description: An <xref href="System.Object" data-throw-if-not-resolved="false"></xref> compatible with <see cref="!:ModelBindingContext.ModelType"></see>.
    content.vb: Protected Overridable Function CreateModel(bindingContext As ModelBindingContext) As Object
  overload: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.CreateModel*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.SetProperty(ModelBindingContext,System.String,ModelMetadata,ModelBindingResult)
  commentId: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.SetProperty(ModelBindingContext,System.String,ModelMetadata,ModelBindingResult)
  id: SetProperty(ModelBindingContext,System.String,ModelMetadata,ModelBindingResult)
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder
  langs:
  - csharp
  - vb
  name: SetProperty(ModelBindingContext, String, ModelMetadata, ModelBindingResult)
  nameWithType: ComplexTypeModelBinder.SetProperty(ModelBindingContext, String, ModelMetadata, ModelBindingResult)
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.SetProperty(ModelBindingContext, System.String, ModelMetadata, ModelBindingResult)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/ComplexTypeModelBinder.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: SetProperty
    path: ../aspnet/Mvc/src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/ComplexTypeModelBinder.cs
    startLine: 340
  assemblies:
  - Microsoft.AspNetCore.Mvc.Core
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding.Binders
  summary: "\nUpdates a property in the current <see cref=\"!:ModelBindingContext.Model\"></see>.\n"
  example: []
  syntax:
    content: protected virtual void SetProperty(ModelBindingContext bindingContext, string modelName, ModelMetadata propertyMetadata, ModelBindingResult result)
    parameters:
    - id: bindingContext
      type: ModelBindingContext
      description: The <see cref="!:ModelBindingContext"></see>.
    - id: modelName
      type: System.String
      description: The model name.
    - id: propertyMetadata
      type: ModelMetadata
      description: The <see cref="!:ModelMetadata"></see> for the property to set.
    - id: result
      type: ModelBindingResult
      description: The <see cref="!:ModelBindingResult"></see> for the property&apos;s new value.
    content.vb: Protected Overridable Sub SetProperty(bindingContext As ModelBindingContext, modelName As String, propertyMetadata As ModelMetadata, result As ModelBindingResult)
  overload: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.SetProperty*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Binders
  commentId: N:Microsoft.AspNetCore.Mvc.ModelBinding.Binders
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.ModelBinding.Binders
  nameWithType: Microsoft.AspNetCore.Mvc.ModelBinding.Binders
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Binders
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder
  commentId: T:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder
  isExternal: false
  name: ComplexTypeModelBinder
  nameWithType: ComplexTypeModelBinder
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.#ctor*
  commentId: Overload:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.#ctor
  isExternal: false
  name: ComplexTypeModelBinder
  nameWithType: ComplexTypeModelBinder.ComplexTypeModelBinder
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.ComplexTypeModelBinder
- uid: System.Collections.Generic.IDictionary{ModelMetadata,IModelBinder}
  commentId: T:System.Collections.Generic.IDictionary{ModelMetadata,IModelBinder}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<ModelMetadata, IModelBinder>
  nameWithType: IDictionary<ModelMetadata, IModelBinder>
  fullName: System.Collections.Generic.IDictionary<ModelMetadata, IModelBinder>
  nameWithType.vb: IDictionary(Of ModelMetadata, IModelBinder)
  fullName.vb: System.Collections.Generic.IDictionary(Of ModelMetadata, IModelBinder)
  name.vb: IDictionary(Of ModelMetadata, IModelBinder)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ModelMetadata
    name: ModelMetadata
    nameWithType: ModelMetadata
    fullName: ModelMetadata
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IModelBinder
    name: IModelBinder
    nameWithType: IModelBinder
    fullName: IModelBinder
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ModelMetadata
    name: ModelMetadata
    nameWithType: ModelMetadata
    fullName: ModelMetadata
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IModelBinder
    name: IModelBinder
    nameWithType: IModelBinder
    fullName: IModelBinder
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindModelAsync*
  commentId: Overload:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindModelAsync
  isExternal: false
  name: BindModelAsync
  nameWithType: ComplexTypeModelBinder.BindModelAsync
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindModelAsync
- uid: ModelBindingContext
  isExternal: true
  name: ModelBindingContext
  nameWithType: ModelBindingContext
  fullName: ModelBindingContext
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.CanBindProperty*
  commentId: Overload:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.CanBindProperty
  isExternal: false
  name: CanBindProperty
  nameWithType: ComplexTypeModelBinder.CanBindProperty
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.CanBindProperty
- uid: ModelMetadata
  isExternal: true
  name: ModelMetadata
  nameWithType: ModelMetadata
  fullName: ModelMetadata
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindProperty*
  commentId: Overload:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindProperty
  isExternal: false
  name: BindProperty
  nameWithType: ComplexTypeModelBinder.BindProperty
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindProperty
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.CreateModel*
  commentId: Overload:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.CreateModel
  isExternal: false
  name: CreateModel
  nameWithType: ComplexTypeModelBinder.CreateModel
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.CreateModel
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.SetProperty*
  commentId: Overload:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.SetProperty
  isExternal: false
  name: SetProperty
  nameWithType: ComplexTypeModelBinder.SetProperty
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.SetProperty
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: ModelBindingResult
  isExternal: true
  name: ModelBindingResult
  nameWithType: ModelBindingResult
  fullName: ModelBindingResult
shouldSkipMarkup: true
