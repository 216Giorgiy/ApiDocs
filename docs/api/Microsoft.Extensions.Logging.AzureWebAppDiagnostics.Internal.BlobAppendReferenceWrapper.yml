### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BlobAppendReferenceWrapper
  commentId: T:Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BlobAppendReferenceWrapper
  id: BlobAppendReferenceWrapper
  parent: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  children:
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BlobAppendReferenceWrapper.#ctor(Microsoft.WindowsAzure.Storage.Blob.CloudAppendBlob)
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BlobAppendReferenceWrapper.CreateAsync
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BlobAppendReferenceWrapper.OpenWriteAsync
  langs:
  - csharp
  - vb
  name: BlobAppendReferenceWrapper
  nameWithType: BlobAppendReferenceWrapper
  fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BlobAppendReferenceWrapper
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/BlobAppendReferenceWrapper.cs
      branch: dev
      repo: https://github.com/aspnet/logging
    id: BlobAppendReferenceWrapper
    path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/BlobAppendReferenceWrapper.cs
    startLine: 11
  assemblies:
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics
  namespace: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  example: []
  syntax:
    content: 'public class BlobAppendReferenceWrapper : ICloudAppendBlob'
    content.vb: >-
      Public Class BlobAppendReferenceWrapper
          Implements ICloudAppendBlob
  inheritance:
  - System.Object
  implements:
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BlobAppendReferenceWrapper.#ctor(Microsoft.WindowsAzure.Storage.Blob.CloudAppendBlob)
  commentId: M:Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BlobAppendReferenceWrapper.#ctor(Microsoft.WindowsAzure.Storage.Blob.CloudAppendBlob)
  id: '#ctor(Microsoft.WindowsAzure.Storage.Blob.CloudAppendBlob)'
  parent: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BlobAppendReferenceWrapper
  langs:
  - csharp
  - vb
  name: BlobAppendReferenceWrapper(CloudAppendBlob)
  nameWithType: BlobAppendReferenceWrapper.BlobAppendReferenceWrapper(CloudAppendBlob)
  fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BlobAppendReferenceWrapper.BlobAppendReferenceWrapper(Microsoft.WindowsAzure.Storage.Blob.CloudAppendBlob)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/BlobAppendReferenceWrapper.cs
      branch: dev
      repo: https://github.com/aspnet/logging
    id: .ctor
    path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/BlobAppendReferenceWrapper.cs
    startLine: 19
  assemblies:
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics
  namespace: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  summary: "\nCreates new instance of <see cref=\"T:Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BlobAppendReferenceWrapper\"></see>.\n"
  example: []
  syntax:
    content: public BlobAppendReferenceWrapper(CloudAppendBlob cloudAppendBlob)
    content.vb: Public Sub New(cloudAppendBlob As CloudAppendBlob)
    parameters:
    - id: cloudAppendBlob
      type: Microsoft.WindowsAzure.Storage.Blob.CloudAppendBlob
      description: The <see cref="T:Microsoft.WindowsAzure.Storage.Blob.CloudAppendBlob"></see> instance to wrap.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BlobAppendReferenceWrapper.OpenWriteAsync
  commentId: M:Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BlobAppendReferenceWrapper.OpenWriteAsync
  id: OpenWriteAsync
  parent: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BlobAppendReferenceWrapper
  langs:
  - csharp
  - vb
  name: OpenWriteAsync()
  nameWithType: BlobAppendReferenceWrapper.OpenWriteAsync()
  fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BlobAppendReferenceWrapper.OpenWriteAsync()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/BlobAppendReferenceWrapper.cs
      branch: dev
      repo: https://github.com/aspnet/logging
    id: OpenWriteAsync
    path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/BlobAppendReferenceWrapper.cs
    startLine: 24
  assemblies:
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics
  namespace: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  example: []
  syntax:
    content: public Task<Stream> OpenWriteAsync()
    content.vb: Public Function OpenWriteAsync As Task(Of Stream)
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
  implements:
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob.OpenWriteAsync
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BlobAppendReferenceWrapper.CreateAsync
  commentId: M:Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BlobAppendReferenceWrapper.CreateAsync
  id: CreateAsync
  parent: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BlobAppendReferenceWrapper
  langs:
  - csharp
  - vb
  name: CreateAsync()
  nameWithType: BlobAppendReferenceWrapper.CreateAsync()
  fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BlobAppendReferenceWrapper.CreateAsync()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/BlobAppendReferenceWrapper.cs
      branch: dev
      repo: https://github.com/aspnet/logging
    id: CreateAsync
    path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/BlobAppendReferenceWrapper.cs
    startLine: 30
  assemblies:
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics
  namespace: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  example: []
  syntax:
    content: public Task CreateAsync()
    content.vb: Public Function CreateAsync As Task
    return:
      type: System.Threading.Tasks.Task
  implements:
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob.CreateAsync
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  commentId: N:Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  isExternal: false
  name: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  nameWithType: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob
  commentId: T:Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob
  parent: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  isExternal: false
  name: ICloudAppendBlob
  nameWithType: ICloudAppendBlob
  fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.WindowsAzure.Storage.Blob.CloudAppendBlob
  commentId: T:Microsoft.WindowsAzure.Storage.Blob.CloudAppendBlob
  parent: Microsoft.WindowsAzure.Storage.Blob
  isExternal: true
  name: CloudAppendBlob
  nameWithType: CloudAppendBlob
  fullName: Microsoft.WindowsAzure.Storage.Blob.CloudAppendBlob
- uid: Microsoft.WindowsAzure.Storage.Blob
  commentId: N:Microsoft.WindowsAzure.Storage.Blob
  isExternal: false
  name: Microsoft.WindowsAzure.Storage.Blob
  nameWithType: Microsoft.WindowsAzure.Storage.Blob
  fullName: Microsoft.WindowsAzure.Storage.Blob
- uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob.OpenWriteAsync
  commentId: M:Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob.OpenWriteAsync
  parent: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob
  isExternal: false
  name: OpenWriteAsync()
  nameWithType: ICloudAppendBlob.OpenWriteAsync()
  fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob.OpenWriteAsync()
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob.OpenWriteAsync
    name: OpenWriteAsync
    nameWithType: ICloudAppendBlob.OpenWriteAsync
    fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob.OpenWriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob.OpenWriteAsync
    name: OpenWriteAsync
    nameWithType: ICloudAppendBlob.OpenWriteAsync
    fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob.OpenWriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.IO.Stream}
  commentId: T:System.Threading.Tasks.Task{System.IO.Stream}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Stream>
  nameWithType: Task<Stream>
  fullName: System.Threading.Tasks.Task<System.IO.Stream>
  nameWithType.vb: Task(Of Stream)
  fullname.vb: System.Threading.Tasks.Task(Of System.IO.Stream)
  name.vb: Task(Of Stream)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob.CreateAsync
  commentId: M:Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob.CreateAsync
  parent: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob
  isExternal: false
  name: CreateAsync()
  nameWithType: ICloudAppendBlob.CreateAsync()
  fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob.CreateAsync()
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob.CreateAsync
    name: CreateAsync
    nameWithType: ICloudAppendBlob.CreateAsync
    fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob.CreateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob.CreateAsync
    name: CreateAsync
    nameWithType: ICloudAppendBlob.CreateAsync
    fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob.CreateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
