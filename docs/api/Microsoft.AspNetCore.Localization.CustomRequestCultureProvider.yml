### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Localization.CustomRequestCultureProvider
  commentId: T:Microsoft.AspNetCore.Localization.CustomRequestCultureProvider
  id: CustomRequestCultureProvider
  parent: Microsoft.AspNetCore.Localization
  children:
  - Microsoft.AspNetCore.Localization.CustomRequestCultureProvider.#ctor(System.Func{HttpContext,System.Threading.Tasks.Task{Microsoft.AspNetCore.Localization.ProviderCultureResult}})
  - Microsoft.AspNetCore.Localization.CustomRequestCultureProvider.DetermineProviderCultureResult(HttpContext)
  langs:
  - csharp
  - vb
  name: CustomRequestCultureProvider
  nameWithType: CustomRequestCultureProvider
  fullName: Microsoft.AspNetCore.Localization.CustomRequestCultureProvider
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Localization/CustomRequestCultureProvider.cs
      branch: master
      repo: https://github.com/aspnet/Localization.git
    id: CustomRequestCultureProvider
    path: ../aspnet/Localization/src/Microsoft.AspNetCore.Localization/CustomRequestCultureProvider.cs
    startLine: 12
  assemblies:
  - Microsoft.AspNetCore.Localization
  namespace: Microsoft.AspNetCore.Localization
  summary: "\nDetermines the culture information for a request via the configured delegate.\n"
  example: []
  syntax:
    content: 'public class CustomRequestCultureProvider : RequestCultureProvider, IRequestCultureProvider'
    content.vb: >-
      Public Class CustomRequestCultureProvider
          Inherits RequestCultureProvider
          Implements IRequestCultureProvider
  inheritance:
  - System.Object
  - Microsoft.AspNetCore.Localization.RequestCultureProvider
  implements:
  - Microsoft.AspNetCore.Localization.IRequestCultureProvider
  inheritedMembers:
  - Microsoft.AspNetCore.Localization.RequestCultureProvider.Options
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Localization.CustomRequestCultureProvider.#ctor(System.Func{HttpContext,System.Threading.Tasks.Task{Microsoft.AspNetCore.Localization.ProviderCultureResult}})
  commentId: M:Microsoft.AspNetCore.Localization.CustomRequestCultureProvider.#ctor(System.Func{HttpContext,System.Threading.Tasks.Task{Microsoft.AspNetCore.Localization.ProviderCultureResult}})
  id: '#ctor(System.Func{HttpContext,System.Threading.Tasks.Task{Microsoft.AspNetCore.Localization.ProviderCultureResult}})'
  parent: Microsoft.AspNetCore.Localization.CustomRequestCultureProvider
  langs:
  - csharp
  - vb
  name: CustomRequestCultureProvider(Func<HttpContext, Task<ProviderCultureResult>>)
  nameWithType: CustomRequestCultureProvider.CustomRequestCultureProvider(Func<HttpContext, Task<ProviderCultureResult>>)
  fullName: Microsoft.AspNetCore.Localization.CustomRequestCultureProvider.CustomRequestCultureProvider(System.Func<HttpContext, System.Threading.Tasks.Task<Microsoft.AspNetCore.Localization.ProviderCultureResult>>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Localization/CustomRequestCultureProvider.cs
      branch: master
      repo: https://github.com/aspnet/Localization.git
    id: .ctor
    path: ../aspnet/Localization/src/Microsoft.AspNetCore.Localization/CustomRequestCultureProvider.cs
    startLine: 20
  assemblies:
  - Microsoft.AspNetCore.Localization
  namespace: Microsoft.AspNetCore.Localization
  summary: "\nCreates a new <xref href=\"Microsoft.AspNetCore.Localization.CustomRequestCultureProvider\" data-throw-if-not-resolved=\"false\"></xref> using the specified delegate.\n"
  example: []
  syntax:
    content: public CustomRequestCultureProvider(Func<HttpContext, Task<ProviderCultureResult>> provider)
    parameters:
    - id: provider
      type: System.Func{HttpContext,System.Threading.Tasks.Task{Microsoft.AspNetCore.Localization.ProviderCultureResult}}
      description: The provider delegate.
    content.vb: Public Sub New(provider As Func(Of HttpContext, Task(Of ProviderCultureResult)))
  overload: Microsoft.AspNetCore.Localization.CustomRequestCultureProvider.#ctor*
  nameWithType.vb: CustomRequestCultureProvider.CustomRequestCultureProvider(Func(Of HttpContext, Task(Of ProviderCultureResult)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Localization.CustomRequestCultureProvider.CustomRequestCultureProvider(System.Func(Of HttpContext, System.Threading.Tasks.Task(Of Microsoft.AspNetCore.Localization.ProviderCultureResult)))
  name.vb: CustomRequestCultureProvider(Func(Of HttpContext, Task(Of ProviderCultureResult)))
- uid: Microsoft.AspNetCore.Localization.CustomRequestCultureProvider.DetermineProviderCultureResult(HttpContext)
  commentId: M:Microsoft.AspNetCore.Localization.CustomRequestCultureProvider.DetermineProviderCultureResult(HttpContext)
  id: DetermineProviderCultureResult(HttpContext)
  parent: Microsoft.AspNetCore.Localization.CustomRequestCultureProvider
  langs:
  - csharp
  - vb
  name: DetermineProviderCultureResult(HttpContext)
  nameWithType: CustomRequestCultureProvider.DetermineProviderCultureResult(HttpContext)
  fullName: Microsoft.AspNetCore.Localization.CustomRequestCultureProvider.DetermineProviderCultureResult(HttpContext)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Localization/CustomRequestCultureProvider.cs
      branch: master
      repo: https://github.com/aspnet/Localization.git
    id: DetermineProviderCultureResult
    path: ../aspnet/Localization/src/Microsoft.AspNetCore.Localization/CustomRequestCultureProvider.cs
    startLine: 31
  assemblies:
  - Microsoft.AspNetCore.Localization
  namespace: Microsoft.AspNetCore.Localization
  summary: "\nImplements the provider to determine the culture of the given request.\n"
  example: []
  syntax:
    content: public override Task<ProviderCultureResult> DetermineProviderCultureResult(HttpContext httpContext)
    parameters:
    - id: httpContext
      type: HttpContext
      description: The <see cref="!:HttpContext"></see> for the request.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Localization.ProviderCultureResult}
      description: "\nThe determined <xref href=\"Microsoft.AspNetCore.Localization.ProviderCultureResult\" data-throw-if-not-resolved=\"false\"></xref>.\nReturns <code>null</code> if the provider couldn&apos;t determine a <xref href=\"Microsoft.AspNetCore.Localization.ProviderCultureResult\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: Public Overrides Function DetermineProviderCultureResult(httpContext As HttpContext) As Task(Of ProviderCultureResult)
  overridden: Microsoft.AspNetCore.Localization.RequestCultureProvider.DetermineProviderCultureResult(HttpContext)
  overload: Microsoft.AspNetCore.Localization.CustomRequestCultureProvider.DetermineProviderCultureResult*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.AspNetCore.Localization
  commentId: N:Microsoft.AspNetCore.Localization
  isExternal: false
  name: Microsoft.AspNetCore.Localization
  nameWithType: Microsoft.AspNetCore.Localization
  fullName: Microsoft.AspNetCore.Localization
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.AspNetCore.Localization.RequestCultureProvider
  commentId: T:Microsoft.AspNetCore.Localization.RequestCultureProvider
  parent: Microsoft.AspNetCore.Localization
  isExternal: false
  name: RequestCultureProvider
  nameWithType: RequestCultureProvider
  fullName: Microsoft.AspNetCore.Localization.RequestCultureProvider
- uid: Microsoft.AspNetCore.Localization.IRequestCultureProvider
  commentId: T:Microsoft.AspNetCore.Localization.IRequestCultureProvider
  parent: Microsoft.AspNetCore.Localization
  isExternal: false
  name: IRequestCultureProvider
  nameWithType: IRequestCultureProvider
  fullName: Microsoft.AspNetCore.Localization.IRequestCultureProvider
- uid: Microsoft.AspNetCore.Localization.RequestCultureProvider.Options
  commentId: P:Microsoft.AspNetCore.Localization.RequestCultureProvider.Options
  parent: Microsoft.AspNetCore.Localization.RequestCultureProvider
  isExternal: false
  name: Options
  nameWithType: RequestCultureProvider.Options
  fullName: Microsoft.AspNetCore.Localization.RequestCultureProvider.Options
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Localization.CustomRequestCultureProvider
  commentId: T:Microsoft.AspNetCore.Localization.CustomRequestCultureProvider
  isExternal: false
  name: CustomRequestCultureProvider
  nameWithType: CustomRequestCultureProvider
  fullName: Microsoft.AspNetCore.Localization.CustomRequestCultureProvider
- uid: Microsoft.AspNetCore.Localization.CustomRequestCultureProvider.#ctor*
  commentId: Overload:Microsoft.AspNetCore.Localization.CustomRequestCultureProvider.#ctor
  isExternal: false
  name: CustomRequestCultureProvider
  nameWithType: CustomRequestCultureProvider.CustomRequestCultureProvider
  fullName: Microsoft.AspNetCore.Localization.CustomRequestCultureProvider.CustomRequestCultureProvider
- uid: System.Func{HttpContext,System.Threading.Tasks.Task{Microsoft.AspNetCore.Localization.ProviderCultureResult}}
  commentId: T:System.Func{HttpContext,System.Threading.Tasks.Task{Microsoft.AspNetCore.Localization.ProviderCultureResult}}
  parent: System
  definition: System.Func`2
  name: Func<HttpContext, Task<ProviderCultureResult>>
  nameWithType: Func<HttpContext, Task<ProviderCultureResult>>
  fullName: System.Func<HttpContext, System.Threading.Tasks.Task<Microsoft.AspNetCore.Localization.ProviderCultureResult>>
  nameWithType.vb: Func(Of HttpContext, Task(Of ProviderCultureResult))
  fullName.vb: System.Func(Of HttpContext, System.Threading.Tasks.Task(Of Microsoft.AspNetCore.Localization.ProviderCultureResult))
  name.vb: Func(Of HttpContext, Task(Of ProviderCultureResult))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: HttpContext
    name: HttpContext
    nameWithType: HttpContext
    fullName: HttpContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Localization.ProviderCultureResult
    name: ProviderCultureResult
    nameWithType: ProviderCultureResult
    fullName: Microsoft.AspNetCore.Localization.ProviderCultureResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: HttpContext
    name: HttpContext
    nameWithType: HttpContext
    fullName: HttpContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Localization.ProviderCultureResult
    name: ProviderCultureResult
    nameWithType: ProviderCultureResult
    fullName: Microsoft.AspNetCore.Localization.ProviderCultureResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Localization.RequestCultureProvider.DetermineProviderCultureResult(HttpContext)
  commentId: M:Microsoft.AspNetCore.Localization.RequestCultureProvider.DetermineProviderCultureResult(HttpContext)
  parent: Microsoft.AspNetCore.Localization.RequestCultureProvider
  isExternal: true
  name: DetermineProviderCultureResult(HttpContext)
  nameWithType: RequestCultureProvider.DetermineProviderCultureResult(HttpContext)
  fullName: Microsoft.AspNetCore.Localization.RequestCultureProvider.DetermineProviderCultureResult(HttpContext)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Localization.RequestCultureProvider.DetermineProviderCultureResult(HttpContext)
    name: DetermineProviderCultureResult
    nameWithType: RequestCultureProvider.DetermineProviderCultureResult
    fullName: Microsoft.AspNetCore.Localization.RequestCultureProvider.DetermineProviderCultureResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: HttpContext
    name: HttpContext
    nameWithType: HttpContext
    fullName: HttpContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Localization.RequestCultureProvider.DetermineProviderCultureResult(HttpContext)
    name: DetermineProviderCultureResult
    nameWithType: RequestCultureProvider.DetermineProviderCultureResult
    fullName: Microsoft.AspNetCore.Localization.RequestCultureProvider.DetermineProviderCultureResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: HttpContext
    name: HttpContext
    nameWithType: HttpContext
    fullName: HttpContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Localization.CustomRequestCultureProvider.DetermineProviderCultureResult*
  commentId: Overload:Microsoft.AspNetCore.Localization.CustomRequestCultureProvider.DetermineProviderCultureResult
  isExternal: false
  name: DetermineProviderCultureResult
  nameWithType: CustomRequestCultureProvider.DetermineProviderCultureResult
  fullName: Microsoft.AspNetCore.Localization.CustomRequestCultureProvider.DetermineProviderCultureResult
- uid: HttpContext
  isExternal: true
  name: HttpContext
  nameWithType: HttpContext
  fullName: HttpContext
- uid: System.Threading.Tasks.Task{Microsoft.AspNetCore.Localization.ProviderCultureResult}
  commentId: T:System.Threading.Tasks.Task{Microsoft.AspNetCore.Localization.ProviderCultureResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ProviderCultureResult>
  nameWithType: Task<ProviderCultureResult>
  fullName: System.Threading.Tasks.Task<Microsoft.AspNetCore.Localization.ProviderCultureResult>
  nameWithType.vb: Task(Of ProviderCultureResult)
  fullName.vb: System.Threading.Tasks.Task(Of Microsoft.AspNetCore.Localization.ProviderCultureResult)
  name.vb: Task(Of ProviderCultureResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Localization.ProviderCultureResult
    name: ProviderCultureResult
    nameWithType: ProviderCultureResult
    fullName: Microsoft.AspNetCore.Localization.ProviderCultureResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Localization.ProviderCultureResult
    name: ProviderCultureResult
    nameWithType: ProviderCultureResult
    fullName: Microsoft.AspNetCore.Localization.ProviderCultureResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
shouldSkipMarkup: true
