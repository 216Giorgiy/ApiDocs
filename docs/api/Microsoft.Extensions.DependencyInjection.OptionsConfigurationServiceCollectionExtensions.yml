### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.DependencyInjection.OptionsConfigurationServiceCollectionExtensions
  commentId: T:Microsoft.Extensions.DependencyInjection.OptionsConfigurationServiceCollectionExtensions
  id: OptionsConfigurationServiceCollectionExtensions
  parent: Microsoft.Extensions.DependencyInjection
  children:
  - Microsoft.Extensions.DependencyInjection.OptionsConfigurationServiceCollectionExtensions.Configure``1(IServiceCollection,IConfiguration)
  langs:
  - csharp
  - vb
  name: OptionsConfigurationServiceCollectionExtensions
  nameWithType: OptionsConfigurationServiceCollectionExtensions
  fullName: Microsoft.Extensions.DependencyInjection.OptionsConfigurationServiceCollectionExtensions
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Options.ConfigurationExtensions/OptionsConfigurationServiceCollectionExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Options.git
    id: OptionsConfigurationServiceCollectionExtensions
    path: ../aspnet/Options/src/Microsoft.Extensions.Options.ConfigurationExtensions/OptionsConfigurationServiceCollectionExtensions.cs
    startLine: 12
  assemblies:
  - Microsoft.Extensions.Options.ConfigurationExtensions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nExtension methods for adding configuration related options services to the DI container.\n"
  example: []
  syntax:
    content: 'public static class OptionsConfigurationServiceCollectionExtensions : object'
    content.vb: >-
      Public Module OptionsConfigurationServiceCollectionExtensions
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Extensions.DependencyInjection.OptionsConfigurationServiceCollectionExtensions.Configure``1(IServiceCollection,IConfiguration)
  commentId: M:Microsoft.Extensions.DependencyInjection.OptionsConfigurationServiceCollectionExtensions.Configure``1(IServiceCollection,IConfiguration)
  id: Configure``1(IServiceCollection,IConfiguration)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.OptionsConfigurationServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: Configure<TOptions>(IServiceCollection, IConfiguration)
  nameWithType: OptionsConfigurationServiceCollectionExtensions.Configure<TOptions>(IServiceCollection, IConfiguration)
  fullName: Microsoft.Extensions.DependencyInjection.OptionsConfigurationServiceCollectionExtensions.Configure<TOptions>(IServiceCollection, IConfiguration)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Options.ConfigurationExtensions/OptionsConfigurationServiceCollectionExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Options.git
    id: Configure
    path: ../aspnet/Options/src/Microsoft.Extensions.Options.ConfigurationExtensions/OptionsConfigurationServiceCollectionExtensions.cs
    startLine: 21
  assemblies:
  - Microsoft.Extensions.Options.ConfigurationExtensions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nRegisters a configuration instance which TOptions will bind against.\n"
  example: []
  syntax:
    content: 'public static IServiceCollection Configure<TOptions>(this IServiceCollection services, IConfiguration config)where TOptions : class'
    parameters:
    - id: services
      type: IServiceCollection
      description: The <see cref="!:IServiceCollection"></see> to add the services to.
    - id: config
      type: IConfiguration
      description: The configuration being bound.
    typeParameters:
    - id: TOptions
      description: The type of options being configured.
    return:
      type: IServiceCollection
      description: The <see cref="!:IServiceCollection"></see> so that additional calls can be chained.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Configure(Of TOptions As Class)(services As IServiceCollection, config As IConfiguration) As IServiceCollection
  overload: Microsoft.Extensions.DependencyInjection.OptionsConfigurationServiceCollectionExtensions.Configure*
  nameWithType.vb: OptionsConfigurationServiceCollectionExtensions.Configure(Of TOptions)(IServiceCollection, IConfiguration)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.OptionsConfigurationServiceCollectionExtensions.Configure(Of TOptions)(IServiceCollection, IConfiguration)
  name.vb: Configure(Of TOptions)(IServiceCollection, IConfiguration)
references:
- uid: Microsoft.Extensions.DependencyInjection
  commentId: N:Microsoft.Extensions.DependencyInjection
  isExternal: false
  name: Microsoft.Extensions.DependencyInjection
  nameWithType: Microsoft.Extensions.DependencyInjection
  fullName: Microsoft.Extensions.DependencyInjection
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.DependencyInjection.OptionsConfigurationServiceCollectionExtensions.Configure*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.OptionsConfigurationServiceCollectionExtensions.Configure
  isExternal: false
  name: Configure
  nameWithType: OptionsConfigurationServiceCollectionExtensions.Configure
  fullName: Microsoft.Extensions.DependencyInjection.OptionsConfigurationServiceCollectionExtensions.Configure
- uid: IServiceCollection
  isExternal: true
  name: IServiceCollection
  nameWithType: IServiceCollection
  fullName: IServiceCollection
- uid: IConfiguration
  isExternal: true
  name: IConfiguration
  nameWithType: IConfiguration
  fullName: IConfiguration
shouldSkipMarkup: true
