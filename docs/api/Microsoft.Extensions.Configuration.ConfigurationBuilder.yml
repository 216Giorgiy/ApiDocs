### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Configuration.ConfigurationBuilder
  commentId: T:Microsoft.Extensions.Configuration.ConfigurationBuilder
  id: ConfigurationBuilder
  parent: Microsoft.Extensions.Configuration
  children:
  - Microsoft.Extensions.Configuration.ConfigurationBuilder.Add(IConfigurationSource)
  - Microsoft.Extensions.Configuration.ConfigurationBuilder.Build
  - Microsoft.Extensions.Configuration.ConfigurationBuilder.Properties
  - Microsoft.Extensions.Configuration.ConfigurationBuilder.Sources
  langs:
  - csharp
  - vb
  name: ConfigurationBuilder
  nameWithType: ConfigurationBuilder
  fullName: Microsoft.Extensions.Configuration.ConfigurationBuilder
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration/ConfigurationBuilder.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: ConfigurationBuilder
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration/ConfigurationBuilder.cs
    startLine: 11
  assemblies:
  - Microsoft.Extensions.Configuration
  namespace: Microsoft.Extensions.Configuration
  summary: "\nUsed to build key/value based configuration settings for use in an application.\n"
  example: []
  syntax:
    content: 'public class ConfigurationBuilder : IConfigurationBuilder'
    content.vb: >-
      Public Class ConfigurationBuilder
          Inherits IConfigurationBuilder
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.Configuration.ConfigurationBuilder.Sources
  commentId: P:Microsoft.Extensions.Configuration.ConfigurationBuilder.Sources
  id: Sources
  parent: Microsoft.Extensions.Configuration.ConfigurationBuilder
  langs:
  - csharp
  - vb
  name: Sources
  nameWithType: ConfigurationBuilder.Sources
  fullName: Microsoft.Extensions.Configuration.ConfigurationBuilder.Sources
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration/ConfigurationBuilder.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: Sources
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration/ConfigurationBuilder.cs
    startLine: 18
  assemblies:
  - Microsoft.Extensions.Configuration
  namespace: Microsoft.Extensions.Configuration
  summary: "\nReturns the sources used to obtain configuation values.\n"
  example: []
  syntax:
    content: public IEnumerable<IConfigurationSource> Sources { get; }
    parameters: []
    return:
      type: IEnumerable{IConfigurationSource}
    content.vb: Public ReadOnly Property Sources As IEnumerable(Of IConfigurationSource)
  overload: Microsoft.Extensions.Configuration.ConfigurationBuilder.Sources*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.Configuration.ConfigurationBuilder.Properties
  commentId: P:Microsoft.Extensions.Configuration.ConfigurationBuilder.Properties
  id: Properties
  parent: Microsoft.Extensions.Configuration.ConfigurationBuilder
  langs:
  - csharp
  - vb
  name: Properties
  nameWithType: ConfigurationBuilder.Properties
  fullName: Microsoft.Extensions.Configuration.ConfigurationBuilder.Properties
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration/ConfigurationBuilder.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: Properties
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration/ConfigurationBuilder.cs
    startLine: 30
  assemblies:
  - Microsoft.Extensions.Configuration
  namespace: Microsoft.Extensions.Configuration
  summary: "\nGets a key/value collection that can be used to share data between the <see cref=\"!:IConfigurationBuilder\"></see>\nand the registered <see cref=\"!:IConfigurationProvider\"></see>s.\n"
  example: []
  syntax:
    content: public Dictionary<string, object> Properties { get; }
    parameters: []
    return:
      type: Dictionary{System.String,System.Object}
    content.vb: Public ReadOnly Property Properties As Dictionary(Of String, Object)
  overload: Microsoft.Extensions.Configuration.ConfigurationBuilder.Properties*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.Configuration.ConfigurationBuilder.Add(IConfigurationSource)
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationBuilder.Add(IConfigurationSource)
  id: Add(IConfigurationSource)
  parent: Microsoft.Extensions.Configuration.ConfigurationBuilder
  langs:
  - csharp
  - vb
  name: Add(IConfigurationSource)
  nameWithType: ConfigurationBuilder.Add(IConfigurationSource)
  fullName: Microsoft.Extensions.Configuration.ConfigurationBuilder.Add(IConfigurationSource)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration/ConfigurationBuilder.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: Add
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration/ConfigurationBuilder.cs
    startLine: 37
  assemblies:
  - Microsoft.Extensions.Configuration
  namespace: Microsoft.Extensions.Configuration
  summary: "\nAdds a new configuration source.\n"
  example: []
  syntax:
    content: public IConfigurationBuilder Add(IConfigurationSource source)
    parameters:
    - id: source
      type: IConfigurationSource
      description: The configuration source to add.
    return:
      type: IConfigurationBuilder
      description: The same <see cref="!:IConfigurationBuilder"></see>.
    content.vb: Public Function Add(source As IConfigurationSource) As IConfigurationBuilder
  overload: Microsoft.Extensions.Configuration.ConfigurationBuilder.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Configuration.ConfigurationBuilder.Build
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationBuilder.Build
  id: Build
  parent: Microsoft.Extensions.Configuration.ConfigurationBuilder
  langs:
  - csharp
  - vb
  name: Build()
  nameWithType: ConfigurationBuilder.Build()
  fullName: Microsoft.Extensions.Configuration.ConfigurationBuilder.Build()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration/ConfigurationBuilder.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: Build
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration/ConfigurationBuilder.cs
    startLine: 53
  assemblies:
  - Microsoft.Extensions.Configuration
  namespace: Microsoft.Extensions.Configuration
  summary: "\nBuilds an <see cref=\"!:IConfiguration\"></see> with keys and values from the set of providers registered in\n<xref href=\"Microsoft.Extensions.Configuration.ConfigurationBuilder.Sources\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public IConfigurationRoot Build()
    return:
      type: IConfigurationRoot
      description: An <see cref="!:IConfigurationRoot"></see> with keys and values from the registered providers.
    content.vb: Public Function Build As IConfigurationRoot
  overload: Microsoft.Extensions.Configuration.ConfigurationBuilder.Build*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Extensions.Configuration
  commentId: N:Microsoft.Extensions.Configuration
  isExternal: false
  name: Microsoft.Extensions.Configuration
  nameWithType: Microsoft.Extensions.Configuration
  fullName: Microsoft.Extensions.Configuration
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Configuration.ConfigurationBuilder.Sources*
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationBuilder.Sources
  isExternal: false
  name: Sources
  nameWithType: ConfigurationBuilder.Sources
  fullName: Microsoft.Extensions.Configuration.ConfigurationBuilder.Sources
- uid: IEnumerable{IConfigurationSource}
  commentId: '!:IEnumerable{IConfigurationSource}'
  definition: IEnumerable`1
  name: IEnumerable<IConfigurationSource>
  nameWithType: IEnumerable<IConfigurationSource>
  fullName: IEnumerable<IConfigurationSource>
  nameWithType.vb: IEnumerable(Of IConfigurationSource)
  fullName.vb: IEnumerable(Of IConfigurationSource)
  name.vb: IEnumerable(Of IConfigurationSource)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IConfigurationSource
    name: IConfigurationSource
    nameWithType: IConfigurationSource
    fullName: IConfigurationSource
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IConfigurationSource
    name: IConfigurationSource
    nameWithType: IConfigurationSource
    fullName: IConfigurationSource
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Configuration.ConfigurationBuilder.Properties*
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationBuilder.Properties
  isExternal: false
  name: Properties
  nameWithType: ConfigurationBuilder.Properties
  fullName: Microsoft.Extensions.Configuration.ConfigurationBuilder.Properties
- uid: Dictionary{System.String,System.Object}
  commentId: '!:Dictionary{System.String,System.Object}'
  definition: Dictionary`2
  name: Dictionary<String, Object>
  nameWithType: Dictionary<String, Object>
  fullName: Dictionary<System.String, System.Object>
  nameWithType.vb: Dictionary(Of String, Object)
  fullName.vb: Dictionary(Of System.String, System.Object)
  name.vb: Dictionary(Of String, Object)
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dictionary`2
  isExternal: true
  name: Dictionary<, >
  nameWithType: Dictionary<, >
  fullName: Dictionary<, >
  nameWithType.vb: Dictionary(Of , )
  fullName.vb: Dictionary(Of , )
  name.vb: Dictionary(Of , )
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Configuration.ConfigurationBuilder.Add*
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationBuilder.Add
  isExternal: false
  name: Add
  nameWithType: ConfigurationBuilder.Add
  fullName: Microsoft.Extensions.Configuration.ConfigurationBuilder.Add
- uid: IConfigurationSource
  commentId: '!:IConfigurationSource'
  isExternal: true
  name: IConfigurationSource
  nameWithType: IConfigurationSource
  fullName: IConfigurationSource
- uid: IConfigurationBuilder
  isExternal: true
  name: IConfigurationBuilder
  nameWithType: IConfigurationBuilder
  fullName: IConfigurationBuilder
- uid: Microsoft.Extensions.Configuration.ConfigurationBuilder.Sources
  commentId: P:Microsoft.Extensions.Configuration.ConfigurationBuilder.Sources
- uid: Microsoft.Extensions.Configuration.ConfigurationBuilder.Build*
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationBuilder.Build
  isExternal: false
  name: Build
  nameWithType: ConfigurationBuilder.Build
  fullName: Microsoft.Extensions.Configuration.ConfigurationBuilder.Build
- uid: IConfigurationRoot
  commentId: '!:IConfigurationRoot'
  isExternal: true
  name: IConfigurationRoot
  nameWithType: IConfigurationRoot
  fullName: IConfigurationRoot
shouldSkipMarkup: true
