### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.FileProviders.PhysicalFileProvider
  commentId: T:Microsoft.Extensions.FileProviders.PhysicalFileProvider
  id: PhysicalFileProvider
  parent: Microsoft.Extensions.FileProviders
  children:
  - Microsoft.Extensions.FileProviders.PhysicalFileProvider.#ctor(System.String)
  - Microsoft.Extensions.FileProviders.PhysicalFileProvider.Dispose
  - Microsoft.Extensions.FileProviders.PhysicalFileProvider.GetDirectoryContents(System.String)
  - Microsoft.Extensions.FileProviders.PhysicalFileProvider.GetFileInfo(System.String)
  - Microsoft.Extensions.FileProviders.PhysicalFileProvider.Root
  - Microsoft.Extensions.FileProviders.PhysicalFileProvider.Watch(System.String)
  langs:
  - csharp
  - vb
  name: PhysicalFileProvider
  nameWithType: PhysicalFileProvider
  fullName: Microsoft.Extensions.FileProviders.PhysicalFileProvider
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Physical/PhysicalFileProvider.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: PhysicalFileProvider
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Physical/PhysicalFileProvider.cs
    startLine: 15
  assemblies:
  - Microsoft.Extensions.FileProviders.Physical
  namespace: Microsoft.Extensions.FileProviders
  summary: "\nLooks up files using the on-disk file system\n"
  example: []
  syntax:
    content: 'public class PhysicalFileProvider : IFileProvider, IDisposable'
    content.vb: >-
      Public Class PhysicalFileProvider
          Inherits IFileProvider
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.FileProviders.PhysicalFileProvider.#ctor(System.String)
  commentId: M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.Extensions.FileProviders.PhysicalFileProvider
  langs:
  - csharp
  - vb
  name: PhysicalFileProvider(String)
  nameWithType: PhysicalFileProvider.PhysicalFileProvider(String)
  fullName: Microsoft.Extensions.FileProviders.PhysicalFileProvider.PhysicalFileProvider(System.String)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Physical/PhysicalFileProvider.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: .ctor
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Physical/PhysicalFileProvider.cs
    startLine: 27
  assemblies:
  - Microsoft.Extensions.FileProviders.Physical
  namespace: Microsoft.Extensions.FileProviders
  summary: "\nCreates a new instance of a PhysicalFileProvider at the given root directory.\n"
  example: []
  syntax:
    content: public PhysicalFileProvider(string root)
    parameters:
    - id: root
      type: System.String
      description: The root directory. This should be an absolute path.
    content.vb: Public Sub New(root As String)
  overload: Microsoft.Extensions.FileProviders.PhysicalFileProvider.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.FileProviders.PhysicalFileProvider.Dispose
  commentId: M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.Dispose
  id: Dispose
  parent: Microsoft.Extensions.FileProviders.PhysicalFileProvider
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: PhysicalFileProvider.Dispose()
  fullName: Microsoft.Extensions.FileProviders.PhysicalFileProvider.Dispose()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Physical/PhysicalFileProvider.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: Dispose
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Physical/PhysicalFileProvider.cs
    startLine: 59
  assemblies:
  - Microsoft.Extensions.FileProviders.Physical
  namespace: Microsoft.Extensions.FileProviders
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Microsoft.Extensions.FileProviders.PhysicalFileProvider.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.FileProviders.PhysicalFileProvider.Root
  commentId: P:Microsoft.Extensions.FileProviders.PhysicalFileProvider.Root
  id: Root
  parent: Microsoft.Extensions.FileProviders.PhysicalFileProvider
  langs:
  - csharp
  - vb
  name: Root
  nameWithType: PhysicalFileProvider.Root
  fullName: Microsoft.Extensions.FileProviders.PhysicalFileProvider.Root
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Physical/PhysicalFileProvider.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: Root
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Physical/PhysicalFileProvider.cs
    startLine: 67
  assemblies:
  - Microsoft.Extensions.FileProviders.Physical
  namespace: Microsoft.Extensions.FileProviders
  summary: "\nThe root directory for this instance.\n"
  example: []
  syntax:
    content: public string Root { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Root As String
  overload: Microsoft.Extensions.FileProviders.PhysicalFileProvider.Root*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.FileProviders.PhysicalFileProvider.GetFileInfo(System.String)
  commentId: M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.GetFileInfo(System.String)
  id: GetFileInfo(System.String)
  parent: Microsoft.Extensions.FileProviders.PhysicalFileProvider
  langs:
  - csharp
  - vb
  name: GetFileInfo(String)
  nameWithType: PhysicalFileProvider.GetFileInfo(String)
  fullName: Microsoft.Extensions.FileProviders.PhysicalFileProvider.GetFileInfo(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Physical/PhysicalFileProvider.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: GetFileInfo
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Physical/PhysicalFileProvider.cs
    startLine: 140
  assemblies:
  - Microsoft.Extensions.FileProviders.Physical
  namespace: Microsoft.Extensions.FileProviders
  summary: "\nLocate a file at the given path by directly mapping path segments to physical directories.\n"
  example: []
  syntax:
    content: public IFileInfo GetFileInfo(string subpath)
    parameters:
    - id: subpath
      type: System.String
      description: A path under the root directory
    return:
      type: IFileInfo
      description: 'The file information. Caller must check Exists property. '
    content.vb: Public Function GetFileInfo(subpath As String) As IFileInfo
  overload: Microsoft.Extensions.FileProviders.PhysicalFileProvider.GetFileInfo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.FileProviders.PhysicalFileProvider.GetDirectoryContents(System.String)
  commentId: M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.GetDirectoryContents(System.String)
  id: GetDirectoryContents(System.String)
  parent: Microsoft.Extensions.FileProviders.PhysicalFileProvider
  langs:
  - csharp
  - vb
  name: GetDirectoryContents(String)
  nameWithType: PhysicalFileProvider.GetDirectoryContents(String)
  fullName: Microsoft.Extensions.FileProviders.PhysicalFileProvider.GetDirectoryContents(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Physical/PhysicalFileProvider.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: GetDirectoryContents
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Physical/PhysicalFileProvider.cs
    startLine: 179
  assemblies:
  - Microsoft.Extensions.FileProviders.Physical
  namespace: Microsoft.Extensions.FileProviders
  summary: "\nEnumerate a directory at the given path, if any.\n"
  example: []
  syntax:
    content: public IDirectoryContents GetDirectoryContents(string subpath)
    parameters:
    - id: subpath
      type: System.String
      description: A path under the root directory
    return:
      type: IDirectoryContents
      description: Contents of the directory. Caller must check Exists property.
    content.vb: Public Function GetDirectoryContents(subpath As String) As IDirectoryContents
  overload: Microsoft.Extensions.FileProviders.PhysicalFileProvider.GetDirectoryContents*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.FileProviders.PhysicalFileProvider.Watch(System.String)
  commentId: M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.Watch(System.String)
  id: Watch(System.String)
  parent: Microsoft.Extensions.FileProviders.PhysicalFileProvider
  langs:
  - csharp
  - vb
  name: Watch(String)
  nameWithType: PhysicalFileProvider.Watch(String)
  fullName: Microsoft.Extensions.FileProviders.PhysicalFileProvider.Watch(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Physical/PhysicalFileProvider.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: Watch
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Physical/PhysicalFileProvider.cs
    startLine: 238
  assemblies:
  - Microsoft.Extensions.FileProviders.Physical
  namespace: Microsoft.Extensions.FileProviders
  syntax:
    content: public IChangeToken Watch(string filter)
    parameters:
    - id: filter
      type: System.String
    return:
      type: IChangeToken
    content.vb: Public Function Watch(filter As String) As IChangeToken
  overload: Microsoft.Extensions.FileProviders.PhysicalFileProvider.Watch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Extensions.FileProviders
  commentId: N:Microsoft.Extensions.FileProviders
  isExternal: false
  name: Microsoft.Extensions.FileProviders
  nameWithType: Microsoft.Extensions.FileProviders
  fullName: Microsoft.Extensions.FileProviders
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.FileProviders.PhysicalFileProvider.#ctor*
  commentId: Overload:Microsoft.Extensions.FileProviders.PhysicalFileProvider.#ctor
  isExternal: false
  name: PhysicalFileProvider
  nameWithType: PhysicalFileProvider.PhysicalFileProvider
  fullName: Microsoft.Extensions.FileProviders.PhysicalFileProvider.PhysicalFileProvider
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Extensions.FileProviders.PhysicalFileProvider.Dispose*
  commentId: Overload:Microsoft.Extensions.FileProviders.PhysicalFileProvider.Dispose
  isExternal: false
  name: Dispose
  nameWithType: PhysicalFileProvider.Dispose
  fullName: Microsoft.Extensions.FileProviders.PhysicalFileProvider.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.FileProviders.PhysicalFileProvider.Root*
  commentId: Overload:Microsoft.Extensions.FileProviders.PhysicalFileProvider.Root
  isExternal: false
  name: Root
  nameWithType: PhysicalFileProvider.Root
  fullName: Microsoft.Extensions.FileProviders.PhysicalFileProvider.Root
- uid: Microsoft.Extensions.FileProviders.PhysicalFileProvider.GetFileInfo*
  commentId: Overload:Microsoft.Extensions.FileProviders.PhysicalFileProvider.GetFileInfo
  isExternal: false
  name: GetFileInfo
  nameWithType: PhysicalFileProvider.GetFileInfo
  fullName: Microsoft.Extensions.FileProviders.PhysicalFileProvider.GetFileInfo
- uid: IFileInfo
  isExternal: true
  name: IFileInfo
  nameWithType: IFileInfo
  fullName: IFileInfo
- uid: Microsoft.Extensions.FileProviders.PhysicalFileProvider.GetDirectoryContents*
  commentId: Overload:Microsoft.Extensions.FileProviders.PhysicalFileProvider.GetDirectoryContents
  isExternal: false
  name: GetDirectoryContents
  nameWithType: PhysicalFileProvider.GetDirectoryContents
  fullName: Microsoft.Extensions.FileProviders.PhysicalFileProvider.GetDirectoryContents
- uid: IDirectoryContents
  isExternal: true
  name: IDirectoryContents
  nameWithType: IDirectoryContents
  fullName: IDirectoryContents
- uid: Microsoft.Extensions.FileProviders.PhysicalFileProvider.Watch*
  commentId: Overload:Microsoft.Extensions.FileProviders.PhysicalFileProvider.Watch
  isExternal: false
  name: Watch
  nameWithType: PhysicalFileProvider.Watch
  fullName: Microsoft.Extensions.FileProviders.PhysicalFileProvider.Watch
- uid: IChangeToken
  isExternal: true
  name: IChangeToken
  nameWithType: IChangeToken
  fullName: IChangeToken
shouldSkipMarkup: true
