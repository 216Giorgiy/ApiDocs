### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Configuration.ConfigurationBinder
  commentId: T:Microsoft.Extensions.Configuration.ConfigurationBinder
  id: ConfigurationBinder
  parent: Microsoft.Extensions.Configuration
  children:
  - Microsoft.Extensions.Configuration.ConfigurationBinder.Bind(IConfiguration,System.Object)
  - Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue(IConfiguration,Type,System.String)
  - Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue(IConfiguration,Type,System.String,System.Object)
  - Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue``1(IConfiguration,System.String)
  - Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue``1(IConfiguration,System.String,``0)
  langs:
  - csharp
  - vb
  name: ConfigurationBinder
  nameWithType: ConfigurationBinder
  fullName: Microsoft.Extensions.Configuration.ConfigurationBinder
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration.Binder/ConfigurationBinder.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: ConfigurationBinder
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration.Binder/ConfigurationBinder.cs
    startLine: 15
  assemblies:
  - Microsoft.Extensions.Configuration.Binder
  namespace: Microsoft.Extensions.Configuration
  summary: "\nStatic helper class that allows binding strongly typed objects to configuration values.\n"
  example: []
  syntax:
    content: 'public static class ConfigurationBinder : object'
    content.vb: >-
      Public Module ConfigurationBinder
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Extensions.Configuration.ConfigurationBinder.Bind(IConfiguration,System.Object)
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationBinder.Bind(IConfiguration,System.Object)
  id: Bind(IConfiguration,System.Object)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Configuration.ConfigurationBinder
  langs:
  - csharp
  - vb
  name: Bind(IConfiguration, Object)
  nameWithType: ConfigurationBinder.Bind(IConfiguration, Object)
  fullName: Microsoft.Extensions.Configuration.ConfigurationBinder.Bind(IConfiguration, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration.Binder/ConfigurationBinder.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: Bind
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration.Binder/ConfigurationBinder.cs
    startLine: 22
  assemblies:
  - Microsoft.Extensions.Configuration.Binder
  namespace: Microsoft.Extensions.Configuration
  summary: "\nAttempts to bind the given object instance to configuration values by matching property names against configuration keys recursively.\n"
  example: []
  syntax:
    content: public static void Bind(this IConfiguration configuration, object instance)
    parameters:
    - id: configuration
      type: IConfiguration
      description: The configuration instance to bind.
    - id: instance
      type: System.Object
      description: The object to bind.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Bind(configuration As IConfiguration, instance As Object)
  overload: Microsoft.Extensions.Configuration.ConfigurationBinder.Bind*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue``1(IConfiguration,System.String)
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue``1(IConfiguration,System.String)
  id: GetValue``1(IConfiguration,System.String)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Configuration.ConfigurationBinder
  langs:
  - csharp
  - vb
  name: GetValue<T>(IConfiguration, String)
  nameWithType: ConfigurationBinder.GetValue<T>(IConfiguration, String)
  fullName: Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue<T>(IConfiguration, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration.Binder/ConfigurationBinder.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: GetValue
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration.Binder/ConfigurationBinder.cs
    startLine: 42
  assemblies:
  - Microsoft.Extensions.Configuration.Binder
  namespace: Microsoft.Extensions.Configuration
  summary: "\nExtracts the value with the specified key and converts it to type T.\n"
  example: []
  syntax:
    content: public static T GetValue<T>(this IConfiguration configuration, string key)
    parameters:
    - id: configuration
      type: IConfiguration
      description: The configuration.
    - id: key
      type: System.String
      description: The configuration key for the value to convert.
    typeParameters:
    - id: T
      description: The type to convert the value to.
    return:
      type: '{T}'
      description: The converted value.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetValue(Of T)(configuration As IConfiguration, key As String) As T
  overload: Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue*
  nameWithType.vb: ConfigurationBinder.GetValue(Of T)(IConfiguration, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue(Of T)(IConfiguration, System.String)
  name.vb: GetValue(Of T)(IConfiguration, String)
- uid: Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue``1(IConfiguration,System.String,``0)
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue``1(IConfiguration,System.String,``0)
  id: GetValue``1(IConfiguration,System.String,``0)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Configuration.ConfigurationBinder
  langs:
  - csharp
  - vb
  name: GetValue<T>(IConfiguration, String, T)
  nameWithType: ConfigurationBinder.GetValue<T>(IConfiguration, String, T)
  fullName: Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue<T>(IConfiguration, System.String, T)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration.Binder/ConfigurationBinder.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: GetValue
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration.Binder/ConfigurationBinder.cs
    startLine: 55
  assemblies:
  - Microsoft.Extensions.Configuration.Binder
  namespace: Microsoft.Extensions.Configuration
  summary: "\nExtracts the value with the specified key and converts it to type T.\n"
  example: []
  syntax:
    content: public static T GetValue<T>(this IConfiguration configuration, string key, T defaultValue)
    parameters:
    - id: configuration
      type: IConfiguration
      description: The configuration.
    - id: key
      type: System.String
      description: The configuration key for the value to convert.
    - id: defaultValue
      type: '{T}'
      description: The default value to use if no value is found.
    typeParameters:
    - id: T
      description: The type to convert the value to.
    return:
      type: '{T}'
      description: The converted value.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetValue(Of T)(configuration As IConfiguration, key As String, defaultValue As T) As T
  overload: Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue*
  nameWithType.vb: ConfigurationBinder.GetValue(Of T)(IConfiguration, String, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue(Of T)(IConfiguration, System.String, T)
  name.vb: GetValue(Of T)(IConfiguration, String, T)
- uid: Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue(IConfiguration,Type,System.String)
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue(IConfiguration,Type,System.String)
  id: GetValue(IConfiguration,Type,System.String)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Configuration.ConfigurationBinder
  langs:
  - csharp
  - vb
  name: GetValue(IConfiguration, Type, String)
  nameWithType: ConfigurationBinder.GetValue(IConfiguration, Type, String)
  fullName: Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue(IConfiguration, Type, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration.Binder/ConfigurationBinder.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: GetValue
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration.Binder/ConfigurationBinder.cs
    startLine: 67
  assemblies:
  - Microsoft.Extensions.Configuration.Binder
  namespace: Microsoft.Extensions.Configuration
  summary: "\nExtracts the value with the specified key and converts it to the specified type.\n"
  example: []
  syntax:
    content: public static object GetValue(this IConfiguration configuration, Type type, string key)
    parameters:
    - id: configuration
      type: IConfiguration
      description: The configuration.
    - id: type
      type: Type
      description: The type to convert the value to.
    - id: key
      type: System.String
      description: The configuration key for the value to convert.
    return:
      type: System.Object
      description: The converted value.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetValue(configuration As IConfiguration, type As Type, key As String) As Object
  overload: Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue(IConfiguration,Type,System.String,System.Object)
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue(IConfiguration,Type,System.String,System.Object)
  id: GetValue(IConfiguration,Type,System.String,System.Object)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Configuration.ConfigurationBinder
  langs:
  - csharp
  - vb
  name: GetValue(IConfiguration, Type, String, Object)
  nameWithType: ConfigurationBinder.GetValue(IConfiguration, Type, String, Object)
  fullName: Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue(IConfiguration, Type, System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration.Binder/ConfigurationBinder.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: GetValue
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration.Binder/ConfigurationBinder.cs
    startLine: 80
  assemblies:
  - Microsoft.Extensions.Configuration.Binder
  namespace: Microsoft.Extensions.Configuration
  summary: "\nExtracts the value with the specified key and converts it to the specified type.\n"
  example: []
  syntax:
    content: public static object GetValue(this IConfiguration configuration, Type type, string key, object defaultValue)
    parameters:
    - id: configuration
      type: IConfiguration
      description: The configuration.
    - id: type
      type: Type
      description: The type to convert the value to.
    - id: key
      type: System.String
      description: The configuration key for the value to convert.
    - id: defaultValue
      type: System.Object
      description: The default value to use if no value is found.
    return:
      type: System.Object
      description: The converted value.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetValue(configuration As IConfiguration, type As Type, key As String, defaultValue As Object) As Object
  overload: Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Extensions.Configuration
  commentId: N:Microsoft.Extensions.Configuration
  isExternal: false
  name: Microsoft.Extensions.Configuration
  nameWithType: Microsoft.Extensions.Configuration
  fullName: Microsoft.Extensions.Configuration
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Configuration.ConfigurationBinder.Bind*
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationBinder.Bind
  isExternal: false
  name: Bind
  nameWithType: ConfigurationBinder.Bind
  fullName: Microsoft.Extensions.Configuration.ConfigurationBinder.Bind
- uid: IConfiguration
  isExternal: true
  name: IConfiguration
  nameWithType: IConfiguration
  fullName: IConfiguration
- uid: Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue*
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue
  isExternal: false
  name: GetValue
  nameWithType: ConfigurationBinder.GetValue
  fullName: Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: Type
shouldSkipMarkup: true
