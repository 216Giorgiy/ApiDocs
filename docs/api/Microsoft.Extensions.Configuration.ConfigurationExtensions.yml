### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Configuration.ConfigurationExtensions
  commentId: T:Microsoft.Extensions.Configuration.ConfigurationExtensions
  id: ConfigurationExtensions
  parent: Microsoft.Extensions.Configuration
  children:
  - Microsoft.Extensions.Configuration.ConfigurationExtensions.AsEnumerable(Microsoft.Extensions.Configuration.IConfiguration)
  - Microsoft.Extensions.Configuration.ConfigurationExtensions.GetConnectionString(Microsoft.Extensions.Configuration.IConfiguration,System.String)
  langs:
  - csharp
  - vb
  name: ConfigurationExtensions
  nameWithType: ConfigurationExtensions
  fullName: Microsoft.Extensions.Configuration.ConfigurationExtensions
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration.Abstractions/ConfigurationExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: ConfigurationExtensions
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration.Abstractions/ConfigurationExtensions.cs
    startLine: 10
  assemblies:
  - Microsoft.Extensions.Configuration.Abstractions
  namespace: Microsoft.Extensions.Configuration
  summary: "\nExtension methods for <xref href=\"Microsoft.Extensions.Configuration.IConfiguration\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public static class ConfigurationExtensions : object'
    content.vb: >-
      Public Module ConfigurationExtensions
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Extensions.Configuration.ConfigurationExtensions.GetConnectionString(Microsoft.Extensions.Configuration.IConfiguration,System.String)
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationExtensions.GetConnectionString(Microsoft.Extensions.Configuration.IConfiguration,System.String)
  id: GetConnectionString(Microsoft.Extensions.Configuration.IConfiguration,System.String)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Configuration.ConfigurationExtensions
  langs:
  - csharp
  - vb
  name: GetConnectionString(IConfiguration, String)
  nameWithType: ConfigurationExtensions.GetConnectionString(IConfiguration, String)
  fullName: Microsoft.Extensions.Configuration.ConfigurationExtensions.GetConnectionString(Microsoft.Extensions.Configuration.IConfiguration, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration.Abstractions/ConfigurationExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: GetConnectionString
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration.Abstractions/ConfigurationExtensions.cs
    startLine: 18
  assemblies:
  - Microsoft.Extensions.Configuration.Abstractions
  namespace: Microsoft.Extensions.Configuration
  summary: "\nShorthand for GetSection(&quot;ConnectionStrings&quot;)[name].\n"
  example: []
  syntax:
    content: public static string GetConnectionString(this IConfiguration configuration, string name)
    parameters:
    - id: configuration
      type: Microsoft.Extensions.Configuration.IConfiguration
      description: The configuration.
    - id: name
      type: System.String
      description: The connection string key.
    return:
      type: System.String
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetConnectionString(configuration As IConfiguration, name As String) As String
  overload: Microsoft.Extensions.Configuration.ConfigurationExtensions.GetConnectionString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Configuration.ConfigurationExtensions.AsEnumerable(Microsoft.Extensions.Configuration.IConfiguration)
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationExtensions.AsEnumerable(Microsoft.Extensions.Configuration.IConfiguration)
  id: AsEnumerable(Microsoft.Extensions.Configuration.IConfiguration)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Configuration.ConfigurationExtensions
  langs:
  - csharp
  - vb
  name: AsEnumerable(IConfiguration)
  nameWithType: ConfigurationExtensions.AsEnumerable(IConfiguration)
  fullName: Microsoft.Extensions.Configuration.ConfigurationExtensions.AsEnumerable(Microsoft.Extensions.Configuration.IConfiguration)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration.Abstractions/ConfigurationExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: AsEnumerable
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration.Abstractions/ConfigurationExtensions.cs
    startLine: 28
  assemblies:
  - Microsoft.Extensions.Configuration.Abstractions
  namespace: Microsoft.Extensions.Configuration
  summary: "\nGet the enumeration of key value pairs within the <xref href=\"Microsoft.Extensions.Configuration.IConfiguration\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static IEnumerable<KeyValuePair<string, string>> AsEnumerable(this IConfiguration configuration)
    parameters:
    - id: configuration
      type: Microsoft.Extensions.Configuration.IConfiguration
      description: The <xref href="Microsoft.Extensions.Configuration.IConfiguration" data-throw-if-not-resolved="false"></xref> to enumerate.
    return:
      type: IEnumerable{KeyValuePair{System.String,System.String}}
      description: An enumeration of key value pairs.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AsEnumerable(configuration As IConfiguration) As IEnumerable(Of KeyValuePair(Of String, String))
  overload: Microsoft.Extensions.Configuration.ConfigurationExtensions.AsEnumerable*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Extensions.Configuration.IConfiguration
  commentId: T:Microsoft.Extensions.Configuration.IConfiguration
  parent: Microsoft.Extensions.Configuration
  isExternal: false
  name: IConfiguration
  nameWithType: IConfiguration
  fullName: Microsoft.Extensions.Configuration.IConfiguration
- uid: Microsoft.Extensions.Configuration
  commentId: N:Microsoft.Extensions.Configuration
  isExternal: false
  name: Microsoft.Extensions.Configuration
  nameWithType: Microsoft.Extensions.Configuration
  fullName: Microsoft.Extensions.Configuration
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Configuration.ConfigurationExtensions.GetConnectionString*
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationExtensions.GetConnectionString
  isExternal: false
  name: GetConnectionString
  nameWithType: ConfigurationExtensions.GetConnectionString
  fullName: Microsoft.Extensions.Configuration.ConfigurationExtensions.GetConnectionString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Extensions.Configuration.ConfigurationExtensions.AsEnumerable*
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationExtensions.AsEnumerable
  isExternal: false
  name: AsEnumerable
  nameWithType: ConfigurationExtensions.AsEnumerable
  fullName: Microsoft.Extensions.Configuration.ConfigurationExtensions.AsEnumerable
- uid: IEnumerable{KeyValuePair{System.String,System.String}}
  commentId: '!:IEnumerable{KeyValuePair{System.String,System.String}}'
  definition: IEnumerable`1
  name: IEnumerable<KeyValuePair<String, String>>
  nameWithType: IEnumerable<KeyValuePair<String, String>>
  fullName: IEnumerable<KeyValuePair<System.String, System.String>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of String, String))
  fullName.vb: IEnumerable(Of KeyValuePair(Of System.String, System.String))
  name.vb: IEnumerable(Of KeyValuePair(Of String, String))
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
