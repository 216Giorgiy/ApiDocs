### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.FileProviders.NullFileProvider
  commentId: T:Microsoft.Extensions.FileProviders.NullFileProvider
  id: NullFileProvider
  parent: Microsoft.Extensions.FileProviders
  children:
  - Microsoft.Extensions.FileProviders.NullFileProvider.GetDirectoryContents(System.String)
  - Microsoft.Extensions.FileProviders.NullFileProvider.GetFileInfo(System.String)
  - Microsoft.Extensions.FileProviders.NullFileProvider.Watch(System.String)
  langs:
  - csharp
  - vb
  name: NullFileProvider
  nameWithType: NullFileProvider
  fullName: Microsoft.Extensions.FileProviders.NullFileProvider
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Abstractions/NullFileProvider.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: NullFileProvider
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Abstractions/NullFileProvider.cs
    startLine: 10
  assemblies:
  - Microsoft.Extensions.FileProviders.Abstractions
  namespace: Microsoft.Extensions.FileProviders
  summary: "\nAn empty file provider with no contents.\n"
  example: []
  syntax:
    content: 'public class NullFileProvider : object, IFileProvider'
    content.vb: >-
      Public Class NullFileProvider
          Inherits Object
          Implements IFileProvider
  inheritance:
  - System.Object
  implements:
  - Microsoft.Extensions.FileProviders.IFileProvider
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.FileProviders.NullFileProvider.GetDirectoryContents(System.String)
  commentId: M:Microsoft.Extensions.FileProviders.NullFileProvider.GetDirectoryContents(System.String)
  id: GetDirectoryContents(System.String)
  parent: Microsoft.Extensions.FileProviders.NullFileProvider
  langs:
  - csharp
  - vb
  name: GetDirectoryContents(String)
  nameWithType: NullFileProvider.GetDirectoryContents(String)
  fullName: Microsoft.Extensions.FileProviders.NullFileProvider.GetDirectoryContents(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Abstractions/NullFileProvider.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: GetDirectoryContents
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Abstractions/NullFileProvider.cs
    startLine: 17
  assemblies:
  - Microsoft.Extensions.FileProviders.Abstractions
  namespace: Microsoft.Extensions.FileProviders
  summary: "\nEnumerate a non-existent directory.\n"
  example: []
  syntax:
    content: public IDirectoryContents GetDirectoryContents(string subpath)
    parameters:
    - id: subpath
      type: System.String
      description: A path under the root directory. This parameter is ignored.
    return:
      type: Microsoft.Extensions.FileProviders.IDirectoryContents
      description: A <xref href="Microsoft.Extensions.FileProviders.IDirectoryContents" data-throw-if-not-resolved="false"></xref> that does not exist and does not contain any contents.
    content.vb: Public Function GetDirectoryContents(subpath As String) As IDirectoryContents
  overload: Microsoft.Extensions.FileProviders.NullFileProvider.GetDirectoryContents*
  implements:
  - Microsoft.Extensions.FileProviders.IFileProvider.GetDirectoryContents(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.FileProviders.NullFileProvider.GetFileInfo(System.String)
  commentId: M:Microsoft.Extensions.FileProviders.NullFileProvider.GetFileInfo(System.String)
  id: GetFileInfo(System.String)
  parent: Microsoft.Extensions.FileProviders.NullFileProvider
  langs:
  - csharp
  - vb
  name: GetFileInfo(String)
  nameWithType: NullFileProvider.GetFileInfo(String)
  fullName: Microsoft.Extensions.FileProviders.NullFileProvider.GetFileInfo(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Abstractions/NullFileProvider.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: GetFileInfo
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Abstractions/NullFileProvider.cs
    startLine: 24
  assemblies:
  - Microsoft.Extensions.FileProviders.Abstractions
  namespace: Microsoft.Extensions.FileProviders
  summary: "\nLocate a non-existent file.\n"
  example: []
  syntax:
    content: public IFileInfo GetFileInfo(string subpath)
    parameters:
    - id: subpath
      type: System.String
      description: A path under the root directory.
    return:
      type: Microsoft.Extensions.FileProviders.IFileInfo
      description: A <xref href="Microsoft.Extensions.FileProviders.IFileInfo" data-throw-if-not-resolved="false"></xref> representing a non-existent file at the given path.
    content.vb: Public Function GetFileInfo(subpath As String) As IFileInfo
  overload: Microsoft.Extensions.FileProviders.NullFileProvider.GetFileInfo*
  implements:
  - Microsoft.Extensions.FileProviders.IFileProvider.GetFileInfo(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.FileProviders.NullFileProvider.Watch(System.String)
  commentId: M:Microsoft.Extensions.FileProviders.NullFileProvider.Watch(System.String)
  id: Watch(System.String)
  parent: Microsoft.Extensions.FileProviders.NullFileProvider
  langs:
  - csharp
  - vb
  name: Watch(String)
  nameWithType: NullFileProvider.Watch(String)
  fullName: Microsoft.Extensions.FileProviders.NullFileProvider.Watch(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Abstractions/NullFileProvider.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: Watch
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Abstractions/NullFileProvider.cs
    startLine: 31
  assemblies:
  - Microsoft.Extensions.FileProviders.Abstractions
  namespace: Microsoft.Extensions.FileProviders
  summary: "\nReturns a <see cref=\"!:IChangeToken\"></see> that monitors nothing.\n"
  example: []
  syntax:
    content: public IChangeToken Watch(string filter)
    parameters:
    - id: filter
      type: System.String
      description: Filter string used to determine what files or folders to monitor. This parameter is ignored.
    return:
      type: IChangeToken
      description: A <see cref="!:IChangeToken"></see> that does not register callbacks.
    content.vb: Public Function Watch(filter As String) As IChangeToken
  overload: Microsoft.Extensions.FileProviders.NullFileProvider.Watch*
  implements:
  - Microsoft.Extensions.FileProviders.IFileProvider.Watch(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Extensions.FileProviders
  commentId: N:Microsoft.Extensions.FileProviders
  isExternal: false
  name: Microsoft.Extensions.FileProviders
  nameWithType: Microsoft.Extensions.FileProviders
  fullName: Microsoft.Extensions.FileProviders
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Extensions.FileProviders.IFileProvider
  commentId: T:Microsoft.Extensions.FileProviders.IFileProvider
  parent: Microsoft.Extensions.FileProviders
  isExternal: false
  name: IFileProvider
  nameWithType: IFileProvider
  fullName: Microsoft.Extensions.FileProviders.IFileProvider
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.FileProviders.IDirectoryContents
  commentId: T:Microsoft.Extensions.FileProviders.IDirectoryContents
  parent: Microsoft.Extensions.FileProviders
  isExternal: false
  name: IDirectoryContents
  nameWithType: IDirectoryContents
  fullName: Microsoft.Extensions.FileProviders.IDirectoryContents
- uid: Microsoft.Extensions.FileProviders.NullFileProvider.GetDirectoryContents*
  commentId: Overload:Microsoft.Extensions.FileProviders.NullFileProvider.GetDirectoryContents
  isExternal: false
  name: GetDirectoryContents
  nameWithType: NullFileProvider.GetDirectoryContents
  fullName: Microsoft.Extensions.FileProviders.NullFileProvider.GetDirectoryContents
- uid: Microsoft.Extensions.FileProviders.IFileProvider.GetDirectoryContents(System.String)
  commentId: M:Microsoft.Extensions.FileProviders.IFileProvider.GetDirectoryContents(System.String)
  parent: Microsoft.Extensions.FileProviders.IFileProvider
  isExternal: true
  name: GetDirectoryContents(String)
  nameWithType: IFileProvider.GetDirectoryContents(String)
  fullName: Microsoft.Extensions.FileProviders.IFileProvider.GetDirectoryContents(System.String)
  spec.csharp:
  - uid: Microsoft.Extensions.FileProviders.IFileProvider.GetDirectoryContents(System.String)
    name: GetDirectoryContents
    nameWithType: IFileProvider.GetDirectoryContents
    fullName: Microsoft.Extensions.FileProviders.IFileProvider.GetDirectoryContents
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.FileProviders.IFileProvider.GetDirectoryContents(System.String)
    name: GetDirectoryContents
    nameWithType: IFileProvider.GetDirectoryContents
    fullName: Microsoft.Extensions.FileProviders.IFileProvider.GetDirectoryContents
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Extensions.FileProviders.IFileInfo
  commentId: T:Microsoft.Extensions.FileProviders.IFileInfo
  parent: Microsoft.Extensions.FileProviders
  isExternal: false
  name: IFileInfo
  nameWithType: IFileInfo
  fullName: Microsoft.Extensions.FileProviders.IFileInfo
- uid: Microsoft.Extensions.FileProviders.NullFileProvider.GetFileInfo*
  commentId: Overload:Microsoft.Extensions.FileProviders.NullFileProvider.GetFileInfo
  isExternal: false
  name: GetFileInfo
  nameWithType: NullFileProvider.GetFileInfo
  fullName: Microsoft.Extensions.FileProviders.NullFileProvider.GetFileInfo
- uid: Microsoft.Extensions.FileProviders.IFileProvider.GetFileInfo(System.String)
  commentId: M:Microsoft.Extensions.FileProviders.IFileProvider.GetFileInfo(System.String)
  parent: Microsoft.Extensions.FileProviders.IFileProvider
  isExternal: true
  name: GetFileInfo(String)
  nameWithType: IFileProvider.GetFileInfo(String)
  fullName: Microsoft.Extensions.FileProviders.IFileProvider.GetFileInfo(System.String)
  spec.csharp:
  - uid: Microsoft.Extensions.FileProviders.IFileProvider.GetFileInfo(System.String)
    name: GetFileInfo
    nameWithType: IFileProvider.GetFileInfo
    fullName: Microsoft.Extensions.FileProviders.IFileProvider.GetFileInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.FileProviders.IFileProvider.GetFileInfo(System.String)
    name: GetFileInfo
    nameWithType: IFileProvider.GetFileInfo
    fullName: Microsoft.Extensions.FileProviders.IFileProvider.GetFileInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.FileProviders.NullFileProvider.Watch*
  commentId: Overload:Microsoft.Extensions.FileProviders.NullFileProvider.Watch
  isExternal: false
  name: Watch
  nameWithType: NullFileProvider.Watch
  fullName: Microsoft.Extensions.FileProviders.NullFileProvider.Watch
- uid: Microsoft.Extensions.FileProviders.IFileProvider.Watch(System.String)
  commentId: M:Microsoft.Extensions.FileProviders.IFileProvider.Watch(System.String)
  parent: Microsoft.Extensions.FileProviders.IFileProvider
  isExternal: true
  name: Watch(String)
  nameWithType: IFileProvider.Watch(String)
  fullName: Microsoft.Extensions.FileProviders.IFileProvider.Watch(System.String)
  spec.csharp:
  - uid: Microsoft.Extensions.FileProviders.IFileProvider.Watch(System.String)
    name: Watch
    nameWithType: IFileProvider.Watch
    fullName: Microsoft.Extensions.FileProviders.IFileProvider.Watch
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.FileProviders.IFileProvider.Watch(System.String)
    name: Watch
    nameWithType: IFileProvider.Watch
    fullName: Microsoft.Extensions.FileProviders.IFileProvider.Watch
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IChangeToken
  isExternal: true
  name: IChangeToken
  nameWithType: IChangeToken
  fullName: IChangeToken
shouldSkipMarkup: true
