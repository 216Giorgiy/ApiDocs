### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase
  commentId: T:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase
  id: ProxyBase
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal
  children:
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.#ctor(Type)
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.UnderlyingInstanceAsObject
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.Upwrap``1
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.WrappedType
  langs:
  - csharp
  - vb
  name: ProxyBase
  nameWithType: ProxyBase
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyBase.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: ProxyBase
    path: ../aspnet/EventNotification/src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyBase.cs
    startLine: 8
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: 'public abstract class ProxyBase : object, IProxy'
    content.vb: >-
      Public MustInherit Class ProxyBase
          Inherits Object
          Implements IProxy
  inheritance:
  - System.Object
  derivedClasses:
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase`1
  implements:
  - Microsoft.Extensions.DiagnosticAdapter.Infrastructure.IProxy
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.WrappedType
  commentId: F:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.WrappedType
  id: WrappedType
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase
  langs:
  - csharp
  - vb
  name: WrappedType
  nameWithType: ProxyBase.WrappedType
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.WrappedType
  type: Field
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyBase.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: WrappedType
    path: ../aspnet/EventNotification/src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyBase.cs
    startLine: 10
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: public readonly Type WrappedType
    return:
      type: Type
    content.vb: Public ReadOnly WrappedType As Type
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.#ctor(Type)
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.#ctor(Type)
  id: '#ctor(Type)'
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase
  langs:
  - csharp
  - vb
  name: ProxyBase(Type)
  nameWithType: ProxyBase.ProxyBase(Type)
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.ProxyBase(Type)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyBase.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: .ctor
    path: ../aspnet/EventNotification/src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyBase.cs
    startLine: 12
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: protected ProxyBase(Type wrappedType)
    parameters:
    - id: wrappedType
      type: Type
    content.vb: Protected Sub New(wrappedType As Type)
  overload: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.UnderlyingInstanceAsObject
  commentId: P:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.UnderlyingInstanceAsObject
  id: UnderlyingInstanceAsObject
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase
  langs:
  - csharp
  - vb
  name: UnderlyingInstanceAsObject
  nameWithType: ProxyBase.UnderlyingInstanceAsObject
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.UnderlyingInstanceAsObject
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyBase.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: UnderlyingInstanceAsObject
    path: ../aspnet/EventNotification/src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyBase.cs
    startLine: 18
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: public abstract object UnderlyingInstanceAsObject { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: Public MustOverride ReadOnly Property UnderlyingInstanceAsObject As Object
  overload: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.UnderlyingInstanceAsObject*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.Upwrap``1
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.Upwrap``1
  id: Upwrap``1
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase
  langs:
  - csharp
  - vb
  name: Upwrap<T>()
  nameWithType: ProxyBase.Upwrap<T>()
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.Upwrap<T>()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyBase.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: Upwrap
    path: ../aspnet/EventNotification/src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyBase.cs
    startLine: 23
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: public T Upwrap<T>()
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Function Upwrap(Of T) As T
  overload: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.Upwrap*
  implements:
  - Microsoft.Extensions.DiagnosticAdapter.Infrastructure.IProxy.Upwrap``1
  nameWithType.vb: ProxyBase.Upwrap(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.Upwrap(Of T)()
  name.vb: Upwrap(Of T)()
references:
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal
  commentId: N:Microsoft.Extensions.DiagnosticAdapter.Internal
  isExternal: false
  name: Microsoft.Extensions.DiagnosticAdapter.Internal
  nameWithType: Microsoft.Extensions.DiagnosticAdapter.Internal
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Extensions.DiagnosticAdapter.Infrastructure.IProxy
  commentId: T:Microsoft.Extensions.DiagnosticAdapter.Infrastructure.IProxy
  parent: Microsoft.Extensions.DiagnosticAdapter.Infrastructure
  isExternal: false
  name: IProxy
  nameWithType: IProxy
  fullName: Microsoft.Extensions.DiagnosticAdapter.Infrastructure.IProxy
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.DiagnosticAdapter.Infrastructure
  commentId: N:Microsoft.Extensions.DiagnosticAdapter.Infrastructure
  isExternal: false
  name: Microsoft.Extensions.DiagnosticAdapter.Infrastructure
  nameWithType: Microsoft.Extensions.DiagnosticAdapter.Infrastructure
  fullName: Microsoft.Extensions.DiagnosticAdapter.Infrastructure
- uid: Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: Type
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.#ctor*
  commentId: Overload:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.#ctor
  isExternal: false
  name: ProxyBase
  nameWithType: ProxyBase.ProxyBase
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.ProxyBase
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.UnderlyingInstanceAsObject*
  commentId: Overload:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.UnderlyingInstanceAsObject
  isExternal: false
  name: UnderlyingInstanceAsObject
  nameWithType: ProxyBase.UnderlyingInstanceAsObject
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.UnderlyingInstanceAsObject
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.Upwrap*
  commentId: Overload:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.Upwrap
  isExternal: false
  name: Upwrap
  nameWithType: ProxyBase.Upwrap
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.Upwrap
- uid: Microsoft.Extensions.DiagnosticAdapter.Infrastructure.IProxy.Upwrap``1
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Infrastructure.IProxy.Upwrap``1
  parent: Microsoft.Extensions.DiagnosticAdapter.Infrastructure.IProxy
  isExternal: false
  name: Upwrap<T>()
  nameWithType: IProxy.Upwrap<T>()
  fullName: Microsoft.Extensions.DiagnosticAdapter.Infrastructure.IProxy.Upwrap<T>()
  nameWithType.vb: IProxy.Upwrap(Of T)()
  fullName.vb: Microsoft.Extensions.DiagnosticAdapter.Infrastructure.IProxy.Upwrap(Of T)()
  name.vb: Upwrap(Of T)()
  spec.csharp:
  - uid: Microsoft.Extensions.DiagnosticAdapter.Infrastructure.IProxy.Upwrap``1
    name: Upwrap<T>
    nameWithType: IProxy.Upwrap<T>
    fullName: Microsoft.Extensions.DiagnosticAdapter.Infrastructure.IProxy.Upwrap<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.DiagnosticAdapter.Infrastructure.IProxy.Upwrap``1
    name: Upwrap(Of T)
    nameWithType: IProxy.Upwrap(Of T)
    fullName: Microsoft.Extensions.DiagnosticAdapter.Infrastructure.IProxy.Upwrap(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
shouldSkipMarkup: true
