### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob
  commentId: T:Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob
  id: ICloudAppendBlob
  parent: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  children:
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob.CreateAsync
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob.OpenWriteAsync
  langs:
  - csharp
  - vb
  name: ICloudAppendBlob
  nameWithType: ICloudAppendBlob
  fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob
  type: Interface
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/ICloudAppendBlob.cs
      branch: dev
      repo: https://github.com/aspnet/logging
    id: ICloudAppendBlob
    path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/ICloudAppendBlob.cs
    startLine: 11
  assemblies:
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics
  namespace: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  summary: "\nRepresents an append blob, a type of blob where blocks of data are always committed to the end of the blob.\n"
  example: []
  syntax:
    content: public interface ICloudAppendBlob
    content.vb: Public Interface ICloudAppendBlob
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob.OpenWriteAsync
  commentId: M:Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob.OpenWriteAsync
  id: OpenWriteAsync
  parent: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob
  langs:
  - csharp
  - vb
  name: OpenWriteAsync()
  nameWithType: ICloudAppendBlob.OpenWriteAsync()
  fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob.OpenWriteAsync()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/ICloudAppendBlob.cs
      branch: dev
      repo: https://github.com/aspnet/logging
    id: OpenWriteAsync
    path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/ICloudAppendBlob.cs
    startLine: 17
  assemblies:
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics
  namespace: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  summary: "\nInitiates an asynchronous operation to open a stream for writing to the blob.\n"
  example: []
  syntax:
    content: Task<Stream> OpenWriteAsync()
    content.vb: Function OpenWriteAsync As Task(Of Stream)
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: A <see cref="T:System.Threading.Tasks.Task`1"></see> object of type <see cref="T:System.IO.Stream"></see> that represents the asynchronous operation.
- uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob.CreateAsync
  commentId: M:Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob.CreateAsync
  id: CreateAsync
  parent: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob
  langs:
  - csharp
  - vb
  name: CreateAsync()
  nameWithType: ICloudAppendBlob.CreateAsync()
  fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob.CreateAsync()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/ICloudAppendBlob.cs
      branch: dev
      repo: https://github.com/aspnet/logging
    id: CreateAsync
    path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/ICloudAppendBlob.cs
    startLine: 23
  assemblies:
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics
  namespace: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  summary: "\nInitiates an asynchronous operation to create an empty append blob.\n"
  example: []
  syntax:
    content: Task CreateAsync()
    content.vb: Function CreateAsync As Task
    return:
      type: System.Threading.Tasks.Task
      description: A <see cref="T:System.Threading.Tasks.Task"></see> object that represents the asynchronous operation.
references:
- uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  commentId: N:Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  isExternal: false
  name: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  nameWithType: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
- uid: System.Threading.Tasks.Task{System.IO.Stream}
  commentId: T:System.Threading.Tasks.Task{System.IO.Stream}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Stream>
  nameWithType: Task<Stream>
  fullName: System.Threading.Tasks.Task<System.IO.Stream>
  nameWithType.vb: Task(Of Stream)
  fullname.vb: System.Threading.Tasks.Task(Of System.IO.Stream)
  name.vb: Task(Of Stream)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
