### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BackgroundSink
  commentId: T:Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BackgroundSink
  id: BackgroundSink
  parent: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  children:
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BackgroundSink.#ctor(Serilog.Core.ILogEventSink,System.Nullable{System.Int32})
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BackgroundSink.DefaultLogMessagesQueueSize
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BackgroundSink.Dispose
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BackgroundSink.Emit(Serilog.Events.LogEvent)
  langs:
  - csharp
  - vb
  name: BackgroundSink
  nameWithType: BackgroundSink
  fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BackgroundSink
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/BackgroundSink.cs
      branch: dev
      repo: https://github.com/aspnet/logging
    id: BackgroundSink
    path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/BackgroundSink.cs
    startLine: 16
  assemblies:
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics
  namespace: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  summary: "\nA background sink for Serilog.\n"
  example: []
  syntax:
    content: 'public class BackgroundSink : ILogEventSink, IDisposable'
    content.vb: >-
      Public Class BackgroundSink
          Implements ILogEventSink, IDisposable
  inheritance:
  - System.Object
  implements:
  - Serilog.Core.ILogEventSink
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BackgroundSink.DefaultLogMessagesQueueSize
  commentId: F:Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BackgroundSink.DefaultLogMessagesQueueSize
  id: DefaultLogMessagesQueueSize
  parent: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BackgroundSink
  langs:
  - csharp
  - vb
  name: DefaultLogMessagesQueueSize
  nameWithType: BackgroundSink.DefaultLogMessagesQueueSize
  fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BackgroundSink.DefaultLogMessagesQueueSize
  type: Field
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/BackgroundSink.cs
      branch: dev
      repo: https://github.com/aspnet/logging
    id: DefaultLogMessagesQueueSize
    path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/BackgroundSink.cs
    startLine: 21
  assemblies:
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics
  namespace: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  summary: "\nThe default queue size.\n"
  example: []
  syntax:
    content: public const int DefaultLogMessagesQueueSize = 1024
    content.vb: Public Const DefaultLogMessagesQueueSize As Integer = 1024
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BackgroundSink.#ctor(Serilog.Core.ILogEventSink,System.Nullable{System.Int32})
  commentId: M:Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BackgroundSink.#ctor(Serilog.Core.ILogEventSink,System.Nullable{System.Int32})
  id: '#ctor(Serilog.Core.ILogEventSink,System.Nullable{System.Int32})'
  parent: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BackgroundSink
  langs:
  - csharp
  - vb
  name: BackgroundSink(ILogEventSink, Nullable<Int32>)
  nameWithType: BackgroundSink.BackgroundSink(ILogEventSink, Nullable<Int32>)
  fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BackgroundSink.BackgroundSink(Serilog.Core.ILogEventSink, System.Nullable<System.Int32>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/BackgroundSink.cs
      branch: dev
      repo: https://github.com/aspnet/logging
    id: .ctor
    path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/BackgroundSink.cs
    startLine: 36
  assemblies:
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics
  namespace: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  summary: "\nCreates a new instance of the <see cref=\"T:Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BackgroundSink\"></see> class.\n"
  example: []
  syntax:
    content: public BackgroundSink(ILogEventSink innerSink, int ? maxQueueSize)
    content.vb: Public Sub New(innerSink As ILogEventSink, maxQueueSize As Integer?)
    parameters:
    - id: innerSink
      type: Serilog.Core.ILogEventSink
      description: The inner sink which does the actual logging
    - id: maxQueueSize
      type: System.Nullable{System.Int32}
      description: The maximum size of the background queue
  nameWithType.vb: BackgroundSink.BackgroundSink(ILogEventSink, Nullable(Of Int32))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BackgroundSink.BackgroundSink(Serilog.Core.ILogEventSink, System.Nullable(Of System.Int32))
  name.vb: BackgroundSink(ILogEventSink, Nullable(Of Int32))
- uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BackgroundSink.Emit(Serilog.Events.LogEvent)
  commentId: M:Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BackgroundSink.Emit(Serilog.Events.LogEvent)
  id: Emit(Serilog.Events.LogEvent)
  parent: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BackgroundSink
  langs:
  - csharp
  - vb
  name: Emit(LogEvent)
  nameWithType: BackgroundSink.Emit(LogEvent)
  fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BackgroundSink.Emit(Serilog.Events.LogEvent)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/BackgroundSink.cs
      branch: dev
      repo: https://github.com/aspnet/logging
    id: Emit
    path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/BackgroundSink.cs
    startLine: 63
  assemblies:
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics
  namespace: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  example: []
  syntax:
    content: public void Emit(LogEvent logEvent)
    content.vb: Public Sub Emit(logEvent As LogEvent)
    parameters:
    - id: logEvent
      type: Serilog.Events.LogEvent
  implements:
  - Serilog.Core.ILogEventSink.Emit(Serilog.Events.LogEvent)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BackgroundSink.Dispose
  commentId: M:Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BackgroundSink.Dispose
  id: Dispose
  parent: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BackgroundSink
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: BackgroundSink.Dispose()
  fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.BackgroundSink.Dispose()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/BackgroundSink.cs
      branch: dev
      repo: https://github.com/aspnet/logging
    id: Dispose
    path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/BackgroundSink.cs
    startLine: 74
  assemblies:
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics
  namespace: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  summary: "\nDisposes this object instance.\n"
  example: []
  syntax:
    content: public virtual void Dispose()
    content.vb: Public Overridable Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  commentId: N:Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  isExternal: false
  name: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  nameWithType: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Serilog.Core.ILogEventSink
  commentId: T:Serilog.Core.ILogEventSink
  parent: Serilog.Core
  isExternal: true
  name: ILogEventSink
  nameWithType: ILogEventSink
  fullName: Serilog.Core.ILogEventSink
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Serilog.Core
  commentId: N:Serilog.Core
  isExternal: false
  name: Serilog.Core
  nameWithType: Serilog.Core
  fullName: Serilog.Core
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullname.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Serilog.Core.ILogEventSink.Emit(Serilog.Events.LogEvent)
  commentId: M:Serilog.Core.ILogEventSink.Emit(Serilog.Events.LogEvent)
  parent: Serilog.Core.ILogEventSink
  isExternal: true
  name: Emit(LogEvent)
  nameWithType: ILogEventSink.Emit(LogEvent)
  fullName: Serilog.Core.ILogEventSink.Emit(Serilog.Events.LogEvent)
  spec.csharp:
  - uid: Serilog.Core.ILogEventSink.Emit(Serilog.Events.LogEvent)
    name: Emit
    nameWithType: ILogEventSink.Emit
    fullName: Serilog.Core.ILogEventSink.Emit
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Serilog.Events.LogEvent
    name: LogEvent
    nameWithType: LogEvent
    fullName: Serilog.Events.LogEvent
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Serilog.Core.ILogEventSink.Emit(Serilog.Events.LogEvent)
    name: Emit
    nameWithType: ILogEventSink.Emit
    fullName: Serilog.Core.ILogEventSink.Emit
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Serilog.Events.LogEvent
    name: LogEvent
    nameWithType: LogEvent
    fullName: Serilog.Events.LogEvent
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Serilog.Events.LogEvent
  commentId: T:Serilog.Events.LogEvent
  parent: Serilog.Events
  isExternal: true
  name: LogEvent
  nameWithType: LogEvent
  fullName: Serilog.Events.LogEvent
- uid: Serilog.Events
  commentId: N:Serilog.Events
  isExternal: false
  name: Serilog.Events
  nameWithType: Serilog.Events
  fullName: Serilog.Events
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
