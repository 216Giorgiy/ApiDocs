### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.DataProtection.Secret
  commentId: T:Microsoft.AspNetCore.DataProtection.Secret
  id: Secret
  parent: Microsoft.AspNetCore.DataProtection
  children:
  - Microsoft.AspNetCore.DataProtection.Secret.#ctor(Microsoft.AspNetCore.DataProtection.ISecret)
  - Microsoft.AspNetCore.DataProtection.Secret.#ctor(System.ArraySegment{System.Byte})
  - Microsoft.AspNetCore.DataProtection.Secret.#ctor(System.Byte*,System.Int32)
  - Microsoft.AspNetCore.DataProtection.Secret.#ctor(System.Byte[])
  - Microsoft.AspNetCore.DataProtection.Secret.Dispose
  - Microsoft.AspNetCore.DataProtection.Secret.Length
  - Microsoft.AspNetCore.DataProtection.Secret.Random(System.Int32)
  - Microsoft.AspNetCore.DataProtection.Secret.WriteSecretIntoBuffer(System.ArraySegment{System.Byte})
  - Microsoft.AspNetCore.DataProtection.Secret.WriteSecretIntoBuffer(System.Byte*,System.Int32)
  langs:
  - csharp
  - vb
  name: Secret
  nameWithType: Secret
  fullName: Microsoft.AspNetCore.DataProtection.Secret
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.DataProtection/Secret.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: Secret
    path: ../aspnet/DataProtection/src/Microsoft.AspNetCore.DataProtection/Secret.cs
    startLine: 14
  assemblies:
  - Microsoft.AspNetCore.DataProtection
  namespace: Microsoft.AspNetCore.DataProtection
  summary: "\nRepresents a secret value stored in memory.\n"
  example: []
  syntax:
    content: 'public sealed class Secret : ISecret, IDisposable'
    content.vb: >-
      Public NotInheritable Class Secret
          Implements ISecret, IDisposable
  inheritance:
  - System.Object
  implements:
  - Microsoft.AspNetCore.DataProtection.ISecret
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.AspNetCore.DataProtection.Secret.#ctor(System.ArraySegment{System.Byte})
  commentId: M:Microsoft.AspNetCore.DataProtection.Secret.#ctor(System.ArraySegment{System.Byte})
  id: '#ctor(System.ArraySegment{System.Byte})'
  parent: Microsoft.AspNetCore.DataProtection.Secret
  langs:
  - csharp
  - vb
  name: Secret(ArraySegment<Byte>)
  nameWithType: Secret.Secret(ArraySegment<Byte>)
  fullName: Microsoft.AspNetCore.DataProtection.Secret.Secret(System.ArraySegment<System.Byte>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.DataProtection/Secret.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: .ctor
    path: ../aspnet/DataProtection/src/Microsoft.AspNetCore.DataProtection/Secret.cs
    startLine: 26
  assemblies:
  - Microsoft.AspNetCore.DataProtection
  namespace: Microsoft.AspNetCore.DataProtection
  summary: "\nCreates a new Secret from the provided input value, where the input value\nis specified as an array segment.\n"
  example: []
  syntax:
    content: public Secret(ArraySegment<byte> value)
    parameters:
    - id: value
      type: System.ArraySegment{System.Byte}
    content.vb: Public Sub New(value As ArraySegment(Of Byte))
  overload: Microsoft.AspNetCore.DataProtection.Secret.#ctor*
  nameWithType.vb: Secret.Secret(ArraySegment(Of Byte))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.DataProtection.Secret.Secret(System.ArraySegment(Of System.Byte))
  name.vb: Secret(ArraySegment(Of Byte))
- uid: Microsoft.AspNetCore.DataProtection.Secret.#ctor(System.Byte[])
  commentId: M:Microsoft.AspNetCore.DataProtection.Secret.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: Microsoft.AspNetCore.DataProtection.Secret
  langs:
  - csharp
  - vb
  name: Secret(Byte[])
  nameWithType: Secret.Secret(Byte[])
  fullName: Microsoft.AspNetCore.DataProtection.Secret.Secret(System.Byte[])
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.DataProtection/Secret.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: .ctor
    path: ../aspnet/DataProtection/src/Microsoft.AspNetCore.DataProtection/Secret.cs
    startLine: 38
  assemblies:
  - Microsoft.AspNetCore.DataProtection
  namespace: Microsoft.AspNetCore.DataProtection
  summary: "\nCreates a new Secret from the provided input value, where the input value\nis specified as an array.\n"
  example: []
  syntax:
    content: public Secret(byte[] value)
    parameters:
    - id: value
      type: System.Byte[]
    content.vb: Public Sub New(value As Byte())
  overload: Microsoft.AspNetCore.DataProtection.Secret.#ctor*
  nameWithType.vb: Secret.Secret(Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.DataProtection.Secret.Secret(System.Byte())
  name.vb: Secret(Byte())
- uid: Microsoft.AspNetCore.DataProtection.Secret.#ctor(System.Byte*,System.Int32)
  commentId: M:Microsoft.AspNetCore.DataProtection.Secret.#ctor(System.Byte*,System.Int32)
  id: '#ctor(System.Byte*,System.Int32)'
  parent: Microsoft.AspNetCore.DataProtection.Secret
  langs:
  - csharp
  - vb
  name: Secret(Byte*, Int32)
  nameWithType: Secret.Secret(Byte*, Int32)
  fullName: Microsoft.AspNetCore.DataProtection.Secret.Secret(System.Byte*, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.DataProtection/Secret.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: .ctor
    path: ../aspnet/DataProtection/src/Microsoft.AspNetCore.DataProtection/Secret.cs
    startLine: 51
  assemblies:
  - Microsoft.AspNetCore.DataProtection
  namespace: Microsoft.AspNetCore.DataProtection
  summary: "\nCreates a new Secret from the provided input value, where the input value\nis specified as a pointer to unmanaged memory.\n"
  example: []
  syntax:
    content: public Secret(byte *secret, int secretLength)
    parameters:
    - id: secret
      type: System.Byte*
    - id: secretLength
      type: System.Int32
    content.vb: Public Sub New(secret As Byte *, secretLength As Integer)
  overload: Microsoft.AspNetCore.DataProtection.Secret.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.DataProtection.Secret.#ctor(Microsoft.AspNetCore.DataProtection.ISecret)
  commentId: M:Microsoft.AspNetCore.DataProtection.Secret.#ctor(Microsoft.AspNetCore.DataProtection.ISecret)
  id: '#ctor(Microsoft.AspNetCore.DataProtection.ISecret)'
  parent: Microsoft.AspNetCore.DataProtection.Secret
  langs:
  - csharp
  - vb
  name: Secret(ISecret)
  nameWithType: Secret.Secret(ISecret)
  fullName: Microsoft.AspNetCore.DataProtection.Secret.Secret(Microsoft.AspNetCore.DataProtection.ISecret)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.DataProtection/Secret.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: .ctor
    path: ../aspnet/DataProtection/src/Microsoft.AspNetCore.DataProtection/Secret.cs
    startLine: 69
  assemblies:
  - Microsoft.AspNetCore.DataProtection
  namespace: Microsoft.AspNetCore.DataProtection
  summary: "\nCreates a new Secret from another secret object.\n"
  example: []
  syntax:
    content: public Secret(ISecret secret)
    parameters:
    - id: secret
      type: Microsoft.AspNetCore.DataProtection.ISecret
    content.vb: Public Sub New(secret As ISecret)
  overload: Microsoft.AspNetCore.DataProtection.Secret.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.DataProtection.Secret.Length
  commentId: P:Microsoft.AspNetCore.DataProtection.Secret.Length
  id: Length
  parent: Microsoft.AspNetCore.DataProtection.Secret
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: Secret.Length
  fullName: Microsoft.AspNetCore.DataProtection.Secret.Length
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.DataProtection/Secret.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: Length
    path: ../aspnet/DataProtection/src/Microsoft.AspNetCore.DataProtection/Secret.cs
    startLine: 107
  assemblies:
  - Microsoft.AspNetCore.DataProtection
  namespace: Microsoft.AspNetCore.DataProtection
  summary: "\nThe length (in bytes) of the secret value.\n"
  example: []
  syntax:
    content: public int Length { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Length As Integer
  overload: Microsoft.AspNetCore.DataProtection.Secret.Length*
  implements:
  - Microsoft.AspNetCore.DataProtection.ISecret.Length
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.DataProtection.Secret.Dispose
  commentId: M:Microsoft.AspNetCore.DataProtection.Secret.Dispose
  id: Dispose
  parent: Microsoft.AspNetCore.DataProtection.Secret
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: Secret.Dispose()
  fullName: Microsoft.AspNetCore.DataProtection.Secret.Dispose()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.DataProtection/Secret.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: Dispose
    path: ../aspnet/DataProtection/src/Microsoft.AspNetCore.DataProtection/Secret.cs
    startLine: 118
  assemblies:
  - Microsoft.AspNetCore.DataProtection
  namespace: Microsoft.AspNetCore.DataProtection
  summary: "\nWipes the secret from memory.\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Microsoft.AspNetCore.DataProtection.Secret.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.DataProtection.Secret.Random(System.Int32)
  commentId: M:Microsoft.AspNetCore.DataProtection.Secret.Random(System.Int32)
  id: Random(System.Int32)
  parent: Microsoft.AspNetCore.DataProtection.Secret
  langs:
  - csharp
  - vb
  name: Random(Int32)
  nameWithType: Secret.Random(Int32)
  fullName: Microsoft.AspNetCore.DataProtection.Secret.Random(System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.DataProtection/Secret.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: Random
    path: ../aspnet/DataProtection/src/Microsoft.AspNetCore.DataProtection/Secret.cs
    startLine: 169
  assemblies:
  - Microsoft.AspNetCore.DataProtection
  namespace: Microsoft.AspNetCore.DataProtection
  summary: "\nReturns a Secret comprised entirely of random bytes retrieved from\na cryptographically secure RNG.\n"
  example: []
  syntax:
    content: public static Secret Random(int numBytes)
    parameters:
    - id: numBytes
      type: System.Int32
    return:
      type: Microsoft.AspNetCore.DataProtection.Secret
    content.vb: Public Shared Function Random(numBytes As Integer) As Secret
  overload: Microsoft.AspNetCore.DataProtection.Secret.Random*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.AspNetCore.DataProtection.Secret.WriteSecretIntoBuffer(System.ArraySegment{System.Byte})
  commentId: M:Microsoft.AspNetCore.DataProtection.Secret.WriteSecretIntoBuffer(System.ArraySegment{System.Byte})
  id: WriteSecretIntoBuffer(System.ArraySegment{System.Byte})
  parent: Microsoft.AspNetCore.DataProtection.Secret
  langs:
  - csharp
  - vb
  name: WriteSecretIntoBuffer(ArraySegment<Byte>)
  nameWithType: Secret.WriteSecretIntoBuffer(ArraySegment<Byte>)
  fullName: Microsoft.AspNetCore.DataProtection.Secret.WriteSecretIntoBuffer(System.ArraySegment<System.Byte>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.DataProtection/Secret.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: WriteSecretIntoBuffer
    path: ../aspnet/DataProtection/src/Microsoft.AspNetCore.DataProtection/Secret.cs
    startLine: 239
  assemblies:
  - Microsoft.AspNetCore.DataProtection
  namespace: Microsoft.AspNetCore.DataProtection
  summary: "\nWrites the secret value to the specified buffer.\n"
  remarks: "\nThe buffer size must exactly match the length of the secret value.\n"
  example: []
  syntax:
    content: public void WriteSecretIntoBuffer(ArraySegment<byte> buffer)
    parameters:
    - id: buffer
      type: System.ArraySegment{System.Byte}
    content.vb: Public Sub WriteSecretIntoBuffer(buffer As ArraySegment(Of Byte))
  overload: Microsoft.AspNetCore.DataProtection.Secret.WriteSecretIntoBuffer*
  implements:
  - Microsoft.AspNetCore.DataProtection.ISecret.WriteSecretIntoBuffer(System.ArraySegment{System.Byte})
  nameWithType.vb: Secret.WriteSecretIntoBuffer(ArraySegment(Of Byte))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.DataProtection.Secret.WriteSecretIntoBuffer(System.ArraySegment(Of System.Byte))
  name.vb: WriteSecretIntoBuffer(ArraySegment(Of Byte))
- uid: Microsoft.AspNetCore.DataProtection.Secret.WriteSecretIntoBuffer(System.Byte*,System.Int32)
  commentId: M:Microsoft.AspNetCore.DataProtection.Secret.WriteSecretIntoBuffer(System.Byte*,System.Int32)
  id: WriteSecretIntoBuffer(System.Byte*,System.Int32)
  parent: Microsoft.AspNetCore.DataProtection.Secret
  langs:
  - csharp
  - vb
  name: WriteSecretIntoBuffer(Byte*, Int32)
  nameWithType: Secret.WriteSecretIntoBuffer(Byte*, Int32)
  fullName: Microsoft.AspNetCore.DataProtection.Secret.WriteSecretIntoBuffer(System.Byte*, System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.DataProtection/Secret.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: WriteSecretIntoBuffer
    path: ../aspnet/DataProtection/src/Microsoft.AspNetCore.DataProtection/Secret.cs
    startLine: 266
  assemblies:
  - Microsoft.AspNetCore.DataProtection
  namespace: Microsoft.AspNetCore.DataProtection
  summary: "\nWrites the secret value to the specified buffer.\n"
  remarks: "\nThe 'bufferLength' parameter must exactly match the length of the secret value.\n"
  example: []
  syntax:
    content: public void WriteSecretIntoBuffer(byte *buffer, int bufferLength)
    parameters:
    - id: buffer
      type: System.Byte*
      description: The buffer into which to write the secret value.
    - id: bufferLength
      type: System.Int32
      description: The size (in bytes) of the provided buffer.
    content.vb: Public Sub WriteSecretIntoBuffer(buffer As Byte *, bufferLength As Integer)
  overload: Microsoft.AspNetCore.DataProtection.Secret.WriteSecretIntoBuffer*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.AspNetCore.DataProtection
  commentId: N:Microsoft.AspNetCore.DataProtection
  isExternal: false
  name: Microsoft.AspNetCore.DataProtection
  nameWithType: Microsoft.AspNetCore.DataProtection
  fullName: Microsoft.AspNetCore.DataProtection
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.AspNetCore.DataProtection.ISecret
  commentId: T:Microsoft.AspNetCore.DataProtection.ISecret
  parent: Microsoft.AspNetCore.DataProtection
  isExternal: false
  name: ISecret
  nameWithType: ISecret
  fullName: Microsoft.AspNetCore.DataProtection.ISecret
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.DataProtection.Secret.#ctor*
  commentId: Overload:Microsoft.AspNetCore.DataProtection.Secret.#ctor
  isExternal: false
  name: Secret
  nameWithType: Secret.Secret
  fullName: Microsoft.AspNetCore.DataProtection.Secret.Secret
- uid: System.ArraySegment{System.Byte}
  commentId: T:System.ArraySegment{System.Byte}
  parent: System
  definition: System.ArraySegment`1
  name: ArraySegment<Byte>
  nameWithType: ArraySegment<Byte>
  fullName: System.ArraySegment<System.Byte>
  nameWithType.vb: ArraySegment(Of Byte)
  fullName.vb: System.ArraySegment(Of System.Byte)
  name.vb: ArraySegment(Of Byte)
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArraySegment`1
  commentId: T:System.ArraySegment`1
  isExternal: true
  name: ArraySegment<T>
  nameWithType: ArraySegment<T>
  fullName: System.ArraySegment<T>
  nameWithType.vb: ArraySegment(Of T)
  fullName.vb: System.ArraySegment(Of T)
  name.vb: ArraySegment(Of T)
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Byte*
  name: Byte*
  nameWithType: Byte*
  fullName: System.Byte*
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.AspNetCore.DataProtection.Secret.Length*
  commentId: Overload:Microsoft.AspNetCore.DataProtection.Secret.Length
  isExternal: false
  name: Length
  nameWithType: Secret.Length
  fullName: Microsoft.AspNetCore.DataProtection.Secret.Length
- uid: Microsoft.AspNetCore.DataProtection.ISecret.Length
  commentId: P:Microsoft.AspNetCore.DataProtection.ISecret.Length
  parent: Microsoft.AspNetCore.DataProtection.ISecret
  isExternal: false
  name: Length
  nameWithType: ISecret.Length
  fullName: Microsoft.AspNetCore.DataProtection.ISecret.Length
- uid: Microsoft.AspNetCore.DataProtection.Secret.Dispose*
  commentId: Overload:Microsoft.AspNetCore.DataProtection.Secret.Dispose
  isExternal: false
  name: Dispose
  nameWithType: Secret.Dispose
  fullName: Microsoft.AspNetCore.DataProtection.Secret.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.DataProtection.Secret.Random*
  commentId: Overload:Microsoft.AspNetCore.DataProtection.Secret.Random
  isExternal: false
  name: Random
  nameWithType: Secret.Random
  fullName: Microsoft.AspNetCore.DataProtection.Secret.Random
- uid: Microsoft.AspNetCore.DataProtection.Secret
  commentId: T:Microsoft.AspNetCore.DataProtection.Secret
  parent: Microsoft.AspNetCore.DataProtection
  isExternal: false
  name: Secret
  nameWithType: Secret
  fullName: Microsoft.AspNetCore.DataProtection.Secret
- uid: Microsoft.AspNetCore.DataProtection.Secret.WriteSecretIntoBuffer*
  commentId: Overload:Microsoft.AspNetCore.DataProtection.Secret.WriteSecretIntoBuffer
  isExternal: false
  name: WriteSecretIntoBuffer
  nameWithType: Secret.WriteSecretIntoBuffer
  fullName: Microsoft.AspNetCore.DataProtection.Secret.WriteSecretIntoBuffer
- uid: Microsoft.AspNetCore.DataProtection.ISecret.WriteSecretIntoBuffer(System.ArraySegment{System.Byte})
  commentId: M:Microsoft.AspNetCore.DataProtection.ISecret.WriteSecretIntoBuffer(System.ArraySegment{System.Byte})
  parent: Microsoft.AspNetCore.DataProtection.ISecret
  isExternal: true
  name: WriteSecretIntoBuffer(ArraySegment<Byte>)
  nameWithType: ISecret.WriteSecretIntoBuffer(ArraySegment<Byte>)
  fullName: Microsoft.AspNetCore.DataProtection.ISecret.WriteSecretIntoBuffer(System.ArraySegment<System.Byte>)
  nameWithType.vb: ISecret.WriteSecretIntoBuffer(ArraySegment(Of Byte))
  fullName.vb: Microsoft.AspNetCore.DataProtection.ISecret.WriteSecretIntoBuffer(System.ArraySegment(Of System.Byte))
  name.vb: WriteSecretIntoBuffer(ArraySegment(Of Byte))
  spec.csharp:
  - uid: Microsoft.AspNetCore.DataProtection.ISecret.WriteSecretIntoBuffer(System.ArraySegment{System.Byte})
    name: WriteSecretIntoBuffer
    nameWithType: ISecret.WriteSecretIntoBuffer
    fullName: Microsoft.AspNetCore.DataProtection.ISecret.WriteSecretIntoBuffer
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.DataProtection.ISecret.WriteSecretIntoBuffer(System.ArraySegment{System.Byte})
    name: WriteSecretIntoBuffer
    nameWithType: ISecret.WriteSecretIntoBuffer
    fullName: Microsoft.AspNetCore.DataProtection.ISecret.WriteSecretIntoBuffer
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
