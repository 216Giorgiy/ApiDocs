### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  commentId: T:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  id: UserStore`8
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  children:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.#ctor(`2,IdentityErrorDescriber)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.AddLoginAsync(`0,UserLoginInfo,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.AutoSaveChanges
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.Context
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ConvertIdFromString(System.String)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ConvertIdToString(`3)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateUserClaim(`0,System.Security.Claims.Claim)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateUserLogin(`0,UserLoginInfo)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateUserRole(`0,`1)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateUserToken(`0,System.String,System.String,System.String)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.DeleteAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.Dispose
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ErrorDescriber
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.FindByEmailAsync(System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.FindByIdAsync(System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.FindByNameAsync(System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetClaimsAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetEmailAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetLoginsAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetPasswordHashAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetRolesAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetSecurityStampAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetUserIdAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetUserNameAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.HasPasswordAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SaveChanges(System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ThrowIfDisposed
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.UpdateAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.Users
  langs:
  - csharp
  - vb
  name: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: UserStore
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 112
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nRepresents a new instance of a persistence store for the specified user and role types.\n"
  example: []
  syntax:
    content: 'public abstract class UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken> : IUserLoginStore<TUser>, IUserRoleStore<TUser>, IUserClaimStore<TUser>, IUserPasswordStore<TUser>, IUserSecurityStampStore<TUser>, IUserEmailStore<TUser>, IUserLockoutStore<TUser>, IUserPhoneNumberStore<TUser>, IQueryableUserStore<TUser>, IUserTwoFactorStore<TUser>, IUserAuthenticationTokenStore<TUser> where TUser : IdentityUser<TKey, TUserClaim, TUserRole, TUserLogin> where TRole : IdentityRole<TKey, TUserRole, IdentityRoleClaim<TKey>> where TContext : DbContext where TKey : IEquatable<TKey> where TUserClaim : IdentityUserClaim<TKey> where TUserRole : IdentityUserRole<TKey> where TUserLogin : IdentityUserLogin<TKey> where TUserToken : IdentityUserToken<TKey>'
    typeParameters:
    - id: TUser
      description: The type representing a user.
    - id: TRole
      description: The type representing a role.
    - id: TContext
      description: The type of the data context class used to access the store.
    - id: TKey
      description: The type of the primary key for a role.
    - id: TUserClaim
      description: The type representing a claim.
    - id: TUserRole
      description: The type representing a user role.
    - id: TUserLogin
      description: The type representing a user external login.
    - id: TUserToken
      description: The type representing a user token.
    content.vb: >-
      Public MustInherit Class UserStore(Of TUser As IdentityUser(Of TKey, TUserClaim, TUserRole, TUserLogin), TRole As IdentityRole(Of TKey, TUserRole, IdentityRoleClaim(Of TKey)), TContext As DbContext, TKey As IEquatable(Of TKey), TUserClaim As IdentityUserClaim(Of TKey), TUserRole As IdentityUserRole(Of TKey), TUserLogin As IdentityUserLogin(Of TKey), TUserToken As IdentityUserToken(Of TKey))
          Inherits IUserLoginStore(Of TUser)
          Implements IUserRoleStore(Of TUser), IUserClaimStore(Of TUser), IUserPasswordStore(Of TUser), IUserSecurityStampStore(Of TUser), IUserEmailStore(Of TUser), IUserLockoutStore(Of TUser), IUserPhoneNumberStore(Of TUser), IQueryableUserStore(Of TUser), IUserTwoFactorStore(Of TUser), IUserAuthenticationTokenStore(Of TUser)
  inheritance:
  - System.Object
  derivedClasses:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`4
  implements:
  - IUserRoleStore{{TUser}}
  - IUserClaimStore{{TUser}}
  - IUserPasswordStore{{TUser}}
  - IUserSecurityStampStore{{TUser}}
  - IUserEmailStore{{TUser}}
  - IUserLockoutStore{{TUser}}
  - IUserPhoneNumberStore{{TUser}}
  - IQueryableUserStore{{TUser}}
  - IUserTwoFactorStore{{TUser}}
  - IUserAuthenticationTokenStore{{TUser}}
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken)
  name.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.#ctor(`2,IdentityErrorDescriber)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.#ctor(`2,IdentityErrorDescriber)
  id: '#ctor(`2,IdentityErrorDescriber)'
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: UserStore(TContext, IdentityErrorDescriber)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.UserStore(TContext, IdentityErrorDescriber)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.UserStore(TContext, IdentityErrorDescriber)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: .ctor
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 138
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nCreates a new instance of <xref href=\"Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public UserStore(TContext context, IdentityErrorDescriber describer = null)
    parameters:
    - id: context
      type: '{TContext}'
      description: The context used to access the store.
    - id: describer
      type: IdentityErrorDescriber
      description: The <see cref="!:IdentityErrorDescriber"></see> used to describe store errors.
    content.vb: Public Sub New(context As TContext, describer As IdentityErrorDescriber = Nothing)
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.#ctor*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).UserStore(TContext, IdentityErrorDescriber)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).UserStore(TContext, IdentityErrorDescriber)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.Context
  commentId: P:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.Context
  id: Context
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: Context
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.Context
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.Context
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Context
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 153
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nGets the database context for this store.\n"
  example: []
  syntax:
    content: public TContext Context { get; }
    parameters: []
    return:
      type: '{TContext}'
    content.vb: Public ReadOnly Property Context As TContext
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.Context*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).Context
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).Context
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ErrorDescriber
  commentId: P:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ErrorDescriber
  id: ErrorDescriber
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: ErrorDescriber
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.ErrorDescriber
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.ErrorDescriber
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ErrorDescriber
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 158
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nGets or sets the <see cref=\"!:IdentityErrorDescriber\"></see> for any error that occurred with the current operation.\n"
  example: []
  syntax:
    content: public IdentityErrorDescriber ErrorDescriber { get; set; }
    parameters: []
    return:
      type: IdentityErrorDescriber
    content.vb: Public Property ErrorDescriber As IdentityErrorDescriber
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ErrorDescriber*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).ErrorDescriber
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).ErrorDescriber
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateUserRole(`0,`1)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateUserRole(`0,`1)
  id: CreateUserRole(`0,`1)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: CreateUserRole(TUser, TRole)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.CreateUserRole(TUser, TRole)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.CreateUserRole(TUser, TRole)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CreateUserRole
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 172
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nCreates a new entity to represent a user role.\n"
  example: []
  syntax:
    content: protected abstract TUserRole CreateUserRole(TUser user, TRole role)
    parameters:
    - id: user
      type: '{TUser}'
      description: ''
    - id: role
      type: '{TRole}'
      description: ''
    return:
      type: '{TUserRole}'
      description: ''
    content.vb: Protected MustOverride Function CreateUserRole(user As TUser, role As TRole) As TUserRole
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateUserRole*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).CreateUserRole(TUser, TRole)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).CreateUserRole(TUser, TRole)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateUserClaim(`0,System.Security.Claims.Claim)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateUserClaim(`0,System.Security.Claims.Claim)
  id: CreateUserClaim(`0,System.Security.Claims.Claim)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: CreateUserClaim(TUser, Claim)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.CreateUserClaim(TUser, Claim)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.CreateUserClaim(TUser, System.Security.Claims.Claim)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CreateUserClaim
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 180
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nCreate a new entity representing a user claim.\n"
  example: []
  syntax:
    content: protected abstract TUserClaim CreateUserClaim(TUser user, Claim claim)
    parameters:
    - id: user
      type: '{TUser}'
      description: ''
    - id: claim
      type: System.Security.Claims.Claim
      description: ''
    return:
      type: '{TUserClaim}'
      description: ''
    content.vb: Protected MustOverride Function CreateUserClaim(user As TUser, claim As Claim) As TUserClaim
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateUserClaim*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).CreateUserClaim(TUser, Claim)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).CreateUserClaim(TUser, System.Security.Claims.Claim)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateUserLogin(`0,UserLoginInfo)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateUserLogin(`0,UserLoginInfo)
  id: CreateUserLogin(`0,UserLoginInfo)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: CreateUserLogin(TUser, UserLoginInfo)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.CreateUserLogin(TUser, UserLoginInfo)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.CreateUserLogin(TUser, UserLoginInfo)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CreateUserLogin
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 188
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nCreate a new entity representing a user login.\n"
  example: []
  syntax:
    content: protected abstract TUserLogin CreateUserLogin(TUser user, UserLoginInfo login)
    parameters:
    - id: user
      type: '{TUser}'
      description: ''
    - id: login
      type: UserLoginInfo
      description: ''
    return:
      type: '{TUserLogin}'
      description: ''
    content.vb: Protected MustOverride Function CreateUserLogin(user As TUser, login As UserLoginInfo) As TUserLogin
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateUserLogin*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).CreateUserLogin(TUser, UserLoginInfo)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).CreateUserLogin(TUser, UserLoginInfo)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateUserToken(`0,System.String,System.String,System.String)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateUserToken(`0,System.String,System.String,System.String)
  id: CreateUserToken(`0,System.String,System.String,System.String)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: CreateUserToken(TUser, String, String, String)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.CreateUserToken(TUser, String, String, String)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.CreateUserToken(TUser, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CreateUserToken
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 198
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nCreate a new entity representing a user token.\n"
  example: []
  syntax:
    content: protected abstract TUserToken CreateUserToken(TUser user, string loginProvider, string name, string value)
    parameters:
    - id: user
      type: '{TUser}'
      description: ''
    - id: loginProvider
      type: System.String
      description: ''
    - id: name
      type: System.String
      description: ''
    - id: value
      type: System.String
      description: ''
    return:
      type: '{TUserToken}'
      description: ''
    content.vb: Protected MustOverride Function CreateUserToken(user As TUser, loginProvider As String, name As String, value As String) As TUserToken
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateUserToken*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).CreateUserToken(TUser, String, String, String)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).CreateUserToken(TUser, System.String, System.String, System.String)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.AutoSaveChanges
  commentId: P:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.AutoSaveChanges
  id: AutoSaveChanges
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: AutoSaveChanges
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.AutoSaveChanges
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.AutoSaveChanges
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: AutoSaveChanges
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 206
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nGets or sets a flag indicating if changes should be persisted after CreateAsync, UpdateAsync and DeleteAsync are called.\n"
  example: []
  syntax:
    content: public bool AutoSaveChanges { get; set; }
    parameters: []
    return:
      type: System.Boolean
      description: "\nTrue if changes should be automatically persisted, otherwise false.\n"
    content.vb: Public Property AutoSaveChanges As Boolean
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.AutoSaveChanges*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).AutoSaveChanges
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).AutoSaveChanges
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SaveChanges(System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SaveChanges(System.Threading.CancellationToken)
  id: SaveChanges(System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: SaveChanges(CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SaveChanges(CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SaveChanges(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SaveChanges
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 211
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: Saves the current store.
  example: []
  syntax:
    content: protected Task SaveChanges(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
    content.vb: Protected Function SaveChanges(cancellationToken As CancellationToken) As Task
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SaveChanges*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SaveChanges(CancellationToken)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SaveChanges(System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetUserIdAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetUserIdAsync(`0,System.Threading.CancellationToken)
  id: GetUserIdAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetUserIdAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetUserIdAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetUserIdAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetUserIdAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 222
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nGets the user identifier for the specified <span class=\"paramref\">user</span>.\n"
  example: []
  syntax:
    content: public virtual Task<string> GetUserIdAsync(TUser user, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose identifier should be retrieved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the identifier for the specified <span class="paramref">user</span>.
    content.vb: Public Overridable Function GetUserIdAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetUserIdAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetUserIdAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetUserIdAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetUserNameAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetUserNameAsync(`0,System.Threading.CancellationToken)
  id: GetUserNameAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetUserNameAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetUserNameAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetUserNameAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetUserNameAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 239
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nGets the user name for the specified <span class=\"paramref\">user</span>.\n"
  example: []
  syntax:
    content: public virtual Task<string> GetUserNameAsync(TUser user, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose name should be retrieved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the name for the specified <span class="paramref">user</span>.
    content.vb: Public Overridable Function GetUserNameAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetUserNameAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetUserNameAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetUserNameAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  id: SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: SetUserNameAsync(TUser, String, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetUserNameAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetUserNameAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 257
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nSets the given <span class=\"paramref\">userName</span> for the specified <span class=\"paramref\">user</span>.\n"
  example: []
  syntax:
    content: public virtual Task SetUserNameAsync(TUser user, string userName, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose name should be set.
    - id: userName
      type: System.String
      description: The user name to set.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
    content.vb: Public Overridable Function SetUserNameAsync(user As TUser, userName As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetUserNameAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetUserNameAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
  id: GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetNormalizedUserNameAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetNormalizedUserNameAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetNormalizedUserNameAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetNormalizedUserNameAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 275
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nGets the normalized user name for the specified <span class=\"paramref\">user</span>.\n"
  example: []
  syntax:
    content: public virtual Task<string> GetNormalizedUserNameAsync(TUser user, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose normalized name should be retrieved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the normalized user name for the specified <span class="paramref">user</span>.
    content.vb: Public Overridable Function GetNormalizedUserNameAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetNormalizedUserNameAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetNormalizedUserNameAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetNormalizedUserNameAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  id: SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: SetNormalizedUserNameAsync(TUser, String, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetNormalizedUserNameAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetNormalizedUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetNormalizedUserNameAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 293
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nSets the given normalized name for the specified <span class=\"paramref\">user</span>.\n"
  example: []
  syntax:
    content: public virtual Task SetNormalizedUserNameAsync(TUser user, string normalizedName, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose name should be set.
    - id: normalizedName
      type: System.String
      description: The normalized name to set.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
    content.vb: Public Overridable Function SetNormalizedUserNameAsync(user As TUser, normalizedName As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetNormalizedUserNameAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetNormalizedUserNameAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetNormalizedUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateAsync(`0,System.Threading.CancellationToken)
  id: CreateAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: CreateAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.CreateAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.CreateAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CreateAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 311
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nCreates the specified <span class=\"paramref\">user</span> in the user store.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> CreateAsync(TUser user, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to create.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{IdentityResult}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the <see cref="!:IdentityResult"></see> of the creation operation.
    content.vb: Public Overridable Function CreateAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of IdentityResult)
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).CreateAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).CreateAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.UpdateAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.UpdateAsync(`0,System.Threading.CancellationToken)
  id: UpdateAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: UpdateAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.UpdateAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.UpdateAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: UpdateAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 330
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nUpdates the specified <span class=\"paramref\">user</span> in the user store.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> UpdateAsync(TUser user, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to update.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{IdentityResult}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the <see cref="!:IdentityResult"></see> of the update operation.
    content.vb: Public Overridable Function UpdateAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of IdentityResult)
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.UpdateAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).UpdateAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).UpdateAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.DeleteAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.DeleteAsync(`0,System.Threading.CancellationToken)
  id: DeleteAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: DeleteAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.DeleteAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.DeleteAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: DeleteAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 359
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nDeletes the specified <span class=\"paramref\">user</span> from the user store.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> DeleteAsync(TUser user, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to delete.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{IdentityResult}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the <see cref="!:IdentityResult"></see> of the update operation.
    content.vb: Public Overridable Function DeleteAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of IdentityResult)
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.DeleteAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).DeleteAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).DeleteAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.FindByIdAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.FindByIdAsync(System.String,System.Threading.CancellationToken)
  id: FindByIdAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: FindByIdAsync(String, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.FindByIdAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.FindByIdAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: FindByIdAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 388
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nFinds and returns a user, if any, who has the specified <span class=\"paramref\">userId</span>.\n"
  example: []
  syntax:
    content: public virtual Task<TUser> FindByIdAsync(string userId, CancellationToken cancellationToken = null)
    parameters:
    - id: userId
      type: System.String
      description: The user ID to search for.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{{TUser}}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the user matching the specified <span class=\"paramref\">userId</span> if it exists.\n"
    content.vb: Public Overridable Function FindByIdAsync(userId As String, cancellationToken As CancellationToken = Nothing) As Task(Of TUser)
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.FindByIdAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).FindByIdAsync(String, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).FindByIdAsync(System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ConvertIdFromString(System.String)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ConvertIdFromString(System.String)
  id: ConvertIdFromString(System.String)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: ConvertIdFromString(String)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.ConvertIdFromString(String)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.ConvertIdFromString(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ConvertIdFromString
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 401
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nConverts the provided <span class=\"paramref\">id</span> to a strongly typed key object.\n"
  example: []
  syntax:
    content: public virtual TKey ConvertIdFromString(string id)
    parameters:
    - id: id
      type: System.String
      description: The id to convert.
    return:
      type: '{TKey}'
      description: An instance of <span class="typeparamref">TKey</span> representing the provided <span class="paramref">id</span>.
    content.vb: Public Overridable Function ConvertIdFromString(id As String) As TKey
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ConvertIdFromString*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).ConvertIdFromString(String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).ConvertIdFromString(System.String)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ConvertIdToString(`3)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ConvertIdToString(`3)
  id: ConvertIdToString(`3)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: ConvertIdToString(TKey)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.ConvertIdToString(TKey)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.ConvertIdToString(TKey)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ConvertIdToString
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 415
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nConverts the provided <span class=\"paramref\">id</span> to its string representation.\n"
  example: []
  syntax:
    content: public virtual string ConvertIdToString(TKey id)
    parameters:
    - id: id
      type: '{TKey}'
      description: The id to convert.
    return:
      type: System.String
      description: An <xref href="System.String" data-throw-if-not-resolved="false"></xref> representation of the provided <span class="paramref">id</span>.
    content.vb: Public Overridable Function ConvertIdToString(id As TKey) As String
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ConvertIdToString*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).ConvertIdToString(TKey)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).ConvertIdToString(TKey)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.FindByNameAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.FindByNameAsync(System.String,System.Threading.CancellationToken)
  id: FindByNameAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: FindByNameAsync(String, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.FindByNameAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.FindByNameAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: FindByNameAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 432
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nFinds and returns a user, if any, who has the specified normalized user name.\n"
  example: []
  syntax:
    content: public virtual Task<TUser> FindByNameAsync(string normalizedUserName, CancellationToken cancellationToken = null)
    parameters:
    - id: normalizedUserName
      type: System.String
      description: The normalized user name to search for.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{{TUser}}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the user matching the specified <span class=\"paramref\">normalizedUserName</span> if it exists.\n"
    content.vb: Public Overridable Function FindByNameAsync(normalizedUserName As String, cancellationToken As CancellationToken = Nothing) As Task(Of TUser)
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.FindByNameAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).FindByNameAsync(String, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).FindByNameAsync(System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.Users
  commentId: P:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.Users
  id: Users
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: Users
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.Users
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.Users
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Users
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 442
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nA navigation property for the users the store contains.\n"
  example: []
  syntax:
    content: public virtual IQueryable<TUser> Users { get; }
    parameters: []
    return:
      type: System.Linq.IQueryable{{TUser}}
    content.vb: Public Overridable ReadOnly Property Users As IQueryable(Of TUser)
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.Users*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).Users
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).Users
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
  id: SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: SetPasswordHashAsync(TUser, String, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetPasswordHashAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetPasswordHashAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetPasswordHashAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 454
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nSets the password hash for a user.\n"
  example: []
  syntax:
    content: public virtual Task SetPasswordHashAsync(TUser user, string passwordHash, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to set the password hash for.
    - id: passwordHash
      type: System.String
      description: The password hash to set.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
    content.vb: Public Overridable Function SetPasswordHashAsync(user As TUser, passwordHash As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetPasswordHashAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetPasswordHashAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetPasswordHashAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetPasswordHashAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetPasswordHashAsync(`0,System.Threading.CancellationToken)
  id: GetPasswordHashAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetPasswordHashAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetPasswordHashAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetPasswordHashAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetPasswordHashAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 472
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nGets the password hash for a user.\n"
  example: []
  syntax:
    content: public virtual Task<string> GetPasswordHashAsync(TUser user, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to retrieve the password hash for.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> that contains the password hash for the user.
    content.vb: Public Overridable Function GetPasswordHashAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetPasswordHashAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetPasswordHashAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetPasswordHashAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.HasPasswordAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.HasPasswordAsync(`0,System.Threading.CancellationToken)
  id: HasPasswordAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: HasPasswordAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.HasPasswordAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.HasPasswordAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: HasPasswordAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 490
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nReturns a flag indicating if the specified user has a password.\n"
  example: []
  syntax:
    content: public virtual Task<bool> HasPasswordAsync(TUser user, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to retrieve the password hash for.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "A <xref href=\"System.Threading.Tasks.Task%601\" data-throw-if-not-resolved=\"false\"></xref> containing a flag indicating if the specified user has a password. If the \nuser has a password the returned value with be true, otherwise it will be false."
    content.vb: Public Overridable Function HasPasswordAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.HasPasswordAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).HasPasswordAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).HasPasswordAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
  id: AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: AddToRoleAsync(TUser, String, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.AddToRoleAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.AddToRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: AddToRoleAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 503
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nAdds the given <span class=\"paramref\">normalizedRoleName</span> to the specified <span class=\"paramref\">user</span>.\n"
  example: []
  syntax:
    content: public virtual Task AddToRoleAsync(TUser user, string normalizedRoleName, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to add the role to.
    - id: normalizedRoleName
      type: System.String
      description: The role to add.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
    content.vb: Public Overridable Function AddToRoleAsync(user As TUser, normalizedRoleName As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.AddToRoleAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).AddToRoleAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).AddToRoleAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
  id: RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: RemoveFromRoleAsync(TUser, String, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.RemoveFromRoleAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.RemoveFromRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RemoveFromRoleAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 530
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nRemoves the given <span class=\"paramref\">normalizedRoleName</span> from the specified <span class=\"paramref\">user</span>.\n"
  example: []
  syntax:
    content: public virtual Task RemoveFromRoleAsync(TUser user, string normalizedRoleName, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to remove the role from.
    - id: normalizedRoleName
      type: System.String
      description: The role to remove.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
    content.vb: Public Overridable Function RemoveFromRoleAsync(user As TUser, normalizedRoleName As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.RemoveFromRoleAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).RemoveFromRoleAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).RemoveFromRoleAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetRolesAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetRolesAsync(`0,System.Threading.CancellationToken)
  id: GetRolesAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetRolesAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetRolesAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetRolesAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetRolesAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 559
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nRetrieves the roles the specified <span class=\"paramref\">user</span> is a member of.\n"
  example: []
  syntax:
    content: public virtual Task<IList<string>> GetRolesAsync(TUser user, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose roles should be retrieved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{System.String}}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> that contains the roles the user is a member of.
    content.vb: Public Overridable Function GetRolesAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of IList(Of String))
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetRolesAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetRolesAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetRolesAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
  id: IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: IsInRoleAsync(TUser, String, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.IsInRoleAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.IsInRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: IsInRoleAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 583
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nReturns a flag indicating if the specified user is a member of the give <span class=\"paramref\">normalizedRoleName</span>.\n"
  example: []
  syntax:
    content: public virtual Task<bool> IsInRoleAsync(TUser user, string normalizedRoleName, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose role membership should be checked.
    - id: normalizedRoleName
      type: System.String
      description: The role to check membership of
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "A <xref href=\"System.Threading.Tasks.Task%601\" data-throw-if-not-resolved=\"false\"></xref> containing a flag indicating if the specified user is a member of the given group. If the \nuser is a member of the group the returned value with be true, otherwise it will be false."
    content.vb: Public Overridable Function IsInRoleAsync(user As TUser, normalizedRoleName As String, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.IsInRoleAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).IsInRoleAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).IsInRoleAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ThrowIfDisposed
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ThrowIfDisposed
  id: ThrowIfDisposed
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: ThrowIfDisposed()
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.ThrowIfDisposed()
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.ThrowIfDisposed()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ThrowIfDisposed
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 605
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  syntax:
    content: protected void ThrowIfDisposed()
    content.vb: Protected Sub ThrowIfDisposed
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ThrowIfDisposed*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).ThrowIfDisposed()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).ThrowIfDisposed()
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.Dispose
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.Dispose
  id: Dispose
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.Dispose()
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.Dispose()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Dispose
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 616
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nDispose the store\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.Dispose*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).Dispose()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).Dispose()
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetClaimsAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetClaimsAsync(`0,System.Threading.CancellationToken)
  id: GetClaimsAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetClaimsAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetClaimsAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetClaimsAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetClaimsAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 627
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nGet the claims associated with the specified <span class=\"paramref\">user</span> as an asynchronous operation.\n"
  example: []
  syntax:
    content: public virtual Task<IList<Claim>> GetClaimsAsync(TUser user, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose claims should be retrieved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{System.Security.Claims.Claim}}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> that contains the claims granted to a user.
    content.vb: Public Overridable Function GetClaimsAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of IList(Of Claim))
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetClaimsAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetClaimsAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetClaimsAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  id: AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: AddClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.AddClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.AddClaimsAsync(TUser, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: AddClaimsAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 645
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nAdds the <span class=\"paramref\">claims</span> given to the specified <span class=\"paramref\">user</span>.\n"
  example: []
  syntax:
    content: public virtual Task AddClaimsAsync(TUser user, IEnumerable<Claim> claims, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to add the claim to.
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: The claim to add to the user.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
    content.vb: Public Overridable Function AddClaimsAsync(user As TUser, claims As IEnumerable(Of Claim), cancellationToken As CancellationToken = Nothing) As Task
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.AddClaimsAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).AddClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).AddClaimsAsync(TUser, System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.Threading.CancellationToken)
  name.vb: AddClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
  id: ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: ReplaceClaimAsync(TUser, Claim, Claim, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.ReplaceClaimAsync(TUser, Claim, Claim, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.ReplaceClaimAsync(TUser, System.Security.Claims.Claim, System.Security.Claims.Claim, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ReplaceClaimAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 671
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nReplaces the <span class=\"paramref\">claim</span> on the specified <span class=\"paramref\">user</span>, with the <span class=\"paramref\">newClaim</span>.\n"
  example: []
  syntax:
    content: public virtual Task ReplaceClaimAsync(TUser user, Claim claim, Claim newClaim, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The role to replace the claim on.
    - id: claim
      type: System.Security.Claims.Claim
      description: The claim replace.
    - id: newClaim
      type: System.Security.Claims.Claim
      description: The new claim replacing the <span class="paramref">claim</span>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
    content.vb: Public Overridable Function ReplaceClaimAsync(user As TUser, claim As Claim, newClaim As Claim, cancellationToken As CancellationToken = Nothing) As Task
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ReplaceClaimAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).ReplaceClaimAsync(TUser, Claim, Claim, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).ReplaceClaimAsync(TUser, System.Security.Claims.Claim, System.Security.Claims.Claim, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  id: RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: RemoveClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.RemoveClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.RemoveClaimsAsync(TUser, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RemoveClaimsAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 702
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nRemoves the <span class=\"paramref\">claims</span> given from the specified <span class=\"paramref\">user</span>.\n"
  example: []
  syntax:
    content: public virtual Task RemoveClaimsAsync(TUser user, IEnumerable<Claim> claims, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to remove the claims from.
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: The claim to remove.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
    content.vb: Public Overridable Function RemoveClaimsAsync(user As TUser, claims As IEnumerable(Of Claim), cancellationToken As CancellationToken = Nothing) As Task
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.RemoveClaimsAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).RemoveClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).RemoveClaimsAsync(TUser, System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.Threading.CancellationToken)
  name.vb: RemoveClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.AddLoginAsync(`0,UserLoginInfo,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.AddLoginAsync(`0,UserLoginInfo,System.Threading.CancellationToken)
  id: AddLoginAsync(`0,UserLoginInfo,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: AddLoginAsync(TUser, UserLoginInfo, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.AddLoginAsync(TUser, UserLoginInfo, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.AddLoginAsync(TUser, UserLoginInfo, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: AddLoginAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 730
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nAdds the <span class=\"paramref\">login</span> given to the specified <span class=\"paramref\">user</span>.\n"
  example: []
  syntax:
    content: public virtual Task AddLoginAsync(TUser user, UserLoginInfo login, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to add the login to.
    - id: login
      type: UserLoginInfo
      description: The login to add to the user.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
    content.vb: Public Overridable Function AddLoginAsync(user As TUser, login As UserLoginInfo, cancellationToken As CancellationToken = Nothing) As Task
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.AddLoginAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).AddLoginAsync(TUser, UserLoginInfo, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).AddLoginAsync(TUser, UserLoginInfo, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  id: RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: RemoveLoginAsync(TUser, String, String, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.RemoveLoginAsync(TUser, String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.RemoveLoginAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RemoveLoginAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 755
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nRemoves the <span class=\"paramref\">loginProvider</span> given from the specified <span class=\"paramref\">user</span>.\n"
  example: []
  syntax:
    content: public virtual Task RemoveLoginAsync(TUser user, string loginProvider, string providerKey, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to remove the login from.
    - id: loginProvider
      type: System.String
      description: The login to remove from the user.
    - id: providerKey
      type: System.String
      description: The key provided by the <span class="paramref">loginProvider</span> to identify a user.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
    content.vb: Public Overridable Function RemoveLoginAsync(user As TUser, loginProvider As String, providerKey As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.RemoveLoginAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).RemoveLoginAsync(TUser, String, String, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).RemoveLoginAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetLoginsAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetLoginsAsync(`0,System.Threading.CancellationToken)
  id: GetLoginsAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetLoginsAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetLoginsAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetLoginsAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetLoginsAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 779
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nRetrieves the associated logins for the specified <param ref=\"user\" />.\n"
  example: []
  syntax:
    content: public virtual Task<IList<UserLoginInfo>> GetLoginsAsync(TUser user, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose associated logins to retrieve.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{UserLoginInfo}}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> for the asynchronous operation, containing a list of <see cref=\"!:UserLoginInfo\"></see> for the specified <span class=\"paramref\">user</span>, if any.\n"
    content.vb: Public Overridable Function GetLoginsAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of IList(Of UserLoginInfo))
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetLoginsAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetLoginsAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetLoginsAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
  id: FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: FindByLoginAsync(String, String, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.FindByLoginAsync(String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.FindByLoginAsync(System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: FindByLoginAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 801
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nRetrieves the user associated with the specified login provider and login provider key..\n"
  example: []
  syntax:
    content: public virtual Task<TUser> FindByLoginAsync(string loginProvider, string providerKey, CancellationToken cancellationToken = null)
    parameters:
    - id: loginProvider
      type: System.String
      description: The login provider who provided the <span class="paramref">providerKey</span>.
    - id: providerKey
      type: System.String
      description: The key provided by the <span class="paramref">loginProvider</span> to identify a user.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{{TUser}}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> for the asynchronous operation, containing the user, if any which matched the specified login provider and key.\n"
    content.vb: Public Overridable Function FindByLoginAsync(loginProvider As String, providerKey As String, cancellationToken As CancellationToken = Nothing) As Task(Of TUser)
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.FindByLoginAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).FindByLoginAsync(String, String, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).FindByLoginAsync(System.String, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
  id: GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetEmailConfirmedAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetEmailConfirmedAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetEmailConfirmedAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetEmailConfirmedAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 825
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nGets a flag indicating whether the email address for the specified <span class=\"paramref\">user</span> has been verified, true if the email address is verified otherwise\nfalse.\n"
  example: []
  syntax:
    content: public virtual Task<bool> GetEmailConfirmedAsync(TUser user, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose email confirmation status should be returned.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nThe task object containing the results of the asynchronous operation, a flag indicating whether the email address for the specified <span class=\"paramref\">user</span>\nhas been confirmed or not.\n"
    content.vb: Public Overridable Function GetEmailConfirmedAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetEmailConfirmedAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetEmailConfirmedAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetEmailConfirmedAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  id: SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: SetEmailConfirmedAsync(TUser, Boolean, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetEmailConfirmedAsync(TUser, Boolean, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetEmailConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetEmailConfirmedAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 843
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nSets the flag indicating whether the specified <span class=\"paramref\">user</span>'s email address has been confirmed or not.\n"
  example: []
  syntax:
    content: public virtual Task SetEmailConfirmedAsync(TUser user, bool confirmed, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose email confirmation status should be set.
    - id: confirmed
      type: System.Boolean
      description: A flag indicating if the email address has been confirmed, true if the address is confirmed otherwise false.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The task object representing the asynchronous operation.
    content.vb: Public Overridable Function SetEmailConfirmedAsync(user As TUser, confirmed As Boolean, cancellationToken As CancellationToken = Nothing) As Task
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetEmailConfirmedAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetEmailConfirmedAsync(TUser, Boolean, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetEmailConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
  id: SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: SetEmailAsync(TUser, String, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetEmailAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetEmailAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetEmailAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 862
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nSets the <span class=\"paramref\">email</span> address for a <span class=\"paramref\">user</span>.\n"
  example: []
  syntax:
    content: public virtual Task SetEmailAsync(TUser user, string email, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose email should be set.
    - id: email
      type: System.String
      description: The email to set.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The task object representing the asynchronous operation.
    content.vb: Public Overridable Function SetEmailAsync(user As TUser, email As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetEmailAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetEmailAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetEmailAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetEmailAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetEmailAsync(`0,System.Threading.CancellationToken)
  id: GetEmailAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetEmailAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetEmailAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetEmailAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetEmailAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 880
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nGets the email address for the specified <span class=\"paramref\">user</span>.\n"
  example: []
  syntax:
    content: public virtual Task<string> GetEmailAsync(TUser user, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose email should be returned.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The task object containing the results of the asynchronous operation, the email address for the specified <span class="paramref">user</span>.
    content.vb: Public Overridable Function GetEmailAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetEmailAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetEmailAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetEmailAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
  id: GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetNormalizedEmailAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetNormalizedEmailAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetNormalizedEmailAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetNormalizedEmailAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 899
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nReturns the normalized email for the specified <span class=\"paramref\">user</span>.\n"
  example: []
  syntax:
    content: public virtual Task<string> GetNormalizedEmailAsync(TUser user, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose email address to retrieve.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\nThe task object containing the results of the asynchronous lookup operation, the normalized email address if any associated with the specified user.\n"
    content.vb: Public Overridable Function GetNormalizedEmailAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetNormalizedEmailAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetNormalizedEmailAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetNormalizedEmailAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
  id: SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: SetNormalizedEmailAsync(TUser, String, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetNormalizedEmailAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetNormalizedEmailAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetNormalizedEmailAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 917
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nSets the normalized email for the specified <span class=\"paramref\">user</span>.\n"
  example: []
  syntax:
    content: public virtual Task SetNormalizedEmailAsync(TUser user, string normalizedEmail, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose email address to set.
    - id: normalizedEmail
      type: System.String
      description: The normalized email to set for the specified <span class="paramref">user</span>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The task object representing the asynchronous operation.
    content.vb: Public Overridable Function SetNormalizedEmailAsync(user As TUser, normalizedEmail As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetNormalizedEmailAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetNormalizedEmailAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetNormalizedEmailAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.FindByEmailAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.FindByEmailAsync(System.String,System.Threading.CancellationToken)
  id: FindByEmailAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: FindByEmailAsync(String, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.FindByEmailAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.FindByEmailAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: FindByEmailAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 937
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nGets the user, if any, associated with the specified, normalized email address.\n"
  example: []
  syntax:
    content: public virtual Task<TUser> FindByEmailAsync(string normalizedEmail, CancellationToken cancellationToken = null)
    parameters:
    - id: normalizedEmail
      type: System.String
      description: The normalized email address to return the user for.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{{TUser}}
      description: "\nThe task object containing the results of the asynchronous lookup operation, the user if any associated with the specified normalized email address.\n"
    content.vb: Public Overridable Function FindByEmailAsync(normalizedEmail As String, cancellationToken As CancellationToken = Nothing) As Task(Of TUser)
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.FindByEmailAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).FindByEmailAsync(String, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).FindByEmailAsync(System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
  id: GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetLockoutEndDateAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetLockoutEndDateAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetLockoutEndDateAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetLockoutEndDateAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 954
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nGets the last <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> a user's last lockout expired, if any.\nAny time in the past should be indicates a user is not locked out.\n"
  example: []
  syntax:
    content: public virtual Task<DateTimeOffset? > GetLockoutEndDateAsync(TUser user, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose lockout date should be retrieved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Nullable{System.DateTimeOffset}}
      description: "\nA <xref href=\"System.Threading.Tasks.Task%601\" data-throw-if-not-resolved=\"false\"></xref> that represents the result of the asynchronous query, a <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> containing the last time\na user's lockout expired, if any.\n"
    content.vb: Public Overridable Function GetLockoutEndDateAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of DateTimeOffset?)
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetLockoutEndDateAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetLockoutEndDateAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetLockoutEndDateAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
  id: SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: SetLockoutEndDateAsync(TUser, Nullable<DateTimeOffset>, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetLockoutEndDateAsync(TUser, Nullable<DateTimeOffset>, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetLockoutEndDateAsync(TUser, System.Nullable<System.DateTimeOffset>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetLockoutEndDateAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 972
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nLocks out a user until the specified end date has passed. Setting a end date in the past immediately unlocks a user.\n"
  example: []
  syntax:
    content: public virtual Task SetLockoutEndDateAsync(TUser user, DateTimeOffset? lockoutEnd, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose lockout date should be set.
    - id: lockoutEnd
      type: System.Nullable{System.DateTimeOffset}
      description: The <xref href="System.DateTimeOffset" data-throw-if-not-resolved="false"></xref> after which the <span class="paramref">user</span>'s lockout should end.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
    content.vb: Public Overridable Function SetLockoutEndDateAsync(user As TUser, lockoutEnd As DateTimeOffset?, cancellationToken As CancellationToken = Nothing) As Task
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetLockoutEndDateAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetLockoutEndDateAsync(TUser, Nullable(Of DateTimeOffset), CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetLockoutEndDateAsync(TUser, System.Nullable(Of System.DateTimeOffset), System.Threading.CancellationToken)
  name.vb: SetLockoutEndDateAsync(TUser, Nullable(Of DateTimeOffset), CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  id: IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: IncrementAccessFailedCountAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.IncrementAccessFailedCountAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.IncrementAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: IncrementAccessFailedCountAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 990
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nRecords that a failed access has occurred, incrementing the failed access count.\n"
  example: []
  syntax:
    content: public virtual Task<int> IncrementAccessFailedCountAsync(TUser user, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose cancellation count should be incremented.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the incremented failed access count.
    content.vb: Public Overridable Function IncrementAccessFailedCountAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.IncrementAccessFailedCountAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).IncrementAccessFailedCountAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).IncrementAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  id: ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: ResetAccessFailedCountAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.ResetAccessFailedCountAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.ResetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ResetAccessFailedCountAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 1009
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nResets a user's failed access count.\n"
  remarks: This is typically called after the account is successfully accessed.
  example: []
  syntax:
    content: public virtual Task ResetAccessFailedCountAsync(TUser user, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose failed access count should be reset.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
    content.vb: Public Overridable Function ResetAccessFailedCountAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ResetAccessFailedCountAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).ResetAccessFailedCountAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).ResetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  id: GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetAccessFailedCountAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetAccessFailedCountAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetAccessFailedCountAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 1027
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nRetrieves the current failed access count for the specified <span class=\"paramref\">user</span>..\n"
  example: []
  syntax:
    content: public virtual Task<int> GetAccessFailedCountAsync(TUser user, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose failed access count should be retrieved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the failed access count.
    content.vb: Public Overridable Function GetAccessFailedCountAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetAccessFailedCountAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetAccessFailedCountAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
  id: GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetLockoutEnabledAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetLockoutEnabledAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetLockoutEnabledAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetLockoutEnabledAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 1046
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nRetrieves a flag indicating whether user lockout can enabled for the specified user.\n"
  example: []
  syntax:
    content: public virtual Task<bool> GetLockoutEnabledAsync(TUser user, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose ability to be locked out should be returned.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, true if a user can be locked out, otherwise false.\n"
    content.vb: Public Overridable Function GetLockoutEnabledAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetLockoutEnabledAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetLockoutEnabledAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetLockoutEnabledAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  id: SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: SetLockoutEnabledAsync(TUser, Boolean, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetLockoutEnabledAsync(TUser, Boolean, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetLockoutEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetLockoutEnabledAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 1064
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nSet the flag indicating if the specified <span class=\"paramref\">user</span> can be locked out..\n"
  example: []
  syntax:
    content: public virtual Task SetLockoutEnabledAsync(TUser user, bool enabled, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose ability to be locked out should be set.
    - id: enabled
      type: System.Boolean
      description: A flag indicating if lock out can be enabled for the specified <span class="paramref">user</span>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
    content.vb: Public Overridable Function SetLockoutEnabledAsync(user As TUser, enabled As Boolean, cancellationToken As CancellationToken = Nothing) As Task
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetLockoutEnabledAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetLockoutEnabledAsync(TUser, Boolean, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetLockoutEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
  id: SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: SetPhoneNumberAsync(TUser, String, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetPhoneNumberAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetPhoneNumberAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetPhoneNumberAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 1083
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nSets the telephone number for the specified <span class=\"paramref\">user</span>.\n"
  example: []
  syntax:
    content: public virtual Task SetPhoneNumberAsync(TUser user, string phoneNumber, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose telephone number should be set.
    - id: phoneNumber
      type: System.String
      description: The telephone number to set.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
    content.vb: Public Overridable Function SetPhoneNumberAsync(user As TUser, phoneNumber As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetPhoneNumberAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetPhoneNumberAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetPhoneNumberAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
  id: GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetPhoneNumberAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetPhoneNumberAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetPhoneNumberAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetPhoneNumberAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 1101
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nGets the telephone number, if any, for the specified <span class=\"paramref\">user</span>.\n"
  example: []
  syntax:
    content: public virtual Task<string> GetPhoneNumberAsync(TUser user, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose telephone number should be retrieved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the user's telephone number, if any.
    content.vb: Public Overridable Function GetPhoneNumberAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetPhoneNumberAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetPhoneNumberAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetPhoneNumberAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
  id: GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetPhoneNumberConfirmedAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetPhoneNumberConfirmedAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetPhoneNumberConfirmedAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetPhoneNumberConfirmedAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 1121
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nGets a flag indicating whether the specified <span class=\"paramref\">user</span>'s telephone number has been confirmed.\n"
  example: []
  syntax:
    content: public virtual Task<bool> GetPhoneNumberConfirmedAsync(TUser user, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to return a flag for, indicating whether their telephone number is confirmed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, returning true if the specified <span class=\"paramref\">user</span> has a confirmed\ntelephone number otherwise false.\n"
    content.vb: Public Overridable Function GetPhoneNumberConfirmedAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetPhoneNumberConfirmedAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetPhoneNumberConfirmedAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetPhoneNumberConfirmedAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  id: SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: SetPhoneNumberConfirmedAsync(TUser, Boolean, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetPhoneNumberConfirmedAsync(TUser, Boolean, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetPhoneNumberConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetPhoneNumberConfirmedAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 1139
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nSets a flag indicating if the specified <span class=\"paramref\">user</span>'s phone number has been confirmed..\n"
  example: []
  syntax:
    content: public virtual Task SetPhoneNumberConfirmedAsync(TUser user, bool confirmed, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose telephone number confirmation status should be set.
    - id: confirmed
      type: System.Boolean
      description: A flag indicating whether the user's telephone number has been confirmed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
    content.vb: Public Overridable Function SetPhoneNumberConfirmedAsync(user As TUser, confirmed As Boolean, cancellationToken As CancellationToken = Nothing) As Task
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetPhoneNumberConfirmedAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetPhoneNumberConfirmedAsync(TUser, Boolean, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetPhoneNumberConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
  id: SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: SetSecurityStampAsync(TUser, String, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetSecurityStampAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetSecurityStampAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetSecurityStampAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 1158
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nSets the provided security <span class=\"paramref\">stamp</span> for the specified <span class=\"paramref\">user</span>.\n"
  example: []
  syntax:
    content: public virtual Task SetSecurityStampAsync(TUser user, string stamp, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose security stamp should be set.
    - id: stamp
      type: System.String
      description: The security stamp to set.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
    content.vb: Public Overridable Function SetSecurityStampAsync(user As TUser, stamp As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetSecurityStampAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetSecurityStampAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetSecurityStampAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetSecurityStampAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetSecurityStampAsync(`0,System.Threading.CancellationToken)
  id: GetSecurityStampAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetSecurityStampAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetSecurityStampAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetSecurityStampAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetSecurityStampAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 1176
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nGet the security stamp for the specified <span class=\"paramref\">user</span>.\n"
  example: []
  syntax:
    content: public virtual Task<string> GetSecurityStampAsync(TUser user, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose security stamp should be set.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the security stamp for the specified <span class="paramref">user</span>.
    content.vb: Public Overridable Function GetSecurityStampAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetSecurityStampAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetSecurityStampAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetSecurityStampAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  id: SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: SetTwoFactorEnabledAsync(TUser, Boolean, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetTwoFactorEnabledAsync(TUser, Boolean, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetTwoFactorEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetTwoFactorEnabledAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 1195
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nSets a flag indicating whether the specified <span class=\"paramref\">user</span> has two factor authentication enabled or not,\nas an asynchronous operation.\n"
  example: []
  syntax:
    content: public virtual Task SetTwoFactorEnabledAsync(TUser user, bool enabled, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose two factor authentication enabled status should be set.
    - id: enabled
      type: System.Boolean
      description: A flag indicating whether the specified <span class="paramref">user</span> has two factor authentication enabled.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
    content.vb: Public Overridable Function SetTwoFactorEnabledAsync(user As TUser, enabled As Boolean, cancellationToken As CancellationToken = Nothing) As Task
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetTwoFactorEnabledAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetTwoFactorEnabledAsync(TUser, Boolean, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetTwoFactorEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
  id: GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetTwoFactorEnabledAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetTwoFactorEnabledAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetTwoFactorEnabledAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetTwoFactorEnabledAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 1217
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nReturns a flag indicating whether the specified <span class=\"paramref\">user</span> has two factor authentication enabled or not,\nas an asynchronous operation.\n"
  example: []
  syntax:
    content: public virtual Task<bool> GetTwoFactorEnabledAsync(TUser user, CancellationToken cancellationToken = null)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose two factor authentication enabled status should be set.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing a flag indicating whether the specified \n<span class=\"paramref\">user</span> has two factor authentication enabled or not.\n"
    content.vb: Public Overridable Function GetTwoFactorEnabledAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetTwoFactorEnabledAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetTwoFactorEnabledAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetTwoFactorEnabledAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
  id: GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetUsersForClaimAsync(Claim, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetUsersForClaimAsync(Claim, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetUsersForClaimAsync(System.Security.Claims.Claim, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetUsersForClaimAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 1236
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nRetrieves all users with the specified claim.\n"
  example: []
  syntax:
    content: public virtual Task<IList<TUser>> GetUsersForClaimAsync(Claim claim, CancellationToken cancellationToken = null)
    parameters:
    - id: claim
      type: System.Security.Claims.Claim
      description: The claim whose users should be retrieved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{{TUser}}}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> contains a list of users, if any, that contain the specified claim. \n"
    content.vb: Public Overridable Function GetUsersForClaimAsync(claim As Claim, cancellationToken As CancellationToken = Nothing) As Task(Of IList(Of TUser))
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetUsersForClaimAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetUsersForClaimAsync(Claim, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetUsersForClaimAsync(System.Security.Claims.Claim, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
  id: GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetUsersInRoleAsync(String, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetUsersInRoleAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetUsersInRoleAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetUsersInRoleAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 1262
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nRetrieves all users in the specified role.\n"
  example: []
  syntax:
    content: public virtual Task<IList<TUser>> GetUsersInRoleAsync(string normalizedRoleName, CancellationToken cancellationToken = null)
    parameters:
    - id: normalizedRoleName
      type: System.String
      description: The role whose users should be retrieved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{{TUser}}}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> contains a list of users, if any, that are in the specified role. \n"
    content.vb: Public Overridable Function GetUsersInRoleAsync(normalizedRoleName As String, cancellationToken As CancellationToken = Nothing) As Task(Of IList(Of TUser))
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetUsersInRoleAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetUsersInRoleAsync(String, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetUsersInRoleAsync(System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
  id: SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: SetTokenAsync(TUser, String, String, String, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetTokenAsync(TUser, String, String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetTokenAsync(TUser, System.String, System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetTokenAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 1292
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  syntax:
    content: public virtual Task SetTokenAsync(TUser user, string loginProvider, string name, string value, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
    - id: loginProvider
      type: System.String
    - id: name
      type: System.String
    - id: value
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function SetTokenAsync(user As TUser, loginProvider As String, name As String, value As String, cancellationToken As CancellationToken) As Task
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetTokenAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetTokenAsync(TUser, String, String, String, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetTokenAsync(TUser, System.String, System.String, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  id: RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: RemoveTokenAsync(TUser, String, String, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.RemoveTokenAsync(TUser, String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.RemoveTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RemoveTokenAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 1313
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  syntax:
    content: public Task RemoveTokenAsync(TUser user, string loginProvider, string name, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
    - id: loginProvider
      type: System.String
    - id: name
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function RemoveTokenAsync(user As TUser, loginProvider As String, name As String, cancellationToken As CancellationToken) As Task
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.RemoveTokenAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).RemoveTokenAsync(TUser, String, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).RemoveTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  id: GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetTokenAsync(TUser, String, String, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetTokenAsync(TUser, String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetTokenAsync
    path: ../aspnet/Identity/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 1330
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  syntax:
    content: public Task<string> GetTokenAsync(TUser user, string loginProvider, string name, CancellationToken cancellationToken)
    parameters:
    - id: user
      type: '{TUser}'
    - id: loginProvider
      type: System.String
    - id: name
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Public Function GetTokenAsync(user As TUser, loginProvider As String, name As String, cancellationToken As CancellationToken) As Task(Of String)
  overload: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetTokenAsync*
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetTokenAsync(TUser, String, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
references:
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  commentId: N:Microsoft.AspNetCore.Identity.EntityFrameworkCore
  isExternal: false
  name: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  nameWithType: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: IUserRoleStore{{TUser}}
  commentId: '!:IUserRoleStore{`0}'
  definition: IUserRoleStore`1
  name: IUserRoleStore<TUser>
  nameWithType: IUserRoleStore<TUser>
  fullName: IUserRoleStore<TUser>
  nameWithType.vb: IUserRoleStore(Of TUser)
  fullName.vb: IUserRoleStore(Of TUser)
  name.vb: IUserRoleStore(Of TUser)
  spec.csharp:
  - uid: IUserRoleStore`1
    name: IUserRoleStore
    nameWithType: IUserRoleStore
    fullName: IUserRoleStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IUserRoleStore`1
    name: IUserRoleStore
    nameWithType: IUserRoleStore
    fullName: IUserRoleStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: IUserClaimStore{{TUser}}
  commentId: '!:IUserClaimStore{`0}'
  definition: IUserClaimStore`1
  name: IUserClaimStore<TUser>
  nameWithType: IUserClaimStore<TUser>
  fullName: IUserClaimStore<TUser>
  nameWithType.vb: IUserClaimStore(Of TUser)
  fullName.vb: IUserClaimStore(Of TUser)
  name.vb: IUserClaimStore(Of TUser)
  spec.csharp:
  - uid: IUserClaimStore`1
    name: IUserClaimStore
    nameWithType: IUserClaimStore
    fullName: IUserClaimStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IUserClaimStore`1
    name: IUserClaimStore
    nameWithType: IUserClaimStore
    fullName: IUserClaimStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: IUserPasswordStore{{TUser}}
  commentId: '!:IUserPasswordStore{`0}'
  definition: IUserPasswordStore`1
  name: IUserPasswordStore<TUser>
  nameWithType: IUserPasswordStore<TUser>
  fullName: IUserPasswordStore<TUser>
  nameWithType.vb: IUserPasswordStore(Of TUser)
  fullName.vb: IUserPasswordStore(Of TUser)
  name.vb: IUserPasswordStore(Of TUser)
  spec.csharp:
  - uid: IUserPasswordStore`1
    name: IUserPasswordStore
    nameWithType: IUserPasswordStore
    fullName: IUserPasswordStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IUserPasswordStore`1
    name: IUserPasswordStore
    nameWithType: IUserPasswordStore
    fullName: IUserPasswordStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: IUserSecurityStampStore{{TUser}}
  commentId: '!:IUserSecurityStampStore{`0}'
  definition: IUserSecurityStampStore`1
  name: IUserSecurityStampStore<TUser>
  nameWithType: IUserSecurityStampStore<TUser>
  fullName: IUserSecurityStampStore<TUser>
  nameWithType.vb: IUserSecurityStampStore(Of TUser)
  fullName.vb: IUserSecurityStampStore(Of TUser)
  name.vb: IUserSecurityStampStore(Of TUser)
  spec.csharp:
  - uid: IUserSecurityStampStore`1
    name: IUserSecurityStampStore
    nameWithType: IUserSecurityStampStore
    fullName: IUserSecurityStampStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IUserSecurityStampStore`1
    name: IUserSecurityStampStore
    nameWithType: IUserSecurityStampStore
    fullName: IUserSecurityStampStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: IUserEmailStore{{TUser}}
  commentId: '!:IUserEmailStore{`0}'
  definition: IUserEmailStore`1
  name: IUserEmailStore<TUser>
  nameWithType: IUserEmailStore<TUser>
  fullName: IUserEmailStore<TUser>
  nameWithType.vb: IUserEmailStore(Of TUser)
  fullName.vb: IUserEmailStore(Of TUser)
  name.vb: IUserEmailStore(Of TUser)
  spec.csharp:
  - uid: IUserEmailStore`1
    name: IUserEmailStore
    nameWithType: IUserEmailStore
    fullName: IUserEmailStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IUserEmailStore`1
    name: IUserEmailStore
    nameWithType: IUserEmailStore
    fullName: IUserEmailStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: IUserLockoutStore{{TUser}}
  commentId: '!:IUserLockoutStore{`0}'
  definition: IUserLockoutStore`1
  name: IUserLockoutStore<TUser>
  nameWithType: IUserLockoutStore<TUser>
  fullName: IUserLockoutStore<TUser>
  nameWithType.vb: IUserLockoutStore(Of TUser)
  fullName.vb: IUserLockoutStore(Of TUser)
  name.vb: IUserLockoutStore(Of TUser)
  spec.csharp:
  - uid: IUserLockoutStore`1
    name: IUserLockoutStore
    nameWithType: IUserLockoutStore
    fullName: IUserLockoutStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IUserLockoutStore`1
    name: IUserLockoutStore
    nameWithType: IUserLockoutStore
    fullName: IUserLockoutStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: IUserPhoneNumberStore{{TUser}}
  commentId: '!:IUserPhoneNumberStore{`0}'
  definition: IUserPhoneNumberStore`1
  name: IUserPhoneNumberStore<TUser>
  nameWithType: IUserPhoneNumberStore<TUser>
  fullName: IUserPhoneNumberStore<TUser>
  nameWithType.vb: IUserPhoneNumberStore(Of TUser)
  fullName.vb: IUserPhoneNumberStore(Of TUser)
  name.vb: IUserPhoneNumberStore(Of TUser)
  spec.csharp:
  - uid: IUserPhoneNumberStore`1
    name: IUserPhoneNumberStore
    nameWithType: IUserPhoneNumberStore
    fullName: IUserPhoneNumberStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IUserPhoneNumberStore`1
    name: IUserPhoneNumberStore
    nameWithType: IUserPhoneNumberStore
    fullName: IUserPhoneNumberStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: IQueryableUserStore{{TUser}}
  commentId: '!:IQueryableUserStore{`0}'
  definition: IQueryableUserStore`1
  name: IQueryableUserStore<TUser>
  nameWithType: IQueryableUserStore<TUser>
  fullName: IQueryableUserStore<TUser>
  nameWithType.vb: IQueryableUserStore(Of TUser)
  fullName.vb: IQueryableUserStore(Of TUser)
  name.vb: IQueryableUserStore(Of TUser)
  spec.csharp:
  - uid: IQueryableUserStore`1
    name: IQueryableUserStore
    nameWithType: IQueryableUserStore
    fullName: IQueryableUserStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IQueryableUserStore`1
    name: IQueryableUserStore
    nameWithType: IQueryableUserStore
    fullName: IQueryableUserStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: IUserTwoFactorStore{{TUser}}
  commentId: '!:IUserTwoFactorStore{`0}'
  definition: IUserTwoFactorStore`1
  name: IUserTwoFactorStore<TUser>
  nameWithType: IUserTwoFactorStore<TUser>
  fullName: IUserTwoFactorStore<TUser>
  nameWithType.vb: IUserTwoFactorStore(Of TUser)
  fullName.vb: IUserTwoFactorStore(Of TUser)
  name.vb: IUserTwoFactorStore(Of TUser)
  spec.csharp:
  - uid: IUserTwoFactorStore`1
    name: IUserTwoFactorStore
    nameWithType: IUserTwoFactorStore
    fullName: IUserTwoFactorStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IUserTwoFactorStore`1
    name: IUserTwoFactorStore
    nameWithType: IUserTwoFactorStore
    fullName: IUserTwoFactorStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: IUserAuthenticationTokenStore{{TUser}}
  commentId: '!:IUserAuthenticationTokenStore{`0}'
  definition: IUserAuthenticationTokenStore`1
  name: IUserAuthenticationTokenStore<TUser>
  nameWithType: IUserAuthenticationTokenStore<TUser>
  fullName: IUserAuthenticationTokenStore<TUser>
  nameWithType.vb: IUserAuthenticationTokenStore(Of TUser)
  fullName.vb: IUserAuthenticationTokenStore(Of TUser)
  name.vb: IUserAuthenticationTokenStore(Of TUser)
  spec.csharp:
  - uid: IUserAuthenticationTokenStore`1
    name: IUserAuthenticationTokenStore
    nameWithType: IUserAuthenticationTokenStore
    fullName: IUserAuthenticationTokenStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IUserAuthenticationTokenStore`1
    name: IUserAuthenticationTokenStore
    nameWithType: IUserAuthenticationTokenStore
    fullName: IUserAuthenticationTokenStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: IUserRoleStore`1
  isExternal: true
  name: IUserRoleStore<>
  nameWithType: IUserRoleStore<>
  fullName: IUserRoleStore<>
  nameWithType.vb: IUserRoleStore(Of )
  fullName.vb: IUserRoleStore(Of )
  name.vb: IUserRoleStore(Of )
  spec.csharp:
  - uid: IUserRoleStore`1
    name: IUserRoleStore
    nameWithType: IUserRoleStore
    fullName: IUserRoleStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IUserRoleStore`1
    name: IUserRoleStore
    nameWithType: IUserRoleStore
    fullName: IUserRoleStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IUserClaimStore`1
  isExternal: true
  name: IUserClaimStore<>
  nameWithType: IUserClaimStore<>
  fullName: IUserClaimStore<>
  nameWithType.vb: IUserClaimStore(Of )
  fullName.vb: IUserClaimStore(Of )
  name.vb: IUserClaimStore(Of )
  spec.csharp:
  - uid: IUserClaimStore`1
    name: IUserClaimStore
    nameWithType: IUserClaimStore
    fullName: IUserClaimStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IUserClaimStore`1
    name: IUserClaimStore
    nameWithType: IUserClaimStore
    fullName: IUserClaimStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IUserPasswordStore`1
  isExternal: true
  name: IUserPasswordStore<>
  nameWithType: IUserPasswordStore<>
  fullName: IUserPasswordStore<>
  nameWithType.vb: IUserPasswordStore(Of )
  fullName.vb: IUserPasswordStore(Of )
  name.vb: IUserPasswordStore(Of )
  spec.csharp:
  - uid: IUserPasswordStore`1
    name: IUserPasswordStore
    nameWithType: IUserPasswordStore
    fullName: IUserPasswordStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IUserPasswordStore`1
    name: IUserPasswordStore
    nameWithType: IUserPasswordStore
    fullName: IUserPasswordStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IUserSecurityStampStore`1
  isExternal: true
  name: IUserSecurityStampStore<>
  nameWithType: IUserSecurityStampStore<>
  fullName: IUserSecurityStampStore<>
  nameWithType.vb: IUserSecurityStampStore(Of )
  fullName.vb: IUserSecurityStampStore(Of )
  name.vb: IUserSecurityStampStore(Of )
  spec.csharp:
  - uid: IUserSecurityStampStore`1
    name: IUserSecurityStampStore
    nameWithType: IUserSecurityStampStore
    fullName: IUserSecurityStampStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IUserSecurityStampStore`1
    name: IUserSecurityStampStore
    nameWithType: IUserSecurityStampStore
    fullName: IUserSecurityStampStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IUserEmailStore`1
  isExternal: true
  name: IUserEmailStore<>
  nameWithType: IUserEmailStore<>
  fullName: IUserEmailStore<>
  nameWithType.vb: IUserEmailStore(Of )
  fullName.vb: IUserEmailStore(Of )
  name.vb: IUserEmailStore(Of )
  spec.csharp:
  - uid: IUserEmailStore`1
    name: IUserEmailStore
    nameWithType: IUserEmailStore
    fullName: IUserEmailStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IUserEmailStore`1
    name: IUserEmailStore
    nameWithType: IUserEmailStore
    fullName: IUserEmailStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IUserLockoutStore`1
  isExternal: true
  name: IUserLockoutStore<>
  nameWithType: IUserLockoutStore<>
  fullName: IUserLockoutStore<>
  nameWithType.vb: IUserLockoutStore(Of )
  fullName.vb: IUserLockoutStore(Of )
  name.vb: IUserLockoutStore(Of )
  spec.csharp:
  - uid: IUserLockoutStore`1
    name: IUserLockoutStore
    nameWithType: IUserLockoutStore
    fullName: IUserLockoutStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IUserLockoutStore`1
    name: IUserLockoutStore
    nameWithType: IUserLockoutStore
    fullName: IUserLockoutStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IUserPhoneNumberStore`1
  isExternal: true
  name: IUserPhoneNumberStore<>
  nameWithType: IUserPhoneNumberStore<>
  fullName: IUserPhoneNumberStore<>
  nameWithType.vb: IUserPhoneNumberStore(Of )
  fullName.vb: IUserPhoneNumberStore(Of )
  name.vb: IUserPhoneNumberStore(Of )
  spec.csharp:
  - uid: IUserPhoneNumberStore`1
    name: IUserPhoneNumberStore
    nameWithType: IUserPhoneNumberStore
    fullName: IUserPhoneNumberStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IUserPhoneNumberStore`1
    name: IUserPhoneNumberStore
    nameWithType: IUserPhoneNumberStore
    fullName: IUserPhoneNumberStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IQueryableUserStore`1
  isExternal: true
  name: IQueryableUserStore<>
  nameWithType: IQueryableUserStore<>
  fullName: IQueryableUserStore<>
  nameWithType.vb: IQueryableUserStore(Of )
  fullName.vb: IQueryableUserStore(Of )
  name.vb: IQueryableUserStore(Of )
  spec.csharp:
  - uid: IQueryableUserStore`1
    name: IQueryableUserStore
    nameWithType: IQueryableUserStore
    fullName: IQueryableUserStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IQueryableUserStore`1
    name: IQueryableUserStore
    nameWithType: IQueryableUserStore
    fullName: IQueryableUserStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IUserTwoFactorStore`1
  isExternal: true
  name: IUserTwoFactorStore<>
  nameWithType: IUserTwoFactorStore<>
  fullName: IUserTwoFactorStore<>
  nameWithType.vb: IUserTwoFactorStore(Of )
  fullName.vb: IUserTwoFactorStore(Of )
  name.vb: IUserTwoFactorStore(Of )
  spec.csharp:
  - uid: IUserTwoFactorStore`1
    name: IUserTwoFactorStore
    nameWithType: IUserTwoFactorStore
    fullName: IUserTwoFactorStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IUserTwoFactorStore`1
    name: IUserTwoFactorStore
    nameWithType: IUserTwoFactorStore
    fullName: IUserTwoFactorStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IUserAuthenticationTokenStore`1
  isExternal: true
  name: IUserAuthenticationTokenStore<>
  nameWithType: IUserAuthenticationTokenStore<>
  fullName: IUserAuthenticationTokenStore<>
  nameWithType.vb: IUserAuthenticationTokenStore(Of )
  fullName.vb: IUserAuthenticationTokenStore(Of )
  name.vb: IUserAuthenticationTokenStore(Of )
  spec.csharp:
  - uid: IUserAuthenticationTokenStore`1
    name: IUserAuthenticationTokenStore
    nameWithType: IUserAuthenticationTokenStore
    fullName: IUserAuthenticationTokenStore
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IUserAuthenticationTokenStore`1
    name: IUserAuthenticationTokenStore
    nameWithType: IUserAuthenticationTokenStore
    fullName: IUserAuthenticationTokenStore
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore
  commentId: T:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore
  isExternal: false
  name: UserStore
  nameWithType: UserStore
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.#ctor*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.#ctor
  isExternal: false
  name: UserStore
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.UserStore
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.UserStore
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).UserStore
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).UserStore
- uid: '{TContext}'
  commentId: '!:TContext'
  definition: TContext
  name: TContext
  nameWithType: TContext
  fullName: TContext
- uid: IdentityErrorDescriber
  isExternal: true
  name: IdentityErrorDescriber
  nameWithType: IdentityErrorDescriber
  fullName: IdentityErrorDescriber
- uid: TContext
  isExternal: false
  name: TContext
  nameWithType: TContext
  fullName: TContext
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.Context*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.Context
  isExternal: false
  name: Context
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.Context
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.Context
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).Context
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).Context
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ErrorDescriber*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ErrorDescriber
  isExternal: false
  name: ErrorDescriber
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.ErrorDescriber
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.ErrorDescriber
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).ErrorDescriber
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).ErrorDescriber
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateUserRole*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateUserRole
  isExternal: false
  name: CreateUserRole
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.CreateUserRole
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.CreateUserRole
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).CreateUserRole
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).CreateUserRole
- uid: '{TUser}'
  commentId: '!:TUser'
  definition: TUser
  name: TUser
  nameWithType: TUser
  fullName: TUser
- uid: '{TRole}'
  commentId: '!:TRole'
  definition: TRole
  name: TRole
  nameWithType: TRole
  fullName: TRole
- uid: '{TUserRole}'
  commentId: '!:TUserRole'
  definition: TUserRole
  name: TUserRole
  nameWithType: TUserRole
  fullName: TUserRole
- uid: TUser
  isExternal: false
  name: TUser
  nameWithType: TUser
  fullName: TUser
- uid: TRole
  isExternal: false
  name: TRole
  nameWithType: TRole
  fullName: TRole
- uid: TUserRole
  commentId: '!:TUserRole'
  isExternal: false
  name: TUserRole
  nameWithType: TUserRole
  fullName: TUserRole
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateUserClaim*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateUserClaim
  isExternal: false
  name: CreateUserClaim
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.CreateUserClaim
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.CreateUserClaim
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).CreateUserClaim
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).CreateUserClaim
- uid: System.Security.Claims.Claim
  commentId: T:System.Security.Claims.Claim
  parent: System.Security.Claims
  isExternal: true
  name: Claim
  nameWithType: Claim
  fullName: System.Security.Claims.Claim
- uid: '{TUserClaim}'
  commentId: '!:TUserClaim'
  definition: TUserClaim
  name: TUserClaim
  nameWithType: TUserClaim
  fullName: TUserClaim
- uid: System.Security.Claims
  commentId: N:System.Security.Claims
  isExternal: false
  name: System.Security.Claims
  nameWithType: System.Security.Claims
  fullName: System.Security.Claims
- uid: TUserClaim
  commentId: '!:TUserClaim'
  isExternal: false
  name: TUserClaim
  nameWithType: TUserClaim
  fullName: TUserClaim
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateUserLogin*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateUserLogin
  isExternal: false
  name: CreateUserLogin
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.CreateUserLogin
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.CreateUserLogin
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).CreateUserLogin
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).CreateUserLogin
- uid: UserLoginInfo
  isExternal: true
  name: UserLoginInfo
  nameWithType: UserLoginInfo
  fullName: UserLoginInfo
- uid: '{TUserLogin}'
  commentId: '!:TUserLogin'
  definition: TUserLogin
  name: TUserLogin
  nameWithType: TUserLogin
  fullName: TUserLogin
- uid: TUserLogin
  commentId: '!:TUserLogin'
  isExternal: false
  name: TUserLogin
  nameWithType: TUserLogin
  fullName: TUserLogin
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateUserToken*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateUserToken
  isExternal: false
  name: CreateUserToken
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.CreateUserToken
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.CreateUserToken
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).CreateUserToken
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).CreateUserToken
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: '{TUserToken}'
  commentId: '!:TUserToken'
  definition: TUserToken
  name: TUserToken
  nameWithType: TUserToken
  fullName: TUserToken
- uid: TUserToken
  commentId: '!:TUserToken'
  isExternal: false
  name: TUserToken
  nameWithType: TUserToken
  fullName: TUserToken
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.AutoSaveChanges*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.AutoSaveChanges
  isExternal: false
  name: AutoSaveChanges
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.AutoSaveChanges
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.AutoSaveChanges
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).AutoSaveChanges
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).AutoSaveChanges
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SaveChanges*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SaveChanges
  isExternal: false
  name: SaveChanges
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SaveChanges
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SaveChanges
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SaveChanges
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SaveChanges
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetUserIdAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetUserIdAsync
  isExternal: false
  name: GetUserIdAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetUserIdAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetUserIdAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetUserIdAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetUserIdAsync
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetUserNameAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetUserNameAsync
  isExternal: false
  name: GetUserNameAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetUserNameAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetUserNameAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetUserNameAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetUserNameAsync
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetUserNameAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetUserNameAsync
  isExternal: false
  name: SetUserNameAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetUserNameAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetUserNameAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetUserNameAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetUserNameAsync
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetNormalizedUserNameAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetNormalizedUserNameAsync
  isExternal: false
  name: GetNormalizedUserNameAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetNormalizedUserNameAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetNormalizedUserNameAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetNormalizedUserNameAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetNormalizedUserNameAsync
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetNormalizedUserNameAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetNormalizedUserNameAsync
  isExternal: false
  name: SetNormalizedUserNameAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetNormalizedUserNameAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetNormalizedUserNameAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetNormalizedUserNameAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetNormalizedUserNameAsync
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateAsync
  isExternal: false
  name: CreateAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.CreateAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.CreateAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).CreateAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).CreateAsync
- uid: System.Threading.Tasks.Task{IdentityResult}
  commentId: T:System.Threading.Tasks.Task{IdentityResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IdentityResult>
  nameWithType: Task<IdentityResult>
  fullName: System.Threading.Tasks.Task<IdentityResult>
  nameWithType.vb: Task(Of IdentityResult)
  fullName.vb: System.Threading.Tasks.Task(Of IdentityResult)
  name.vb: Task(Of IdentityResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IdentityResult
    name: IdentityResult
    nameWithType: IdentityResult
    fullName: IdentityResult
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IdentityResult
    name: IdentityResult
    nameWithType: IdentityResult
    fullName: IdentityResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.UpdateAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.UpdateAsync
  isExternal: false
  name: UpdateAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.UpdateAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.UpdateAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).UpdateAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).UpdateAsync
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.DeleteAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.DeleteAsync
  isExternal: false
  name: DeleteAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.DeleteAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.DeleteAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).DeleteAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).DeleteAsync
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.FindByIdAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.FindByIdAsync
  isExternal: false
  name: FindByIdAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.FindByIdAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.FindByIdAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).FindByIdAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).FindByIdAsync
- uid: System.Threading.Tasks.Task{{TUser}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TUser>
  nameWithType: Task<TUser>
  fullName: System.Threading.Tasks.Task<TUser>
  nameWithType.vb: Task(Of TUser)
  fullName.vb: System.Threading.Tasks.Task(Of TUser)
  name.vb: Task(Of TUser)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ConvertIdFromString*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ConvertIdFromString
  isExternal: false
  name: ConvertIdFromString
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.ConvertIdFromString
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.ConvertIdFromString
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).ConvertIdFromString
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).ConvertIdFromString
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TKey
  isExternal: false
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ConvertIdToString*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ConvertIdToString
  isExternal: false
  name: ConvertIdToString
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.ConvertIdToString
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.ConvertIdToString
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).ConvertIdToString
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).ConvertIdToString
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.FindByNameAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.FindByNameAsync
  isExternal: false
  name: FindByNameAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.FindByNameAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.FindByNameAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).FindByNameAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).FindByNameAsync
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.Users*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.Users
  isExternal: false
  name: Users
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.Users
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.Users
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).Users
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).Users
- uid: System.Linq.IQueryable{{TUser}}
  commentId: T:System.Linq.IQueryable{`0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TUser>
  nameWithType: IQueryable<TUser>
  fullName: System.Linq.IQueryable<TUser>
  nameWithType.vb: IQueryable(Of TUser)
  fullName.vb: System.Linq.IQueryable(Of TUser)
  name.vb: IQueryable(Of TUser)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  isExternal: true
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: false
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetPasswordHashAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetPasswordHashAsync
  isExternal: false
  name: SetPasswordHashAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetPasswordHashAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetPasswordHashAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetPasswordHashAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetPasswordHashAsync
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetPasswordHashAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetPasswordHashAsync
  isExternal: false
  name: GetPasswordHashAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetPasswordHashAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetPasswordHashAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetPasswordHashAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetPasswordHashAsync
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.HasPasswordAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.HasPasswordAsync
  isExternal: false
  name: HasPasswordAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.HasPasswordAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.HasPasswordAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).HasPasswordAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).HasPasswordAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.AddToRoleAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.AddToRoleAsync
  isExternal: false
  name: AddToRoleAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.AddToRoleAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.AddToRoleAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).AddToRoleAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).AddToRoleAsync
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.RemoveFromRoleAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.RemoveFromRoleAsync
  isExternal: false
  name: RemoveFromRoleAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.RemoveFromRoleAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.RemoveFromRoleAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).RemoveFromRoleAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).RemoveFromRoleAsync
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetRolesAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetRolesAsync
  isExternal: false
  name: GetRolesAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetRolesAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetRolesAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetRolesAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetRolesAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IList{System.String}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IList{System.String}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IList<String>>
  nameWithType: Task<IList<String>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IList<System.String>>
  nameWithType.vb: Task(Of IList(Of String))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of System.String))
  name.vb: Task(Of IList(Of String))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.IsInRoleAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.IsInRoleAsync
  isExternal: false
  name: IsInRoleAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.IsInRoleAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.IsInRoleAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).IsInRoleAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).IsInRoleAsync
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ThrowIfDisposed*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ThrowIfDisposed
  isExternal: false
  name: ThrowIfDisposed
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.ThrowIfDisposed
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.ThrowIfDisposed
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).ThrowIfDisposed
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).ThrowIfDisposed
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.Dispose*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.Dispose
  isExternal: false
  name: Dispose
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.Dispose
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.Dispose
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).Dispose
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).Dispose
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetClaimsAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetClaimsAsync
  isExternal: false
  name: GetClaimsAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetClaimsAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetClaimsAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetClaimsAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetClaimsAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IList{System.Security.Claims.Claim}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IList{System.Security.Claims.Claim}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IList<Claim>>
  nameWithType: Task<IList<Claim>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IList<System.Security.Claims.Claim>>
  nameWithType.vb: Task(Of IList(Of Claim))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of System.Security.Claims.Claim))
  name.vb: Task(Of IList(Of Claim))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.AddClaimsAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.AddClaimsAsync
  isExternal: false
  name: AddClaimsAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.AddClaimsAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.AddClaimsAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).AddClaimsAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).AddClaimsAsync
- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
  commentId: T:System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Claim>
  nameWithType: IEnumerable<Claim>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>
  nameWithType.vb: IEnumerable(Of Claim)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim)
  name.vb: IEnumerable(Of Claim)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ReplaceClaimAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ReplaceClaimAsync
  isExternal: false
  name: ReplaceClaimAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.ReplaceClaimAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.ReplaceClaimAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).ReplaceClaimAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).ReplaceClaimAsync
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.RemoveClaimsAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.RemoveClaimsAsync
  isExternal: false
  name: RemoveClaimsAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.RemoveClaimsAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.RemoveClaimsAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).RemoveClaimsAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).RemoveClaimsAsync
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.AddLoginAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.AddLoginAsync
  isExternal: false
  name: AddLoginAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.AddLoginAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.AddLoginAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).AddLoginAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).AddLoginAsync
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.RemoveLoginAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.RemoveLoginAsync
  isExternal: false
  name: RemoveLoginAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.RemoveLoginAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.RemoveLoginAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).RemoveLoginAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).RemoveLoginAsync
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetLoginsAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetLoginsAsync
  isExternal: false
  name: GetLoginsAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetLoginsAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetLoginsAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetLoginsAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetLoginsAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IList{UserLoginInfo}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IList{UserLoginInfo}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IList<UserLoginInfo>>
  nameWithType: Task<IList<UserLoginInfo>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IList<UserLoginInfo>>
  nameWithType.vb: Task(Of IList(Of UserLoginInfo))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of UserLoginInfo))
  name.vb: Task(Of IList(Of UserLoginInfo))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: UserLoginInfo
    name: UserLoginInfo
    nameWithType: UserLoginInfo
    fullName: UserLoginInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: UserLoginInfo
    name: UserLoginInfo
    nameWithType: UserLoginInfo
    fullName: UserLoginInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.FindByLoginAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.FindByLoginAsync
  isExternal: false
  name: FindByLoginAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.FindByLoginAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.FindByLoginAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).FindByLoginAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).FindByLoginAsync
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetEmailConfirmedAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetEmailConfirmedAsync
  isExternal: false
  name: GetEmailConfirmedAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetEmailConfirmedAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetEmailConfirmedAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetEmailConfirmedAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetEmailConfirmedAsync
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetEmailConfirmedAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetEmailConfirmedAsync
  isExternal: false
  name: SetEmailConfirmedAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetEmailConfirmedAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetEmailConfirmedAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetEmailConfirmedAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetEmailConfirmedAsync
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetEmailAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetEmailAsync
  isExternal: false
  name: SetEmailAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetEmailAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetEmailAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetEmailAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetEmailAsync
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetEmailAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetEmailAsync
  isExternal: false
  name: GetEmailAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetEmailAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetEmailAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetEmailAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetEmailAsync
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetNormalizedEmailAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetNormalizedEmailAsync
  isExternal: false
  name: GetNormalizedEmailAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetNormalizedEmailAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetNormalizedEmailAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetNormalizedEmailAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetNormalizedEmailAsync
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetNormalizedEmailAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetNormalizedEmailAsync
  isExternal: false
  name: SetNormalizedEmailAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetNormalizedEmailAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetNormalizedEmailAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetNormalizedEmailAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetNormalizedEmailAsync
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.FindByEmailAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.FindByEmailAsync
  isExternal: false
  name: FindByEmailAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.FindByEmailAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.FindByEmailAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).FindByEmailAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).FindByEmailAsync
- uid: System.DateTimeOffset
  commentId: T:System.DateTimeOffset
  parent: System
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetLockoutEndDateAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetLockoutEndDateAsync
  isExternal: false
  name: GetLockoutEndDateAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetLockoutEndDateAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetLockoutEndDateAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetLockoutEndDateAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetLockoutEndDateAsync
- uid: System.Threading.Tasks.Task{System.Nullable{System.DateTimeOffset}}
  commentId: T:System.Threading.Tasks.Task{System.Nullable{System.DateTimeOffset}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Nullable<DateTimeOffset>>
  nameWithType: Task<Nullable<DateTimeOffset>>
  fullName: System.Threading.Tasks.Task<System.Nullable<System.DateTimeOffset>>
  nameWithType.vb: Task(Of Nullable(Of DateTimeOffset))
  fullName.vb: System.Threading.Tasks.Task(Of System.Nullable(Of System.DateTimeOffset))
  name.vb: Task(Of Nullable(Of DateTimeOffset))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetLockoutEndDateAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetLockoutEndDateAsync
  isExternal: false
  name: SetLockoutEndDateAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetLockoutEndDateAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetLockoutEndDateAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetLockoutEndDateAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetLockoutEndDateAsync
- uid: System.Nullable{System.DateTimeOffset}
  commentId: T:System.Nullable{System.DateTimeOffset}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTimeOffset>
  nameWithType: Nullable<DateTimeOffset>
  fullName: System.Nullable<System.DateTimeOffset>
  nameWithType.vb: Nullable(Of DateTimeOffset)
  fullName.vb: System.Nullable(Of System.DateTimeOffset)
  name.vb: Nullable(Of DateTimeOffset)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.IncrementAccessFailedCountAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.IncrementAccessFailedCountAsync
  isExternal: false
  name: IncrementAccessFailedCountAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.IncrementAccessFailedCountAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.IncrementAccessFailedCountAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).IncrementAccessFailedCountAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).IncrementAccessFailedCountAsync
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullName.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ResetAccessFailedCountAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ResetAccessFailedCountAsync
  isExternal: false
  name: ResetAccessFailedCountAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.ResetAccessFailedCountAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.ResetAccessFailedCountAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).ResetAccessFailedCountAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).ResetAccessFailedCountAsync
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetAccessFailedCountAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetAccessFailedCountAsync
  isExternal: false
  name: GetAccessFailedCountAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetAccessFailedCountAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetAccessFailedCountAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetAccessFailedCountAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetAccessFailedCountAsync
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetLockoutEnabledAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetLockoutEnabledAsync
  isExternal: false
  name: GetLockoutEnabledAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetLockoutEnabledAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetLockoutEnabledAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetLockoutEnabledAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetLockoutEnabledAsync
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetLockoutEnabledAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetLockoutEnabledAsync
  isExternal: false
  name: SetLockoutEnabledAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetLockoutEnabledAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetLockoutEnabledAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetLockoutEnabledAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetLockoutEnabledAsync
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetPhoneNumberAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetPhoneNumberAsync
  isExternal: false
  name: SetPhoneNumberAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetPhoneNumberAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetPhoneNumberAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetPhoneNumberAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetPhoneNumberAsync
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetPhoneNumberAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetPhoneNumberAsync
  isExternal: false
  name: GetPhoneNumberAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetPhoneNumberAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetPhoneNumberAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetPhoneNumberAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetPhoneNumberAsync
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetPhoneNumberConfirmedAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetPhoneNumberConfirmedAsync
  isExternal: false
  name: GetPhoneNumberConfirmedAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetPhoneNumberConfirmedAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetPhoneNumberConfirmedAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetPhoneNumberConfirmedAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetPhoneNumberConfirmedAsync
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetPhoneNumberConfirmedAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetPhoneNumberConfirmedAsync
  isExternal: false
  name: SetPhoneNumberConfirmedAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetPhoneNumberConfirmedAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetPhoneNumberConfirmedAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetPhoneNumberConfirmedAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetPhoneNumberConfirmedAsync
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetSecurityStampAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetSecurityStampAsync
  isExternal: false
  name: SetSecurityStampAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetSecurityStampAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetSecurityStampAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetSecurityStampAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetSecurityStampAsync
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetSecurityStampAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetSecurityStampAsync
  isExternal: false
  name: GetSecurityStampAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetSecurityStampAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetSecurityStampAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetSecurityStampAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetSecurityStampAsync
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetTwoFactorEnabledAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetTwoFactorEnabledAsync
  isExternal: false
  name: SetTwoFactorEnabledAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetTwoFactorEnabledAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetTwoFactorEnabledAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetTwoFactorEnabledAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetTwoFactorEnabledAsync
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetTwoFactorEnabledAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetTwoFactorEnabledAsync
  isExternal: false
  name: GetTwoFactorEnabledAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetTwoFactorEnabledAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetTwoFactorEnabledAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetTwoFactorEnabledAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetTwoFactorEnabledAsync
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetUsersForClaimAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetUsersForClaimAsync
  isExternal: false
  name: GetUsersForClaimAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetUsersForClaimAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetUsersForClaimAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetUsersForClaimAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetUsersForClaimAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IList{{TUser}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IList{`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IList<TUser>>
  nameWithType: Task<IList<TUser>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IList<TUser>>
  nameWithType.vb: Task(Of IList(Of TUser))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of TUser))
  name.vb: Task(Of IList(Of TUser))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetUsersInRoleAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetUsersInRoleAsync
  isExternal: false
  name: GetUsersInRoleAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetUsersInRoleAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetUsersInRoleAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetUsersInRoleAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetUsersInRoleAsync
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetTokenAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetTokenAsync
  isExternal: false
  name: SetTokenAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetTokenAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetTokenAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetTokenAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetTokenAsync
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.RemoveTokenAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.RemoveTokenAsync
  isExternal: false
  name: RemoveTokenAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.RemoveTokenAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.RemoveTokenAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).RemoveTokenAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).RemoveTokenAsync
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetTokenAsync*
  commentId: Overload:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetTokenAsync
  isExternal: false
  name: GetTokenAsync
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetTokenAsync
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetTokenAsync
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetTokenAsync
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetTokenAsync
shouldSkipMarkup: true
