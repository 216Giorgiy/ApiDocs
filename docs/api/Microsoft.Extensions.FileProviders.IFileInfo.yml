### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.FileProviders.IFileInfo
  commentId: T:Microsoft.Extensions.FileProviders.IFileInfo
  id: IFileInfo
  parent: Microsoft.Extensions.FileProviders
  children:
  - Microsoft.Extensions.FileProviders.IFileInfo.CreateReadStream
  - Microsoft.Extensions.FileProviders.IFileInfo.Exists
  - Microsoft.Extensions.FileProviders.IFileInfo.IsDirectory
  - Microsoft.Extensions.FileProviders.IFileInfo.LastModified
  - Microsoft.Extensions.FileProviders.IFileInfo.Length
  - Microsoft.Extensions.FileProviders.IFileInfo.Name
  - Microsoft.Extensions.FileProviders.IFileInfo.PhysicalPath
  langs:
  - csharp
  - vb
  name: IFileInfo
  nameWithType: IFileInfo
  fullName: Microsoft.Extensions.FileProviders.IFileInfo
  type: Interface
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Abstractions/IFileInfo.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: IFileInfo
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Abstractions/IFileInfo.cs
    startLine: 11
  assemblies:
  - Microsoft.Extensions.FileProviders.Abstractions
  namespace: Microsoft.Extensions.FileProviders
  summary: "\nRepresents a file in the given file provider.\n"
  example: []
  syntax:
    content: public interface IFileInfo
    content.vb: Public Interface IFileInfo
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.Extensions.FileProviders.IFileInfo.Exists
  commentId: P:Microsoft.Extensions.FileProviders.IFileInfo.Exists
  id: Exists
  parent: Microsoft.Extensions.FileProviders.IFileInfo
  langs:
  - csharp
  - vb
  name: Exists
  nameWithType: IFileInfo.Exists
  fullName: Microsoft.Extensions.FileProviders.IFileInfo.Exists
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Abstractions/IFileInfo.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: Exists
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Abstractions/IFileInfo.cs
    startLine: 16
  assemblies:
  - Microsoft.Extensions.FileProviders.Abstractions
  namespace: Microsoft.Extensions.FileProviders
  summary: "\nTrue if resource exists in the underlying storage system.\n"
  example: []
  syntax:
    content: bool Exists { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property Exists As Boolean
  overload: Microsoft.Extensions.FileProviders.IFileInfo.Exists*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.Extensions.FileProviders.IFileInfo.Length
  commentId: P:Microsoft.Extensions.FileProviders.IFileInfo.Length
  id: Length
  parent: Microsoft.Extensions.FileProviders.IFileInfo
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: IFileInfo.Length
  fullName: Microsoft.Extensions.FileProviders.IFileInfo.Length
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Abstractions/IFileInfo.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: Length
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Abstractions/IFileInfo.cs
    startLine: 21
  assemblies:
  - Microsoft.Extensions.FileProviders.Abstractions
  namespace: Microsoft.Extensions.FileProviders
  summary: "\nThe length of the file in bytes, or -1 for a directory or non-existing files.\n"
  example: []
  syntax:
    content: long Length { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: ReadOnly Property Length As Long
  overload: Microsoft.Extensions.FileProviders.IFileInfo.Length*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.Extensions.FileProviders.IFileInfo.PhysicalPath
  commentId: P:Microsoft.Extensions.FileProviders.IFileInfo.PhysicalPath
  id: PhysicalPath
  parent: Microsoft.Extensions.FileProviders.IFileInfo
  langs:
  - csharp
  - vb
  name: PhysicalPath
  nameWithType: IFileInfo.PhysicalPath
  fullName: Microsoft.Extensions.FileProviders.IFileInfo.PhysicalPath
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Abstractions/IFileInfo.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: PhysicalPath
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Abstractions/IFileInfo.cs
    startLine: 26
  assemblies:
  - Microsoft.Extensions.FileProviders.Abstractions
  namespace: Microsoft.Extensions.FileProviders
  summary: "\nThe path to the file, including the file name. Return null if the file is not directly accessible.\n"
  example: []
  syntax:
    content: string PhysicalPath { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property PhysicalPath As String
  overload: Microsoft.Extensions.FileProviders.IFileInfo.PhysicalPath*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.Extensions.FileProviders.IFileInfo.Name
  commentId: P:Microsoft.Extensions.FileProviders.IFileInfo.Name
  id: Name
  parent: Microsoft.Extensions.FileProviders.IFileInfo
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: IFileInfo.Name
  fullName: Microsoft.Extensions.FileProviders.IFileInfo.Name
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Abstractions/IFileInfo.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: Name
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Abstractions/IFileInfo.cs
    startLine: 31
  assemblies:
  - Microsoft.Extensions.FileProviders.Abstractions
  namespace: Microsoft.Extensions.FileProviders
  summary: "\nThe name of the file or directory, not including any path.\n"
  example: []
  syntax:
    content: string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property Name As String
  overload: Microsoft.Extensions.FileProviders.IFileInfo.Name*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.Extensions.FileProviders.IFileInfo.LastModified
  commentId: P:Microsoft.Extensions.FileProviders.IFileInfo.LastModified
  id: LastModified
  parent: Microsoft.Extensions.FileProviders.IFileInfo
  langs:
  - csharp
  - vb
  name: LastModified
  nameWithType: IFileInfo.LastModified
  fullName: Microsoft.Extensions.FileProviders.IFileInfo.LastModified
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Abstractions/IFileInfo.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: LastModified
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Abstractions/IFileInfo.cs
    startLine: 36
  assemblies:
  - Microsoft.Extensions.FileProviders.Abstractions
  namespace: Microsoft.Extensions.FileProviders
  summary: "\nWhen the file was last modified\n"
  example: []
  syntax:
    content: DateTimeOffset LastModified { get; }
    parameters: []
    return:
      type: DateTimeOffset
    content.vb: ReadOnly Property LastModified As DateTimeOffset
  overload: Microsoft.Extensions.FileProviders.IFileInfo.LastModified*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.Extensions.FileProviders.IFileInfo.IsDirectory
  commentId: P:Microsoft.Extensions.FileProviders.IFileInfo.IsDirectory
  id: IsDirectory
  parent: Microsoft.Extensions.FileProviders.IFileInfo
  langs:
  - csharp
  - vb
  name: IsDirectory
  nameWithType: IFileInfo.IsDirectory
  fullName: Microsoft.Extensions.FileProviders.IFileInfo.IsDirectory
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Abstractions/IFileInfo.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: IsDirectory
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Abstractions/IFileInfo.cs
    startLine: 41
  assemblies:
  - Microsoft.Extensions.FileProviders.Abstractions
  namespace: Microsoft.Extensions.FileProviders
  summary: "\nTrue for the case TryGetDirectoryContents has enumerated a sub-directory\n"
  example: []
  syntax:
    content: bool IsDirectory { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsDirectory As Boolean
  overload: Microsoft.Extensions.FileProviders.IFileInfo.IsDirectory*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.Extensions.FileProviders.IFileInfo.CreateReadStream
  commentId: M:Microsoft.Extensions.FileProviders.IFileInfo.CreateReadStream
  id: CreateReadStream
  parent: Microsoft.Extensions.FileProviders.IFileInfo
  langs:
  - csharp
  - vb
  name: CreateReadStream()
  nameWithType: IFileInfo.CreateReadStream()
  fullName: Microsoft.Extensions.FileProviders.IFileInfo.CreateReadStream()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Abstractions/IFileInfo.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: CreateReadStream
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Abstractions/IFileInfo.cs
    startLine: 47
  assemblies:
  - Microsoft.Extensions.FileProviders.Abstractions
  namespace: Microsoft.Extensions.FileProviders
  summary: "\nReturn file contents as readonly stream. Caller should dispose stream when complete.\n"
  example: []
  syntax:
    content: Stream CreateReadStream()
    return:
      type: Stream
      description: The file stream
    content.vb: Function CreateReadStream As Stream
  overload: Microsoft.Extensions.FileProviders.IFileInfo.CreateReadStream*
references:
- uid: Microsoft.Extensions.FileProviders
  commentId: N:Microsoft.Extensions.FileProviders
  isExternal: false
  name: Microsoft.Extensions.FileProviders
  nameWithType: Microsoft.Extensions.FileProviders
  fullName: Microsoft.Extensions.FileProviders
- uid: Microsoft.Extensions.FileProviders.IFileInfo.Exists*
  commentId: Overload:Microsoft.Extensions.FileProviders.IFileInfo.Exists
  isExternal: false
  name: Exists
  nameWithType: IFileInfo.Exists
  fullName: Microsoft.Extensions.FileProviders.IFileInfo.Exists
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.FileProviders.IFileInfo.Length*
  commentId: Overload:Microsoft.Extensions.FileProviders.IFileInfo.Length
  isExternal: false
  name: Length
  nameWithType: IFileInfo.Length
  fullName: Microsoft.Extensions.FileProviders.IFileInfo.Length
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.Extensions.FileProviders.IFileInfo.PhysicalPath*
  commentId: Overload:Microsoft.Extensions.FileProviders.IFileInfo.PhysicalPath
  isExternal: false
  name: PhysicalPath
  nameWithType: IFileInfo.PhysicalPath
  fullName: Microsoft.Extensions.FileProviders.IFileInfo.PhysicalPath
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Extensions.FileProviders.IFileInfo.Name*
  commentId: Overload:Microsoft.Extensions.FileProviders.IFileInfo.Name
  isExternal: false
  name: Name
  nameWithType: IFileInfo.Name
  fullName: Microsoft.Extensions.FileProviders.IFileInfo.Name
- uid: Microsoft.Extensions.FileProviders.IFileInfo.LastModified*
  commentId: Overload:Microsoft.Extensions.FileProviders.IFileInfo.LastModified
  isExternal: false
  name: LastModified
  nameWithType: IFileInfo.LastModified
  fullName: Microsoft.Extensions.FileProviders.IFileInfo.LastModified
- uid: DateTimeOffset
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: DateTimeOffset
- uid: Microsoft.Extensions.FileProviders.IFileInfo.IsDirectory*
  commentId: Overload:Microsoft.Extensions.FileProviders.IFileInfo.IsDirectory
  isExternal: false
  name: IsDirectory
  nameWithType: IFileInfo.IsDirectory
  fullName: Microsoft.Extensions.FileProviders.IFileInfo.IsDirectory
- uid: Microsoft.Extensions.FileProviders.IFileInfo.CreateReadStream*
  commentId: Overload:Microsoft.Extensions.FileProviders.IFileInfo.CreateReadStream
  isExternal: false
  name: CreateReadStream
  nameWithType: IFileInfo.CreateReadStream
  fullName: Microsoft.Extensions.FileProviders.IFileInfo.CreateReadStream
- uid: Stream
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: Stream
shouldSkipMarkup: true
