### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions
  commentId: T:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions
  id: MemoryCacheEntryExtensions
  parent: Microsoft.Extensions.Caching.Memory
  children:
  - Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.AddExpirationToken(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,IChangeToken)
  - Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.RegisterPostEvictionCallback(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Caching.Memory.PostEvictionDelegate)
  - Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.RegisterPostEvictionCallback(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Caching.Memory.PostEvictionDelegate,System.Object)
  - Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetAbsoluteExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,DateTimeOffset)
  - Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetAbsoluteExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,TimeSpan)
  - Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetPriority(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Caching.Memory.CacheItemPriority)
  - Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetSlidingExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,TimeSpan)
  langs:
  - csharp
  - vb
  name: MemoryCacheEntryExtensions
  nameWithType: MemoryCacheEntryExtensions
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheEntryExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: MemoryCacheEntryExtensions
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheEntryExtensions.cs
    startLine: 8
  assemblies:
  - Microsoft.Extensions.Caching.Abstractions
  namespace: Microsoft.Extensions.Caching.Memory
  syntax:
    content: 'public static class MemoryCacheEntryExtensions : object'
    content.vb: >-
      Public Module MemoryCacheEntryExtensions
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetPriority(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Caching.Memory.CacheItemPriority)
  commentId: M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetPriority(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Caching.Memory.CacheItemPriority)
  id: SetPriority(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Caching.Memory.CacheItemPriority)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions
  langs:
  - csharp
  - vb
  name: SetPriority(MemoryCacheEntryOptions, CacheItemPriority)
  nameWithType: MemoryCacheEntryExtensions.SetPriority(MemoryCacheEntryOptions, CacheItemPriority)
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetPriority(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions, Microsoft.Extensions.Caching.Memory.CacheItemPriority)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheEntryExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: SetPriority
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheEntryExtensions.cs
    startLine: 15
  assemblies:
  - Microsoft.Extensions.Caching.Abstractions
  namespace: Microsoft.Extensions.Caching.Memory
  summary: "\nSets the priority for keeping the cache entry in the cache during a memory pressure tokened cleanup.\n"
  example: []
  syntax:
    content: public static MemoryCacheEntryOptions SetPriority(this MemoryCacheEntryOptions options, CacheItemPriority priority)
    parameters:
    - id: options
      type: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
      description: ''
    - id: priority
      type: Microsoft.Extensions.Caching.Memory.CacheItemPriority
      description: ''
    return:
      type: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SetPriority(options As MemoryCacheEntryOptions, priority As CacheItemPriority) As MemoryCacheEntryOptions
  overload: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetPriority*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.AddExpirationToken(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,IChangeToken)
  commentId: M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.AddExpirationToken(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,IChangeToken)
  id: AddExpirationToken(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,IChangeToken)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions
  langs:
  - csharp
  - vb
  name: AddExpirationToken(MemoryCacheEntryOptions, IChangeToken)
  nameWithType: MemoryCacheEntryExtensions.AddExpirationToken(MemoryCacheEntryOptions, IChangeToken)
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.AddExpirationToken(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions, IChangeToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheEntryExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: AddExpirationToken
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheEntryExtensions.cs
    startLine: 28
  assemblies:
  - Microsoft.Extensions.Caching.Abstractions
  namespace: Microsoft.Extensions.Caching.Memory
  summary: "\nExpire the cache entry if the given <see cref=\"!:IChangeToken\"></see> expires.\n"
  example: []
  syntax:
    content: public static MemoryCacheEntryOptions AddExpirationToken(this MemoryCacheEntryOptions options, IChangeToken expirationToken)
    parameters:
    - id: options
      type: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
      description: The <xref href="Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions" data-throw-if-not-resolved="false"></xref>.
    - id: expirationToken
      type: IChangeToken
      description: The <see cref="!:IChangeToken"></see> that causes the cache entry to expire.
    return:
      type: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddExpirationToken(options As MemoryCacheEntryOptions, expirationToken As IChangeToken) As MemoryCacheEntryOptions
  overload: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.AddExpirationToken*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetAbsoluteExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,TimeSpan)
  commentId: M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetAbsoluteExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,TimeSpan)
  id: SetAbsoluteExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,TimeSpan)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions
  langs:
  - csharp
  - vb
  name: SetAbsoluteExpiration(MemoryCacheEntryOptions, TimeSpan)
  nameWithType: MemoryCacheEntryExtensions.SetAbsoluteExpiration(MemoryCacheEntryOptions, TimeSpan)
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetAbsoluteExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions, TimeSpan)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheEntryExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: SetAbsoluteExpiration
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheEntryExtensions.cs
    startLine: 46
  assemblies:
  - Microsoft.Extensions.Caching.Abstractions
  namespace: Microsoft.Extensions.Caching.Memory
  summary: "\nSets an absolute expiration time, relative to now.\n"
  example: []
  syntax:
    content: public static MemoryCacheEntryOptions SetAbsoluteExpiration(this MemoryCacheEntryOptions options, TimeSpan relative)
    parameters:
    - id: options
      type: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
      description: ''
    - id: relative
      type: TimeSpan
      description: ''
    return:
      type: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SetAbsoluteExpiration(options As MemoryCacheEntryOptions, relative As TimeSpan) As MemoryCacheEntryOptions
  overload: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetAbsoluteExpiration*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetAbsoluteExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,DateTimeOffset)
  commentId: M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetAbsoluteExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,DateTimeOffset)
  id: SetAbsoluteExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,DateTimeOffset)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions
  langs:
  - csharp
  - vb
  name: SetAbsoluteExpiration(MemoryCacheEntryOptions, DateTimeOffset)
  nameWithType: MemoryCacheEntryExtensions.SetAbsoluteExpiration(MemoryCacheEntryOptions, DateTimeOffset)
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetAbsoluteExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions, DateTimeOffset)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheEntryExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: SetAbsoluteExpiration
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheEntryExtensions.cs
    startLine: 59
  assemblies:
  - Microsoft.Extensions.Caching.Abstractions
  namespace: Microsoft.Extensions.Caching.Memory
  summary: "\nSets an absolute expiration date for the cache entry.\n"
  example: []
  syntax:
    content: public static MemoryCacheEntryOptions SetAbsoluteExpiration(this MemoryCacheEntryOptions options, DateTimeOffset absolute)
    parameters:
    - id: options
      type: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
      description: ''
    - id: absolute
      type: DateTimeOffset
      description: ''
    return:
      type: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SetAbsoluteExpiration(options As MemoryCacheEntryOptions, absolute As DateTimeOffset) As MemoryCacheEntryOptions
  overload: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetAbsoluteExpiration*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetSlidingExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,TimeSpan)
  commentId: M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetSlidingExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,TimeSpan)
  id: SetSlidingExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,TimeSpan)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions
  langs:
  - csharp
  - vb
  name: SetSlidingExpiration(MemoryCacheEntryOptions, TimeSpan)
  nameWithType: MemoryCacheEntryExtensions.SetSlidingExpiration(MemoryCacheEntryOptions, TimeSpan)
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetSlidingExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions, TimeSpan)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheEntryExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: SetSlidingExpiration
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheEntryExtensions.cs
    startLine: 73
  assemblies:
  - Microsoft.Extensions.Caching.Abstractions
  namespace: Microsoft.Extensions.Caching.Memory
  summary: "\nSets how long the cache entry can be inactive (e.g. not accessed) before it will be removed.\nThis will not extend the entry lifetime beyond the absolute expiration (if set).\n"
  example: []
  syntax:
    content: public static MemoryCacheEntryOptions SetSlidingExpiration(this MemoryCacheEntryOptions options, TimeSpan offset)
    parameters:
    - id: options
      type: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
      description: ''
    - id: offset
      type: TimeSpan
      description: ''
    return:
      type: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SetSlidingExpiration(options As MemoryCacheEntryOptions, offset As TimeSpan) As MemoryCacheEntryOptions
  overload: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetSlidingExpiration*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.RegisterPostEvictionCallback(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Caching.Memory.PostEvictionDelegate)
  commentId: M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.RegisterPostEvictionCallback(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Caching.Memory.PostEvictionDelegate)
  id: RegisterPostEvictionCallback(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Caching.Memory.PostEvictionDelegate)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions
  langs:
  - csharp
  - vb
  name: RegisterPostEvictionCallback(MemoryCacheEntryOptions, PostEvictionDelegate)
  nameWithType: MemoryCacheEntryExtensions.RegisterPostEvictionCallback(MemoryCacheEntryOptions, PostEvictionDelegate)
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.RegisterPostEvictionCallback(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions, Microsoft.Extensions.Caching.Memory.PostEvictionDelegate)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheEntryExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: RegisterPostEvictionCallback
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheEntryExtensions.cs
    startLine: 86
  assemblies:
  - Microsoft.Extensions.Caching.Abstractions
  namespace: Microsoft.Extensions.Caching.Memory
  summary: "\nThe given callback will be fired after the cache entry is evicted from the cache.\n"
  example: []
  syntax:
    content: public static MemoryCacheEntryOptions RegisterPostEvictionCallback(this MemoryCacheEntryOptions options, PostEvictionDelegate callback)
    parameters:
    - id: options
      type: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
      description: ''
    - id: callback
      type: Microsoft.Extensions.Caching.Memory.PostEvictionDelegate
      description: ''
    return:
      type: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RegisterPostEvictionCallback(options As MemoryCacheEntryOptions, callback As PostEvictionDelegate) As MemoryCacheEntryOptions
  overload: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.RegisterPostEvictionCallback*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.RegisterPostEvictionCallback(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Caching.Memory.PostEvictionDelegate,System.Object)
  commentId: M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.RegisterPostEvictionCallback(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Caching.Memory.PostEvictionDelegate,System.Object)
  id: RegisterPostEvictionCallback(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Caching.Memory.PostEvictionDelegate,System.Object)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions
  langs:
  - csharp
  - vb
  name: RegisterPostEvictionCallback(MemoryCacheEntryOptions, PostEvictionDelegate, Object)
  nameWithType: MemoryCacheEntryExtensions.RegisterPostEvictionCallback(MemoryCacheEntryOptions, PostEvictionDelegate, Object)
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.RegisterPostEvictionCallback(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions, Microsoft.Extensions.Caching.Memory.PostEvictionDelegate, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheEntryExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: RegisterPostEvictionCallback
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheEntryExtensions.cs
    startLine: 104
  assemblies:
  - Microsoft.Extensions.Caching.Abstractions
  namespace: Microsoft.Extensions.Caching.Memory
  summary: "\nThe given callback will be fired after the cache entry is evicted from the cache.\n"
  example: []
  syntax:
    content: public static MemoryCacheEntryOptions RegisterPostEvictionCallback(this MemoryCacheEntryOptions options, PostEvictionDelegate callback, object state)
    parameters:
    - id: options
      type: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
      description: ''
    - id: callback
      type: Microsoft.Extensions.Caching.Memory.PostEvictionDelegate
      description: ''
    - id: state
      type: System.Object
      description: ''
    return:
      type: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RegisterPostEvictionCallback(options As MemoryCacheEntryOptions, callback As PostEvictionDelegate, state As Object) As MemoryCacheEntryOptions
  overload: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.RegisterPostEvictionCallback*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Extensions.Caching.Memory
  commentId: N:Microsoft.Extensions.Caching.Memory
  isExternal: false
  name: Microsoft.Extensions.Caching.Memory
  nameWithType: Microsoft.Extensions.Caching.Memory
  fullName: Microsoft.Extensions.Caching.Memory
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetPriority*
  commentId: Overload:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetPriority
  isExternal: false
  name: SetPriority
  nameWithType: MemoryCacheEntryExtensions.SetPriority
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetPriority
- uid: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
  commentId: T:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
  parent: Microsoft.Extensions.Caching.Memory
  isExternal: false
  name: MemoryCacheEntryOptions
  nameWithType: MemoryCacheEntryOptions
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
- uid: Microsoft.Extensions.Caching.Memory.CacheItemPriority
  commentId: T:Microsoft.Extensions.Caching.Memory.CacheItemPriority
  parent: Microsoft.Extensions.Caching.Memory
  isExternal: false
  name: CacheItemPriority
  nameWithType: CacheItemPriority
  fullName: Microsoft.Extensions.Caching.Memory.CacheItemPriority
- uid: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.AddExpirationToken*
  commentId: Overload:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.AddExpirationToken
  isExternal: false
  name: AddExpirationToken
  nameWithType: MemoryCacheEntryExtensions.AddExpirationToken
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.AddExpirationToken
- uid: IChangeToken
  isExternal: true
  name: IChangeToken
  nameWithType: IChangeToken
  fullName: IChangeToken
- uid: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetAbsoluteExpiration*
  commentId: Overload:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetAbsoluteExpiration
  isExternal: false
  name: SetAbsoluteExpiration
  nameWithType: MemoryCacheEntryExtensions.SetAbsoluteExpiration
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetAbsoluteExpiration
- uid: TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: TimeSpan
- uid: DateTimeOffset
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: DateTimeOffset
- uid: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetSlidingExpiration*
  commentId: Overload:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetSlidingExpiration
  isExternal: false
  name: SetSlidingExpiration
  nameWithType: MemoryCacheEntryExtensions.SetSlidingExpiration
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetSlidingExpiration
- uid: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.RegisterPostEvictionCallback*
  commentId: Overload:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.RegisterPostEvictionCallback
  isExternal: false
  name: RegisterPostEvictionCallback
  nameWithType: MemoryCacheEntryExtensions.RegisterPostEvictionCallback
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.RegisterPostEvictionCallback
- uid: Microsoft.Extensions.Caching.Memory.PostEvictionDelegate
  commentId: T:Microsoft.Extensions.Caching.Memory.PostEvictionDelegate
  parent: Microsoft.Extensions.Caching.Memory
  isExternal: false
  name: PostEvictionDelegate
  nameWithType: PostEvictionDelegate
  fullName: Microsoft.Extensions.Caching.Memory.PostEvictionDelegate
shouldSkipMarkup: true
