### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.FileProviders.EmbeddedFileProvider
  commentId: T:Microsoft.Extensions.FileProviders.EmbeddedFileProvider
  id: EmbeddedFileProvider
  parent: Microsoft.Extensions.FileProviders
  children:
  - Microsoft.Extensions.FileProviders.EmbeddedFileProvider.#ctor(Assembly)
  - Microsoft.Extensions.FileProviders.EmbeddedFileProvider.#ctor(Assembly,System.String)
  - Microsoft.Extensions.FileProviders.EmbeddedFileProvider.GetDirectoryContents(System.String)
  - Microsoft.Extensions.FileProviders.EmbeddedFileProvider.GetFileInfo(System.String)
  - Microsoft.Extensions.FileProviders.EmbeddedFileProvider.Watch(System.String)
  langs:
  - csharp
  - vb
  name: EmbeddedFileProvider
  nameWithType: EmbeddedFileProvider
  fullName: Microsoft.Extensions.FileProviders.EmbeddedFileProvider
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Embedded/EmbeddedFileProvider.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: EmbeddedFileProvider
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Embedded/EmbeddedFileProvider.cs
    startLine: 18
  assemblies:
  - Microsoft.Extensions.FileProviders.Embedded
  namespace: Microsoft.Extensions.FileProviders
  summary: "\nLooks up files using embedded resources in the specified assembly.\nThis file provider is case sensitive.\n"
  example: []
  syntax:
    content: 'public class EmbeddedFileProvider : IFileProvider'
    content.vb: >-
      Public Class EmbeddedFileProvider
          Inherits IFileProvider
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.FileProviders.EmbeddedFileProvider.#ctor(Assembly)
  commentId: M:Microsoft.Extensions.FileProviders.EmbeddedFileProvider.#ctor(Assembly)
  id: '#ctor(Assembly)'
  parent: Microsoft.Extensions.FileProviders.EmbeddedFileProvider
  langs:
  - csharp
  - vb
  name: EmbeddedFileProvider(Assembly)
  nameWithType: EmbeddedFileProvider.EmbeddedFileProvider(Assembly)
  fullName: Microsoft.Extensions.FileProviders.EmbeddedFileProvider.EmbeddedFileProvider(Assembly)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Embedded/EmbeddedFileProvider.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: .ctor
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Embedded/EmbeddedFileProvider.cs
    startLine: 31
  assemblies:
  - Microsoft.Extensions.FileProviders.Embedded
  namespace: Microsoft.Extensions.FileProviders
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.Extensions.FileProviders.EmbeddedFileProvider\" data-throw-if-not-resolved=\"false\"></xref> class using the specified\nassembly and empty base namespace.\n"
  example: []
  syntax:
    content: public EmbeddedFileProvider(Assembly assembly)
    parameters:
    - id: assembly
      type: Assembly
      description: ''
    content.vb: Public Sub New(assembly As Assembly)
  overload: Microsoft.Extensions.FileProviders.EmbeddedFileProvider.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.FileProviders.EmbeddedFileProvider.#ctor(Assembly,System.String)
  commentId: M:Microsoft.Extensions.FileProviders.EmbeddedFileProvider.#ctor(Assembly,System.String)
  id: '#ctor(Assembly,System.String)'
  parent: Microsoft.Extensions.FileProviders.EmbeddedFileProvider
  langs:
  - csharp
  - vb
  name: EmbeddedFileProvider(Assembly, String)
  nameWithType: EmbeddedFileProvider.EmbeddedFileProvider(Assembly, String)
  fullName: Microsoft.Extensions.FileProviders.EmbeddedFileProvider.EmbeddedFileProvider(Assembly, System.String)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Embedded/EmbeddedFileProvider.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: .ctor
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Embedded/EmbeddedFileProvider.cs
    startLine: 42
  assemblies:
  - Microsoft.Extensions.FileProviders.Embedded
  namespace: Microsoft.Extensions.FileProviders
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.Extensions.FileProviders.EmbeddedFileProvider\" data-throw-if-not-resolved=\"false\"></xref> class using the specified\nassembly and base namespace.\n"
  example: []
  syntax:
    content: public EmbeddedFileProvider(Assembly assembly, string baseNamespace)
    parameters:
    - id: assembly
      type: Assembly
      description: The assembly that contains the embedded resources.
    - id: baseNamespace
      type: System.String
      description: The base namespace that contains the embedded resources.
    content.vb: Public Sub New(assembly As Assembly, baseNamespace As String)
  overload: Microsoft.Extensions.FileProviders.EmbeddedFileProvider.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.FileProviders.EmbeddedFileProvider.GetFileInfo(System.String)
  commentId: M:Microsoft.Extensions.FileProviders.EmbeddedFileProvider.GetFileInfo(System.String)
  id: GetFileInfo(System.String)
  parent: Microsoft.Extensions.FileProviders.EmbeddedFileProvider
  langs:
  - csharp
  - vb
  name: GetFileInfo(String)
  nameWithType: EmbeddedFileProvider.GetFileInfo(String)
  fullName: Microsoft.Extensions.FileProviders.EmbeddedFileProvider.GetFileInfo(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Embedded/EmbeddedFileProvider.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: GetFileInfo
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Embedded/EmbeddedFileProvider.cs
    startLine: 60
  assemblies:
  - Microsoft.Extensions.FileProviders.Embedded
  namespace: Microsoft.Extensions.FileProviders
  summary: "\nLocates a file at the given path.\n"
  example: []
  syntax:
    content: public IFileInfo GetFileInfo(string subpath)
    parameters:
    - id: subpath
      type: System.String
      description: 'The path that identifies the file. '
    return:
      type: IFileInfo
      description: The file information. Caller must check Exists property.
    content.vb: Public Function GetFileInfo(subpath As String) As IFileInfo
  overload: Microsoft.Extensions.FileProviders.EmbeddedFileProvider.GetFileInfo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.FileProviders.EmbeddedFileProvider.GetDirectoryContents(System.String)
  commentId: M:Microsoft.Extensions.FileProviders.EmbeddedFileProvider.GetDirectoryContents(System.String)
  id: GetDirectoryContents(System.String)
  parent: Microsoft.Extensions.FileProviders.EmbeddedFileProvider
  langs:
  - csharp
  - vb
  name: GetDirectoryContents(String)
  nameWithType: EmbeddedFileProvider.GetDirectoryContents(String)
  fullName: Microsoft.Extensions.FileProviders.EmbeddedFileProvider.GetDirectoryContents(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Embedded/EmbeddedFileProvider.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: GetDirectoryContents
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Embedded/EmbeddedFileProvider.cs
    startLine: 109
  assemblies:
  - Microsoft.Extensions.FileProviders.Embedded
  namespace: Microsoft.Extensions.FileProviders
  summary: "\nEnumerate a directory at the given path, if any.\nThis file provider uses a flat directory structure. Everything under the base namespace is considered to be one directory.\n"
  example: []
  syntax:
    content: public IDirectoryContents GetDirectoryContents(string subpath)
    parameters:
    - id: subpath
      type: System.String
      description: The path that identifies the directory
    return:
      type: IDirectoryContents
      description: Contents of the directory. Caller must check Exists property.
    content.vb: Public Function GetDirectoryContents(subpath As String) As IDirectoryContents
  overload: Microsoft.Extensions.FileProviders.EmbeddedFileProvider.GetDirectoryContents*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.FileProviders.EmbeddedFileProvider.Watch(System.String)
  commentId: M:Microsoft.Extensions.FileProviders.EmbeddedFileProvider.Watch(System.String)
  id: Watch(System.String)
  parent: Microsoft.Extensions.FileProviders.EmbeddedFileProvider
  langs:
  - csharp
  - vb
  name: Watch(String)
  nameWithType: EmbeddedFileProvider.Watch(String)
  fullName: Microsoft.Extensions.FileProviders.EmbeddedFileProvider.Watch(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Embedded/EmbeddedFileProvider.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: Watch
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Embedded/EmbeddedFileProvider.cs
    startLine: 149
  assemblies:
  - Microsoft.Extensions.FileProviders.Embedded
  namespace: Microsoft.Extensions.FileProviders
  syntax:
    content: public IChangeToken Watch(string pattern)
    parameters:
    - id: pattern
      type: System.String
    return:
      type: IChangeToken
    content.vb: Public Function Watch(pattern As String) As IChangeToken
  overload: Microsoft.Extensions.FileProviders.EmbeddedFileProvider.Watch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Extensions.FileProviders
  commentId: N:Microsoft.Extensions.FileProviders
  isExternal: false
  name: Microsoft.Extensions.FileProviders
  nameWithType: Microsoft.Extensions.FileProviders
  fullName: Microsoft.Extensions.FileProviders
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.FileProviders.EmbeddedFileProvider
  commentId: T:Microsoft.Extensions.FileProviders.EmbeddedFileProvider
  isExternal: false
  name: EmbeddedFileProvider
  nameWithType: EmbeddedFileProvider
  fullName: Microsoft.Extensions.FileProviders.EmbeddedFileProvider
- uid: Microsoft.Extensions.FileProviders.EmbeddedFileProvider.#ctor*
  commentId: Overload:Microsoft.Extensions.FileProviders.EmbeddedFileProvider.#ctor
  isExternal: false
  name: EmbeddedFileProvider
  nameWithType: EmbeddedFileProvider.EmbeddedFileProvider
  fullName: Microsoft.Extensions.FileProviders.EmbeddedFileProvider.EmbeddedFileProvider
- uid: Assembly
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: Assembly
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Extensions.FileProviders.EmbeddedFileProvider.GetFileInfo*
  commentId: Overload:Microsoft.Extensions.FileProviders.EmbeddedFileProvider.GetFileInfo
  isExternal: false
  name: GetFileInfo
  nameWithType: EmbeddedFileProvider.GetFileInfo
  fullName: Microsoft.Extensions.FileProviders.EmbeddedFileProvider.GetFileInfo
- uid: IFileInfo
  isExternal: true
  name: IFileInfo
  nameWithType: IFileInfo
  fullName: IFileInfo
- uid: Microsoft.Extensions.FileProviders.EmbeddedFileProvider.GetDirectoryContents*
  commentId: Overload:Microsoft.Extensions.FileProviders.EmbeddedFileProvider.GetDirectoryContents
  isExternal: false
  name: GetDirectoryContents
  nameWithType: EmbeddedFileProvider.GetDirectoryContents
  fullName: Microsoft.Extensions.FileProviders.EmbeddedFileProvider.GetDirectoryContents
- uid: IDirectoryContents
  isExternal: true
  name: IDirectoryContents
  nameWithType: IDirectoryContents
  fullName: IDirectoryContents
- uid: Microsoft.Extensions.FileProviders.EmbeddedFileProvider.Watch*
  commentId: Overload:Microsoft.Extensions.FileProviders.EmbeddedFileProvider.Watch
  isExternal: false
  name: Watch
  nameWithType: EmbeddedFileProvider.Watch
  fullName: Microsoft.Extensions.FileProviders.EmbeddedFileProvider.Watch
- uid: IChangeToken
  isExternal: true
  name: IChangeToken
  nameWithType: IChangeToken
  fullName: IChangeToken
shouldSkipMarkup: true
