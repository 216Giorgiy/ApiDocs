### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult
  commentId: T:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult
  id: ProxyTypeCacheResult
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal
  children:
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Constructor
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Error
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.FromError(Tuple{Type,Type},System.String)
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.FromType(Tuple{Type,Type},Type,ConstructorInfo)
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.IsError
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Key
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Type
  langs:
  - csharp
  - vb
  name: ProxyTypeCacheResult
  nameWithType: ProxyTypeCacheResult
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyTypeCacheResult.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: ProxyTypeCacheResult
    path: ../aspnet/EventNotification/src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyTypeCacheResult.cs
    startLine: 8
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: 'public class ProxyTypeCacheResult : object'
    content.vb: >-
      Public Class ProxyTypeCacheResult
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.FromError(Tuple{Type,Type},System.String)
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.FromError(Tuple{Type,Type},System.String)
  id: FromError(Tuple{Type,Type},System.String)
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult
  langs:
  - csharp
  - vb
  name: FromError(Tuple<Type, Type>, String)
  nameWithType: ProxyTypeCacheResult.FromError(Tuple<Type, Type>, String)
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.FromError(Tuple<Type, Type>, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyTypeCacheResult.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: FromError
    path: ../aspnet/EventNotification/src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyTypeCacheResult.cs
    startLine: 10
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: public static ProxyTypeCacheResult FromError(Tuple<Type, Type> key, string error)
    parameters:
    - id: key
      type: Tuple{Type,Type}
    - id: error
      type: System.String
    return:
      type: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult
    content.vb: Public Shared Function FromError(key As Tuple(Of Type, Type), error As String) As ProxyTypeCacheResult
  overload: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.FromError*
  nameWithType.vb: ProxyTypeCacheResult.FromError(Tuple(Of Type, Type), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.FromError(Tuple(Of Type, Type), System.String)
  name.vb: FromError(Tuple(Of Type, Type), String)
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.FromType(Tuple{Type,Type},Type,ConstructorInfo)
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.FromType(Tuple{Type,Type},Type,ConstructorInfo)
  id: FromType(Tuple{Type,Type},Type,ConstructorInfo)
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult
  langs:
  - csharp
  - vb
  name: FromType(Tuple<Type, Type>, Type, ConstructorInfo)
  nameWithType: ProxyTypeCacheResult.FromType(Tuple<Type, Type>, Type, ConstructorInfo)
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.FromType(Tuple<Type, Type>, Type, ConstructorInfo)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyTypeCacheResult.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: FromType
    path: ../aspnet/EventNotification/src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyTypeCacheResult.cs
    startLine: 19
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: public static ProxyTypeCacheResult FromType(Tuple<Type, Type> key, Type type, ConstructorInfo constructor)
    parameters:
    - id: key
      type: Tuple{Type,Type}
    - id: type
      type: Type
    - id: constructor
      type: ConstructorInfo
    return:
      type: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult
    content.vb: Public Shared Function FromType(key As Tuple(Of Type, Type), type As Type, constructor As ConstructorInfo) As ProxyTypeCacheResult
  overload: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.FromType*
  nameWithType.vb: ProxyTypeCacheResult.FromType(Tuple(Of Type, Type), Type, ConstructorInfo)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.FromType(Tuple(Of Type, Type), Type, ConstructorInfo)
  name.vb: FromType(Tuple(Of Type, Type), Type, ConstructorInfo)
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Constructor
  commentId: P:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Constructor
  id: Constructor
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult
  langs:
  - csharp
  - vb
  name: Constructor
  nameWithType: ProxyTypeCacheResult.Constructor
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Constructor
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyTypeCacheResult.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: Constructor
    path: ../aspnet/EventNotification/src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyTypeCacheResult.cs
    startLine: 32
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: public ConstructorInfo Constructor { get; }
    parameters: []
    return:
      type: ConstructorInfo
    content.vb: Public ReadOnly Property Constructor As ConstructorInfo
  overload: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Constructor*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Error
  commentId: P:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Error
  id: Error
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult
  langs:
  - csharp
  - vb
  name: Error
  nameWithType: ProxyTypeCacheResult.Error
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Error
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyTypeCacheResult.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: Error
    path: ../aspnet/EventNotification/src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyTypeCacheResult.cs
    startLine: 34
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: public string Error { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Error As String
  overload: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Error*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.IsError
  commentId: P:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.IsError
  id: IsError
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult
  langs:
  - csharp
  - vb
  name: IsError
  nameWithType: ProxyTypeCacheResult.IsError
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.IsError
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyTypeCacheResult.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: IsError
    path: ../aspnet/EventNotification/src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyTypeCacheResult.cs
    startLine: 36
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: public bool IsError { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsError As Boolean
  overload: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.IsError*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Key
  commentId: P:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Key
  id: Key
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult
  langs:
  - csharp
  - vb
  name: Key
  nameWithType: ProxyTypeCacheResult.Key
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Key
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyTypeCacheResult.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: Key
    path: ../aspnet/EventNotification/src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyTypeCacheResult.cs
    startLine: 38
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: public Tuple<Type, Type> Key { get; }
    parameters: []
    return:
      type: Tuple{Type,Type}
    content.vb: Public ReadOnly Property Key As Tuple(Of Type, Type)
  overload: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Key*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Type
  commentId: P:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Type
  id: Type
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: ProxyTypeCacheResult.Type
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Type
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyTypeCacheResult.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: Type
    path: ../aspnet/EventNotification/src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyTypeCacheResult.cs
    startLine: 40
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: public Type Type { get; }
    parameters: []
    return:
      type: Type
    content.vb: Public ReadOnly Property Type As Type
  overload: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Type*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal
  commentId: N:Microsoft.Extensions.DiagnosticAdapter.Internal
  isExternal: false
  name: Microsoft.Extensions.DiagnosticAdapter.Internal
  nameWithType: Microsoft.Extensions.DiagnosticAdapter.Internal
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.FromError*
  commentId: Overload:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.FromError
  isExternal: false
  name: FromError
  nameWithType: ProxyTypeCacheResult.FromError
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.FromError
- uid: Tuple{Type,Type}
  commentId: '!:Tuple{Type,Type}'
  definition: Tuple`2
  name: Tuple<Type, Type>
  nameWithType: Tuple<Type, Type>
  fullName: Tuple<Type, Type>
  nameWithType.vb: Tuple(Of Type, Type)
  fullName.vb: Tuple(Of Type, Type)
  name.vb: Tuple(Of Type, Type)
  spec.csharp:
  - uid: Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Type
    name: Type
    nameWithType: Type
    fullName: Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Type
    name: Type
    nameWithType: Type
    fullName: Type
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Type
    name: Type
    nameWithType: Type
    fullName: Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Type
    name: Type
    nameWithType: Type
    fullName: Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult
  commentId: T:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal
  isExternal: false
  name: ProxyTypeCacheResult
  nameWithType: ProxyTypeCacheResult
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult
- uid: Tuple`2
  isExternal: true
  name: Tuple<, >
  nameWithType: Tuple<, >
  fullName: Tuple<, >
  nameWithType.vb: Tuple(Of , )
  fullName.vb: Tuple(Of , )
  name.vb: Tuple(Of , )
  spec.csharp:
  - uid: Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.FromType*
  commentId: Overload:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.FromType
  isExternal: false
  name: FromType
  nameWithType: ProxyTypeCacheResult.FromType
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.FromType
- uid: Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: Type
- uid: ConstructorInfo
  isExternal: true
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: ConstructorInfo
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Constructor*
  commentId: Overload:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Constructor
  isExternal: false
  name: Constructor
  nameWithType: ProxyTypeCacheResult.Constructor
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Constructor
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Error*
  commentId: Overload:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Error
  isExternal: false
  name: Error
  nameWithType: ProxyTypeCacheResult.Error
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Error
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.IsError*
  commentId: Overload:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.IsError
  isExternal: false
  name: IsError
  nameWithType: ProxyTypeCacheResult.IsError
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.IsError
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Key*
  commentId: Overload:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Key
  isExternal: false
  name: Key
  nameWithType: ProxyTypeCacheResult.Key
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Key
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Type*
  commentId: Overload:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Type
  isExternal: false
  name: Type
  nameWithType: ProxyTypeCacheResult.Type
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Type
shouldSkipMarkup: true
