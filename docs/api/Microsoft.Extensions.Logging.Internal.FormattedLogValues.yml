### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Logging.Internal.FormattedLogValues
  commentId: T:Microsoft.Extensions.Logging.Internal.FormattedLogValues
  id: FormattedLogValues
  parent: Microsoft.Extensions.Logging.Internal
  children:
  - Microsoft.Extensions.Logging.Internal.FormattedLogValues.#ctor(System.String,System.Object[])
  - Microsoft.Extensions.Logging.Internal.FormattedLogValues.Count
  - Microsoft.Extensions.Logging.Internal.FormattedLogValues.GetEnumerator
  - Microsoft.Extensions.Logging.Internal.FormattedLogValues.Item(System.Int32)
  - Microsoft.Extensions.Logging.Internal.FormattedLogValues.ToString
  langs:
  - csharp
  - vb
  name: FormattedLogValues
  nameWithType: FormattedLogValues
  fullName: Microsoft.Extensions.Logging.Internal.FormattedLogValues
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Abstractions/Internal/FormattedLogValues.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: FormattedLogValues
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Abstractions/Internal/FormattedLogValues.cs
    startLine: 14
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging.Internal
  summary: "\nLogValues to enable formatting options supported by <xref href=\"string.Format\" data-throw-if-not-resolved=\"false\"></xref>. \nThis also enables using {NamedformatItem} in the format string.\n"
  example: []
  syntax:
    content: 'public class FormattedLogValues : IReadOnlyList<KeyValuePair<string, object>>'
    content.vb: >-
      Public Class FormattedLogValues
          Inherits IReadOnlyList(Of KeyValuePair(Of String, Object))
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.Logging.Internal.FormattedLogValues.#ctor(System.String,System.Object[])
  commentId: M:Microsoft.Extensions.Logging.Internal.FormattedLogValues.#ctor(System.String,System.Object[])
  id: '#ctor(System.String,System.Object[])'
  parent: Microsoft.Extensions.Logging.Internal.FormattedLogValues
  langs:
  - csharp
  - vb
  name: FormattedLogValues(String, Object[])
  nameWithType: FormattedLogValues.FormattedLogValues(String, Object[])
  fullName: Microsoft.Extensions.Logging.Internal.FormattedLogValues.FormattedLogValues(System.String, System.Object[])
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Abstractions/Internal/FormattedLogValues.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: .ctor
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Abstractions/Internal/FormattedLogValues.cs
    startLine: 21
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging.Internal
  syntax:
    content: public FormattedLogValues(string format, params object[] values)
    parameters:
    - id: format
      type: System.String
    - id: values
      type: System.Object[]
    content.vb: Public Sub New(format As String, ParamArray values As Object())
  overload: Microsoft.Extensions.Logging.Internal.FormattedLogValues.#ctor*
  nameWithType.vb: FormattedLogValues.FormattedLogValues(String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.Logging.Internal.FormattedLogValues.FormattedLogValues(System.String, System.Object())
  name.vb: FormattedLogValues(String, Object())
- uid: Microsoft.Extensions.Logging.Internal.FormattedLogValues.Item(System.Int32)
  commentId: P:Microsoft.Extensions.Logging.Internal.FormattedLogValues.Item(System.Int32)
  id: Item(System.Int32)
  parent: Microsoft.Extensions.Logging.Internal.FormattedLogValues
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: FormattedLogValues.Item[Int32]
  fullName: Microsoft.Extensions.Logging.Internal.FormattedLogValues.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Abstractions/Internal/FormattedLogValues.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: this[]
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Abstractions/Internal/FormattedLogValues.cs
    startLine: 37
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging.Internal
  syntax:
    content: public KeyValuePair<string, object> this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
    return:
      type: KeyValuePair{System.String,System.Object}
    content.vb: Public ReadOnly Property Item(index As Integer) As KeyValuePair(Of String, Object)
  overload: Microsoft.Extensions.Logging.Internal.FormattedLogValues.Item*
  nameWithType.vb: FormattedLogValues.Item(Int32)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Extensions.Logging.Internal.FormattedLogValues.Item(System.Int32)
  name.vb: Item(Int32)
- uid: Microsoft.Extensions.Logging.Internal.FormattedLogValues.Count
  commentId: P:Microsoft.Extensions.Logging.Internal.FormattedLogValues.Count
  id: Count
  parent: Microsoft.Extensions.Logging.Internal.FormattedLogValues
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: FormattedLogValues.Count
  fullName: Microsoft.Extensions.Logging.Internal.FormattedLogValues.Count
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Abstractions/Internal/FormattedLogValues.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: Count
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Abstractions/Internal/FormattedLogValues.cs
    startLine: 55
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging.Internal
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: Microsoft.Extensions.Logging.Internal.FormattedLogValues.Count*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.Logging.Internal.FormattedLogValues.GetEnumerator
  commentId: M:Microsoft.Extensions.Logging.Internal.FormattedLogValues.GetEnumerator
  id: GetEnumerator
  parent: Microsoft.Extensions.Logging.Internal.FormattedLogValues
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: FormattedLogValues.GetEnumerator()
  fullName: Microsoft.Extensions.Logging.Internal.FormattedLogValues.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Abstractions/Internal/FormattedLogValues.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: GetEnumerator
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Abstractions/Internal/FormattedLogValues.cs
    startLine: 68
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging.Internal
  syntax:
    content: public IEnumerator<KeyValuePair<string, object>> GetEnumerator()
    return:
      type: IEnumerator{KeyValuePair{System.String,System.Object}}
    content.vb: Public Function GetEnumerator As IEnumerator(Of KeyValuePair(Of String, Object))
  overload: Microsoft.Extensions.Logging.Internal.FormattedLogValues.GetEnumerator*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Logging.Internal.FormattedLogValues.ToString
  commentId: M:Microsoft.Extensions.Logging.Internal.FormattedLogValues.ToString
  id: ToString
  parent: Microsoft.Extensions.Logging.Internal.FormattedLogValues
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: FormattedLogValues.ToString()
  fullName: Microsoft.Extensions.Logging.Internal.FormattedLogValues.ToString()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Abstractions/Internal/FormattedLogValues.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: ToString
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Abstractions/Internal/FormattedLogValues.cs
    startLine: 76
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging.Internal
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overload: Microsoft.Extensions.Logging.Internal.FormattedLogValues.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: string.Format
  commentId: M:string.Format
- uid: Microsoft.Extensions.Logging.Internal
  commentId: N:Microsoft.Extensions.Logging.Internal
  isExternal: false
  name: Microsoft.Extensions.Logging.Internal
  nameWithType: Microsoft.Extensions.Logging.Internal
  fullName: Microsoft.Extensions.Logging.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Logging.Internal.FormattedLogValues.#ctor*
  commentId: Overload:Microsoft.Extensions.Logging.Internal.FormattedLogValues.#ctor
  isExternal: false
  name: FormattedLogValues
  nameWithType: FormattedLogValues.FormattedLogValues
  fullName: Microsoft.Extensions.Logging.Internal.FormattedLogValues.FormattedLogValues
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object[]
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Extensions.Logging.Internal.FormattedLogValues.Item*
  commentId: Overload:Microsoft.Extensions.Logging.Internal.FormattedLogValues.Item
  isExternal: false
  name: Item
  nameWithType: FormattedLogValues.Item
  fullName: Microsoft.Extensions.Logging.Internal.FormattedLogValues.Item
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: KeyValuePair{System.String,System.Object}
  commentId: '!:KeyValuePair{System.String,System.Object}'
  definition: KeyValuePair`2
  name: KeyValuePair<String, Object>
  nameWithType: KeyValuePair<String, Object>
  fullName: KeyValuePair<System.String, System.Object>
  nameWithType.vb: KeyValuePair(Of String, Object)
  fullName.vb: KeyValuePair(Of System.String, System.Object)
  name.vb: KeyValuePair(Of String, Object)
  spec.csharp:
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: KeyValuePair`2
  isExternal: true
  name: KeyValuePair<, >
  nameWithType: KeyValuePair<, >
  fullName: KeyValuePair<, >
  nameWithType.vb: KeyValuePair(Of , )
  fullName.vb: KeyValuePair(Of , )
  name.vb: KeyValuePair(Of , )
  spec.csharp:
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.Internal.FormattedLogValues.Count*
  commentId: Overload:Microsoft.Extensions.Logging.Internal.FormattedLogValues.Count
  isExternal: false
  name: Count
  nameWithType: FormattedLogValues.Count
  fullName: Microsoft.Extensions.Logging.Internal.FormattedLogValues.Count
- uid: Microsoft.Extensions.Logging.Internal.FormattedLogValues.GetEnumerator*
  commentId: Overload:Microsoft.Extensions.Logging.Internal.FormattedLogValues.GetEnumerator
  isExternal: false
  name: GetEnumerator
  nameWithType: FormattedLogValues.GetEnumerator
  fullName: Microsoft.Extensions.Logging.Internal.FormattedLogValues.GetEnumerator
- uid: IEnumerator{KeyValuePair{System.String,System.Object}}
  commentId: '!:IEnumerator{KeyValuePair{System.String,System.Object}}'
  definition: IEnumerator`1
  name: IEnumerator<KeyValuePair<String, Object>>
  nameWithType: IEnumerator<KeyValuePair<String, Object>>
  fullName: IEnumerator<KeyValuePair<System.String, System.Object>>
  nameWithType.vb: IEnumerator(Of KeyValuePair(Of String, Object))
  fullName.vb: IEnumerator(Of KeyValuePair(Of System.String, System.Object))
  name.vb: IEnumerator(Of KeyValuePair(Of String, Object))
  spec.csharp:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerator`1
  isExternal: true
  name: IEnumerator<>
  nameWithType: IEnumerator<>
  fullName: IEnumerator<>
  nameWithType.vb: IEnumerator(Of )
  fullName.vb: IEnumerator(Of )
  name.vb: IEnumerator(Of )
  spec.csharp:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.Internal.FormattedLogValues.ToString*
  commentId: Overload:Microsoft.Extensions.Logging.Internal.FormattedLogValues.ToString
  isExternal: false
  name: ToString
  nameWithType: FormattedLogValues.ToString
  fullName: Microsoft.Extensions.Logging.Internal.FormattedLogValues.ToString
shouldSkipMarkup: true
