### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Logging.Internal.LogValuesFormatter
  commentId: T:Microsoft.Extensions.Logging.Internal.LogValuesFormatter
  id: LogValuesFormatter
  parent: Microsoft.Extensions.Logging.Internal
  children:
  - Microsoft.Extensions.Logging.Internal.LogValuesFormatter.#ctor(System.String)
  - Microsoft.Extensions.Logging.Internal.LogValuesFormatter.Format(System.Object[])
  - Microsoft.Extensions.Logging.Internal.LogValuesFormatter.GetValue(System.Object[],System.Int32)
  - Microsoft.Extensions.Logging.Internal.LogValuesFormatter.GetValues(System.Object[])
  - Microsoft.Extensions.Logging.Internal.LogValuesFormatter.OriginalFormat
  - Microsoft.Extensions.Logging.Internal.LogValuesFormatter.ValueNames
  langs:
  - csharp
  - vb
  name: LogValuesFormatter
  nameWithType: LogValuesFormatter
  fullName: Microsoft.Extensions.Logging.Internal.LogValuesFormatter
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Abstractions/Internal/LogValuesFormatter.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: LogValuesFormatter
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Abstractions/Internal/LogValuesFormatter.cs
    startLine: 15
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging.Internal
  summary: "\nFormatter to convert the named format items like {NamedformatItem} to <xref href=\"string.Format\" data-throw-if-not-resolved=\"false\"></xref> format.\n"
  example: []
  syntax:
    content: 'public class LogValuesFormatter : object'
    content.vb: >-
      Public Class LogValuesFormatter
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.OriginalFormat
  commentId: P:Microsoft.Extensions.Logging.Internal.LogValuesFormatter.OriginalFormat
  id: OriginalFormat
  parent: Microsoft.Extensions.Logging.Internal.LogValuesFormatter
  langs:
  - csharp
  - vb
  name: OriginalFormat
  nameWithType: LogValuesFormatter.OriginalFormat
  fullName: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.OriginalFormat
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Abstractions/Internal/LogValuesFormatter.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: OriginalFormat
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Abstractions/Internal/LogValuesFormatter.cs
    startLine: 20
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging.Internal
  syntax:
    content: public string OriginalFormat { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property OriginalFormat As String
  overload: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.OriginalFormat*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.ValueNames
  commentId: P:Microsoft.Extensions.Logging.Internal.LogValuesFormatter.ValueNames
  id: ValueNames
  parent: Microsoft.Extensions.Logging.Internal.LogValuesFormatter
  langs:
  - csharp
  - vb
  name: ValueNames
  nameWithType: LogValuesFormatter.ValueNames
  fullName: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.ValueNames
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Abstractions/Internal/LogValuesFormatter.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: ValueNames
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Abstractions/Internal/LogValuesFormatter.cs
    startLine: 21
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging.Internal
  syntax:
    content: public List<string> ValueNames { get; }
    parameters: []
    return:
      type: List{System.String}
    content.vb: Public ReadOnly Property ValueNames As List(Of String)
  overload: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.ValueNames*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.#ctor(System.String)
  commentId: M:Microsoft.Extensions.Logging.Internal.LogValuesFormatter.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.Extensions.Logging.Internal.LogValuesFormatter
  langs:
  - csharp
  - vb
  name: LogValuesFormatter(String)
  nameWithType: LogValuesFormatter.LogValuesFormatter(String)
  fullName: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.LogValuesFormatter(System.String)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Abstractions/Internal/LogValuesFormatter.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: .ctor
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Abstractions/Internal/LogValuesFormatter.cs
    startLine: 23
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging.Internal
  syntax:
    content: public LogValuesFormatter(string format)
    parameters:
    - id: format
      type: System.String
    content.vb: Public Sub New(format As String)
  overload: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.Format(System.Object[])
  commentId: M:Microsoft.Extensions.Logging.Internal.LogValuesFormatter.Format(System.Object[])
  id: Format(System.Object[])
  parent: Microsoft.Extensions.Logging.Internal.LogValuesFormatter
  langs:
  - csharp
  - vb
  name: Format(Object[])
  nameWithType: LogValuesFormatter.Format(Object[])
  fullName: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.Format(System.Object[])
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Abstractions/Internal/LogValuesFormatter.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: Format
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Abstractions/Internal/LogValuesFormatter.cs
    startLine: 116
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging.Internal
  syntax:
    content: public string Format(object[] values)
    parameters:
    - id: values
      type: System.Object[]
    return:
      type: System.String
    content.vb: Public Function Format(values As Object()) As String
  overload: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.Format*
  nameWithType.vb: LogValuesFormatter.Format(Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.Format(System.Object())
  name.vb: Format(Object())
- uid: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.GetValue(System.Object[],System.Int32)
  commentId: M:Microsoft.Extensions.Logging.Internal.LogValuesFormatter.GetValue(System.Object[],System.Int32)
  id: GetValue(System.Object[],System.Int32)
  parent: Microsoft.Extensions.Logging.Internal.LogValuesFormatter
  langs:
  - csharp
  - vb
  name: GetValue(Object[], Int32)
  nameWithType: LogValuesFormatter.GetValue(Object[], Int32)
  fullName: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.GetValue(System.Object[], System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Abstractions/Internal/LogValuesFormatter.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: GetValue
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Abstractions/Internal/LogValuesFormatter.cs
    startLine: 147
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging.Internal
  syntax:
    content: public KeyValuePair<string, object> GetValue(object[] values, int index)
    parameters:
    - id: values
      type: System.Object[]
    - id: index
      type: System.Int32
    return:
      type: KeyValuePair{System.String,System.Object}
    content.vb: Public Function GetValue(values As Object(), index As Integer) As KeyValuePair(Of String, Object)
  overload: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.GetValue*
  nameWithType.vb: LogValuesFormatter.GetValue(Object(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.GetValue(System.Object(), System.Int32)
  name.vb: GetValue(Object(), Int32)
- uid: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.GetValues(System.Object[])
  commentId: M:Microsoft.Extensions.Logging.Internal.LogValuesFormatter.GetValues(System.Object[])
  id: GetValues(System.Object[])
  parent: Microsoft.Extensions.Logging.Internal.LogValuesFormatter
  langs:
  - csharp
  - vb
  name: GetValues(Object[])
  nameWithType: LogValuesFormatter.GetValues(Object[])
  fullName: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.GetValues(System.Object[])
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Abstractions/Internal/LogValuesFormatter.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: GetValues
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Abstractions/Internal/LogValuesFormatter.cs
    startLine: 162
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging.Internal
  syntax:
    content: public IEnumerable<KeyValuePair<string, object>> GetValues(object[] values)
    parameters:
    - id: values
      type: System.Object[]
    return:
      type: IEnumerable{KeyValuePair{System.String,System.Object}}
    content.vb: Public Function GetValues(values As Object()) As IEnumerable(Of KeyValuePair(Of String, Object))
  overload: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.GetValues*
  nameWithType.vb: LogValuesFormatter.GetValues(Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.GetValues(System.Object())
  name.vb: GetValues(Object())
references:
- uid: string.Format
  commentId: M:string.Format
- uid: Microsoft.Extensions.Logging.Internal
  commentId: N:Microsoft.Extensions.Logging.Internal
  isExternal: false
  name: Microsoft.Extensions.Logging.Internal
  nameWithType: Microsoft.Extensions.Logging.Internal
  fullName: Microsoft.Extensions.Logging.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.OriginalFormat*
  commentId: Overload:Microsoft.Extensions.Logging.Internal.LogValuesFormatter.OriginalFormat
  isExternal: false
  name: OriginalFormat
  nameWithType: LogValuesFormatter.OriginalFormat
  fullName: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.OriginalFormat
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.ValueNames*
  commentId: Overload:Microsoft.Extensions.Logging.Internal.LogValuesFormatter.ValueNames
  isExternal: false
  name: ValueNames
  nameWithType: LogValuesFormatter.ValueNames
  fullName: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.ValueNames
- uid: List{System.String}
  commentId: '!:List{System.String}'
  definition: List`1
  name: List<String>
  nameWithType: List<String>
  fullName: List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.#ctor*
  commentId: Overload:Microsoft.Extensions.Logging.Internal.LogValuesFormatter.#ctor
  isExternal: false
  name: LogValuesFormatter
  nameWithType: LogValuesFormatter.LogValuesFormatter
  fullName: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.LogValuesFormatter
- uid: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.Format*
  commentId: Overload:Microsoft.Extensions.Logging.Internal.LogValuesFormatter.Format
  isExternal: false
  name: Format
  nameWithType: LogValuesFormatter.Format
  fullName: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.Format
- uid: System.Object[]
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.GetValue*
  commentId: Overload:Microsoft.Extensions.Logging.Internal.LogValuesFormatter.GetValue
  isExternal: false
  name: GetValue
  nameWithType: LogValuesFormatter.GetValue
  fullName: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.GetValue
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: KeyValuePair{System.String,System.Object}
  commentId: '!:KeyValuePair{System.String,System.Object}'
  definition: KeyValuePair`2
  name: KeyValuePair<String, Object>
  nameWithType: KeyValuePair<String, Object>
  fullName: KeyValuePair<System.String, System.Object>
  nameWithType.vb: KeyValuePair(Of String, Object)
  fullName.vb: KeyValuePair(Of System.String, System.Object)
  name.vb: KeyValuePair(Of String, Object)
  spec.csharp:
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: KeyValuePair`2
  isExternal: true
  name: KeyValuePair<, >
  nameWithType: KeyValuePair<, >
  fullName: KeyValuePair<, >
  nameWithType.vb: KeyValuePair(Of , )
  fullName.vb: KeyValuePair(Of , )
  name.vb: KeyValuePair(Of , )
  spec.csharp:
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.GetValues*
  commentId: Overload:Microsoft.Extensions.Logging.Internal.LogValuesFormatter.GetValues
  isExternal: false
  name: GetValues
  nameWithType: LogValuesFormatter.GetValues
  fullName: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.GetValues
- uid: IEnumerable{KeyValuePair{System.String,System.Object}}
  commentId: '!:IEnumerable{KeyValuePair{System.String,System.Object}}'
  definition: IEnumerable`1
  name: IEnumerable<KeyValuePair<String, Object>>
  nameWithType: IEnumerable<KeyValuePair<String, Object>>
  fullName: IEnumerable<KeyValuePair<System.String, System.Object>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of String, Object))
  fullName.vb: IEnumerable(Of KeyValuePair(Of System.String, System.Object))
  name.vb: IEnumerable(Of KeyValuePair(Of String, Object))
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
