### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Globalization.CultureInfoCache
  commentId: T:Microsoft.Extensions.Globalization.CultureInfoCache
  id: CultureInfoCache
  parent: Microsoft.Extensions.Globalization
  children:
  - Microsoft.Extensions.Globalization.CultureInfoCache.GetCultureInfo(System.String,IList{CultureInfo})
  langs:
  - csharp
  - vb
  name: CultureInfoCache
  nameWithType: CultureInfoCache
  fullName: Microsoft.Extensions.Globalization.CultureInfoCache
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Globalization.CultureInfoCache/CultureInfoCache.cs
      branch: master
      repo: https://github.com/aspnet/Localization.git
    id: CultureInfoCache
    path: ../aspnet/Localization/src/Microsoft.Extensions.Globalization.CultureInfoCache/CultureInfoCache.cs
    startLine: 14
  assemblies:
  - Microsoft.Extensions.Globalization.CultureInfoCache
  namespace: Microsoft.Extensions.Globalization
  summary: "\nProvides read-only cached instances of <see cref=\"!:CultureInfo\"></see>.\n"
  example: []
  syntax:
    content: 'public static class CultureInfoCache : object'
    content.vb: >-
      Public Module CultureInfoCache
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Extensions.Globalization.CultureInfoCache.GetCultureInfo(System.String,IList{CultureInfo})
  commentId: M:Microsoft.Extensions.Globalization.CultureInfoCache.GetCultureInfo(System.String,IList{CultureInfo})
  id: GetCultureInfo(System.String,IList{CultureInfo})
  parent: Microsoft.Extensions.Globalization.CultureInfoCache
  langs:
  - csharp
  - vb
  name: GetCultureInfo(String, IList<CultureInfo>)
  nameWithType: CultureInfoCache.GetCultureInfo(String, IList<CultureInfo>)
  fullName: Microsoft.Extensions.Globalization.CultureInfoCache.GetCultureInfo(System.String, IList<CultureInfo>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Globalization.CultureInfoCache/CultureInfoCache.cs
      branch: master
      repo: https://github.com/aspnet/Localization.git
    id: GetCultureInfo
    path: ../aspnet/Localization/src/Microsoft.Extensions.Globalization.CultureInfoCache/CultureInfoCache.cs
    startLine: 28
  assemblies:
  - Microsoft.Extensions.Globalization.CultureInfoCache
  namespace: Microsoft.Extensions.Globalization
  summary: "\nGets a read-only cached <see cref=\"!:CultureInfo\"></see> for the specified name. Only names that exist in\n<span class=\"paramref\">supportedCultures</span> will be used.\n"
  example: []
  syntax:
    content: public static CultureInfo GetCultureInfo(string name, IList<CultureInfo> supportedCultures)
    parameters:
    - id: name
      type: System.String
      description: The culture name.
    - id: supportedCultures
      type: IList{CultureInfo}
      description: The cultures supported by the application.
    return:
      type: CultureInfo
      description: "\nA read-only cached <see cref=\"!:CultureInfo\"></see> or <code>null</code> a match wasn&apos;t found in\n<span class=\"paramref\">supportedCultures</span>.\n"
    content.vb: Public Shared Function GetCultureInfo(name As String, supportedCultures As IList(Of CultureInfo)) As CultureInfo
  overload: Microsoft.Extensions.Globalization.CultureInfoCache.GetCultureInfo*
  nameWithType.vb: CultureInfoCache.GetCultureInfo(String, IList(Of CultureInfo))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Globalization.CultureInfoCache.GetCultureInfo(System.String, IList(Of CultureInfo))
  name.vb: GetCultureInfo(String, IList(Of CultureInfo))
references:
- uid: Microsoft.Extensions.Globalization
  commentId: N:Microsoft.Extensions.Globalization
  isExternal: false
  name: Microsoft.Extensions.Globalization
  nameWithType: Microsoft.Extensions.Globalization
  fullName: Microsoft.Extensions.Globalization
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Globalization.CultureInfoCache.GetCultureInfo*
  commentId: Overload:Microsoft.Extensions.Globalization.CultureInfoCache.GetCultureInfo
  isExternal: false
  name: GetCultureInfo
  nameWithType: CultureInfoCache.GetCultureInfo
  fullName: Microsoft.Extensions.Globalization.CultureInfoCache.GetCultureInfo
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: IList{CultureInfo}
  commentId: '!:IList{CultureInfo}'
  definition: IList`1
  name: IList<CultureInfo>
  nameWithType: IList<CultureInfo>
  fullName: IList<CultureInfo>
  nameWithType.vb: IList(Of CultureInfo)
  fullName.vb: IList(Of CultureInfo)
  name.vb: IList(Of CultureInfo)
  spec.csharp:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: CultureInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: CultureInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CultureInfo
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: CultureInfo
- uid: IList`1
  isExternal: true
  name: IList<>
  nameWithType: IList<>
  fullName: IList<>
  nameWithType.vb: IList(Of )
  fullName.vb: IList(Of )
  name.vb: IList(Of )
  spec.csharp:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
