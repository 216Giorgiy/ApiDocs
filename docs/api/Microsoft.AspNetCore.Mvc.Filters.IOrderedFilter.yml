### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter
  commentId: T:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter
  id: IOrderedFilter
  parent: Microsoft.AspNetCore.Mvc.Filters
  children:
  - Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order
  langs:
  - csharp
  - vb
  name: IOrderedFilter
  nameWithType: IOrderedFilter
  fullName: Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter
  type: Interface
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/Filters/IOrderedFilter.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: IOrderedFilter
    path: ../aspnet/Mvc/src/Microsoft.AspNetCore.Mvc.Abstractions/Filters/IOrderedFilter.cs
    startLine: 8
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.Filters
  summary: "\nA filter that specifies the relative order it should run.\n"
  example: []
  syntax:
    content: 'public interface IOrderedFilter : IFilterMetadata'
    content.vb: >-
      Public Interface IOrderedFilter
          Inherits IFilterMetadata
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order
  commentId: P:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order
  id: Order
  parent: Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter
  langs:
  - csharp
  - vb
  name: Order
  nameWithType: IOrderedFilter.Order
  fullName: Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/Filters/IOrderedFilter.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Order
    path: ../aspnet/Mvc/src/Microsoft.AspNetCore.Mvc.Abstractions/Filters/IOrderedFilter.cs
    startLine: 38
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.Filters
  summary: "\nGets the order value for determining the order of execution of filters. Filters execute in\nascending numeric value of the <xref href=\"Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order\" data-throw-if-not-resolved=\"false\"></xref> property.\n"
  remarks: "\n<p>\nFilters are executed in an ordering determined by an ascending sort of the <xref href=\"Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order\" data-throw-if-not-resolved=\"false\"></xref> property.\n</p>\n<p>\nAsynchronous filters, such as <xref href=\"Microsoft.AspNetCore.Mvc.Filters.IAsyncActionFilter\" data-throw-if-not-resolved=\"false\"></xref>, surround the execution of subsequent\nfilters of the same filter kind. An asynchronous filter with a lower numeric <xref href=\"Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order\" data-throw-if-not-resolved=\"false\"></xref>\nvalue will have its filter method, such as <xref href=\"Microsoft.AspNetCore.Mvc.Filters.IAsyncActionFilter.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext%2cMicrosoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)\" data-throw-if-not-resolved=\"false\"></xref>,\nexecuted before that of a filter with a higher value of <xref href=\"Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n<p>\nSynchronous filters, such as <xref href=\"Microsoft.AspNetCore.Mvc.Filters.IActionFilter\" data-throw-if-not-resolved=\"false\"></xref>, have a before-method, such as\n<xref href=\"Microsoft.AspNetCore.Mvc.Filters.IActionFilter.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)\" data-throw-if-not-resolved=\"false\"></xref>, and an after-method, such as\n<xref href=\"Microsoft.AspNetCore.Mvc.Filters.IActionFilter.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)\" data-throw-if-not-resolved=\"false\"></xref>. A synchronous filter with a lower numeric <xref href=\"Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order\" data-throw-if-not-resolved=\"false\"></xref>\nvalue will have its before-method executed before that of a filter with a higher value of\n<xref href=\"Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order\" data-throw-if-not-resolved=\"false\"></xref>. During the after-stage of the filter, a synchronous filter with a lower\nnumeric <xref href=\"Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order\" data-throw-if-not-resolved=\"false\"></xref> value will have its after-method executed after that of a filter with a higher\nvalue of <xref href=\"Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n<p>\nIf two filters have the same numeric value of <xref href=\"Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order\" data-throw-if-not-resolved=\"false\"></xref>, then their relative execution order\nis determined by the filter scope.\n</p>\n"
  example: []
  syntax:
    content: int Order { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property Order As Integer
  overload: Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Microsoft.AspNetCore.Mvc.Filters
  commentId: N:Microsoft.AspNetCore.Mvc.Filters
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.Filters
  nameWithType: Microsoft.AspNetCore.Mvc.Filters
  fullName: Microsoft.AspNetCore.Mvc.Filters
- uid: Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order
  commentId: P:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order
- uid: Microsoft.AspNetCore.Mvc.Filters.IAsyncActionFilter
  commentId: T:Microsoft.AspNetCore.Mvc.Filters.IAsyncActionFilter
  isExternal: false
  name: IAsyncActionFilter
  nameWithType: IAsyncActionFilter
  fullName: Microsoft.AspNetCore.Mvc.Filters.IAsyncActionFilter
- uid: Microsoft.AspNetCore.Mvc.Filters.IAsyncActionFilter.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)
  commentId: M:Microsoft.AspNetCore.Mvc.Filters.IAsyncActionFilter.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)
- uid: Microsoft.AspNetCore.Mvc.Filters.IActionFilter
  commentId: T:Microsoft.AspNetCore.Mvc.Filters.IActionFilter
  isExternal: false
  name: IActionFilter
  nameWithType: IActionFilter
  fullName: Microsoft.AspNetCore.Mvc.Filters.IActionFilter
- uid: Microsoft.AspNetCore.Mvc.Filters.IActionFilter.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)
  commentId: M:Microsoft.AspNetCore.Mvc.Filters.IActionFilter.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)
- uid: Microsoft.AspNetCore.Mvc.Filters.IActionFilter.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)
  commentId: M:Microsoft.AspNetCore.Mvc.Filters.IActionFilter.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)
- uid: Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order*
  commentId: Overload:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order
  isExternal: false
  name: Order
  nameWithType: IOrderedFilter.Order
  fullName: Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
shouldSkipMarkup: true
