### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Configuration.ConfigurationPath
  commentId: T:Microsoft.Extensions.Configuration.ConfigurationPath
  id: ConfigurationPath
  parent: Microsoft.Extensions.Configuration
  children:
  - Microsoft.Extensions.Configuration.ConfigurationPath.Combine(IEnumerable{System.String})
  - Microsoft.Extensions.Configuration.ConfigurationPath.Combine(System.String[])
  - Microsoft.Extensions.Configuration.ConfigurationPath.GetParentPath(System.String)
  - Microsoft.Extensions.Configuration.ConfigurationPath.GetSectionKey(System.String)
  - Microsoft.Extensions.Configuration.ConfigurationPath.KeyDelimiter
  langs:
  - csharp
  - vb
  name: ConfigurationPath
  nameWithType: ConfigurationPath
  fullName: Microsoft.Extensions.Configuration.ConfigurationPath
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration.Abstractions/ConfigurationPath.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: ConfigurationPath
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration.Abstractions/ConfigurationPath.cs
    startLine: 11
  assemblies:
  - Microsoft.Extensions.Configuration.Abstractions
  namespace: Microsoft.Extensions.Configuration
  summary: "\nUtility methods and constants for manipulating Configuration paths\n"
  example: []
  syntax:
    content: 'public static class ConfigurationPath : object'
    content.vb: >-
      Public Module ConfigurationPath
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Extensions.Configuration.ConfigurationPath.KeyDelimiter
  commentId: F:Microsoft.Extensions.Configuration.ConfigurationPath.KeyDelimiter
  id: KeyDelimiter
  parent: Microsoft.Extensions.Configuration.ConfigurationPath
  langs:
  - csharp
  - vb
  name: KeyDelimiter
  nameWithType: ConfigurationPath.KeyDelimiter
  fullName: Microsoft.Extensions.Configuration.ConfigurationPath.KeyDelimiter
  type: Field
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration.Abstractions/ConfigurationPath.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: KeyDelimiter
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration.Abstractions/ConfigurationPath.cs
    startLine: 16
  assemblies:
  - Microsoft.Extensions.Configuration.Abstractions
  namespace: Microsoft.Extensions.Configuration
  summary: "\nThe delimiter &quot;:&quot; used to separate individual keys in a path.\n"
  example: []
  syntax:
    content: public static readonly string KeyDelimiter
    return:
      type: System.String
    content.vb: Public Shared ReadOnly KeyDelimiter As String
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Extensions.Configuration.ConfigurationPath.Combine(System.String[])
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationPath.Combine(System.String[])
  id: Combine(System.String[])
  parent: Microsoft.Extensions.Configuration.ConfigurationPath
  langs:
  - csharp
  - vb
  name: Combine(String[])
  nameWithType: ConfigurationPath.Combine(String[])
  fullName: Microsoft.Extensions.Configuration.ConfigurationPath.Combine(System.String[])
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration.Abstractions/ConfigurationPath.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: Combine
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration.Abstractions/ConfigurationPath.cs
    startLine: 23
  assemblies:
  - Microsoft.Extensions.Configuration.Abstractions
  namespace: Microsoft.Extensions.Configuration
  summary: "\nCombines path segments into one path.\n"
  example: []
  syntax:
    content: public static string Combine(params string[] pathSegments)
    parameters:
    - id: pathSegments
      type: System.String[]
      description: The path segments to combine.
    return:
      type: System.String
      description: The combined path.
    content.vb: Public Shared Function Combine(ParamArray pathSegments As String()) As String
  overload: Microsoft.Extensions.Configuration.ConfigurationPath.Combine*
  nameWithType.vb: ConfigurationPath.Combine(String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Configuration.ConfigurationPath.Combine(System.String())
  name.vb: Combine(String())
- uid: Microsoft.Extensions.Configuration.ConfigurationPath.Combine(IEnumerable{System.String})
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationPath.Combine(IEnumerable{System.String})
  id: Combine(IEnumerable{System.String})
  parent: Microsoft.Extensions.Configuration.ConfigurationPath
  langs:
  - csharp
  - vb
  name: Combine(IEnumerable<String>)
  nameWithType: ConfigurationPath.Combine(IEnumerable<String>)
  fullName: Microsoft.Extensions.Configuration.ConfigurationPath.Combine(IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration.Abstractions/ConfigurationPath.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: Combine
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration.Abstractions/ConfigurationPath.cs
    startLine: 37
  assemblies:
  - Microsoft.Extensions.Configuration.Abstractions
  namespace: Microsoft.Extensions.Configuration
  summary: "\nCombines path segments into one path.\n"
  example: []
  syntax:
    content: public static string Combine(IEnumerable<string> pathSegments)
    parameters:
    - id: pathSegments
      type: IEnumerable{System.String}
      description: The path segments to combine.
    return:
      type: System.String
      description: The combined path.
    content.vb: Public Shared Function Combine(pathSegments As IEnumerable(Of String)) As String
  overload: Microsoft.Extensions.Configuration.ConfigurationPath.Combine*
  nameWithType.vb: ConfigurationPath.Combine(IEnumerable(Of String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Configuration.ConfigurationPath.Combine(IEnumerable(Of System.String))
  name.vb: Combine(IEnumerable(Of String))
- uid: Microsoft.Extensions.Configuration.ConfigurationPath.GetSectionKey(System.String)
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationPath.GetSectionKey(System.String)
  id: GetSectionKey(System.String)
  parent: Microsoft.Extensions.Configuration.ConfigurationPath
  langs:
  - csharp
  - vb
  name: GetSectionKey(String)
  nameWithType: ConfigurationPath.GetSectionKey(String)
  fullName: Microsoft.Extensions.Configuration.ConfigurationPath.GetSectionKey(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration.Abstractions/ConfigurationPath.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: GetSectionKey
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration.Abstractions/ConfigurationPath.cs
    startLine: 51
  assemblies:
  - Microsoft.Extensions.Configuration.Abstractions
  namespace: Microsoft.Extensions.Configuration
  summary: "\nExtracts the last path segment from the path.\n"
  example: []
  syntax:
    content: public static string GetSectionKey(string path)
    parameters:
    - id: path
      type: System.String
      description: The path.
    return:
      type: System.String
      description: The last path segment of the path.
    content.vb: Public Shared Function GetSectionKey(path As String) As String
  overload: Microsoft.Extensions.Configuration.ConfigurationPath.GetSectionKey*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Configuration.ConfigurationPath.GetParentPath(System.String)
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationPath.GetParentPath(System.String)
  id: GetParentPath(System.String)
  parent: Microsoft.Extensions.Configuration.ConfigurationPath
  langs:
  - csharp
  - vb
  name: GetParentPath(String)
  nameWithType: ConfigurationPath.GetParentPath(String)
  fullName: Microsoft.Extensions.Configuration.ConfigurationPath.GetParentPath(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration.Abstractions/ConfigurationPath.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: GetParentPath
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration.Abstractions/ConfigurationPath.cs
    startLine: 67
  assemblies:
  - Microsoft.Extensions.Configuration.Abstractions
  namespace: Microsoft.Extensions.Configuration
  summary: "\nExtracts the path corresponding to the parent node for a given path.\n"
  example: []
  syntax:
    content: public static string GetParentPath(string path)
    parameters:
    - id: path
      type: System.String
      description: The path.
    return:
      type: System.String
      description: The original path minus the last individual segment found in it. Null if the original path corresponds to a top level node.
    content.vb: Public Shared Function GetParentPath(path As String) As String
  overload: Microsoft.Extensions.Configuration.ConfigurationPath.GetParentPath*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Extensions.Configuration
  commentId: N:Microsoft.Extensions.Configuration
  isExternal: false
  name: Microsoft.Extensions.Configuration
  nameWithType: Microsoft.Extensions.Configuration
  fullName: Microsoft.Extensions.Configuration
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Extensions.Configuration.ConfigurationPath.Combine*
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationPath.Combine
  isExternal: false
  name: Combine
  nameWithType: ConfigurationPath.Combine
  fullName: Microsoft.Extensions.Configuration.ConfigurationPath.Combine
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: IEnumerable{System.String}
  commentId: '!:IEnumerable{System.String}'
  definition: IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Configuration.ConfigurationPath.GetSectionKey*
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationPath.GetSectionKey
  isExternal: false
  name: GetSectionKey
  nameWithType: ConfigurationPath.GetSectionKey
  fullName: Microsoft.Extensions.Configuration.ConfigurationPath.GetSectionKey
- uid: Microsoft.Extensions.Configuration.ConfigurationPath.GetParentPath*
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationPath.GetParentPath
  isExternal: false
  name: GetParentPath
  nameWithType: ConfigurationPath.GetParentPath
  fullName: Microsoft.Extensions.Configuration.ConfigurationPath.GetParentPath
shouldSkipMarkup: true
