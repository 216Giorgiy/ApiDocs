### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Configuration.ConfigurationRoot
  commentId: T:Microsoft.Extensions.Configuration.ConfigurationRoot
  id: ConfigurationRoot
  parent: Microsoft.Extensions.Configuration
  children:
  - Microsoft.Extensions.Configuration.ConfigurationRoot.#ctor(IList{IConfigurationProvider})
  - Microsoft.Extensions.Configuration.ConfigurationRoot.GetChildren
  - Microsoft.Extensions.Configuration.ConfigurationRoot.GetReloadToken
  - Microsoft.Extensions.Configuration.ConfigurationRoot.GetSection(System.String)
  - Microsoft.Extensions.Configuration.ConfigurationRoot.Item(System.String)
  - Microsoft.Extensions.Configuration.ConfigurationRoot.Reload
  langs:
  - csharp
  - vb
  name: ConfigurationRoot
  nameWithType: ConfigurationRoot
  fullName: Microsoft.Extensions.Configuration.ConfigurationRoot
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration/ConfigurationRoot.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: ConfigurationRoot
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration/ConfigurationRoot.cs
    startLine: 14
  assemblies:
  - Microsoft.Extensions.Configuration
  namespace: Microsoft.Extensions.Configuration
  summary: "\nThe root node for a configuration.\n"
  example: []
  syntax:
    content: 'public class ConfigurationRoot : IConfigurationRoot'
    content.vb: >-
      Public Class ConfigurationRoot
          Inherits IConfigurationRoot
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.Configuration.ConfigurationRoot.#ctor(IList{IConfigurationProvider})
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationRoot.#ctor(IList{IConfigurationProvider})
  id: '#ctor(IList{IConfigurationProvider})'
  parent: Microsoft.Extensions.Configuration.ConfigurationRoot
  langs:
  - csharp
  - vb
  name: ConfigurationRoot(IList<IConfigurationProvider>)
  nameWithType: ConfigurationRoot.ConfigurationRoot(IList<IConfigurationProvider>)
  fullName: Microsoft.Extensions.Configuration.ConfigurationRoot.ConfigurationRoot(IList<IConfigurationProvider>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration/ConfigurationRoot.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: .ctor
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration/ConfigurationRoot.cs
    startLine: 23
  assemblies:
  - Microsoft.Extensions.Configuration
  namespace: Microsoft.Extensions.Configuration
  summary: "\nInitializes a Configuration root with a list of providers.\n"
  example: []
  syntax:
    content: public ConfigurationRoot(IList<IConfigurationProvider> providers)
    parameters:
    - id: providers
      type: IList{IConfigurationProvider}
      description: The <see cref="!:IConfigurationProvider"></see>s for this configuration.
    content.vb: Public Sub New(providers As IList(Of IConfigurationProvider))
  overload: Microsoft.Extensions.Configuration.ConfigurationRoot.#ctor*
  nameWithType.vb: ConfigurationRoot.ConfigurationRoot(IList(Of IConfigurationProvider))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.Configuration.ConfigurationRoot.ConfigurationRoot(IList(Of IConfigurationProvider))
  name.vb: ConfigurationRoot(IList(Of IConfigurationProvider))
- uid: Microsoft.Extensions.Configuration.ConfigurationRoot.Item(System.String)
  commentId: P:Microsoft.Extensions.Configuration.ConfigurationRoot.Item(System.String)
  id: Item(System.String)
  parent: Microsoft.Extensions.Configuration.ConfigurationRoot
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: ConfigurationRoot.Item[String]
  fullName: Microsoft.Extensions.Configuration.ConfigurationRoot.Item[System.String]
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration/ConfigurationRoot.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: this[]
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration/ConfigurationRoot.cs
    startLine: 43
  assemblies:
  - Microsoft.Extensions.Configuration
  namespace: Microsoft.Extensions.Configuration
  summary: "\nGets or sets the value corresponding to a configuration key.\n"
  example: []
  syntax:
    content: public string this[string key] { get; set; }
    parameters:
    - id: key
      type: System.String
      description: The configuration key.
    return:
      type: System.String
      description: The configuration value.
    content.vb: Public Property Item(key As String) As String
  overload: Microsoft.Extensions.Configuration.ConfigurationRoot.Item*
  nameWithType.vb: ConfigurationRoot.Item(String)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.Configuration.ConfigurationRoot.Item(System.String)
  name.vb: Item(String)
- uid: Microsoft.Extensions.Configuration.ConfigurationRoot.GetChildren
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationRoot.GetChildren
  id: GetChildren
  parent: Microsoft.Extensions.Configuration.ConfigurationRoot
  langs:
  - csharp
  - vb
  name: GetChildren()
  nameWithType: ConfigurationRoot.GetChildren()
  fullName: Microsoft.Extensions.Configuration.ConfigurationRoot.GetChildren()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration/ConfigurationRoot.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: GetChildren
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration/ConfigurationRoot.cs
    startLine: 78
  assemblies:
  - Microsoft.Extensions.Configuration
  namespace: Microsoft.Extensions.Configuration
  summary: "\nGets the immediate children sub-sections.\n"
  example: []
  syntax:
    content: public IEnumerable<IConfigurationSection> GetChildren()
    return:
      type: IEnumerable{IConfigurationSection}
      description: ''
    content.vb: Public Function GetChildren As IEnumerable(Of IConfigurationSection)
  overload: Microsoft.Extensions.Configuration.ConfigurationRoot.GetChildren*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Configuration.ConfigurationRoot.GetReloadToken
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationRoot.GetReloadToken
  id: GetReloadToken
  parent: Microsoft.Extensions.Configuration.ConfigurationRoot
  langs:
  - csharp
  - vb
  name: GetReloadToken()
  nameWithType: ConfigurationRoot.GetReloadToken()
  fullName: Microsoft.Extensions.Configuration.ConfigurationRoot.GetReloadToken()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration/ConfigurationRoot.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: GetReloadToken
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration/ConfigurationRoot.cs
    startLine: 93
  assemblies:
  - Microsoft.Extensions.Configuration
  namespace: Microsoft.Extensions.Configuration
  summary: "\nReturns a <see cref=\"!:IChangeToken\"></see> that can be used to observe when this configuration is reloaded.\n"
  example: []
  syntax:
    content: public IChangeToken GetReloadToken()
    return:
      type: IChangeToken
      description: ''
    content.vb: Public Function GetReloadToken As IChangeToken
  overload: Microsoft.Extensions.Configuration.ConfigurationRoot.GetReloadToken*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Configuration.ConfigurationRoot.GetSection(System.String)
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationRoot.GetSection(System.String)
  id: GetSection(System.String)
  parent: Microsoft.Extensions.Configuration.ConfigurationRoot
  langs:
  - csharp
  - vb
  name: GetSection(String)
  nameWithType: ConfigurationRoot.GetSection(String)
  fullName: Microsoft.Extensions.Configuration.ConfigurationRoot.GetSection(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration/ConfigurationRoot.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: GetSection
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration/ConfigurationRoot.cs
    startLine: 107
  assemblies:
  - Microsoft.Extensions.Configuration
  namespace: Microsoft.Extensions.Configuration
  summary: "\nGets a configuration sub-section with the specified key.\n"
  remarks: "\nThis method will never return <code>null</code>. If no matching sub-section is found with the specified key,\nan empty <see cref=\"!:IConfigurationSection\"></see> will be returned.\n"
  example: []
  syntax:
    content: public IConfigurationSection GetSection(string key)
    parameters:
    - id: key
      type: System.String
      description: The key of the configuration section.
    return:
      type: IConfigurationSection
      description: The <see cref="!:IConfigurationSection"></see>.
    content.vb: Public Function GetSection(key As String) As IConfigurationSection
  overload: Microsoft.Extensions.Configuration.ConfigurationRoot.GetSection*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Configuration.ConfigurationRoot.Reload
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationRoot.Reload
  id: Reload
  parent: Microsoft.Extensions.Configuration.ConfigurationRoot
  langs:
  - csharp
  - vb
  name: Reload()
  nameWithType: ConfigurationRoot.Reload()
  fullName: Microsoft.Extensions.Configuration.ConfigurationRoot.Reload()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration/ConfigurationRoot.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: Reload
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration/ConfigurationRoot.cs
    startLine: 115
  assemblies:
  - Microsoft.Extensions.Configuration
  namespace: Microsoft.Extensions.Configuration
  summary: "\nForce the configuration values to be reloaded from the underlying sources.\n"
  example: []
  syntax:
    content: public void Reload()
    content.vb: Public Sub Reload
  overload: Microsoft.Extensions.Configuration.ConfigurationRoot.Reload*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Extensions.Configuration
  commentId: N:Microsoft.Extensions.Configuration
  isExternal: false
  name: Microsoft.Extensions.Configuration
  nameWithType: Microsoft.Extensions.Configuration
  fullName: Microsoft.Extensions.Configuration
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Configuration.ConfigurationRoot.#ctor*
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationRoot.#ctor
  isExternal: false
  name: ConfigurationRoot
  nameWithType: ConfigurationRoot.ConfigurationRoot
  fullName: Microsoft.Extensions.Configuration.ConfigurationRoot.ConfigurationRoot
- uid: IList{IConfigurationProvider}
  commentId: '!:IList{IConfigurationProvider}'
  definition: IList`1
  name: IList<IConfigurationProvider>
  nameWithType: IList<IConfigurationProvider>
  fullName: IList<IConfigurationProvider>
  nameWithType.vb: IList(Of IConfigurationProvider)
  fullName.vb: IList(Of IConfigurationProvider)
  name.vb: IList(Of IConfigurationProvider)
  spec.csharp:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IConfigurationProvider
    name: IConfigurationProvider
    nameWithType: IConfigurationProvider
    fullName: IConfigurationProvider
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IConfigurationProvider
    name: IConfigurationProvider
    nameWithType: IConfigurationProvider
    fullName: IConfigurationProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IList`1
  isExternal: true
  name: IList<>
  nameWithType: IList<>
  fullName: IList<>
  nameWithType.vb: IList(Of )
  fullName.vb: IList(Of )
  name.vb: IList(Of )
  spec.csharp:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Configuration.ConfigurationRoot.Item*
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationRoot.Item
  isExternal: false
  name: Item
  nameWithType: ConfigurationRoot.Item
  fullName: Microsoft.Extensions.Configuration.ConfigurationRoot.Item
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Extensions.Configuration.ConfigurationRoot.GetChildren*
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationRoot.GetChildren
  isExternal: false
  name: GetChildren
  nameWithType: ConfigurationRoot.GetChildren
  fullName: Microsoft.Extensions.Configuration.ConfigurationRoot.GetChildren
- uid: IEnumerable{IConfigurationSection}
  commentId: '!:IEnumerable{IConfigurationSection}'
  definition: IEnumerable`1
  name: IEnumerable<IConfigurationSection>
  nameWithType: IEnumerable<IConfigurationSection>
  fullName: IEnumerable<IConfigurationSection>
  nameWithType.vb: IEnumerable(Of IConfigurationSection)
  fullName.vb: IEnumerable(Of IConfigurationSection)
  name.vb: IEnumerable(Of IConfigurationSection)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IConfigurationSection
    name: IConfigurationSection
    nameWithType: IConfigurationSection
    fullName: IConfigurationSection
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IConfigurationSection
    name: IConfigurationSection
    nameWithType: IConfigurationSection
    fullName: IConfigurationSection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Configuration.ConfigurationRoot.GetReloadToken*
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationRoot.GetReloadToken
  isExternal: false
  name: GetReloadToken
  nameWithType: ConfigurationRoot.GetReloadToken
  fullName: Microsoft.Extensions.Configuration.ConfigurationRoot.GetReloadToken
- uid: IChangeToken
  isExternal: true
  name: IChangeToken
  nameWithType: IChangeToken
  fullName: IChangeToken
- uid: Microsoft.Extensions.Configuration.ConfigurationRoot.GetSection*
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationRoot.GetSection
  isExternal: false
  name: GetSection
  nameWithType: ConfigurationRoot.GetSection
  fullName: Microsoft.Extensions.Configuration.ConfigurationRoot.GetSection
- uid: IConfigurationSection
  isExternal: true
  name: IConfigurationSection
  nameWithType: IConfigurationSection
  fullName: IConfigurationSection
- uid: Microsoft.Extensions.Configuration.ConfigurationRoot.Reload*
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationRoot.Reload
  isExternal: false
  name: Reload
  nameWithType: ConfigurationRoot.Reload
  fullName: Microsoft.Extensions.Configuration.ConfigurationRoot.Reload
shouldSkipMarkup: true
