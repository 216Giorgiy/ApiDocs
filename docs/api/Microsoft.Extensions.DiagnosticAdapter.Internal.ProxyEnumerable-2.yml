### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2
  commentId: T:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2
  id: ProxyEnumerable`2
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal
  children:
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.#ctor(IEnumerable{`0},Type)
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.GetEnumerator
  langs:
  - csharp
  - vb
  name: ProxyEnumerable<TSourceElement, TTargetElement>
  nameWithType: ProxyEnumerable<TSourceElement, TTargetElement>
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable<TSourceElement, TTargetElement>
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyEnumerable.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: ProxyEnumerable
    path: ../aspnet/EventNotification/src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyEnumerable.cs
    startLine: 9
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: 'public class ProxyEnumerable<TSourceElement, TTargetElement> : IEnumerable<TTargetElement>'
    typeParameters:
    - id: TSourceElement
    - id: TTargetElement
    content.vb: >-
      Public Class ProxyEnumerable(Of TSourceElement, TTargetElement)
          Inherits IEnumerable(Of TTargetElement)
  inheritance:
  - System.Object
  nameWithType.vb: ProxyEnumerable(Of TSourceElement, TTargetElement)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable(Of TSourceElement, TTargetElement)
  name.vb: ProxyEnumerable(Of TSourceElement, TTargetElement)
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.#ctor(IEnumerable{`0},Type)
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.#ctor(IEnumerable{`0},Type)
  id: '#ctor(IEnumerable{`0},Type)'
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2
  langs:
  - csharp
  - vb
  name: ProxyEnumerable(IEnumerable<TSourceElement>, Type)
  nameWithType: ProxyEnumerable<TSourceElement, TTargetElement>.ProxyEnumerable(IEnumerable<TSourceElement>, Type)
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable<TSourceElement, TTargetElement>.ProxyEnumerable(IEnumerable<TSourceElement>, Type)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyEnumerable.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: .ctor
    path: ../aspnet/EventNotification/src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyEnumerable.cs
    startLine: 14
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: public ProxyEnumerable(IEnumerable<TSourceElement> source, Type proxyType)
    parameters:
    - id: source
      type: IEnumerable{{TSourceElement}}
    - id: proxyType
      type: Type
    content.vb: Public Sub New(source As IEnumerable(Of TSourceElement), proxyType As Type)
  overload: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.#ctor*
  nameWithType.vb: ProxyEnumerable(Of TSourceElement, TTargetElement).ProxyEnumerable(IEnumerable(Of TSourceElement), Type)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable(Of TSourceElement, TTargetElement).ProxyEnumerable(IEnumerable(Of TSourceElement), Type)
  name.vb: ProxyEnumerable(IEnumerable(Of TSourceElement), Type)
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.GetEnumerator
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.GetEnumerator
  id: GetEnumerator
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: ProxyEnumerable<TSourceElement, TTargetElement>.GetEnumerator()
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable<TSourceElement, TTargetElement>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyEnumerable.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: GetEnumerator
    path: ../aspnet/EventNotification/src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyEnumerable.cs
    startLine: 20
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: public IEnumerator<TTargetElement> GetEnumerator()
    return:
      type: IEnumerator{{TTargetElement}}
    content.vb: Public Function GetEnumerator As IEnumerator(Of TTargetElement)
  overload: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.GetEnumerator*
  nameWithType.vb: ProxyEnumerable(Of TSourceElement, TTargetElement).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable(Of TSourceElement, TTargetElement).GetEnumerator()
references:
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal
  commentId: N:Microsoft.Extensions.DiagnosticAdapter.Internal
  isExternal: false
  name: Microsoft.Extensions.DiagnosticAdapter.Internal
  nameWithType: Microsoft.Extensions.DiagnosticAdapter.Internal
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.#ctor*
  commentId: Overload:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.#ctor
  isExternal: false
  name: ProxyEnumerable
  nameWithType: ProxyEnumerable<TSourceElement, TTargetElement>.ProxyEnumerable
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable<TSourceElement, TTargetElement>.ProxyEnumerable
  nameWithType.vb: ProxyEnumerable(Of TSourceElement, TTargetElement).ProxyEnumerable
  fullName.vb: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable(Of TSourceElement, TTargetElement).ProxyEnumerable
- uid: IEnumerable{{TSourceElement}}
  commentId: '!:IEnumerable{`0}'
  definition: IEnumerable`1
  name: IEnumerable<TSourceElement>
  nameWithType: IEnumerable<TSourceElement>
  fullName: IEnumerable<TSourceElement>
  nameWithType.vb: IEnumerable(Of TSourceElement)
  fullName.vb: IEnumerable(Of TSourceElement)
  name.vb: IEnumerable(Of TSourceElement)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSourceElement
    nameWithType: TSourceElement
    fullName: TSourceElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSourceElement
    nameWithType: TSourceElement
    fullName: TSourceElement
  - name: )
    nameWithType: )
    fullName: )
- uid: Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: Type
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.GetEnumerator*
  commentId: Overload:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.GetEnumerator
  isExternal: false
  name: GetEnumerator
  nameWithType: ProxyEnumerable<TSourceElement, TTargetElement>.GetEnumerator
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable<TSourceElement, TTargetElement>.GetEnumerator
  nameWithType.vb: ProxyEnumerable(Of TSourceElement, TTargetElement).GetEnumerator
  fullName.vb: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable(Of TSourceElement, TTargetElement).GetEnumerator
- uid: IEnumerator{{TTargetElement}}
  commentId: '!:IEnumerator{`1}'
  definition: IEnumerator`1
  name: IEnumerator<TTargetElement>
  nameWithType: IEnumerator<TTargetElement>
  fullName: IEnumerator<TTargetElement>
  nameWithType.vb: IEnumerator(Of TTargetElement)
  fullName.vb: IEnumerator(Of TTargetElement)
  name.vb: IEnumerator(Of TTargetElement)
  spec.csharp:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TTargetElement
    nameWithType: TTargetElement
    fullName: TTargetElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TTargetElement
    nameWithType: TTargetElement
    fullName: TTargetElement
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerator`1
  isExternal: true
  name: IEnumerator<>
  nameWithType: IEnumerator<>
  fullName: IEnumerator<>
  nameWithType.vb: IEnumerator(Of )
  fullName.vb: IEnumerator(Of )
  name.vb: IEnumerator(Of )
  spec.csharp:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
