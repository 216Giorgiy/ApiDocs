### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Caching.Redis.RedisCache
  commentId: T:Microsoft.Extensions.Caching.Redis.RedisCache
  id: RedisCache
  parent: Microsoft.Extensions.Caching.Redis
  children:
  - Microsoft.Extensions.Caching.Redis.RedisCache.#ctor(IOptions{Microsoft.Extensions.Caching.Redis.RedisCacheOptions})
  - Microsoft.Extensions.Caching.Redis.RedisCache.Dispose
  - Microsoft.Extensions.Caching.Redis.RedisCache.Get(System.String)
  - Microsoft.Extensions.Caching.Redis.RedisCache.GetAsync(System.String)
  - Microsoft.Extensions.Caching.Redis.RedisCache.Refresh(System.String)
  - Microsoft.Extensions.Caching.Redis.RedisCache.RefreshAsync(System.String)
  - Microsoft.Extensions.Caching.Redis.RedisCache.Remove(System.String)
  - Microsoft.Extensions.Caching.Redis.RedisCache.RemoveAsync(System.String)
  - Microsoft.Extensions.Caching.Redis.RedisCache.Set(System.String,System.Byte[],DistributedCacheEntryOptions)
  - Microsoft.Extensions.Caching.Redis.RedisCache.SetAsync(System.String,System.Byte[],DistributedCacheEntryOptions)
  langs:
  - csharp
  - vb
  name: RedisCache
  nameWithType: RedisCache
  fullName: Microsoft.Extensions.Caching.Redis.RedisCache
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Redis/RedisCache.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: RedisCache
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Redis/RedisCache.cs
    startLine: 11
  assemblies:
  - Microsoft.Extensions.Caching.Redis
  namespace: Microsoft.Extensions.Caching.Redis
  syntax:
    content: 'public class RedisCache : IDistributedCache, IDisposable'
    content.vb: >-
      Public Class RedisCache
          Inherits IDistributedCache
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.Caching.Redis.RedisCache.#ctor(IOptions{Microsoft.Extensions.Caching.Redis.RedisCacheOptions})
  commentId: M:Microsoft.Extensions.Caching.Redis.RedisCache.#ctor(IOptions{Microsoft.Extensions.Caching.Redis.RedisCacheOptions})
  id: '#ctor(IOptions{Microsoft.Extensions.Caching.Redis.RedisCacheOptions})'
  parent: Microsoft.Extensions.Caching.Redis.RedisCache
  langs:
  - csharp
  - vb
  name: RedisCache(IOptions<RedisCacheOptions>)
  nameWithType: RedisCache.RedisCache(IOptions<RedisCacheOptions>)
  fullName: Microsoft.Extensions.Caching.Redis.RedisCache.RedisCache(IOptions<Microsoft.Extensions.Caching.Redis.RedisCacheOptions>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Redis/RedisCache.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: .ctor
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Redis/RedisCache.cs
    startLine: 36
  assemblies:
  - Microsoft.Extensions.Caching.Redis
  namespace: Microsoft.Extensions.Caching.Redis
  syntax:
    content: public RedisCache(IOptions<RedisCacheOptions> optionsAccessor)
    parameters:
    - id: optionsAccessor
      type: IOptions{Microsoft.Extensions.Caching.Redis.RedisCacheOptions}
    content.vb: Public Sub New(optionsAccessor As IOptions(Of RedisCacheOptions))
  overload: Microsoft.Extensions.Caching.Redis.RedisCache.#ctor*
  nameWithType.vb: RedisCache.RedisCache(IOptions(Of RedisCacheOptions))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.Caching.Redis.RedisCache.RedisCache(IOptions(Of Microsoft.Extensions.Caching.Redis.RedisCacheOptions))
  name.vb: RedisCache(IOptions(Of RedisCacheOptions))
- uid: Microsoft.Extensions.Caching.Redis.RedisCache.Get(System.String)
  commentId: M:Microsoft.Extensions.Caching.Redis.RedisCache.Get(System.String)
  id: Get(System.String)
  parent: Microsoft.Extensions.Caching.Redis.RedisCache
  langs:
  - csharp
  - vb
  name: Get(String)
  nameWithType: RedisCache.Get(String)
  fullName: Microsoft.Extensions.Caching.Redis.RedisCache.Get(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Redis/RedisCache.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: Get
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Redis/RedisCache.cs
    startLine: 49
  assemblies:
  - Microsoft.Extensions.Caching.Redis
  namespace: Microsoft.Extensions.Caching.Redis
  syntax:
    content: public byte[] Get(string key)
    parameters:
    - id: key
      type: System.String
    return:
      type: System.Byte[]
    content.vb: Public Function Get(key As String) As Byte()
  overload: Microsoft.Extensions.Caching.Redis.RedisCache.Get*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Caching.Redis.RedisCache.GetAsync(System.String)
  commentId: M:Microsoft.Extensions.Caching.Redis.RedisCache.GetAsync(System.String)
  id: GetAsync(System.String)
  parent: Microsoft.Extensions.Caching.Redis.RedisCache
  langs:
  - csharp
  - vb
  name: GetAsync(String)
  nameWithType: RedisCache.GetAsync(String)
  fullName: Microsoft.Extensions.Caching.Redis.RedisCache.GetAsync(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Redis/RedisCache.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: GetAsync
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Redis/RedisCache.cs
    startLine: 59
  assemblies:
  - Microsoft.Extensions.Caching.Redis
  namespace: Microsoft.Extensions.Caching.Redis
  syntax:
    content: public Task<byte[]> GetAsync(string key)
    parameters:
    - id: key
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
    content.vb: Public Function GetAsync(key As String) As Task(Of Byte())
  overload: Microsoft.Extensions.Caching.Redis.RedisCache.GetAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Caching.Redis.RedisCache.Set(System.String,System.Byte[],DistributedCacheEntryOptions)
  commentId: M:Microsoft.Extensions.Caching.Redis.RedisCache.Set(System.String,System.Byte[],DistributedCacheEntryOptions)
  id: Set(System.String,System.Byte[],DistributedCacheEntryOptions)
  parent: Microsoft.Extensions.Caching.Redis.RedisCache
  langs:
  - csharp
  - vb
  name: Set(String, Byte[], DistributedCacheEntryOptions)
  nameWithType: RedisCache.Set(String, Byte[], DistributedCacheEntryOptions)
  fullName: Microsoft.Extensions.Caching.Redis.RedisCache.Set(System.String, System.Byte[], DistributedCacheEntryOptions)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Redis/RedisCache.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: Set
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Redis/RedisCache.cs
    startLine: 69
  assemblies:
  - Microsoft.Extensions.Caching.Redis
  namespace: Microsoft.Extensions.Caching.Redis
  syntax:
    content: public void Set(string key, byte[] value, DistributedCacheEntryOptions options)
    parameters:
    - id: key
      type: System.String
    - id: value
      type: System.Byte[]
    - id: options
      type: DistributedCacheEntryOptions
    content.vb: Public Sub Set(key As String, value As Byte(), options As DistributedCacheEntryOptions)
  overload: Microsoft.Extensions.Caching.Redis.RedisCache.Set*
  nameWithType.vb: RedisCache.Set(String, Byte(), DistributedCacheEntryOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.Caching.Redis.RedisCache.Set(System.String, System.Byte(), DistributedCacheEntryOptions)
  name.vb: Set(String, Byte(), DistributedCacheEntryOptions)
- uid: Microsoft.Extensions.Caching.Redis.RedisCache.SetAsync(System.String,System.Byte[],DistributedCacheEntryOptions)
  commentId: M:Microsoft.Extensions.Caching.Redis.RedisCache.SetAsync(System.String,System.Byte[],DistributedCacheEntryOptions)
  id: SetAsync(System.String,System.Byte[],DistributedCacheEntryOptions)
  parent: Microsoft.Extensions.Caching.Redis.RedisCache
  langs:
  - csharp
  - vb
  name: SetAsync(String, Byte[], DistributedCacheEntryOptions)
  nameWithType: RedisCache.SetAsync(String, Byte[], DistributedCacheEntryOptions)
  fullName: Microsoft.Extensions.Caching.Redis.RedisCache.SetAsync(System.String, System.Byte[], DistributedCacheEntryOptions)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Redis/RedisCache.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: SetAsync
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Redis/RedisCache.cs
    startLine: 97
  assemblies:
  - Microsoft.Extensions.Caching.Redis
  namespace: Microsoft.Extensions.Caching.Redis
  syntax:
    content: public Task SetAsync(string key, byte[] value, DistributedCacheEntryOptions options)
    parameters:
    - id: key
      type: System.String
    - id: value
      type: System.Byte[]
    - id: options
      type: DistributedCacheEntryOptions
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function SetAsync(key As String, value As Byte(), options As DistributedCacheEntryOptions) As Task
  overload: Microsoft.Extensions.Caching.Redis.RedisCache.SetAsync*
  nameWithType.vb: RedisCache.SetAsync(String, Byte(), DistributedCacheEntryOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.Caching.Redis.RedisCache.SetAsync(System.String, System.Byte(), DistributedCacheEntryOptions)
  name.vb: SetAsync(String, Byte(), DistributedCacheEntryOptions)
- uid: Microsoft.Extensions.Caching.Redis.RedisCache.Refresh(System.String)
  commentId: M:Microsoft.Extensions.Caching.Redis.RedisCache.Refresh(System.String)
  id: Refresh(System.String)
  parent: Microsoft.Extensions.Caching.Redis.RedisCache
  langs:
  - csharp
  - vb
  name: Refresh(String)
  nameWithType: RedisCache.Refresh(String)
  fullName: Microsoft.Extensions.Caching.Redis.RedisCache.Refresh(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Redis/RedisCache.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: Refresh
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Redis/RedisCache.cs
    startLine: 125
  assemblies:
  - Microsoft.Extensions.Caching.Redis
  namespace: Microsoft.Extensions.Caching.Redis
  syntax:
    content: public void Refresh(string key)
    parameters:
    - id: key
      type: System.String
    content.vb: Public Sub Refresh(key As String)
  overload: Microsoft.Extensions.Caching.Redis.RedisCache.Refresh*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Caching.Redis.RedisCache.RefreshAsync(System.String)
  commentId: M:Microsoft.Extensions.Caching.Redis.RedisCache.RefreshAsync(System.String)
  id: RefreshAsync(System.String)
  parent: Microsoft.Extensions.Caching.Redis.RedisCache
  langs:
  - csharp
  - vb
  name: RefreshAsync(String)
  nameWithType: RedisCache.RefreshAsync(String)
  fullName: Microsoft.Extensions.Caching.Redis.RedisCache.RefreshAsync(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Redis/RedisCache.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: RefreshAsync
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Redis/RedisCache.cs
    startLine: 135
  assemblies:
  - Microsoft.Extensions.Caching.Redis
  namespace: Microsoft.Extensions.Caching.Redis
  syntax:
    content: public Task RefreshAsync(string key)
    parameters:
    - id: key
      type: System.String
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function RefreshAsync(key As String) As Task
  overload: Microsoft.Extensions.Caching.Redis.RedisCache.RefreshAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Caching.Redis.RedisCache.Remove(System.String)
  commentId: M:Microsoft.Extensions.Caching.Redis.RedisCache.Remove(System.String)
  id: Remove(System.String)
  parent: Microsoft.Extensions.Caching.Redis.RedisCache
  langs:
  - csharp
  - vb
  name: Remove(String)
  nameWithType: RedisCache.Remove(String)
  fullName: Microsoft.Extensions.Caching.Redis.RedisCache.Remove(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Redis/RedisCache.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: Remove
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Redis/RedisCache.cs
    startLine: 243
  assemblies:
  - Microsoft.Extensions.Caching.Redis
  namespace: Microsoft.Extensions.Caching.Redis
  syntax:
    content: public void Remove(string key)
    parameters:
    - id: key
      type: System.String
    content.vb: Public Sub Remove(key As String)
  overload: Microsoft.Extensions.Caching.Redis.RedisCache.Remove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Caching.Redis.RedisCache.RemoveAsync(System.String)
  commentId: M:Microsoft.Extensions.Caching.Redis.RedisCache.RemoveAsync(System.String)
  id: RemoveAsync(System.String)
  parent: Microsoft.Extensions.Caching.Redis.RedisCache
  langs:
  - csharp
  - vb
  name: RemoveAsync(String)
  nameWithType: RedisCache.RemoveAsync(String)
  fullName: Microsoft.Extensions.Caching.Redis.RedisCache.RemoveAsync(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Redis/RedisCache.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: RemoveAsync
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Redis/RedisCache.cs
    startLine: 256
  assemblies:
  - Microsoft.Extensions.Caching.Redis
  namespace: Microsoft.Extensions.Caching.Redis
  syntax:
    content: public Task RemoveAsync(string key)
    parameters:
    - id: key
      type: System.String
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function RemoveAsync(key As String) As Task
  overload: Microsoft.Extensions.Caching.Redis.RedisCache.RemoveAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Caching.Redis.RedisCache.Dispose
  commentId: M:Microsoft.Extensions.Caching.Redis.RedisCache.Dispose
  id: Dispose
  parent: Microsoft.Extensions.Caching.Redis.RedisCache
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: RedisCache.Dispose()
  fullName: Microsoft.Extensions.Caching.Redis.RedisCache.Dispose()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Redis/RedisCache.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: Dispose
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Redis/RedisCache.cs
    startLine: 372
  assemblies:
  - Microsoft.Extensions.Caching.Redis
  namespace: Microsoft.Extensions.Caching.Redis
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Microsoft.Extensions.Caching.Redis.RedisCache.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Extensions.Caching.Redis
  commentId: N:Microsoft.Extensions.Caching.Redis
  isExternal: false
  name: Microsoft.Extensions.Caching.Redis
  nameWithType: Microsoft.Extensions.Caching.Redis
  fullName: Microsoft.Extensions.Caching.Redis
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Caching.Redis.RedisCache.#ctor*
  commentId: Overload:Microsoft.Extensions.Caching.Redis.RedisCache.#ctor
  isExternal: false
  name: RedisCache
  nameWithType: RedisCache.RedisCache
  fullName: Microsoft.Extensions.Caching.Redis.RedisCache.RedisCache
- uid: IOptions{Microsoft.Extensions.Caching.Redis.RedisCacheOptions}
  commentId: '!:IOptions{Microsoft.Extensions.Caching.Redis.RedisCacheOptions}'
  definition: IOptions`1
  name: IOptions<RedisCacheOptions>
  nameWithType: IOptions<RedisCacheOptions>
  fullName: IOptions<Microsoft.Extensions.Caching.Redis.RedisCacheOptions>
  nameWithType.vb: IOptions(Of RedisCacheOptions)
  fullName.vb: IOptions(Of Microsoft.Extensions.Caching.Redis.RedisCacheOptions)
  name.vb: IOptions(Of RedisCacheOptions)
  spec.csharp:
  - uid: IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: IOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.Caching.Redis.RedisCacheOptions
    name: RedisCacheOptions
    nameWithType: RedisCacheOptions
    fullName: Microsoft.Extensions.Caching.Redis.RedisCacheOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: IOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.Caching.Redis.RedisCacheOptions
    name: RedisCacheOptions
    nameWithType: RedisCacheOptions
    fullName: Microsoft.Extensions.Caching.Redis.RedisCacheOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: IOptions`1
  isExternal: true
  name: IOptions<>
  nameWithType: IOptions<>
  fullName: IOptions<>
  nameWithType.vb: IOptions(Of )
  fullName.vb: IOptions(Of )
  name.vb: IOptions(Of )
  spec.csharp:
  - uid: IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: IOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: IOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Caching.Redis.RedisCache.Get*
  commentId: Overload:Microsoft.Extensions.Caching.Redis.RedisCache.Get
  isExternal: false
  name: Get
  nameWithType: RedisCache.Get
  fullName: Microsoft.Extensions.Caching.Redis.RedisCache.Get
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Extensions.Caching.Redis.RedisCache.GetAsync*
  commentId: Overload:Microsoft.Extensions.Caching.Redis.RedisCache.GetAsync
  isExternal: false
  name: GetAsync
  nameWithType: RedisCache.GetAsync
  fullName: Microsoft.Extensions.Caching.Redis.RedisCache.GetAsync
- uid: System.Threading.Tasks.Task{System.Byte[]}
  commentId: T:System.Threading.Tasks.Task{System.Byte[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Byte[]>
  nameWithType: Task<Byte[]>
  fullName: System.Threading.Tasks.Task<System.Byte[]>
  nameWithType.vb: Task(Of Byte())
  fullName.vb: System.Threading.Tasks.Task(Of System.Byte())
  name.vb: Task(Of Byte())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.Extensions.Caching.Redis.RedisCache.Set*
  commentId: Overload:Microsoft.Extensions.Caching.Redis.RedisCache.Set
  isExternal: false
  name: Set
  nameWithType: RedisCache.Set
  fullName: Microsoft.Extensions.Caching.Redis.RedisCache.Set
- uid: DistributedCacheEntryOptions
  isExternal: true
  name: DistributedCacheEntryOptions
  nameWithType: DistributedCacheEntryOptions
  fullName: DistributedCacheEntryOptions
- uid: Microsoft.Extensions.Caching.Redis.RedisCache.SetAsync*
  commentId: Overload:Microsoft.Extensions.Caching.Redis.RedisCache.SetAsync
  isExternal: false
  name: SetAsync
  nameWithType: RedisCache.SetAsync
  fullName: Microsoft.Extensions.Caching.Redis.RedisCache.SetAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Microsoft.Extensions.Caching.Redis.RedisCache.Refresh*
  commentId: Overload:Microsoft.Extensions.Caching.Redis.RedisCache.Refresh
  isExternal: false
  name: Refresh
  nameWithType: RedisCache.Refresh
  fullName: Microsoft.Extensions.Caching.Redis.RedisCache.Refresh
- uid: Microsoft.Extensions.Caching.Redis.RedisCache.RefreshAsync*
  commentId: Overload:Microsoft.Extensions.Caching.Redis.RedisCache.RefreshAsync
  isExternal: false
  name: RefreshAsync
  nameWithType: RedisCache.RefreshAsync
  fullName: Microsoft.Extensions.Caching.Redis.RedisCache.RefreshAsync
- uid: Microsoft.Extensions.Caching.Redis.RedisCache.Remove*
  commentId: Overload:Microsoft.Extensions.Caching.Redis.RedisCache.Remove
  isExternal: false
  name: Remove
  nameWithType: RedisCache.Remove
  fullName: Microsoft.Extensions.Caching.Redis.RedisCache.Remove
- uid: Microsoft.Extensions.Caching.Redis.RedisCache.RemoveAsync*
  commentId: Overload:Microsoft.Extensions.Caching.Redis.RedisCache.RemoveAsync
  isExternal: false
  name: RemoveAsync
  nameWithType: RedisCache.RemoveAsync
  fullName: Microsoft.Extensions.Caching.Redis.RedisCache.RemoveAsync
- uid: Microsoft.Extensions.Caching.Redis.RedisCache.Dispose*
  commentId: Overload:Microsoft.Extensions.Caching.Redis.RedisCache.Dispose
  isExternal: false
  name: Dispose
  nameWithType: RedisCache.Dispose
  fullName: Microsoft.Extensions.Caching.Redis.RedisCache.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
