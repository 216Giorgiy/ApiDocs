### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Configuration.IConfigurationProvider
  commentId: T:Microsoft.Extensions.Configuration.IConfigurationProvider
  id: IConfigurationProvider
  parent: Microsoft.Extensions.Configuration
  children:
  - Microsoft.Extensions.Configuration.IConfigurationProvider.GetChildKeys(IEnumerable{System.String},System.String)
  - Microsoft.Extensions.Configuration.IConfigurationProvider.GetReloadToken
  - Microsoft.Extensions.Configuration.IConfigurationProvider.Load
  - Microsoft.Extensions.Configuration.IConfigurationProvider.Set(System.String,System.String)
  - Microsoft.Extensions.Configuration.IConfigurationProvider.TryGet(System.String,System.String@)
  langs:
  - csharp
  - vb
  name: IConfigurationProvider
  nameWithType: IConfigurationProvider
  fullName: Microsoft.Extensions.Configuration.IConfigurationProvider
  type: Interface
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration.Abstractions/IConfigurationProvider.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: IConfigurationProvider
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration.Abstractions/IConfigurationProvider.cs
    startLine: 11
  assemblies:
  - Microsoft.Extensions.Configuration.Abstractions
  namespace: Microsoft.Extensions.Configuration
  summary: "\nProvides configuration key/values for an application.\n"
  example: []
  syntax:
    content: public interface IConfigurationProvider
    content.vb: Public Interface IConfigurationProvider
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.Extensions.Configuration.IConfigurationProvider.TryGet(System.String,System.String@)
  commentId: M:Microsoft.Extensions.Configuration.IConfigurationProvider.TryGet(System.String,System.String@)
  id: TryGet(System.String,System.String@)
  parent: Microsoft.Extensions.Configuration.IConfigurationProvider
  langs:
  - csharp
  - vb
  name: TryGet(String, out String)
  nameWithType: IConfigurationProvider.TryGet(String, out String)
  fullName: Microsoft.Extensions.Configuration.IConfigurationProvider.TryGet(System.String, out System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration.Abstractions/IConfigurationProvider.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: TryGet
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration.Abstractions/IConfigurationProvider.cs
    startLine: 19
  assemblies:
  - Microsoft.Extensions.Configuration.Abstractions
  namespace: Microsoft.Extensions.Configuration
  summary: "\nTries to get a configuration value for the specified key.\n"
  example: []
  syntax:
    content: bool TryGet(string key, out string value)
    parameters:
    - id: key
      type: System.String
      description: The key.
    - id: value
      type: System.String
      description: The value.
    return:
      type: System.Boolean
      description: <code>True</code> if a value for the specified key was found, otherwise <code>false</code>.
    content.vb: Function TryGet(key As String, ByRef value As String) As Boolean
  overload: Microsoft.Extensions.Configuration.IConfigurationProvider.TryGet*
  nameWithType.vb: IConfigurationProvider.TryGet(String, ByRef String)
  fullName.vb: Microsoft.Extensions.Configuration.IConfigurationProvider.TryGet(System.String, ByRef System.String)
  name.vb: TryGet(String, ByRef String)
- uid: Microsoft.Extensions.Configuration.IConfigurationProvider.Set(System.String,System.String)
  commentId: M:Microsoft.Extensions.Configuration.IConfigurationProvider.Set(System.String,System.String)
  id: Set(System.String,System.String)
  parent: Microsoft.Extensions.Configuration.IConfigurationProvider
  langs:
  - csharp
  - vb
  name: Set(String, String)
  nameWithType: IConfigurationProvider.Set(String, String)
  fullName: Microsoft.Extensions.Configuration.IConfigurationProvider.Set(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration.Abstractions/IConfigurationProvider.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: Set
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration.Abstractions/IConfigurationProvider.cs
    startLine: 26
  assemblies:
  - Microsoft.Extensions.Configuration.Abstractions
  namespace: Microsoft.Extensions.Configuration
  summary: "\nSets a configuration value for the specified key.\n"
  example: []
  syntax:
    content: void Set(string key, string value)
    parameters:
    - id: key
      type: System.String
      description: The key.
    - id: value
      type: System.String
      description: The value.
    content.vb: Sub Set(key As String, value As String)
  overload: Microsoft.Extensions.Configuration.IConfigurationProvider.Set*
- uid: Microsoft.Extensions.Configuration.IConfigurationProvider.GetReloadToken
  commentId: M:Microsoft.Extensions.Configuration.IConfigurationProvider.GetReloadToken
  id: GetReloadToken
  parent: Microsoft.Extensions.Configuration.IConfigurationProvider
  langs:
  - csharp
  - vb
  name: GetReloadToken()
  nameWithType: IConfigurationProvider.GetReloadToken()
  fullName: Microsoft.Extensions.Configuration.IConfigurationProvider.GetReloadToken()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration.Abstractions/IConfigurationProvider.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: GetReloadToken
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration.Abstractions/IConfigurationProvider.cs
    startLine: 32
  assemblies:
  - Microsoft.Extensions.Configuration.Abstractions
  namespace: Microsoft.Extensions.Configuration
  summary: "\nReturns a change token if this provider supports change tracking, null otherwise.\n"
  example: []
  syntax:
    content: IChangeToken GetReloadToken()
    return:
      type: IChangeToken
      description: ''
    content.vb: Function GetReloadToken As IChangeToken
  overload: Microsoft.Extensions.Configuration.IConfigurationProvider.GetReloadToken*
- uid: Microsoft.Extensions.Configuration.IConfigurationProvider.Load
  commentId: M:Microsoft.Extensions.Configuration.IConfigurationProvider.Load
  id: Load
  parent: Microsoft.Extensions.Configuration.IConfigurationProvider
  langs:
  - csharp
  - vb
  name: Load()
  nameWithType: IConfigurationProvider.Load()
  fullName: Microsoft.Extensions.Configuration.IConfigurationProvider.Load()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration.Abstractions/IConfigurationProvider.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: Load
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration.Abstractions/IConfigurationProvider.cs
    startLine: 37
  assemblies:
  - Microsoft.Extensions.Configuration.Abstractions
  namespace: Microsoft.Extensions.Configuration
  summary: "\nLoads configuration values from the source represented by this <xref href=\"Microsoft.Extensions.Configuration.IConfigurationProvider\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: void Load()
    content.vb: Sub Load
  overload: Microsoft.Extensions.Configuration.IConfigurationProvider.Load*
- uid: Microsoft.Extensions.Configuration.IConfigurationProvider.GetChildKeys(IEnumerable{System.String},System.String)
  commentId: M:Microsoft.Extensions.Configuration.IConfigurationProvider.GetChildKeys(IEnumerable{System.String},System.String)
  id: GetChildKeys(IEnumerable{System.String},System.String)
  parent: Microsoft.Extensions.Configuration.IConfigurationProvider
  langs:
  - csharp
  - vb
  name: GetChildKeys(IEnumerable<String>, String)
  nameWithType: IConfigurationProvider.GetChildKeys(IEnumerable<String>, String)
  fullName: Microsoft.Extensions.Configuration.IConfigurationProvider.GetChildKeys(IEnumerable<System.String>, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration.Abstractions/IConfigurationProvider.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: GetChildKeys
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration.Abstractions/IConfigurationProvider.cs
    startLine: 47
  assemblies:
  - Microsoft.Extensions.Configuration.Abstractions
  namespace: Microsoft.Extensions.Configuration
  summary: "\nReturns the immediate descendant configuration keys for a given parent path based on this\n<xref href=\"Microsoft.Extensions.Configuration.IConfigurationProvider\" data-throw-if-not-resolved=\"false\"></xref>'s data and the set of keys returned by all the preceding\n<xref href=\"Microsoft.Extensions.Configuration.IConfigurationProvider\" data-throw-if-not-resolved=\"false\"></xref>s.\n"
  example: []
  syntax:
    content: IEnumerable<string> GetChildKeys(IEnumerable<string> earlierKeys, string parentPath)
    parameters:
    - id: earlierKeys
      type: IEnumerable{System.String}
      description: The child keys returned by the preceding providers for the same parent path.
    - id: parentPath
      type: System.String
      description: The parent path.
    return:
      type: IEnumerable{System.String}
      description: The child keys.
    content.vb: Function GetChildKeys(earlierKeys As IEnumerable(Of String), parentPath As String) As IEnumerable(Of String)
  overload: Microsoft.Extensions.Configuration.IConfigurationProvider.GetChildKeys*
  nameWithType.vb: IConfigurationProvider.GetChildKeys(IEnumerable(Of String), String)
  fullName.vb: Microsoft.Extensions.Configuration.IConfigurationProvider.GetChildKeys(IEnumerable(Of System.String), System.String)
  name.vb: GetChildKeys(IEnumerable(Of String), String)
references:
- uid: Microsoft.Extensions.Configuration
  commentId: N:Microsoft.Extensions.Configuration
  isExternal: false
  name: Microsoft.Extensions.Configuration
  nameWithType: Microsoft.Extensions.Configuration
  fullName: Microsoft.Extensions.Configuration
- uid: Microsoft.Extensions.Configuration.IConfigurationProvider.TryGet*
  commentId: Overload:Microsoft.Extensions.Configuration.IConfigurationProvider.TryGet
  isExternal: false
  name: TryGet
  nameWithType: IConfigurationProvider.TryGet
  fullName: Microsoft.Extensions.Configuration.IConfigurationProvider.TryGet
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Configuration.IConfigurationProvider.Set*
  commentId: Overload:Microsoft.Extensions.Configuration.IConfigurationProvider.Set
  isExternal: false
  name: Set
  nameWithType: IConfigurationProvider.Set
  fullName: Microsoft.Extensions.Configuration.IConfigurationProvider.Set
- uid: Microsoft.Extensions.Configuration.IConfigurationProvider.GetReloadToken*
  commentId: Overload:Microsoft.Extensions.Configuration.IConfigurationProvider.GetReloadToken
  isExternal: false
  name: GetReloadToken
  nameWithType: IConfigurationProvider.GetReloadToken
  fullName: Microsoft.Extensions.Configuration.IConfigurationProvider.GetReloadToken
- uid: IChangeToken
  isExternal: true
  name: IChangeToken
  nameWithType: IChangeToken
  fullName: IChangeToken
- uid: Microsoft.Extensions.Configuration.IConfigurationProvider
  commentId: T:Microsoft.Extensions.Configuration.IConfigurationProvider
  parent: Microsoft.Extensions.Configuration
  isExternal: false
  name: IConfigurationProvider
  nameWithType: IConfigurationProvider
  fullName: Microsoft.Extensions.Configuration.IConfigurationProvider
- uid: Microsoft.Extensions.Configuration.IConfigurationProvider.Load*
  commentId: Overload:Microsoft.Extensions.Configuration.IConfigurationProvider.Load
  isExternal: false
  name: Load
  nameWithType: IConfigurationProvider.Load
  fullName: Microsoft.Extensions.Configuration.IConfigurationProvider.Load
- uid: Microsoft.Extensions.Configuration.IConfigurationProvider.GetChildKeys*
  commentId: Overload:Microsoft.Extensions.Configuration.IConfigurationProvider.GetChildKeys
  isExternal: false
  name: GetChildKeys
  nameWithType: IConfigurationProvider.GetChildKeys
  fullName: Microsoft.Extensions.Configuration.IConfigurationProvider.GetChildKeys
- uid: IEnumerable{System.String}
  commentId: '!:IEnumerable{System.String}'
  definition: IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
