### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollection
  commentId: T:Microsoft.Extensions.DependencyInjection.ServiceCollection
  id: ServiceCollection
  parent: Microsoft.Extensions.DependencyInjection
  children:
  - Microsoft.Extensions.DependencyInjection.ServiceCollection.Clear
  - Microsoft.Extensions.DependencyInjection.ServiceCollection.Contains(ServiceDescriptor)
  - Microsoft.Extensions.DependencyInjection.ServiceCollection.CopyTo(ServiceDescriptor[],System.Int32)
  - Microsoft.Extensions.DependencyInjection.ServiceCollection.Count
  - Microsoft.Extensions.DependencyInjection.ServiceCollection.GetEnumerator
  - Microsoft.Extensions.DependencyInjection.ServiceCollection.IndexOf(ServiceDescriptor)
  - Microsoft.Extensions.DependencyInjection.ServiceCollection.Insert(System.Int32,ServiceDescriptor)
  - Microsoft.Extensions.DependencyInjection.ServiceCollection.IsReadOnly
  - Microsoft.Extensions.DependencyInjection.ServiceCollection.Item(System.Int32)
  - Microsoft.Extensions.DependencyInjection.ServiceCollection.Remove(ServiceDescriptor)
  - Microsoft.Extensions.DependencyInjection.ServiceCollection.RemoveAt(System.Int32)
  langs:
  - csharp
  - vb
  name: ServiceCollection
  nameWithType: ServiceCollection
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollection
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection/ServiceCollection.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: ServiceCollection
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection/ServiceCollection.cs
    startLine: 11
  assemblies:
  - Microsoft.Extensions.DependencyInjection
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nDefault implementation of <see cref=\"!:IServiceCollection\"></see>.\n"
  example: []
  syntax:
    content: 'public class ServiceCollection : IServiceCollection'
    content.vb: >-
      Public Class ServiceCollection
          Inherits IServiceCollection
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollection.Count
  commentId: P:Microsoft.Extensions.DependencyInjection.ServiceCollection.Count
  id: Count
  parent: Microsoft.Extensions.DependencyInjection.ServiceCollection
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: ServiceCollection.Count
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollection.Count
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection/ServiceCollection.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: Count
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection/ServiceCollection.cs
    startLine: 16
  assemblies:
  - Microsoft.Extensions.DependencyInjection
  namespace: Microsoft.Extensions.DependencyInjection
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: Microsoft.Extensions.DependencyInjection.ServiceCollection.Count*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollection.IsReadOnly
  commentId: P:Microsoft.Extensions.DependencyInjection.ServiceCollection.IsReadOnly
  id: IsReadOnly
  parent: Microsoft.Extensions.DependencyInjection.ServiceCollection
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: ServiceCollection.IsReadOnly
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollection.IsReadOnly
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection/ServiceCollection.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: IsReadOnly
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection/ServiceCollection.cs
    startLine: 19
  assemblies:
  - Microsoft.Extensions.DependencyInjection
  namespace: Microsoft.Extensions.DependencyInjection
  example: []
  syntax:
    content: public bool IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
  overload: Microsoft.Extensions.DependencyInjection.ServiceCollection.IsReadOnly*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollection.Item(System.Int32)
  commentId: P:Microsoft.Extensions.DependencyInjection.ServiceCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: Microsoft.Extensions.DependencyInjection.ServiceCollection
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: ServiceCollection.Item[Int32]
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollection.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection/ServiceCollection.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: this[]
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection/ServiceCollection.cs
    startLine: 21
  assemblies:
  - Microsoft.Extensions.DependencyInjection
  namespace: Microsoft.Extensions.DependencyInjection
  syntax:
    content: public ServiceDescriptor this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
    return:
      type: ServiceDescriptor
    content.vb: Public Property Item(index As Integer) As ServiceDescriptor
  overload: Microsoft.Extensions.DependencyInjection.ServiceCollection.Item*
  nameWithType.vb: ServiceCollection.Item(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceCollection.Item(System.Int32)
  name.vb: Item(Int32)
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollection.Clear
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollection.Clear
  id: Clear
  parent: Microsoft.Extensions.DependencyInjection.ServiceCollection
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: ServiceCollection.Clear()
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollection.Clear()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection/ServiceCollection.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: Clear
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection/ServiceCollection.cs
    startLine: 34
  assemblies:
  - Microsoft.Extensions.DependencyInjection
  namespace: Microsoft.Extensions.DependencyInjection
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: Microsoft.Extensions.DependencyInjection.ServiceCollection.Clear*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollection.Contains(ServiceDescriptor)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollection.Contains(ServiceDescriptor)
  id: Contains(ServiceDescriptor)
  parent: Microsoft.Extensions.DependencyInjection.ServiceCollection
  langs:
  - csharp
  - vb
  name: Contains(ServiceDescriptor)
  nameWithType: ServiceCollection.Contains(ServiceDescriptor)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollection.Contains(ServiceDescriptor)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection/ServiceCollection.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: Contains
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection/ServiceCollection.cs
    startLine: 40
  assemblies:
  - Microsoft.Extensions.DependencyInjection
  namespace: Microsoft.Extensions.DependencyInjection
  example: []
  syntax:
    content: public bool Contains(ServiceDescriptor item)
    parameters:
    - id: item
      type: ServiceDescriptor
    return:
      type: System.Boolean
    content.vb: Public Function Contains(item As ServiceDescriptor) As Boolean
  overload: Microsoft.Extensions.DependencyInjection.ServiceCollection.Contains*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollection.CopyTo(ServiceDescriptor[],System.Int32)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollection.CopyTo(ServiceDescriptor[],System.Int32)
  id: CopyTo(ServiceDescriptor[],System.Int32)
  parent: Microsoft.Extensions.DependencyInjection.ServiceCollection
  langs:
  - csharp
  - vb
  name: CopyTo(ServiceDescriptor[], Int32)
  nameWithType: ServiceCollection.CopyTo(ServiceDescriptor[], Int32)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollection.CopyTo(ServiceDescriptor[], System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection/ServiceCollection.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: CopyTo
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection/ServiceCollection.cs
    startLine: 46
  assemblies:
  - Microsoft.Extensions.DependencyInjection
  namespace: Microsoft.Extensions.DependencyInjection
  example: []
  syntax:
    content: public void CopyTo(ServiceDescriptor[] array, int arrayIndex)
    parameters:
    - id: array
      type: ServiceDescriptor[]
    - id: arrayIndex
      type: System.Int32
    content.vb: Public Sub CopyTo(array As ServiceDescriptor(), arrayIndex As Integer)
  overload: Microsoft.Extensions.DependencyInjection.ServiceCollection.CopyTo*
  nameWithType.vb: ServiceCollection.CopyTo(ServiceDescriptor(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceCollection.CopyTo(ServiceDescriptor(), System.Int32)
  name.vb: CopyTo(ServiceDescriptor(), Int32)
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollection.Remove(ServiceDescriptor)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollection.Remove(ServiceDescriptor)
  id: Remove(ServiceDescriptor)
  parent: Microsoft.Extensions.DependencyInjection.ServiceCollection
  langs:
  - csharp
  - vb
  name: Remove(ServiceDescriptor)
  nameWithType: ServiceCollection.Remove(ServiceDescriptor)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollection.Remove(ServiceDescriptor)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection/ServiceCollection.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: Remove
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection/ServiceCollection.cs
    startLine: 52
  assemblies:
  - Microsoft.Extensions.DependencyInjection
  namespace: Microsoft.Extensions.DependencyInjection
  example: []
  syntax:
    content: public bool Remove(ServiceDescriptor item)
    parameters:
    - id: item
      type: ServiceDescriptor
    return:
      type: System.Boolean
    content.vb: Public Function Remove(item As ServiceDescriptor) As Boolean
  overload: Microsoft.Extensions.DependencyInjection.ServiceCollection.Remove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollection.GetEnumerator
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollection.GetEnumerator
  id: GetEnumerator
  parent: Microsoft.Extensions.DependencyInjection.ServiceCollection
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: ServiceCollection.GetEnumerator()
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollection.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection/ServiceCollection.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: GetEnumerator
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection/ServiceCollection.cs
    startLine: 58
  assemblies:
  - Microsoft.Extensions.DependencyInjection
  namespace: Microsoft.Extensions.DependencyInjection
  example: []
  syntax:
    content: public IEnumerator<ServiceDescriptor> GetEnumerator()
    return:
      type: IEnumerator{ServiceDescriptor}
    content.vb: Public Function GetEnumerator As IEnumerator(Of ServiceDescriptor)
  overload: Microsoft.Extensions.DependencyInjection.ServiceCollection.GetEnumerator*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollection.IndexOf(ServiceDescriptor)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollection.IndexOf(ServiceDescriptor)
  id: IndexOf(ServiceDescriptor)
  parent: Microsoft.Extensions.DependencyInjection.ServiceCollection
  langs:
  - csharp
  - vb
  name: IndexOf(ServiceDescriptor)
  nameWithType: ServiceCollection.IndexOf(ServiceDescriptor)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollection.IndexOf(ServiceDescriptor)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection/ServiceCollection.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: IndexOf
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection/ServiceCollection.cs
    startLine: 73
  assemblies:
  - Microsoft.Extensions.DependencyInjection
  namespace: Microsoft.Extensions.DependencyInjection
  syntax:
    content: public int IndexOf(ServiceDescriptor item)
    parameters:
    - id: item
      type: ServiceDescriptor
    return:
      type: System.Int32
    content.vb: Public Function IndexOf(item As ServiceDescriptor) As Integer
  overload: Microsoft.Extensions.DependencyInjection.ServiceCollection.IndexOf*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollection.Insert(System.Int32,ServiceDescriptor)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollection.Insert(System.Int32,ServiceDescriptor)
  id: Insert(System.Int32,ServiceDescriptor)
  parent: Microsoft.Extensions.DependencyInjection.ServiceCollection
  langs:
  - csharp
  - vb
  name: Insert(Int32, ServiceDescriptor)
  nameWithType: ServiceCollection.Insert(Int32, ServiceDescriptor)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollection.Insert(System.Int32, ServiceDescriptor)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection/ServiceCollection.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: Insert
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection/ServiceCollection.cs
    startLine: 78
  assemblies:
  - Microsoft.Extensions.DependencyInjection
  namespace: Microsoft.Extensions.DependencyInjection
  syntax:
    content: public void Insert(int index, ServiceDescriptor item)
    parameters:
    - id: index
      type: System.Int32
    - id: item
      type: ServiceDescriptor
    content.vb: Public Sub Insert(index As Integer, item As ServiceDescriptor)
  overload: Microsoft.Extensions.DependencyInjection.ServiceCollection.Insert*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollection.RemoveAt(System.Int32)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollection.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: Microsoft.Extensions.DependencyInjection.ServiceCollection
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  nameWithType: ServiceCollection.RemoveAt(Int32)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollection.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection/ServiceCollection.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: RemoveAt
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection/ServiceCollection.cs
    startLine: 83
  assemblies:
  - Microsoft.Extensions.DependencyInjection
  namespace: Microsoft.Extensions.DependencyInjection
  syntax:
    content: public void RemoveAt(int index)
    parameters:
    - id: index
      type: System.Int32
    content.vb: Public Sub RemoveAt(index As Integer)
  overload: Microsoft.Extensions.DependencyInjection.ServiceCollection.RemoveAt*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Extensions.DependencyInjection
  commentId: N:Microsoft.Extensions.DependencyInjection
  isExternal: false
  name: Microsoft.Extensions.DependencyInjection
  nameWithType: Microsoft.Extensions.DependencyInjection
  fullName: Microsoft.Extensions.DependencyInjection
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollection.Count*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.ServiceCollection.Count
  isExternal: false
  name: Count
  nameWithType: ServiceCollection.Count
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollection.Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollection.IsReadOnly*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.ServiceCollection.IsReadOnly
  isExternal: false
  name: IsReadOnly
  nameWithType: ServiceCollection.IsReadOnly
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollection.IsReadOnly
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollection.Item*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.ServiceCollection.Item
  isExternal: false
  name: Item
  nameWithType: ServiceCollection.Item
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollection.Item
- uid: ServiceDescriptor
  isExternal: true
  name: ServiceDescriptor
  nameWithType: ServiceDescriptor
  fullName: ServiceDescriptor
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollection.Clear*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.ServiceCollection.Clear
  isExternal: false
  name: Clear
  nameWithType: ServiceCollection.Clear
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollection.Clear
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollection.Contains*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.ServiceCollection.Contains
  isExternal: false
  name: Contains
  nameWithType: ServiceCollection.Contains
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollection.Contains
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollection.CopyTo*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.ServiceCollection.CopyTo
  isExternal: false
  name: CopyTo
  nameWithType: ServiceCollection.CopyTo
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollection.CopyTo
- uid: ServiceDescriptor[]
  name: ServiceDescriptor[]
  nameWithType: ServiceDescriptor[]
  fullName: ServiceDescriptor[]
  nameWithType.vb: ServiceDescriptor()
  fullName.vb: ServiceDescriptor()
  name.vb: ServiceDescriptor()
  spec.csharp:
  - uid: ServiceDescriptor
    name: ServiceDescriptor
    nameWithType: ServiceDescriptor
    fullName: ServiceDescriptor
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: ServiceDescriptor
    name: ServiceDescriptor
    nameWithType: ServiceDescriptor
    fullName: ServiceDescriptor
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollection.Remove*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.ServiceCollection.Remove
  isExternal: false
  name: Remove
  nameWithType: ServiceCollection.Remove
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollection.Remove
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollection.GetEnumerator*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.ServiceCollection.GetEnumerator
  isExternal: false
  name: GetEnumerator
  nameWithType: ServiceCollection.GetEnumerator
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollection.GetEnumerator
- uid: IEnumerator{ServiceDescriptor}
  commentId: '!:IEnumerator{ServiceDescriptor}'
  definition: IEnumerator`1
  name: IEnumerator<ServiceDescriptor>
  nameWithType: IEnumerator<ServiceDescriptor>
  fullName: IEnumerator<ServiceDescriptor>
  nameWithType.vb: IEnumerator(Of ServiceDescriptor)
  fullName.vb: IEnumerator(Of ServiceDescriptor)
  name.vb: IEnumerator(Of ServiceDescriptor)
  spec.csharp:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ServiceDescriptor
    name: ServiceDescriptor
    nameWithType: ServiceDescriptor
    fullName: ServiceDescriptor
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ServiceDescriptor
    name: ServiceDescriptor
    nameWithType: ServiceDescriptor
    fullName: ServiceDescriptor
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerator`1
  isExternal: true
  name: IEnumerator<>
  nameWithType: IEnumerator<>
  fullName: IEnumerator<>
  nameWithType.vb: IEnumerator(Of )
  fullName.vb: IEnumerator(Of )
  name.vb: IEnumerator(Of )
  spec.csharp:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollection.IndexOf*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.ServiceCollection.IndexOf
  isExternal: false
  name: IndexOf
  nameWithType: ServiceCollection.IndexOf
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollection.IndexOf
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollection.Insert*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.ServiceCollection.Insert
  isExternal: false
  name: Insert
  nameWithType: ServiceCollection.Insert
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollection.Insert
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollection.RemoveAt*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.ServiceCollection.RemoveAt
  isExternal: false
  name: RemoveAt
  nameWithType: ServiceCollection.RemoveAt
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollection.RemoveAt
shouldSkipMarkup: true
