### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Logging.Testing.WriteContext
  commentId: T:Microsoft.Extensions.Logging.Testing.WriteContext
  id: WriteContext
  parent: Microsoft.Extensions.Logging.Testing
  children:
  - Microsoft.Extensions.Logging.Testing.WriteContext.EventId
  - Microsoft.Extensions.Logging.Testing.WriteContext.Exception
  - Microsoft.Extensions.Logging.Testing.WriteContext.Formatter
  - Microsoft.Extensions.Logging.Testing.WriteContext.LoggerName
  - Microsoft.Extensions.Logging.Testing.WriteContext.LogLevel
  - Microsoft.Extensions.Logging.Testing.WriteContext.Scope
  - Microsoft.Extensions.Logging.Testing.WriteContext.State
  langs:
  - csharp
  - vb
  name: WriteContext
  nameWithType: WriteContext
  fullName: Microsoft.Extensions.Logging.Testing.WriteContext
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Testing/WriteContext.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: WriteContext
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Testing/WriteContext.cs
    startLine: 7
  assemblies:
  - Microsoft.Extensions.Logging.Testing
  namespace: Microsoft.Extensions.Logging.Testing
  syntax:
    content: 'public class WriteContext : object'
    content.vb: >-
      Public Class WriteContext
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.Logging.Testing.WriteContext.LogLevel
  commentId: P:Microsoft.Extensions.Logging.Testing.WriteContext.LogLevel
  id: LogLevel
  parent: Microsoft.Extensions.Logging.Testing.WriteContext
  langs:
  - csharp
  - vb
  name: LogLevel
  nameWithType: WriteContext.LogLevel
  fullName: Microsoft.Extensions.Logging.Testing.WriteContext.LogLevel
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Testing/WriteContext.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: LogLevel
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Testing/WriteContext.cs
    startLine: 9
  assemblies:
  - Microsoft.Extensions.Logging.Testing
  namespace: Microsoft.Extensions.Logging.Testing
  syntax:
    content: public LogLevel LogLevel { get; set; }
    parameters: []
    return:
      type: LogLevel
    content.vb: Public Property LogLevel As LogLevel
  overload: Microsoft.Extensions.Logging.Testing.WriteContext.LogLevel*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Logging.Testing.WriteContext.EventId
  commentId: P:Microsoft.Extensions.Logging.Testing.WriteContext.EventId
  id: EventId
  parent: Microsoft.Extensions.Logging.Testing.WriteContext
  langs:
  - csharp
  - vb
  name: EventId
  nameWithType: WriteContext.EventId
  fullName: Microsoft.Extensions.Logging.Testing.WriteContext.EventId
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Testing/WriteContext.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: EventId
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Testing/WriteContext.cs
    startLine: 11
  assemblies:
  - Microsoft.Extensions.Logging.Testing
  namespace: Microsoft.Extensions.Logging.Testing
  syntax:
    content: public EventId EventId { get; set; }
    parameters: []
    return:
      type: EventId
    content.vb: Public Property EventId As EventId
  overload: Microsoft.Extensions.Logging.Testing.WriteContext.EventId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Logging.Testing.WriteContext.State
  commentId: P:Microsoft.Extensions.Logging.Testing.WriteContext.State
  id: State
  parent: Microsoft.Extensions.Logging.Testing.WriteContext
  langs:
  - csharp
  - vb
  name: State
  nameWithType: WriteContext.State
  fullName: Microsoft.Extensions.Logging.Testing.WriteContext.State
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Testing/WriteContext.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: State
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Testing/WriteContext.cs
    startLine: 13
  assemblies:
  - Microsoft.Extensions.Logging.Testing
  namespace: Microsoft.Extensions.Logging.Testing
  syntax:
    content: public object State { get; set; }
    parameters: []
    return:
      type: System.Object
    content.vb: Public Property State As Object
  overload: Microsoft.Extensions.Logging.Testing.WriteContext.State*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Logging.Testing.WriteContext.Exception
  commentId: P:Microsoft.Extensions.Logging.Testing.WriteContext.Exception
  id: Exception
  parent: Microsoft.Extensions.Logging.Testing.WriteContext
  langs:
  - csharp
  - vb
  name: Exception
  nameWithType: WriteContext.Exception
  fullName: Microsoft.Extensions.Logging.Testing.WriteContext.Exception
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Testing/WriteContext.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: Exception
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Testing/WriteContext.cs
    startLine: 15
  assemblies:
  - Microsoft.Extensions.Logging.Testing
  namespace: Microsoft.Extensions.Logging.Testing
  syntax:
    content: public Exception Exception { get; set; }
    parameters: []
    return:
      type: Exception
    content.vb: Public Property Exception As Exception
  overload: Microsoft.Extensions.Logging.Testing.WriteContext.Exception*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Logging.Testing.WriteContext.Formatter
  commentId: P:Microsoft.Extensions.Logging.Testing.WriteContext.Formatter
  id: Formatter
  parent: Microsoft.Extensions.Logging.Testing.WriteContext
  langs:
  - csharp
  - vb
  name: Formatter
  nameWithType: WriteContext.Formatter
  fullName: Microsoft.Extensions.Logging.Testing.WriteContext.Formatter
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Testing/WriteContext.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: Formatter
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Testing/WriteContext.cs
    startLine: 17
  assemblies:
  - Microsoft.Extensions.Logging.Testing
  namespace: Microsoft.Extensions.Logging.Testing
  syntax:
    content: public Func<object, Exception, string> Formatter { get; set; }
    parameters: []
    return:
      type: Func{System.Object,Exception,System.String}
    content.vb: Public Property Formatter As Func(Of Object, Exception, String)
  overload: Microsoft.Extensions.Logging.Testing.WriteContext.Formatter*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Logging.Testing.WriteContext.Scope
  commentId: P:Microsoft.Extensions.Logging.Testing.WriteContext.Scope
  id: Scope
  parent: Microsoft.Extensions.Logging.Testing.WriteContext
  langs:
  - csharp
  - vb
  name: Scope
  nameWithType: WriteContext.Scope
  fullName: Microsoft.Extensions.Logging.Testing.WriteContext.Scope
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Testing/WriteContext.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: Scope
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Testing/WriteContext.cs
    startLine: 19
  assemblies:
  - Microsoft.Extensions.Logging.Testing
  namespace: Microsoft.Extensions.Logging.Testing
  syntax:
    content: public object Scope { get; set; }
    parameters: []
    return:
      type: System.Object
    content.vb: Public Property Scope As Object
  overload: Microsoft.Extensions.Logging.Testing.WriteContext.Scope*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Logging.Testing.WriteContext.LoggerName
  commentId: P:Microsoft.Extensions.Logging.Testing.WriteContext.LoggerName
  id: LoggerName
  parent: Microsoft.Extensions.Logging.Testing.WriteContext
  langs:
  - csharp
  - vb
  name: LoggerName
  nameWithType: WriteContext.LoggerName
  fullName: Microsoft.Extensions.Logging.Testing.WriteContext.LoggerName
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Testing/WriteContext.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: LoggerName
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Testing/WriteContext.cs
    startLine: 21
  assemblies:
  - Microsoft.Extensions.Logging.Testing
  namespace: Microsoft.Extensions.Logging.Testing
  syntax:
    content: public string LoggerName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property LoggerName As String
  overload: Microsoft.Extensions.Logging.Testing.WriteContext.LoggerName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Extensions.Logging.Testing
  commentId: N:Microsoft.Extensions.Logging.Testing
  isExternal: false
  name: Microsoft.Extensions.Logging.Testing
  nameWithType: Microsoft.Extensions.Logging.Testing
  fullName: Microsoft.Extensions.Logging.Testing
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Logging.Testing.WriteContext.LogLevel*
  commentId: Overload:Microsoft.Extensions.Logging.Testing.WriteContext.LogLevel
  isExternal: false
  name: LogLevel
  nameWithType: WriteContext.LogLevel
  fullName: Microsoft.Extensions.Logging.Testing.WriteContext.LogLevel
- uid: LogLevel
  commentId: M:LogLevel
  isExternal: true
  name: LogLevel
  nameWithType: LogLevel
  fullName: LogLevel
- uid: Microsoft.Extensions.Logging.Testing.WriteContext.EventId*
  commentId: Overload:Microsoft.Extensions.Logging.Testing.WriteContext.EventId
  isExternal: false
  name: EventId
  nameWithType: WriteContext.EventId
  fullName: Microsoft.Extensions.Logging.Testing.WriteContext.EventId
- uid: EventId
  isExternal: true
  name: EventId
  nameWithType: EventId
  fullName: EventId
- uid: Microsoft.Extensions.Logging.Testing.WriteContext.State*
  commentId: Overload:Microsoft.Extensions.Logging.Testing.WriteContext.State
  isExternal: false
  name: State
  nameWithType: WriteContext.State
  fullName: Microsoft.Extensions.Logging.Testing.WriteContext.State
- uid: Microsoft.Extensions.Logging.Testing.WriteContext.Exception*
  commentId: Overload:Microsoft.Extensions.Logging.Testing.WriteContext.Exception
  isExternal: false
  name: Exception
  nameWithType: WriteContext.Exception
  fullName: Microsoft.Extensions.Logging.Testing.WriteContext.Exception
- uid: Exception
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: Exception
- uid: Microsoft.Extensions.Logging.Testing.WriteContext.Formatter*
  commentId: Overload:Microsoft.Extensions.Logging.Testing.WriteContext.Formatter
  isExternal: false
  name: Formatter
  nameWithType: WriteContext.Formatter
  fullName: Microsoft.Extensions.Logging.Testing.WriteContext.Formatter
- uid: Func{System.Object,Exception,System.String}
  commentId: '!:Func{System.Object,Exception,System.String}'
  definition: Func`3
  name: Func<Object, Exception, String>
  nameWithType: Func<Object, Exception, String>
  fullName: Func<System.Object, Exception, System.String>
  nameWithType.vb: Func(Of Object, Exception, String)
  fullName.vb: Func(Of System.Object, Exception, System.String)
  name.vb: Func(Of Object, Exception, String)
  spec.csharp:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`3
  isExternal: true
  name: Func<, , >
  nameWithType: Func<, , >
  fullName: Func<, , >
  nameWithType.vb: Func(Of , , )
  fullName.vb: Func(Of , , )
  name.vb: Func(Of , , )
  spec.csharp:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.Testing.WriteContext.Scope*
  commentId: Overload:Microsoft.Extensions.Logging.Testing.WriteContext.Scope
  isExternal: false
  name: Scope
  nameWithType: WriteContext.Scope
  fullName: Microsoft.Extensions.Logging.Testing.WriteContext.Scope
- uid: Microsoft.Extensions.Logging.Testing.WriteContext.LoggerName*
  commentId: Overload:Microsoft.Extensions.Logging.Testing.WriteContext.LoggerName
  isExternal: false
  name: LoggerName
  nameWithType: WriteContext.LoggerName
  fullName: Microsoft.Extensions.Logging.Testing.WriteContext.LoggerName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
shouldSkipMarkup: true
