### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName
  commentId: T:Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName
  id: EnumGroupAndName
  parent: Microsoft.AspNetCore.Mvc.ModelBinding
  children:
  - Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName.#ctor(System.String,System.Func{System.String})
  - Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName.#ctor(System.String,System.String)
  - Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName.Group
  - Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName.Name
  langs:
  - csharp
  - vb
  name: EnumGroupAndName
  nameWithType: EnumGroupAndName
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName
  type: Struct
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/EnumGroupAndName.cs
      branch: dev
      repo: https://github.com/aspnet/mvc
    id: EnumGroupAndName
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/EnumGroupAndName.cs
    startLine: 10
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nAn abstraction used when grouping enum values for <see cref=\"P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.EnumGroupedDisplayNamesAndValues\"></see>.\n"
  example: []
  syntax:
    content: public struct EnumGroupAndName
    content.vb: Public Structure EnumGroupAndName
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName.#ctor(System.String,System.String)
  commentId: M:Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName
  langs:
  - csharp
  - vb
  name: EnumGroupAndName(String, String)
  nameWithType: EnumGroupAndName.EnumGroupAndName(String, String)
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName.EnumGroupAndName(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/EnumGroupAndName.cs
      branch: dev
      repo: https://github.com/aspnet/mvc
    id: .ctor
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/EnumGroupAndName.cs
    startLine: 20
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nInitializes a new instance of the <see cref=\"T:Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName\"></see> structure. This constructor should \nnot be used in any site where localization is important.\n"
  example: []
  syntax:
    content: public EnumGroupAndName(string group, string name)
    content.vb: Public Sub New(group As String, name As String)
    parameters:
    - id: group
      type: System.String
      description: The group name.
    - id: name
      type: System.String
      description: The name.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName.#ctor(System.String,System.Func{System.String})
  commentId: M:Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName.#ctor(System.String,System.Func{System.String})
  id: '#ctor(System.String,System.Func{System.String})'
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName
  langs:
  - csharp
  - vb
  name: EnumGroupAndName(String, Func<String>)
  nameWithType: EnumGroupAndName.EnumGroupAndName(String, Func<String>)
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName.EnumGroupAndName(System.String, System.Func<System.String>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/EnumGroupAndName.cs
      branch: dev
      repo: https://github.com/aspnet/mvc
    id: .ctor
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/EnumGroupAndName.cs
    startLine: 41
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nInitializes a new instance of the <see cref=\"T:Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName\"></see> structure.\n"
  example: []
  syntax:
    content: public EnumGroupAndName(string group, Func<string> name)
    content.vb: Public Sub New(group As String, name As Func(Of String))
    parameters:
    - id: group
      type: System.String
      description: The group name.
    - id: name
      type: System.Func{System.String}
      description: A <see cref="T:System.Func`1"></see> which will return the name.
  nameWithType.vb: EnumGroupAndName.EnumGroupAndName(String, Func(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName.EnumGroupAndName(System.String, System.Func(Of System.String))
  name.vb: EnumGroupAndName(String, Func(Of String))
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName.Group
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName.Group
  id: Group
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName
  langs:
  - csharp
  - vb
  name: Group
  nameWithType: EnumGroupAndName.Group
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName.Group
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/EnumGroupAndName.cs
      branch: dev
      repo: https://github.com/aspnet/mvc
    id: Group
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/EnumGroupAndName.cs
    startLine: 62
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets the Group name.\n"
  example: []
  syntax:
    content: public string Group { get; }
    content.vb: Public ReadOnly Property Group As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName.Name
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName.Name
  id: Name
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: EnumGroupAndName.Name
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName.Name
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/EnumGroupAndName.cs
      branch: dev
      repo: https://github.com/aspnet/mvc
    id: Name
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/EnumGroupAndName.cs
    startLine: 67
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets the name.\n"
  example: []
  syntax:
    content: public string Name { get; }
    content.vb: Public ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Microsoft.AspNetCore.Mvc.ModelBinding
  commentId: N:Microsoft.AspNetCore.Mvc.ModelBinding
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.ModelBinding
  nameWithType: Microsoft.AspNetCore.Mvc.ModelBinding
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Func{System.String}
  commentId: T:System.Func{System.String}
  parent: System
  definition: System.Func`1
  name: Func<String>
  nameWithType: Func<String>
  fullName: System.Func<System.String>
  nameWithType.vb: Func(Of String)
  fullname.vb: System.Func(Of System.String)
  name.vb: Func(Of String)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullname.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
