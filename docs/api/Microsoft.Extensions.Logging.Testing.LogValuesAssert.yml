### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Logging.Testing.LogValuesAssert
  commentId: T:Microsoft.Extensions.Logging.Testing.LogValuesAssert
  id: LogValuesAssert
  parent: Microsoft.Extensions.Logging.Testing
  children:
  - Microsoft.Extensions.Logging.Testing.LogValuesAssert.Contains(IEnumerable{KeyValuePair{System.String,System.Object}},IEnumerable{KeyValuePair{System.String,System.Object}})
  - Microsoft.Extensions.Logging.Testing.LogValuesAssert.Contains(System.String,System.Object,IEnumerable{KeyValuePair{System.String,System.Object}})
  langs:
  - csharp
  - vb
  name: LogValuesAssert
  nameWithType: LogValuesAssert
  fullName: Microsoft.Extensions.Logging.Testing.LogValuesAssert
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Testing/LogValuesAssert.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: LogValuesAssert
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Testing/LogValuesAssert.cs
    startLine: 10
  assemblies:
  - Microsoft.Extensions.Logging.Testing
  namespace: Microsoft.Extensions.Logging.Testing
  syntax:
    content: 'public static class LogValuesAssert : object'
    content.vb: >-
      Public Module LogValuesAssert
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Extensions.Logging.Testing.LogValuesAssert.Contains(System.String,System.Object,IEnumerable{KeyValuePair{System.String,System.Object}})
  commentId: M:Microsoft.Extensions.Logging.Testing.LogValuesAssert.Contains(System.String,System.Object,IEnumerable{KeyValuePair{System.String,System.Object}})
  id: Contains(System.String,System.Object,IEnumerable{KeyValuePair{System.String,System.Object}})
  parent: Microsoft.Extensions.Logging.Testing.LogValuesAssert
  langs:
  - csharp
  - vb
  name: Contains(String, Object, IEnumerable<KeyValuePair<String, Object>>)
  nameWithType: LogValuesAssert.Contains(String, Object, IEnumerable<KeyValuePair<String, Object>>)
  fullName: Microsoft.Extensions.Logging.Testing.LogValuesAssert.Contains(System.String, System.Object, IEnumerable<KeyValuePair<System.String, System.Object>>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Testing/LogValuesAssert.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: Contains
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Testing/LogValuesAssert.cs
    startLine: 18
  assemblies:
  - Microsoft.Extensions.Logging.Testing
  namespace: Microsoft.Extensions.Logging.Testing
  summary: "\nAsserts that the given key and value are present in the actual values.\n"
  example: []
  syntax:
    content: public static void Contains(string key, object value, IEnumerable<KeyValuePair<string, object>> actualValues)
    parameters:
    - id: key
      type: System.String
      description: The key of the item to be found.
    - id: value
      type: System.Object
      description: The value of the item to be found.
    - id: actualValues
      type: IEnumerable{KeyValuePair{System.String,System.Object}}
      description: The actual values.
    content.vb: Public Shared Sub Contains(key As String, value As Object, actualValues As IEnumerable(Of KeyValuePair(Of String, Object)))
  overload: Microsoft.Extensions.Logging.Testing.LogValuesAssert.Contains*
  nameWithType.vb: LogValuesAssert.Contains(String, Object, IEnumerable(Of KeyValuePair(Of String, Object)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Logging.Testing.LogValuesAssert.Contains(System.String, System.Object, IEnumerable(Of KeyValuePair(Of System.String, System.Object)))
  name.vb: Contains(String, Object, IEnumerable(Of KeyValuePair(Of String, Object)))
- uid: Microsoft.Extensions.Logging.Testing.LogValuesAssert.Contains(IEnumerable{KeyValuePair{System.String,System.Object}},IEnumerable{KeyValuePair{System.String,System.Object}})
  commentId: M:Microsoft.Extensions.Logging.Testing.LogValuesAssert.Contains(IEnumerable{KeyValuePair{System.String,System.Object}},IEnumerable{KeyValuePair{System.String,System.Object}})
  id: Contains(IEnumerable{KeyValuePair{System.String,System.Object}},IEnumerable{KeyValuePair{System.String,System.Object}})
  parent: Microsoft.Extensions.Logging.Testing.LogValuesAssert
  langs:
  - csharp
  - vb
  name: Contains(IEnumerable<KeyValuePair<String, Object>>, IEnumerable<KeyValuePair<String, Object>>)
  nameWithType: LogValuesAssert.Contains(IEnumerable<KeyValuePair<String, Object>>, IEnumerable<KeyValuePair<String, Object>>)
  fullName: Microsoft.Extensions.Logging.Testing.LogValuesAssert.Contains(IEnumerable<KeyValuePair<System.String, System.Object>>, IEnumerable<KeyValuePair<System.String, System.Object>>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Testing/LogValuesAssert.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: Contains
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Testing/LogValuesAssert.cs
    startLine: 32
  assemblies:
  - Microsoft.Extensions.Logging.Testing
  namespace: Microsoft.Extensions.Logging.Testing
  summary: "\nAsserts that all the expected values are present in the actual values by ignoring\nthe order of values.\n"
  example: []
  syntax:
    content: public static void Contains(IEnumerable<KeyValuePair<string, object>> expectedValues, IEnumerable<KeyValuePair<string, object>> actualValues)
    parameters:
    - id: expectedValues
      type: IEnumerable{KeyValuePair{System.String,System.Object}}
      description: Expected subset of values
    - id: actualValues
      type: IEnumerable{KeyValuePair{System.String,System.Object}}
      description: Actual set of values
    content.vb: Public Shared Sub Contains(expectedValues As IEnumerable(Of KeyValuePair(Of String, Object)), actualValues As IEnumerable(Of KeyValuePair(Of String, Object)))
  overload: Microsoft.Extensions.Logging.Testing.LogValuesAssert.Contains*
  nameWithType.vb: LogValuesAssert.Contains(IEnumerable(Of KeyValuePair(Of String, Object)), IEnumerable(Of KeyValuePair(Of String, Object)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Logging.Testing.LogValuesAssert.Contains(IEnumerable(Of KeyValuePair(Of System.String, System.Object)), IEnumerable(Of KeyValuePair(Of System.String, System.Object)))
  name.vb: Contains(IEnumerable(Of KeyValuePair(Of String, Object)), IEnumerable(Of KeyValuePair(Of String, Object)))
references:
- uid: Microsoft.Extensions.Logging.Testing
  commentId: N:Microsoft.Extensions.Logging.Testing
  isExternal: false
  name: Microsoft.Extensions.Logging.Testing
  nameWithType: Microsoft.Extensions.Logging.Testing
  fullName: Microsoft.Extensions.Logging.Testing
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Logging.Testing.LogValuesAssert.Contains*
  commentId: Overload:Microsoft.Extensions.Logging.Testing.LogValuesAssert.Contains
  isExternal: false
  name: Contains
  nameWithType: LogValuesAssert.Contains
  fullName: Microsoft.Extensions.Logging.Testing.LogValuesAssert.Contains
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: IEnumerable{KeyValuePair{System.String,System.Object}}
  commentId: '!:IEnumerable{KeyValuePair{System.String,System.Object}}'
  definition: IEnumerable`1
  name: IEnumerable<KeyValuePair<String, Object>>
  nameWithType: IEnumerable<KeyValuePair<String, Object>>
  fullName: IEnumerable<KeyValuePair<System.String, System.Object>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of String, Object))
  fullName.vb: IEnumerable(Of KeyValuePair(Of System.String, System.Object))
  name.vb: IEnumerable(Of KeyValuePair(Of String, Object))
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
