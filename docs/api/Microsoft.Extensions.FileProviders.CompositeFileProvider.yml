### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.FileProviders.CompositeFileProvider
  commentId: T:Microsoft.Extensions.FileProviders.CompositeFileProvider
  id: CompositeFileProvider
  parent: Microsoft.Extensions.FileProviders
  children:
  - Microsoft.Extensions.FileProviders.CompositeFileProvider.#ctor(IEnumerable{IFileProvider})
  - Microsoft.Extensions.FileProviders.CompositeFileProvider.#ctor(IFileProvider[])
  - Microsoft.Extensions.FileProviders.CompositeFileProvider.FileProviders
  - Microsoft.Extensions.FileProviders.CompositeFileProvider.GetDirectoryContents(System.String)
  - Microsoft.Extensions.FileProviders.CompositeFileProvider.GetFileInfo(System.String)
  - Microsoft.Extensions.FileProviders.CompositeFileProvider.Watch(System.String)
  langs:
  - csharp
  - vb
  name: CompositeFileProvider
  nameWithType: CompositeFileProvider
  fullName: Microsoft.Extensions.FileProviders.CompositeFileProvider
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Composite/CompositeFileProvider.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: CompositeFileProvider
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Composite/CompositeFileProvider.cs
    startLine: 14
  assemblies:
  - Microsoft.Extensions.FileProviders.Composite
  namespace: Microsoft.Extensions.FileProviders
  summary: "\nLooks up files using a list of <see cref=\"!:IFileProvider\"></see>.\n"
  example: []
  syntax:
    content: 'public class CompositeFileProvider : IFileProvider'
    content.vb: >-
      Public Class CompositeFileProvider
          Inherits IFileProvider
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.FileProviders.CompositeFileProvider.#ctor(IFileProvider[])
  commentId: M:Microsoft.Extensions.FileProviders.CompositeFileProvider.#ctor(IFileProvider[])
  id: '#ctor(IFileProvider[])'
  parent: Microsoft.Extensions.FileProviders.CompositeFileProvider
  langs:
  - csharp
  - vb
  name: CompositeFileProvider(IFileProvider[])
  nameWithType: CompositeFileProvider.CompositeFileProvider(IFileProvider[])
  fullName: Microsoft.Extensions.FileProviders.CompositeFileProvider.CompositeFileProvider(IFileProvider[])
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Composite/CompositeFileProvider.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: .ctor
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Composite/CompositeFileProvider.cs
    startLine: 22
  assemblies:
  - Microsoft.Extensions.FileProviders.Composite
  namespace: Microsoft.Extensions.FileProviders
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.Extensions.FileProviders.CompositeFileProvider\" data-throw-if-not-resolved=\"false\"></xref> class using a list of file provider.\n"
  example: []
  syntax:
    content: public CompositeFileProvider(params IFileProvider[] fileProviders)
    parameters:
    - id: fileProviders
      type: IFileProvider[]
      description: ''
    content.vb: Public Sub New(ParamArray fileProviders As IFileProvider())
  overload: Microsoft.Extensions.FileProviders.CompositeFileProvider.#ctor*
  nameWithType.vb: CompositeFileProvider.CompositeFileProvider(IFileProvider())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.FileProviders.CompositeFileProvider.CompositeFileProvider(IFileProvider())
  name.vb: CompositeFileProvider(IFileProvider())
- uid: Microsoft.Extensions.FileProviders.CompositeFileProvider.#ctor(IEnumerable{IFileProvider})
  commentId: M:Microsoft.Extensions.FileProviders.CompositeFileProvider.#ctor(IEnumerable{IFileProvider})
  id: '#ctor(IEnumerable{IFileProvider})'
  parent: Microsoft.Extensions.FileProviders.CompositeFileProvider
  langs:
  - csharp
  - vb
  name: CompositeFileProvider(IEnumerable<IFileProvider>)
  nameWithType: CompositeFileProvider.CompositeFileProvider(IEnumerable<IFileProvider>)
  fullName: Microsoft.Extensions.FileProviders.CompositeFileProvider.CompositeFileProvider(IEnumerable<IFileProvider>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Composite/CompositeFileProvider.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: .ctor
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Composite/CompositeFileProvider.cs
    startLine: 31
  assemblies:
  - Microsoft.Extensions.FileProviders.Composite
  namespace: Microsoft.Extensions.FileProviders
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.Extensions.FileProviders.CompositeFileProvider\" data-throw-if-not-resolved=\"false\"></xref> class using a list of file provider.\n"
  example: []
  syntax:
    content: public CompositeFileProvider(IEnumerable<IFileProvider> fileProviders)
    parameters:
    - id: fileProviders
      type: IEnumerable{IFileProvider}
      description: ''
    content.vb: Public Sub New(fileProviders As IEnumerable(Of IFileProvider))
  overload: Microsoft.Extensions.FileProviders.CompositeFileProvider.#ctor*
  nameWithType.vb: CompositeFileProvider.CompositeFileProvider(IEnumerable(Of IFileProvider))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.FileProviders.CompositeFileProvider.CompositeFileProvider(IEnumerable(Of IFileProvider))
  name.vb: CompositeFileProvider(IEnumerable(Of IFileProvider))
- uid: Microsoft.Extensions.FileProviders.CompositeFileProvider.GetFileInfo(System.String)
  commentId: M:Microsoft.Extensions.FileProviders.CompositeFileProvider.GetFileInfo(System.String)
  id: GetFileInfo(System.String)
  parent: Microsoft.Extensions.FileProviders.CompositeFileProvider
  langs:
  - csharp
  - vb
  name: GetFileInfo(String)
  nameWithType: CompositeFileProvider.GetFileInfo(String)
  fullName: Microsoft.Extensions.FileProviders.CompositeFileProvider.GetFileInfo(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Composite/CompositeFileProvider.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: GetFileInfo
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Composite/CompositeFileProvider.cs
    startLine: 45
  assemblies:
  - Microsoft.Extensions.FileProviders.Composite
  namespace: Microsoft.Extensions.FileProviders
  summary: "\nLocates a file at the given path.\n"
  example: []
  syntax:
    content: public IFileInfo GetFileInfo(string subpath)
    parameters:
    - id: subpath
      type: System.String
      description: 'The path that identifies the file. '
    return:
      type: IFileInfo
      description: The file information. Caller must check Exists property. This will be the first existing <see cref="!:IFileInfo"></see> returned by the provided <see cref="!:IFileProvider"></see> or a not found <see cref="!:IFileInfo"></see> if no existing files is found.
    content.vb: Public Function GetFileInfo(subpath As String) As IFileInfo
  overload: Microsoft.Extensions.FileProviders.CompositeFileProvider.GetFileInfo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.FileProviders.CompositeFileProvider.GetDirectoryContents(System.String)
  commentId: M:Microsoft.Extensions.FileProviders.CompositeFileProvider.GetDirectoryContents(System.String)
  id: GetDirectoryContents(System.String)
  parent: Microsoft.Extensions.FileProviders.CompositeFileProvider
  langs:
  - csharp
  - vb
  name: GetDirectoryContents(String)
  nameWithType: CompositeFileProvider.GetDirectoryContents(String)
  fullName: Microsoft.Extensions.FileProviders.CompositeFileProvider.GetDirectoryContents(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Composite/CompositeFileProvider.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: GetDirectoryContents
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Composite/CompositeFileProvider.cs
    startLine: 65
  assemblies:
  - Microsoft.Extensions.FileProviders.Composite
  namespace: Microsoft.Extensions.FileProviders
  summary: "\nEnumerate a directory at the given path, if any.\n"
  example: []
  syntax:
    content: public IDirectoryContents GetDirectoryContents(string subpath)
    parameters:
    - id: subpath
      type: System.String
      description: The path that identifies the directory
    return:
      type: IDirectoryContents
      description: >-
        Contents of the directory. Caller must check Exists property.

        The content is a merge of the contents of the provided <see cref="!:IFileProvider"></see>.

        When there is multiple <see cref="!:IFileInfo"></see> with the same Name property, only the first one is included on the results.
    content.vb: Public Function GetDirectoryContents(subpath As String) As IDirectoryContents
  overload: Microsoft.Extensions.FileProviders.CompositeFileProvider.GetDirectoryContents*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.FileProviders.CompositeFileProvider.Watch(System.String)
  commentId: M:Microsoft.Extensions.FileProviders.CompositeFileProvider.Watch(System.String)
  id: Watch(System.String)
  parent: Microsoft.Extensions.FileProviders.CompositeFileProvider
  langs:
  - csharp
  - vb
  name: Watch(String)
  nameWithType: CompositeFileProvider.Watch(String)
  fullName: Microsoft.Extensions.FileProviders.CompositeFileProvider.Watch(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Composite/CompositeFileProvider.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: Watch
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Composite/CompositeFileProvider.cs
    startLine: 77
  assemblies:
  - Microsoft.Extensions.FileProviders.Composite
  namespace: Microsoft.Extensions.FileProviders
  summary: "\nCreates a <see cref=\"!:IChangeToken\"></see> for the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">pattern</code>.\n"
  example: []
  syntax:
    content: public IChangeToken Watch(string pattern)
    parameters:
    - id: pattern
      type: System.String
      description: 'Filter string used to determine what files or folders to monitor. Example: **/*.cs, *.*, subFolder/**/*.cshtml.'
    return:
      type: IChangeToken
      description: >-
        An <see cref="!:IChangeToken"></see> that is notified when a file matching <code data-dev-comment-type="paramref" class="paramref">pattern</code> is added, modified or deleted.

        The change token will be notified when one of the change token returned by the provided <see cref="!:IFileProvider"></see> will be notified.
    content.vb: Public Function Watch(pattern As String) As IChangeToken
  overload: Microsoft.Extensions.FileProviders.CompositeFileProvider.Watch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.FileProviders.CompositeFileProvider.FileProviders
  commentId: P:Microsoft.Extensions.FileProviders.CompositeFileProvider.FileProviders
  id: FileProviders
  parent: Microsoft.Extensions.FileProviders.CompositeFileProvider
  langs:
  - csharp
  - vb
  name: FileProviders
  nameWithType: CompositeFileProvider.FileProviders
  fullName: Microsoft.Extensions.FileProviders.CompositeFileProvider.FileProviders
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Composite/CompositeFileProvider.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: FileProviders
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Composite/CompositeFileProvider.cs
    startLine: 102
  assemblies:
  - Microsoft.Extensions.FileProviders.Composite
  namespace: Microsoft.Extensions.FileProviders
  summary: "\nGets the list of configured <see cref=\"!:IFileProvider\"></see> instances.\n"
  example: []
  syntax:
    content: public IEnumerable<IFileProvider> FileProviders { get; }
    parameters: []
    return:
      type: IEnumerable{IFileProvider}
    content.vb: Public ReadOnly Property FileProviders As IEnumerable(Of IFileProvider)
  overload: Microsoft.Extensions.FileProviders.CompositeFileProvider.FileProviders*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Microsoft.Extensions.FileProviders
  commentId: N:Microsoft.Extensions.FileProviders
  isExternal: false
  name: Microsoft.Extensions.FileProviders
  nameWithType: Microsoft.Extensions.FileProviders
  fullName: Microsoft.Extensions.FileProviders
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.FileProviders.CompositeFileProvider
  commentId: T:Microsoft.Extensions.FileProviders.CompositeFileProvider
  isExternal: false
  name: CompositeFileProvider
  nameWithType: CompositeFileProvider
  fullName: Microsoft.Extensions.FileProviders.CompositeFileProvider
- uid: Microsoft.Extensions.FileProviders.CompositeFileProvider.#ctor*
  commentId: Overload:Microsoft.Extensions.FileProviders.CompositeFileProvider.#ctor
  isExternal: false
  name: CompositeFileProvider
  nameWithType: CompositeFileProvider.CompositeFileProvider
  fullName: Microsoft.Extensions.FileProviders.CompositeFileProvider.CompositeFileProvider
- uid: IFileProvider[]
  name: IFileProvider[]
  nameWithType: IFileProvider[]
  fullName: IFileProvider[]
  nameWithType.vb: IFileProvider()
  fullName.vb: IFileProvider()
  name.vb: IFileProvider()
  spec.csharp:
  - uid: IFileProvider
    name: IFileProvider
    nameWithType: IFileProvider
    fullName: IFileProvider
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: IFileProvider
    name: IFileProvider
    nameWithType: IFileProvider
    fullName: IFileProvider
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: IEnumerable{IFileProvider}
  commentId: '!:IEnumerable{IFileProvider}'
  definition: IEnumerable`1
  name: IEnumerable<IFileProvider>
  nameWithType: IEnumerable<IFileProvider>
  fullName: IEnumerable<IFileProvider>
  nameWithType.vb: IEnumerable(Of IFileProvider)
  fullName.vb: IEnumerable(Of IFileProvider)
  name.vb: IEnumerable(Of IFileProvider)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IFileProvider
    name: IFileProvider
    nameWithType: IFileProvider
    fullName: IFileProvider
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IFileProvider
    name: IFileProvider
    nameWithType: IFileProvider
    fullName: IFileProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.FileProviders.CompositeFileProvider.GetFileInfo*
  commentId: Overload:Microsoft.Extensions.FileProviders.CompositeFileProvider.GetFileInfo
  isExternal: false
  name: GetFileInfo
  nameWithType: CompositeFileProvider.GetFileInfo
  fullName: Microsoft.Extensions.FileProviders.CompositeFileProvider.GetFileInfo
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: IFileInfo
  isExternal: true
  name: IFileInfo
  nameWithType: IFileInfo
  fullName: IFileInfo
- uid: Microsoft.Extensions.FileProviders.CompositeFileProvider.GetDirectoryContents*
  commentId: Overload:Microsoft.Extensions.FileProviders.CompositeFileProvider.GetDirectoryContents
  isExternal: false
  name: GetDirectoryContents
  nameWithType: CompositeFileProvider.GetDirectoryContents
  fullName: Microsoft.Extensions.FileProviders.CompositeFileProvider.GetDirectoryContents
- uid: IDirectoryContents
  isExternal: true
  name: IDirectoryContents
  nameWithType: IDirectoryContents
  fullName: IDirectoryContents
- uid: Microsoft.Extensions.FileProviders.CompositeFileProvider.Watch*
  commentId: Overload:Microsoft.Extensions.FileProviders.CompositeFileProvider.Watch
  isExternal: false
  name: Watch
  nameWithType: CompositeFileProvider.Watch
  fullName: Microsoft.Extensions.FileProviders.CompositeFileProvider.Watch
- uid: IChangeToken
  isExternal: true
  name: IChangeToken
  nameWithType: IChangeToken
  fullName: IChangeToken
- uid: Microsoft.Extensions.FileProviders.CompositeFileProvider.FileProviders*
  commentId: Overload:Microsoft.Extensions.FileProviders.CompositeFileProvider.FileProviders
  isExternal: false
  name: FileProviders
  nameWithType: CompositeFileProvider.FileProviders
  fullName: Microsoft.Extensions.FileProviders.CompositeFileProvider.FileProviders
shouldSkipMarkup: true
