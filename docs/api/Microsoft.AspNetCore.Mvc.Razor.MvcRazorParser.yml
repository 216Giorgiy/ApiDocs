### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Mvc.Razor.MvcRazorParser
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.MvcRazorParser
  id: MvcRazorParser
  parent: Microsoft.AspNetCore.Mvc.Razor
  children:
  - Microsoft.AspNetCore.Mvc.Razor.MvcRazorParser.#ctor(RazorParser,System.Collections.Generic.IReadOnlyList{ChunkTree},System.Collections.Generic.IReadOnlyList{Chunk},System.String)
  - Microsoft.AspNetCore.Mvc.Razor.MvcRazorParser.GetTagHelperDescriptors(Block,ErrorSink)
  langs:
  - csharp
  - vb
  name: MvcRazorParser
  nameWithType: MvcRazorParser
  fullName: Microsoft.AspNetCore.Mvc.Razor.MvcRazorParser
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor.Host/MvcRazorParser.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: MvcRazorParser
    path: ../aspnet/Mvc/src/Microsoft.AspNetCore.Mvc.Razor.Host/MvcRazorParser.cs
    startLine: 20
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor.Host
  namespace: Microsoft.AspNetCore.Mvc.Razor
  summary: "\nA subtype of <see cref=\"!:RazorParser\"></see> that <xref href=\"Microsoft.AspNetCore.Mvc.Razor.MvcRazorHost\" data-throw-if-not-resolved=\"false\"></xref> uses to support inheritance of tag\nhelpers from <code>_ViewImports</code> files.\n"
  example: []
  syntax:
    content: 'public class MvcRazorParser : RazorParser'
    content.vb: >-
      Public Class MvcRazorParser
          Inherits RazorParser
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Mvc.Razor.MvcRazorParser.#ctor(RazorParser,System.Collections.Generic.IReadOnlyList{ChunkTree},System.Collections.Generic.IReadOnlyList{Chunk},System.String)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.MvcRazorParser.#ctor(RazorParser,System.Collections.Generic.IReadOnlyList{ChunkTree},System.Collections.Generic.IReadOnlyList{Chunk},System.String)
  id: '#ctor(RazorParser,System.Collections.Generic.IReadOnlyList{ChunkTree},System.Collections.Generic.IReadOnlyList{Chunk},System.String)'
  parent: Microsoft.AspNetCore.Mvc.Razor.MvcRazorParser
  langs:
  - csharp
  - vb
  name: MvcRazorParser(RazorParser, IReadOnlyList<ChunkTree>, IReadOnlyList<Chunk>, String)
  nameWithType: MvcRazorParser.MvcRazorParser(RazorParser, IReadOnlyList<ChunkTree>, IReadOnlyList<Chunk>, String)
  fullName: Microsoft.AspNetCore.Mvc.Razor.MvcRazorParser.MvcRazorParser(RazorParser, System.Collections.Generic.IReadOnlyList<ChunkTree>, System.Collections.Generic.IReadOnlyList<Chunk>, System.String)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor.Host/MvcRazorParser.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: .ctor
    path: ../aspnet/Mvc/src/Microsoft.AspNetCore.Mvc.Razor.Host/MvcRazorParser.cs
    startLine: 34
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor.Host
  namespace: Microsoft.AspNetCore.Mvc.Razor
  summary: "\nInitializes a new instance of <xref href=\"Microsoft.AspNetCore.Mvc.Razor.MvcRazorParser\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public MvcRazorParser(RazorParser parser, IReadOnlyList<ChunkTree> inheritedChunkTrees, IReadOnlyList<Chunk> defaultInheritedChunks, string modelExpressionTypeName)
    parameters:
    - id: parser
      type: RazorParser
      description: The <see cref="!:RazorParser"></see> to copy properties from.
    - id: inheritedChunkTrees
      type: System.Collections.Generic.IReadOnlyList{ChunkTree}
      description: >-
        The <xref href="System.Collections.Generic.IReadOnlyList%601" data-throw-if-not-resolved="false"></xref>s that are inherited

        from parsed pages from _ViewImports files.
    - id: defaultInheritedChunks
      type: System.Collections.Generic.IReadOnlyList{Chunk}
      description: >-
        The <xref href="System.Collections.Generic.IReadOnlyList%601" data-throw-if-not-resolved="false"></xref> inherited by

        default by all Razor pages in the application.
    - id: modelExpressionTypeName
      type: System.String
      description: The full name of the model expression <xref href="System.Type" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Sub New(parser As RazorParser, inheritedChunkTrees As IReadOnlyList(Of ChunkTree), defaultInheritedChunks As IReadOnlyList(Of Chunk), modelExpressionTypeName As String)
  overload: Microsoft.AspNetCore.Mvc.Razor.MvcRazorParser.#ctor*
  nameWithType.vb: MvcRazorParser.MvcRazorParser(RazorParser, IReadOnlyList(Of ChunkTree), IReadOnlyList(Of Chunk), String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Mvc.Razor.MvcRazorParser.MvcRazorParser(RazorParser, System.Collections.Generic.IReadOnlyList(Of ChunkTree), System.Collections.Generic.IReadOnlyList(Of Chunk), System.String)
  name.vb: MvcRazorParser(RazorParser, IReadOnlyList(Of ChunkTree), IReadOnlyList(Of Chunk), String)
- uid: Microsoft.AspNetCore.Mvc.Razor.MvcRazorParser.GetTagHelperDescriptors(Block,ErrorSink)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.MvcRazorParser.GetTagHelperDescriptors(Block,ErrorSink)
  id: GetTagHelperDescriptors(Block,ErrorSink)
  parent: Microsoft.AspNetCore.Mvc.Razor.MvcRazorParser
  langs:
  - csharp
  - vb
  name: GetTagHelperDescriptors(Block, ErrorSink)
  nameWithType: MvcRazorParser.GetTagHelperDescriptors(Block, ErrorSink)
  fullName: Microsoft.AspNetCore.Mvc.Razor.MvcRazorParser.GetTagHelperDescriptors(Block, ErrorSink)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor.Host/MvcRazorParser.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: GetTagHelperDescriptors
    path: ../aspnet/Mvc/src/Microsoft.AspNetCore.Mvc.Razor.Host/MvcRazorParser.cs
    startLine: 70
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor.Host
  namespace: Microsoft.AspNetCore.Mvc.Razor
  example: []
  syntax:
    content: protected override IEnumerable<TagHelperDescriptor> GetTagHelperDescriptors(Block documentRoot, ErrorSink errorSink)
    parameters:
    - id: documentRoot
      type: Block
    - id: errorSink
      type: ErrorSink
    return:
      type: System.Collections.Generic.IEnumerable{TagHelperDescriptor}
    content.vb: Protected Overrides Function GetTagHelperDescriptors(documentRoot As Block, errorSink As ErrorSink) As IEnumerable(Of TagHelperDescriptor)
  overload: Microsoft.AspNetCore.Mvc.Razor.MvcRazorParser.GetTagHelperDescriptors*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: Microsoft.AspNetCore.Mvc.Razor.MvcRazorHost
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.MvcRazorHost
  parent: Microsoft.AspNetCore.Mvc.Razor
  isExternal: false
  name: MvcRazorHost
  nameWithType: MvcRazorHost
  fullName: Microsoft.AspNetCore.Mvc.Razor.MvcRazorHost
- uid: Microsoft.AspNetCore.Mvc.Razor
  commentId: N:Microsoft.AspNetCore.Mvc.Razor
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.Razor
  nameWithType: Microsoft.AspNetCore.Mvc.Razor
  fullName: Microsoft.AspNetCore.Mvc.Razor
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Mvc.Razor.MvcRazorParser
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.MvcRazorParser
  isExternal: false
  name: MvcRazorParser
  nameWithType: MvcRazorParser
  fullName: Microsoft.AspNetCore.Mvc.Razor.MvcRazorParser
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Microsoft.AspNetCore.Mvc.Razor.MvcRazorParser.#ctor*
  commentId: Overload:Microsoft.AspNetCore.Mvc.Razor.MvcRazorParser.#ctor
  isExternal: false
  name: MvcRazorParser
  nameWithType: MvcRazorParser.MvcRazorParser
  fullName: Microsoft.AspNetCore.Mvc.Razor.MvcRazorParser.MvcRazorParser
- uid: RazorParser
  isExternal: true
  name: RazorParser
  nameWithType: RazorParser
  fullName: RazorParser
- uid: System.Collections.Generic.IReadOnlyList{ChunkTree}
  commentId: T:System.Collections.Generic.IReadOnlyList{ChunkTree}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<ChunkTree>
  nameWithType: IReadOnlyList<ChunkTree>
  fullName: System.Collections.Generic.IReadOnlyList<ChunkTree>
  nameWithType.vb: IReadOnlyList(Of ChunkTree)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of ChunkTree)
  name.vb: IReadOnlyList(Of ChunkTree)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ChunkTree
    name: ChunkTree
    nameWithType: ChunkTree
    fullName: ChunkTree
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ChunkTree
    name: ChunkTree
    nameWithType: ChunkTree
    fullName: ChunkTree
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList{Chunk}
  commentId: T:System.Collections.Generic.IReadOnlyList{Chunk}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<Chunk>
  nameWithType: IReadOnlyList<Chunk>
  fullName: System.Collections.Generic.IReadOnlyList<Chunk>
  nameWithType.vb: IReadOnlyList(Of Chunk)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of Chunk)
  name.vb: IReadOnlyList(Of Chunk)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Chunk
    name: Chunk
    nameWithType: Chunk
    fullName: Chunk
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Chunk
    name: Chunk
    nameWithType: Chunk
    fullName: Chunk
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.AspNetCore.Mvc.Razor.MvcRazorParser.GetTagHelperDescriptors*
  commentId: Overload:Microsoft.AspNetCore.Mvc.Razor.MvcRazorParser.GetTagHelperDescriptors
  isExternal: false
  name: GetTagHelperDescriptors
  nameWithType: MvcRazorParser.GetTagHelperDescriptors
  fullName: Microsoft.AspNetCore.Mvc.Razor.MvcRazorParser.GetTagHelperDescriptors
- uid: Block
  commentId: '!:Block'
  isExternal: true
  name: Block
  nameWithType: Block
  fullName: Block
- uid: ErrorSink
  isExternal: true
  name: ErrorSink
  nameWithType: ErrorSink
  fullName: ErrorSink
- uid: System.Collections.Generic.IEnumerable{TagHelperDescriptor}
  commentId: T:System.Collections.Generic.IEnumerable{TagHelperDescriptor}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TagHelperDescriptor>
  nameWithType: IEnumerable<TagHelperDescriptor>
  fullName: System.Collections.Generic.IEnumerable<TagHelperDescriptor>
  nameWithType.vb: IEnumerable(Of TagHelperDescriptor)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TagHelperDescriptor)
  name.vb: IEnumerable(Of TagHelperDescriptor)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TagHelperDescriptor
    name: TagHelperDescriptor
    nameWithType: TagHelperDescriptor
    fullName: TagHelperDescriptor
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TagHelperDescriptor
    name: TagHelperDescriptor
    nameWithType: TagHelperDescriptor
    fullName: TagHelperDescriptor
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
