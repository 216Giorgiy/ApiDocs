### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.AzureBlobSink
  commentId: T:Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.AzureBlobSink
  id: AzureBlobSink
  parent: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  children:
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.AzureBlobSink.#ctor(System.Func{System.String,Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob},System.String,System.String,Serilog.Formatting.ITextFormatter,System.Int32,System.TimeSpan)
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.AzureBlobSink.EmitBatchAsync(System.Collections.Generic.IEnumerable{Serilog.Events.LogEvent})
  langs:
  - csharp
  - vb
  name: AzureBlobSink
  nameWithType: AzureBlobSink
  fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.AzureBlobSink
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/AzureBlobSink.cs
      branch: dev
      repo: https://github.com/aspnet/logging
    id: AzureBlobSink
    path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/AzureBlobSink.cs
    startLine: 19
  assemblies:
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics
  namespace: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  summary: "\nThe <see cref=\"T:Serilog.Core.ILogEventSink\"></see> implemenation that stores messages by appending them to Azure Blob in batches.\n"
  example: []
  syntax:
    content: 'public class AzureBlobSink : PeriodicBatchingSink, ILogEventSink, IDisposable'
    content.vb: >-
      Public Class AzureBlobSink
          Inherits PeriodicBatchingSink
          Implements ILogEventSink, IDisposable
  inheritance:
  - System.Object
  - Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink
  implements:
  - Serilog.Core.ILogEventSink
  - System.IDisposable
  inheritedMembers:
  - Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.Dispose
  - Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.Dispose(System.Boolean)
  - Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.EmitBatch(System.Collections.Generic.IEnumerable{Serilog.Events.LogEvent})
  - Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.Emit(Serilog.Events.LogEvent)
  - Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.CanInclude(Serilog.Events.LogEvent)
  - Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.OnEmptyBatch
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.AzureBlobSink.#ctor(System.Func{System.String,Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob},System.String,System.String,Serilog.Formatting.ITextFormatter,System.Int32,System.TimeSpan)
  commentId: M:Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.AzureBlobSink.#ctor(System.Func{System.String,Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob},System.String,System.String,Serilog.Formatting.ITextFormatter,System.Int32,System.TimeSpan)
  id: '#ctor(System.Func{System.String,Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob},System.String,System.String,Serilog.Formatting.ITextFormatter,System.Int32,System.TimeSpan)'
  parent: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.AzureBlobSink
  langs:
  - csharp
  - vb
  name: AzureBlobSink(Func<String, ICloudAppendBlob>, String, String, ITextFormatter, Int32, TimeSpan)
  nameWithType: AzureBlobSink.AzureBlobSink(Func<String, ICloudAppendBlob>, String, String, ITextFormatter, Int32, TimeSpan)
  fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.AzureBlobSink.AzureBlobSink(System.Func<System.String, Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob>, System.String, System.String, Serilog.Formatting.ITextFormatter, System.Int32, System.TimeSpan)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/AzureBlobSink.cs
      branch: dev
      repo: https://github.com/aspnet/logging
    id: .ctor
    path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/AzureBlobSink.cs
    startLine: 35
  assemblies:
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics
  namespace: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  summary: "\nCreates a new instance of <see cref=\"T:Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.AzureBlobSink\"></see>\n"
  example: []
  syntax:
    content: public AzureBlobSink(Func<string, ICloudAppendBlob> blobReferenceFactory, string appName, string fileName, ITextFormatter formatter, int batchSizeLimit, TimeSpan period)
    content.vb: Public Sub New(blobReferenceFactory As Func(Of String, ICloudAppendBlob), appName As String, fileName As String, formatter As ITextFormatter, batchSizeLimit As Integer, period As TimeSpan)
    parameters:
    - id: blobReferenceFactory
      type: System.Func{System.String,Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob}
      description: The container to store logs to.
    - id: appName
      type: System.String
      description: The application name to use in blob path generation.
    - id: fileName
      type: System.String
      description: The last segment of blob name.
    - id: formatter
      type: Serilog.Formatting.ITextFormatter
      description: The <see cref="T:Serilog.Formatting.ITextFormatter"></see> for log messages.
    - id: batchSizeLimit
      type: System.Int32
      description: The maximum number of events to include in a single batch.
    - id: period
      type: System.TimeSpan
      description: The time to wait between checking for event batches.
  nameWithType.vb: AzureBlobSink.AzureBlobSink(Func(Of String, ICloudAppendBlob), String, String, ITextFormatter, Int32, TimeSpan)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.AzureBlobSink.AzureBlobSink(System.Func(Of System.String, Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob), System.String, System.String, Serilog.Formatting.ITextFormatter, System.Int32, System.TimeSpan)
  name.vb: AzureBlobSink(Func(Of String, ICloudAppendBlob), String, String, ITextFormatter, Int32, TimeSpan)
- uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.AzureBlobSink.EmitBatchAsync(System.Collections.Generic.IEnumerable{Serilog.Events.LogEvent})
  commentId: M:Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.AzureBlobSink.EmitBatchAsync(System.Collections.Generic.IEnumerable{Serilog.Events.LogEvent})
  id: EmitBatchAsync(System.Collections.Generic.IEnumerable{Serilog.Events.LogEvent})
  parent: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.AzureBlobSink
  langs:
  - csharp
  - vb
  name: EmitBatchAsync(IEnumerable<LogEvent>)
  nameWithType: AzureBlobSink.EmitBatchAsync(IEnumerable<LogEvent>)
  fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.AzureBlobSink.EmitBatchAsync(System.Collections.Generic.IEnumerable<Serilog.Events.LogEvent>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/AzureBlobSink.cs
      branch: dev
      repo: https://github.com/aspnet/logging
    id: EmitBatchAsync
    path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/AzureBlobSink.cs
    startLine: 70
  assemblies:
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics
  namespace: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  example: []
  syntax:
    content: protected override Task EmitBatchAsync(IEnumerable<LogEvent> events)
    content.vb: Protected Overrides Function EmitBatchAsync(events As IEnumerable(Of LogEvent)) As Task
    parameters:
    - id: events
      type: System.Collections.Generic.IEnumerable{Serilog.Events.LogEvent}
    return:
      type: System.Threading.Tasks.Task
  overridden: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.EmitBatchAsync(System.Collections.Generic.IEnumerable{Serilog.Events.LogEvent})
  nameWithType.vb: AzureBlobSink.EmitBatchAsync(IEnumerable(Of LogEvent))
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.AzureBlobSink.EmitBatchAsync(System.Collections.Generic.IEnumerable(Of Serilog.Events.LogEvent))
  name.vb: EmitBatchAsync(IEnumerable(Of LogEvent))
references:
- uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  commentId: N:Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  isExternal: false
  name: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  nameWithType: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink
  commentId: T:Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink
  parent: Serilog.Sinks.PeriodicBatching
  isExternal: true
  name: PeriodicBatchingSink
  nameWithType: PeriodicBatchingSink
  fullName: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink
- uid: Serilog.Core.ILogEventSink
  commentId: T:Serilog.Core.ILogEventSink
  parent: Serilog.Core
  isExternal: true
  name: ILogEventSink
  nameWithType: ILogEventSink
  fullName: Serilog.Core.ILogEventSink
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.Dispose
  commentId: M:Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.Dispose
  parent: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink
  isExternal: true
  name: Dispose()
  nameWithType: PeriodicBatchingSink.Dispose()
  fullName: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.Dispose()
  spec.csharp:
  - uid: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.Dispose
    name: Dispose
    nameWithType: PeriodicBatchingSink.Dispose
    fullName: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.Dispose
    name: Dispose
    nameWithType: PeriodicBatchingSink.Dispose
    fullName: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.Dispose(System.Boolean)
  commentId: M:Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.Dispose(System.Boolean)
  parent: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink
  isExternal: true
  name: Dispose(Boolean)
  nameWithType: PeriodicBatchingSink.Dispose(Boolean)
  fullName: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.Dispose(System.Boolean)
  spec.csharp:
  - uid: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.Dispose(System.Boolean)
    name: Dispose
    nameWithType: PeriodicBatchingSink.Dispose
    fullName: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.Dispose(System.Boolean)
    name: Dispose
    nameWithType: PeriodicBatchingSink.Dispose
    fullName: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.EmitBatch(System.Collections.Generic.IEnumerable{Serilog.Events.LogEvent})
  commentId: M:Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.EmitBatch(System.Collections.Generic.IEnumerable{Serilog.Events.LogEvent})
  parent: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink
  isExternal: true
  name: EmitBatch(IEnumerable<LogEvent>)
  nameWithType: PeriodicBatchingSink.EmitBatch(IEnumerable<LogEvent>)
  fullName: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.EmitBatch(System.Collections.Generic.IEnumerable<Serilog.Events.LogEvent>)
  nameWithType.vb: PeriodicBatchingSink.EmitBatch(IEnumerable(Of LogEvent))
  fullname.vb: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.EmitBatch(System.Collections.Generic.IEnumerable(Of Serilog.Events.LogEvent))
  name.vb: EmitBatch(IEnumerable(Of LogEvent))
  spec.csharp:
  - uid: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.EmitBatch(System.Collections.Generic.IEnumerable{Serilog.Events.LogEvent})
    name: EmitBatch
    nameWithType: PeriodicBatchingSink.EmitBatch
    fullName: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.EmitBatch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Serilog.Events.LogEvent
    name: LogEvent
    nameWithType: LogEvent
    fullName: Serilog.Events.LogEvent
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.EmitBatch(System.Collections.Generic.IEnumerable{Serilog.Events.LogEvent})
    name: EmitBatch
    nameWithType: PeriodicBatchingSink.EmitBatch
    fullName: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.EmitBatch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Serilog.Events.LogEvent
    name: LogEvent
    nameWithType: LogEvent
    fullName: Serilog.Events.LogEvent
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.Emit(Serilog.Events.LogEvent)
  commentId: M:Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.Emit(Serilog.Events.LogEvent)
  parent: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink
  isExternal: true
  name: Emit(LogEvent)
  nameWithType: PeriodicBatchingSink.Emit(LogEvent)
  fullName: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.Emit(Serilog.Events.LogEvent)
  spec.csharp:
  - uid: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.Emit(Serilog.Events.LogEvent)
    name: Emit
    nameWithType: PeriodicBatchingSink.Emit
    fullName: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.Emit
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Serilog.Events.LogEvent
    name: LogEvent
    nameWithType: LogEvent
    fullName: Serilog.Events.LogEvent
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.Emit(Serilog.Events.LogEvent)
    name: Emit
    nameWithType: PeriodicBatchingSink.Emit
    fullName: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.Emit
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Serilog.Events.LogEvent
    name: LogEvent
    nameWithType: LogEvent
    fullName: Serilog.Events.LogEvent
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.CanInclude(Serilog.Events.LogEvent)
  commentId: M:Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.CanInclude(Serilog.Events.LogEvent)
  parent: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink
  isExternal: true
  name: CanInclude(LogEvent)
  nameWithType: PeriodicBatchingSink.CanInclude(LogEvent)
  fullName: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.CanInclude(Serilog.Events.LogEvent)
  spec.csharp:
  - uid: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.CanInclude(Serilog.Events.LogEvent)
    name: CanInclude
    nameWithType: PeriodicBatchingSink.CanInclude
    fullName: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.CanInclude
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Serilog.Events.LogEvent
    name: LogEvent
    nameWithType: LogEvent
    fullName: Serilog.Events.LogEvent
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.CanInclude(Serilog.Events.LogEvent)
    name: CanInclude
    nameWithType: PeriodicBatchingSink.CanInclude
    fullName: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.CanInclude
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Serilog.Events.LogEvent
    name: LogEvent
    nameWithType: LogEvent
    fullName: Serilog.Events.LogEvent
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.OnEmptyBatch
  commentId: M:Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.OnEmptyBatch
  parent: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink
  isExternal: true
  name: OnEmptyBatch()
  nameWithType: PeriodicBatchingSink.OnEmptyBatch()
  fullName: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.OnEmptyBatch()
  spec.csharp:
  - uid: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.OnEmptyBatch
    name: OnEmptyBatch
    nameWithType: PeriodicBatchingSink.OnEmptyBatch
    fullName: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.OnEmptyBatch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.OnEmptyBatch
    name: OnEmptyBatch
    nameWithType: PeriodicBatchingSink.OnEmptyBatch
    fullName: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.OnEmptyBatch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Serilog.Sinks.PeriodicBatching
  commentId: N:Serilog.Sinks.PeriodicBatching
  isExternal: false
  name: Serilog.Sinks.PeriodicBatching
  nameWithType: Serilog.Sinks.PeriodicBatching
  fullName: Serilog.Sinks.PeriodicBatching
- uid: Serilog.Core
  commentId: N:Serilog.Core
  isExternal: false
  name: Serilog.Core
  nameWithType: Serilog.Core
  fullName: Serilog.Core
- uid: System.Func{System.String,Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob}
  commentId: T:System.Func{System.String,Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob}
  parent: System
  definition: System.Func`2
  name: Func<String, ICloudAppendBlob>
  nameWithType: Func<String, ICloudAppendBlob>
  fullName: System.Func<System.String, Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob>
  nameWithType.vb: Func(Of String, ICloudAppendBlob)
  fullname.vb: System.Func(Of System.String, Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob)
  name.vb: Func(Of String, ICloudAppendBlob)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob
    name: ICloudAppendBlob
    nameWithType: ICloudAppendBlob
    fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob
    name: ICloudAppendBlob
    nameWithType: ICloudAppendBlob
    fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.ICloudAppendBlob
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Serilog.Formatting.ITextFormatter
  commentId: T:Serilog.Formatting.ITextFormatter
  parent: Serilog.Formatting
  isExternal: true
  name: ITextFormatter
  nameWithType: ITextFormatter
  fullName: Serilog.Formatting.ITextFormatter
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Serilog.Formatting
  commentId: N:Serilog.Formatting
  isExternal: false
  name: Serilog.Formatting
  nameWithType: Serilog.Formatting
  fullName: Serilog.Formatting
- uid: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.EmitBatchAsync(System.Collections.Generic.IEnumerable{Serilog.Events.LogEvent})
  commentId: M:Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.EmitBatchAsync(System.Collections.Generic.IEnumerable{Serilog.Events.LogEvent})
  parent: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink
  isExternal: true
  name: EmitBatchAsync(IEnumerable<LogEvent>)
  nameWithType: PeriodicBatchingSink.EmitBatchAsync(IEnumerable<LogEvent>)
  fullName: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.EmitBatchAsync(System.Collections.Generic.IEnumerable<Serilog.Events.LogEvent>)
  nameWithType.vb: PeriodicBatchingSink.EmitBatchAsync(IEnumerable(Of LogEvent))
  fullname.vb: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.EmitBatchAsync(System.Collections.Generic.IEnumerable(Of Serilog.Events.LogEvent))
  name.vb: EmitBatchAsync(IEnumerable(Of LogEvent))
  spec.csharp:
  - uid: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.EmitBatchAsync(System.Collections.Generic.IEnumerable{Serilog.Events.LogEvent})
    name: EmitBatchAsync
    nameWithType: PeriodicBatchingSink.EmitBatchAsync
    fullName: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.EmitBatchAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Serilog.Events.LogEvent
    name: LogEvent
    nameWithType: LogEvent
    fullName: Serilog.Events.LogEvent
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.EmitBatchAsync(System.Collections.Generic.IEnumerable{Serilog.Events.LogEvent})
    name: EmitBatchAsync
    nameWithType: PeriodicBatchingSink.EmitBatchAsync
    fullName: Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.EmitBatchAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Serilog.Events.LogEvent
    name: LogEvent
    nameWithType: LogEvent
    fullName: Serilog.Events.LogEvent
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Serilog.Events.LogEvent}
  commentId: T:System.Collections.Generic.IEnumerable{Serilog.Events.LogEvent}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<LogEvent>
  nameWithType: IEnumerable<LogEvent>
  fullName: System.Collections.Generic.IEnumerable<Serilog.Events.LogEvent>
  nameWithType.vb: IEnumerable(Of LogEvent)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Serilog.Events.LogEvent)
  name.vb: IEnumerable(Of LogEvent)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Serilog.Events.LogEvent
    name: LogEvent
    nameWithType: LogEvent
    fullName: Serilog.Events.LogEvent
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Serilog.Events.LogEvent
    name: LogEvent
    nameWithType: LogEvent
    fullName: Serilog.Events.LogEvent
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
