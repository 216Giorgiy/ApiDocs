### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  commentId: T:Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  id: ServiceDescriptor
  parent: Microsoft.Extensions.DependencyInjection
  children:
  - Microsoft.Extensions.DependencyInjection.ServiceDescriptor.#ctor(Type,Func{IServiceProvider,System.Object},Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  - Microsoft.Extensions.DependencyInjection.ServiceDescriptor.#ctor(Type,System.Object)
  - Microsoft.Extensions.DependencyInjection.ServiceDescriptor.#ctor(Type,Type,Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  - Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Describe(Type,Func{IServiceProvider,System.Object},Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  - Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Describe(Type,Type,Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  - Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ImplementationFactory
  - Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ImplementationInstance
  - Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ImplementationType
  - Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Lifetime
  - Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Scoped(Type,Func{IServiceProvider,System.Object})
  - Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Scoped(Type,Type)
  - Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Scoped``1(Func{IServiceProvider,``0})
  - Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Scoped``2
  - Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Scoped``2(Func{IServiceProvider,``1})
  - Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ServiceType
  - Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton(Type,Func{IServiceProvider,System.Object})
  - Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton(Type,System.Object)
  - Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton(Type,Type)
  - Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton``1(``0)
  - Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton``1(Func{IServiceProvider,``0})
  - Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton``2
  - Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton``2(Func{IServiceProvider,``1})
  - Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Transient(Type,Func{IServiceProvider,System.Object})
  - Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Transient(Type,Type)
  - Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Transient``1(Func{IServiceProvider,``0})
  - Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Transient``2
  - Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Transient``2(Func{IServiceProvider,``1})
  langs:
  - csharp
  - vb
  name: ServiceDescriptor
  nameWithType: ServiceDescriptor
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: ServiceDescriptor
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
    startLine: 8
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  syntax:
    content: 'public class ServiceDescriptor : object'
    content.vb: >-
      Public Class ServiceDescriptor
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.#ctor(Type,Type,Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.#ctor(Type,Type,Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  id: '#ctor(Type,Type,Microsoft.Extensions.DependencyInjection.ServiceLifetime)'
  parent: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  langs:
  - csharp
  - vb
  name: ServiceDescriptor(Type, Type, ServiceLifetime)
  nameWithType: ServiceDescriptor.ServiceDescriptor(Type, Type, ServiceLifetime)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ServiceDescriptor(Type, Type, Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: .ctor
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
    startLine: 17
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nInitializes a new instance of <xref href=\"Microsoft.Extensions.DependencyInjection.ServiceDescriptor\" data-throw-if-not-resolved=\"false\"></xref> with the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">implementationType</code>.\n"
  example: []
  syntax:
    content: public ServiceDescriptor(Type serviceType, Type implementationType, ServiceLifetime lifetime)
    parameters:
    - id: serviceType
      type: Type
      description: The <see cref="!:Type"></see> of the service.
    - id: implementationType
      type: Type
      description: The <see cref="!:Type"></see> implementing the service.
    - id: lifetime
      type: Microsoft.Extensions.DependencyInjection.ServiceLifetime
      description: The <xref href="Microsoft.Extensions.DependencyInjection.ServiceLifetime" data-throw-if-not-resolved="false"></xref> of the service.
    content.vb: Public Sub New(serviceType As Type, implementationType As Type, lifetime As ServiceLifetime)
  overload: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.#ctor(Type,System.Object)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.#ctor(Type,System.Object)
  id: '#ctor(Type,System.Object)'
  parent: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  langs:
  - csharp
  - vb
  name: ServiceDescriptor(Type, Object)
  nameWithType: ServiceDescriptor.ServiceDescriptor(Type, Object)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ServiceDescriptor(Type, System.Object)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: .ctor
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
    startLine: 42
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nInitializes a new instance of <xref href=\"Microsoft.Extensions.DependencyInjection.ServiceDescriptor\" data-throw-if-not-resolved=\"false\"></xref> with the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">instance</code>\nas a <xref href=\"Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ServiceDescriptor(Type serviceType, object instance)
    parameters:
    - id: serviceType
      type: Type
      description: The <see cref="!:Type"></see> of the service.
    - id: instance
      type: System.Object
      description: The instance implementing the service.
    content.vb: Public Sub New(serviceType As Type, instance As Object)
  overload: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.#ctor(Type,Func{IServiceProvider,System.Object},Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.#ctor(Type,Func{IServiceProvider,System.Object},Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  id: '#ctor(Type,Func{IServiceProvider,System.Object},Microsoft.Extensions.DependencyInjection.ServiceLifetime)'
  parent: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  langs:
  - csharp
  - vb
  name: ServiceDescriptor(Type, Func<IServiceProvider, Object>, ServiceLifetime)
  nameWithType: ServiceDescriptor.ServiceDescriptor(Type, Func<IServiceProvider, Object>, ServiceLifetime)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ServiceDescriptor(Type, Func<IServiceProvider, System.Object>, Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: .ctor
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
    startLine: 66
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nInitializes a new instance of <xref href=\"Microsoft.Extensions.DependencyInjection.ServiceDescriptor\" data-throw-if-not-resolved=\"false\"></xref> with the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">factory</code>.\n"
  example: []
  syntax:
    content: public ServiceDescriptor(Type serviceType, Func<IServiceProvider, object> factory, ServiceLifetime lifetime)
    parameters:
    - id: serviceType
      type: Type
      description: The <see cref="!:Type"></see> of the service.
    - id: factory
      type: Func{IServiceProvider,System.Object}
      description: A factory used for creating service instances.
    - id: lifetime
      type: Microsoft.Extensions.DependencyInjection.ServiceLifetime
      description: The <xref href="Microsoft.Extensions.DependencyInjection.ServiceLifetime" data-throw-if-not-resolved="false"></xref> of the service.
    content.vb: Public Sub New(serviceType As Type, factory As Func(Of IServiceProvider, Object), lifetime As ServiceLifetime)
  overload: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.#ctor*
  nameWithType.vb: ServiceDescriptor.ServiceDescriptor(Type, Func(Of IServiceProvider, Object), ServiceLifetime)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ServiceDescriptor(Type, Func(Of IServiceProvider, System.Object), Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  name.vb: ServiceDescriptor(Type, Func(Of IServiceProvider, Object), ServiceLifetime)
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Lifetime
  commentId: P:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Lifetime
  id: Lifetime
  parent: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  langs:
  - csharp
  - vb
  name: Lifetime
  nameWithType: ServiceDescriptor.Lifetime
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Lifetime
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: Lifetime
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
    startLine: 92
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  example: []
  syntax:
    content: public ServiceLifetime Lifetime { get; }
    parameters: []
    return:
      type: Microsoft.Extensions.DependencyInjection.ServiceLifetime
    content.vb: Public ReadOnly Property Lifetime As ServiceLifetime
  overload: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Lifetime*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ServiceType
  commentId: P:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ServiceType
  id: ServiceType
  parent: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  langs:
  - csharp
  - vb
  name: ServiceType
  nameWithType: ServiceDescriptor.ServiceType
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ServiceType
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: ServiceType
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
    startLine: 95
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  example: []
  syntax:
    content: public Type ServiceType { get; }
    parameters: []
    return:
      type: Type
    content.vb: Public ReadOnly Property ServiceType As Type
  overload: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ServiceType*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ImplementationType
  commentId: P:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ImplementationType
  id: ImplementationType
  parent: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  langs:
  - csharp
  - vb
  name: ImplementationType
  nameWithType: ServiceDescriptor.ImplementationType
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ImplementationType
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: ImplementationType
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
    startLine: 98
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  example: []
  syntax:
    content: public Type ImplementationType { get; }
    parameters: []
    return:
      type: Type
    content.vb: Public ReadOnly Property ImplementationType As Type
  overload: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ImplementationType*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ImplementationInstance
  commentId: P:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ImplementationInstance
  id: ImplementationInstance
  parent: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  langs:
  - csharp
  - vb
  name: ImplementationInstance
  nameWithType: ServiceDescriptor.ImplementationInstance
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ImplementationInstance
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: ImplementationInstance
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
    startLine: 101
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  example: []
  syntax:
    content: public object ImplementationInstance { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: Public ReadOnly Property ImplementationInstance As Object
  overload: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ImplementationInstance*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ImplementationFactory
  commentId: P:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ImplementationFactory
  id: ImplementationFactory
  parent: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  langs:
  - csharp
  - vb
  name: ImplementationFactory
  nameWithType: ServiceDescriptor.ImplementationFactory
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ImplementationFactory
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: ImplementationFactory
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
    startLine: 104
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  example: []
  syntax:
    content: public Func<IServiceProvider, object> ImplementationFactory { get; }
    parameters: []
    return:
      type: Func{IServiceProvider,System.Object}
    content.vb: Public ReadOnly Property ImplementationFactory As Func(Of IServiceProvider, Object)
  overload: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ImplementationFactory*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Transient``2
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Transient``2
  id: Transient``2
  parent: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  langs:
  - csharp
  - vb
  name: Transient<TService, TImplementation>()
  nameWithType: ServiceDescriptor.Transient<TService, TImplementation>()
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Transient<TService, TImplementation>()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: Transient
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
    startLine: 129
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  syntax:
    content: 'public static ServiceDescriptor Transient<TService, TImplementation>()where TService : class where TImplementation : class, TService'
    typeParameters:
    - id: TService
    - id: TImplementation
    return:
      type: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
    content.vb: Public Shared Function Transient(Of TService As Class, TImplementation As {Class, TService}) As ServiceDescriptor
  overload: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Transient*
  nameWithType.vb: ServiceDescriptor.Transient(Of TService, TImplementation)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Transient(Of TService, TImplementation)()
  name.vb: Transient(Of TService, TImplementation)()
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Transient(Type,Type)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Transient(Type,Type)
  id: Transient(Type,Type)
  parent: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  langs:
  - csharp
  - vb
  name: Transient(Type, Type)
  nameWithType: ServiceDescriptor.Transient(Type, Type)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Transient(Type, Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: Transient
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
    startLine: 136
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  syntax:
    content: public static ServiceDescriptor Transient(Type service, Type implementationType)
    parameters:
    - id: service
      type: Type
    - id: implementationType
      type: Type
    return:
      type: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
    content.vb: Public Shared Function Transient(service As Type, implementationType As Type) As ServiceDescriptor
  overload: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Transient*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Transient``2(Func{IServiceProvider,``1})
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Transient``2(Func{IServiceProvider,``1})
  id: Transient``2(Func{IServiceProvider,``1})
  parent: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  langs:
  - csharp
  - vb
  name: Transient<TService, TImplementation>(Func<IServiceProvider, TImplementation>)
  nameWithType: ServiceDescriptor.Transient<TService, TImplementation>(Func<IServiceProvider, TImplementation>)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Transient<TService, TImplementation>(Func<IServiceProvider, TImplementation>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: Transient
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
    startLine: 151
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  syntax:
    content: 'public static ServiceDescriptor Transient<TService, TImplementation>(Func<IServiceProvider, TImplementation> implementationFactory)where TService : class where TImplementation : class, TService'
    parameters:
    - id: implementationFactory
      type: Func{IServiceProvider,{TImplementation}}
    typeParameters:
    - id: TService
    - id: TImplementation
    return:
      type: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
    content.vb: Public Shared Function Transient(Of TService As Class, TImplementation As {Class, TService})(implementationFactory As Func(Of IServiceProvider, TImplementation)) As ServiceDescriptor
  overload: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Transient*
  nameWithType.vb: ServiceDescriptor.Transient(Of TService, TImplementation)(Func(Of IServiceProvider, TImplementation))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Transient(Of TService, TImplementation)(Func(Of IServiceProvider, TImplementation))
  name.vb: Transient(Of TService, TImplementation)(Func(Of IServiceProvider, TImplementation))
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Transient``1(Func{IServiceProvider,``0})
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Transient``1(Func{IServiceProvider,``0})
  id: Transient``1(Func{IServiceProvider,``0})
  parent: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  langs:
  - csharp
  - vb
  name: Transient<TService>(Func<IServiceProvider, TService>)
  nameWithType: ServiceDescriptor.Transient<TService>(Func<IServiceProvider, TService>)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Transient<TService>(Func<IServiceProvider, TService>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: Transient
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
    startLine: 164
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  syntax:
    content: 'public static ServiceDescriptor Transient<TService>(Func<IServiceProvider, TService> implementationFactory)where TService : class'
    parameters:
    - id: implementationFactory
      type: Func{IServiceProvider,{TService}}
    typeParameters:
    - id: TService
    return:
      type: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
    content.vb: Public Shared Function Transient(Of TService As Class)(implementationFactory As Func(Of IServiceProvider, TService)) As ServiceDescriptor
  overload: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Transient*
  nameWithType.vb: ServiceDescriptor.Transient(Of TService)(Func(Of IServiceProvider, TService))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Transient(Of TService)(Func(Of IServiceProvider, TService))
  name.vb: Transient(Of TService)(Func(Of IServiceProvider, TService))
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Transient(Type,Func{IServiceProvider,System.Object})
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Transient(Type,Func{IServiceProvider,System.Object})
  id: Transient(Type,Func{IServiceProvider,System.Object})
  parent: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  langs:
  - csharp
  - vb
  name: Transient(Type, Func<IServiceProvider, Object>)
  nameWithType: ServiceDescriptor.Transient(Type, Func<IServiceProvider, Object>)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Transient(Type, Func<IServiceProvider, System.Object>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: Transient
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
    startLine: 175
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  syntax:
    content: public static ServiceDescriptor Transient(Type service, Func<IServiceProvider, object> implementationFactory)
    parameters:
    - id: service
      type: Type
    - id: implementationFactory
      type: Func{IServiceProvider,System.Object}
    return:
      type: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
    content.vb: Public Shared Function Transient(service As Type, implementationFactory As Func(Of IServiceProvider, Object)) As ServiceDescriptor
  overload: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Transient*
  nameWithType.vb: ServiceDescriptor.Transient(Type, Func(Of IServiceProvider, Object))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Transient(Type, Func(Of IServiceProvider, System.Object))
  name.vb: Transient(Type, Func(Of IServiceProvider, Object))
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Scoped``2
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Scoped``2
  id: Scoped``2
  parent: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  langs:
  - csharp
  - vb
  name: Scoped<TService, TImplementation>()
  nameWithType: ServiceDescriptor.Scoped<TService, TImplementation>()
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Scoped<TService, TImplementation>()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: Scoped
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
    startLine: 191
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  syntax:
    content: 'public static ServiceDescriptor Scoped<TService, TImplementation>()where TService : class where TImplementation : class, TService'
    typeParameters:
    - id: TService
    - id: TImplementation
    return:
      type: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
    content.vb: Public Shared Function Scoped(Of TService As Class, TImplementation As {Class, TService}) As ServiceDescriptor
  overload: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Scoped*
  nameWithType.vb: ServiceDescriptor.Scoped(Of TService, TImplementation)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Scoped(Of TService, TImplementation)()
  name.vb: Scoped(Of TService, TImplementation)()
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Scoped(Type,Type)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Scoped(Type,Type)
  id: Scoped(Type,Type)
  parent: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  langs:
  - csharp
  - vb
  name: Scoped(Type, Type)
  nameWithType: ServiceDescriptor.Scoped(Type, Type)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Scoped(Type, Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: Scoped
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
    startLine: 198
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  syntax:
    content: public static ServiceDescriptor Scoped(Type service, Type implementationType)
    parameters:
    - id: service
      type: Type
    - id: implementationType
      type: Type
    return:
      type: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
    content.vb: Public Shared Function Scoped(service As Type, implementationType As Type) As ServiceDescriptor
  overload: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Scoped*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Scoped``2(Func{IServiceProvider,``1})
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Scoped``2(Func{IServiceProvider,``1})
  id: Scoped``2(Func{IServiceProvider,``1})
  parent: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  langs:
  - csharp
  - vb
  name: Scoped<TService, TImplementation>(Func<IServiceProvider, TImplementation>)
  nameWithType: ServiceDescriptor.Scoped<TService, TImplementation>(Func<IServiceProvider, TImplementation>)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Scoped<TService, TImplementation>(Func<IServiceProvider, TImplementation>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: Scoped
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
    startLine: 203
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  syntax:
    content: 'public static ServiceDescriptor Scoped<TService, TImplementation>(Func<IServiceProvider, TImplementation> implementationFactory)where TService : class where TImplementation : class, TService'
    parameters:
    - id: implementationFactory
      type: Func{IServiceProvider,{TImplementation}}
    typeParameters:
    - id: TService
    - id: TImplementation
    return:
      type: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
    content.vb: Public Shared Function Scoped(Of TService As Class, TImplementation As {Class, TService})(implementationFactory As Func(Of IServiceProvider, TImplementation)) As ServiceDescriptor
  overload: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Scoped*
  nameWithType.vb: ServiceDescriptor.Scoped(Of TService, TImplementation)(Func(Of IServiceProvider, TImplementation))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Scoped(Of TService, TImplementation)(Func(Of IServiceProvider, TImplementation))
  name.vb: Scoped(Of TService, TImplementation)(Func(Of IServiceProvider, TImplementation))
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Scoped``1(Func{IServiceProvider,``0})
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Scoped``1(Func{IServiceProvider,``0})
  id: Scoped``1(Func{IServiceProvider,``0})
  parent: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  langs:
  - csharp
  - vb
  name: Scoped<TService>(Func<IServiceProvider, TService>)
  nameWithType: ServiceDescriptor.Scoped<TService>(Func<IServiceProvider, TService>)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Scoped<TService>(Func<IServiceProvider, TService>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: Scoped
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
    startLine: 216
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  syntax:
    content: 'public static ServiceDescriptor Scoped<TService>(Func<IServiceProvider, TService> implementationFactory)where TService : class'
    parameters:
    - id: implementationFactory
      type: Func{IServiceProvider,{TService}}
    typeParameters:
    - id: TService
    return:
      type: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
    content.vb: Public Shared Function Scoped(Of TService As Class)(implementationFactory As Func(Of IServiceProvider, TService)) As ServiceDescriptor
  overload: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Scoped*
  nameWithType.vb: ServiceDescriptor.Scoped(Of TService)(Func(Of IServiceProvider, TService))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Scoped(Of TService)(Func(Of IServiceProvider, TService))
  name.vb: Scoped(Of TService)(Func(Of IServiceProvider, TService))
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Scoped(Type,Func{IServiceProvider,System.Object})
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Scoped(Type,Func{IServiceProvider,System.Object})
  id: Scoped(Type,Func{IServiceProvider,System.Object})
  parent: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  langs:
  - csharp
  - vb
  name: Scoped(Type, Func<IServiceProvider, Object>)
  nameWithType: ServiceDescriptor.Scoped(Type, Func<IServiceProvider, Object>)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Scoped(Type, Func<IServiceProvider, System.Object>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: Scoped
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
    startLine: 227
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  syntax:
    content: public static ServiceDescriptor Scoped(Type service, Func<IServiceProvider, object> implementationFactory)
    parameters:
    - id: service
      type: Type
    - id: implementationFactory
      type: Func{IServiceProvider,System.Object}
    return:
      type: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
    content.vb: Public Shared Function Scoped(service As Type, implementationFactory As Func(Of IServiceProvider, Object)) As ServiceDescriptor
  overload: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Scoped*
  nameWithType.vb: ServiceDescriptor.Scoped(Type, Func(Of IServiceProvider, Object))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Scoped(Type, Func(Of IServiceProvider, System.Object))
  name.vb: Scoped(Type, Func(Of IServiceProvider, Object))
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton``2
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton``2
  id: Singleton``2
  parent: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  langs:
  - csharp
  - vb
  name: Singleton<TService, TImplementation>()
  nameWithType: ServiceDescriptor.Singleton<TService, TImplementation>()
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton<TService, TImplementation>()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: Singleton
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
    startLine: 244
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  syntax:
    content: 'public static ServiceDescriptor Singleton<TService, TImplementation>()where TService : class where TImplementation : class, TService'
    typeParameters:
    - id: TService
    - id: TImplementation
    return:
      type: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
    content.vb: Public Shared Function Singleton(Of TService As Class, TImplementation As {Class, TService}) As ServiceDescriptor
  overload: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton*
  nameWithType.vb: ServiceDescriptor.Singleton(Of TService, TImplementation)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton(Of TService, TImplementation)()
  name.vb: Singleton(Of TService, TImplementation)()
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton(Type,Type)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton(Type,Type)
  id: Singleton(Type,Type)
  parent: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  langs:
  - csharp
  - vb
  name: Singleton(Type, Type)
  nameWithType: ServiceDescriptor.Singleton(Type, Type)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton(Type, Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: Singleton
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
    startLine: 251
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  syntax:
    content: public static ServiceDescriptor Singleton(Type service, Type implementationType)
    parameters:
    - id: service
      type: Type
    - id: implementationType
      type: Type
    return:
      type: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
    content.vb: Public Shared Function Singleton(service As Type, implementationType As Type) As ServiceDescriptor
  overload: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton``2(Func{IServiceProvider,``1})
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton``2(Func{IServiceProvider,``1})
  id: Singleton``2(Func{IServiceProvider,``1})
  parent: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  langs:
  - csharp
  - vb
  name: Singleton<TService, TImplementation>(Func<IServiceProvider, TImplementation>)
  nameWithType: ServiceDescriptor.Singleton<TService, TImplementation>(Func<IServiceProvider, TImplementation>)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton<TService, TImplementation>(Func<IServiceProvider, TImplementation>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: Singleton
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
    startLine: 266
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  syntax:
    content: 'public static ServiceDescriptor Singleton<TService, TImplementation>(Func<IServiceProvider, TImplementation> implementationFactory)where TService : class where TImplementation : class, TService'
    parameters:
    - id: implementationFactory
      type: Func{IServiceProvider,{TImplementation}}
    typeParameters:
    - id: TService
    - id: TImplementation
    return:
      type: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
    content.vb: Public Shared Function Singleton(Of TService As Class, TImplementation As {Class, TService})(implementationFactory As Func(Of IServiceProvider, TImplementation)) As ServiceDescriptor
  overload: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton*
  nameWithType.vb: ServiceDescriptor.Singleton(Of TService, TImplementation)(Func(Of IServiceProvider, TImplementation))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton(Of TService, TImplementation)(Func(Of IServiceProvider, TImplementation))
  name.vb: Singleton(Of TService, TImplementation)(Func(Of IServiceProvider, TImplementation))
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton``1(Func{IServiceProvider,``0})
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton``1(Func{IServiceProvider,``0})
  id: Singleton``1(Func{IServiceProvider,``0})
  parent: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  langs:
  - csharp
  - vb
  name: Singleton<TService>(Func<IServiceProvider, TService>)
  nameWithType: ServiceDescriptor.Singleton<TService>(Func<IServiceProvider, TService>)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton<TService>(Func<IServiceProvider, TService>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: Singleton
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
    startLine: 279
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  syntax:
    content: 'public static ServiceDescriptor Singleton<TService>(Func<IServiceProvider, TService> implementationFactory)where TService : class'
    parameters:
    - id: implementationFactory
      type: Func{IServiceProvider,{TService}}
    typeParameters:
    - id: TService
    return:
      type: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
    content.vb: Public Shared Function Singleton(Of TService As Class)(implementationFactory As Func(Of IServiceProvider, TService)) As ServiceDescriptor
  overload: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton*
  nameWithType.vb: ServiceDescriptor.Singleton(Of TService)(Func(Of IServiceProvider, TService))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton(Of TService)(Func(Of IServiceProvider, TService))
  name.vb: Singleton(Of TService)(Func(Of IServiceProvider, TService))
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton(Type,Func{IServiceProvider,System.Object})
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton(Type,Func{IServiceProvider,System.Object})
  id: Singleton(Type,Func{IServiceProvider,System.Object})
  parent: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  langs:
  - csharp
  - vb
  name: Singleton(Type, Func<IServiceProvider, Object>)
  nameWithType: ServiceDescriptor.Singleton(Type, Func<IServiceProvider, Object>)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton(Type, Func<IServiceProvider, System.Object>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: Singleton
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
    startLine: 290
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  syntax:
    content: public static ServiceDescriptor Singleton(Type serviceType, Func<IServiceProvider, object> implementationFactory)
    parameters:
    - id: serviceType
      type: Type
    - id: implementationFactory
      type: Func{IServiceProvider,System.Object}
    return:
      type: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
    content.vb: Public Shared Function Singleton(serviceType As Type, implementationFactory As Func(Of IServiceProvider, Object)) As ServiceDescriptor
  overload: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton*
  nameWithType.vb: ServiceDescriptor.Singleton(Type, Func(Of IServiceProvider, Object))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton(Type, Func(Of IServiceProvider, System.Object))
  name.vb: Singleton(Type, Func(Of IServiceProvider, Object))
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton``1(``0)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton``1(``0)
  id: Singleton``1(``0)
  parent: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  langs:
  - csharp
  - vb
  name: Singleton<TService>(TService)
  nameWithType: ServiceDescriptor.Singleton<TService>(TService)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton<TService>(TService)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: Singleton
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
    startLine: 307
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  syntax:
    content: 'public static ServiceDescriptor Singleton<TService>(TService implementationInstance)where TService : class'
    parameters:
    - id: implementationInstance
      type: '{TService}'
    typeParameters:
    - id: TService
    return:
      type: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
    content.vb: Public Shared Function Singleton(Of TService As Class)(implementationInstance As TService) As ServiceDescriptor
  overload: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton*
  nameWithType.vb: ServiceDescriptor.Singleton(Of TService)(TService)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton(Of TService)(TService)
  name.vb: Singleton(Of TService)(TService)
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton(Type,System.Object)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton(Type,System.Object)
  id: Singleton(Type,System.Object)
  parent: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  langs:
  - csharp
  - vb
  name: Singleton(Type, Object)
  nameWithType: ServiceDescriptor.Singleton(Type, Object)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton(Type, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: Singleton
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
    startLine: 318
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  syntax:
    content: public static ServiceDescriptor Singleton(Type serviceType, object implementationInstance)
    parameters:
    - id: serviceType
      type: Type
    - id: implementationInstance
      type: System.Object
    return:
      type: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
    content.vb: Public Shared Function Singleton(serviceType As Type, implementationInstance As Object) As ServiceDescriptor
  overload: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Describe(Type,Type,Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Describe(Type,Type,Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  id: Describe(Type,Type,Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  parent: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  langs:
  - csharp
  - vb
  name: Describe(Type, Type, ServiceLifetime)
  nameWithType: ServiceDescriptor.Describe(Type, Type, ServiceLifetime)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Describe(Type, Type, Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: Describe
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
    startLine: 345
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  syntax:
    content: public static ServiceDescriptor Describe(Type serviceType, Type implementationType, ServiceLifetime lifetime)
    parameters:
    - id: serviceType
      type: Type
    - id: implementationType
      type: Type
    - id: lifetime
      type: Microsoft.Extensions.DependencyInjection.ServiceLifetime
    return:
      type: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
    content.vb: Public Shared Function Describe(serviceType As Type, implementationType As Type, lifetime As ServiceLifetime) As ServiceDescriptor
  overload: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Describe*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Describe(Type,Func{IServiceProvider,System.Object},Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Describe(Type,Func{IServiceProvider,System.Object},Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  id: Describe(Type,Func{IServiceProvider,System.Object},Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  parent: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  langs:
  - csharp
  - vb
  name: Describe(Type, Func<IServiceProvider, Object>, ServiceLifetime)
  nameWithType: ServiceDescriptor.Describe(Type, Func<IServiceProvider, Object>, ServiceLifetime)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Describe(Type, Func<IServiceProvider, System.Object>, Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: Describe
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceDescriptor.cs
    startLine: 350
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  syntax:
    content: public static ServiceDescriptor Describe(Type serviceType, Func<IServiceProvider, object> implementationFactory, ServiceLifetime lifetime)
    parameters:
    - id: serviceType
      type: Type
    - id: implementationFactory
      type: Func{IServiceProvider,System.Object}
    - id: lifetime
      type: Microsoft.Extensions.DependencyInjection.ServiceLifetime
    return:
      type: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
    content.vb: Public Shared Function Describe(serviceType As Type, implementationFactory As Func(Of IServiceProvider, Object), lifetime As ServiceLifetime) As ServiceDescriptor
  overload: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Describe*
  nameWithType.vb: ServiceDescriptor.Describe(Type, Func(Of IServiceProvider, Object), ServiceLifetime)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Describe(Type, Func(Of IServiceProvider, System.Object), Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  name.vb: Describe(Type, Func(Of IServiceProvider, Object), ServiceLifetime)
references:
- uid: Microsoft.Extensions.DependencyInjection
  commentId: N:Microsoft.Extensions.DependencyInjection
  isExternal: false
  name: Microsoft.Extensions.DependencyInjection
  nameWithType: Microsoft.Extensions.DependencyInjection
  fullName: Microsoft.Extensions.DependencyInjection
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  commentId: T:Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  parent: Microsoft.Extensions.DependencyInjection
  isExternal: false
  name: ServiceDescriptor
  nameWithType: ServiceDescriptor
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
- uid: Microsoft.Extensions.DependencyInjection.ServiceLifetime
  commentId: T:Microsoft.Extensions.DependencyInjection.ServiceLifetime
  parent: Microsoft.Extensions.DependencyInjection
  isExternal: false
  name: ServiceLifetime
  nameWithType: ServiceLifetime
  fullName: Microsoft.Extensions.DependencyInjection.ServiceLifetime
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.#ctor*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.#ctor
  isExternal: false
  name: ServiceDescriptor
  nameWithType: ServiceDescriptor.ServiceDescriptor
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ServiceDescriptor
- uid: Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: Type
- uid: Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton
  commentId: F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton
- uid: Func{IServiceProvider,System.Object}
  commentId: '!:Func{IServiceProvider,System.Object}'
  definition: Func`2
  name: Func<IServiceProvider, Object>
  nameWithType: Func<IServiceProvider, Object>
  fullName: Func<IServiceProvider, System.Object>
  nameWithType.vb: Func(Of IServiceProvider, Object)
  fullName.vb: Func(Of IServiceProvider, System.Object)
  name.vb: Func(Of IServiceProvider, Object)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Lifetime*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Lifetime
  isExternal: false
  name: Lifetime
  nameWithType: ServiceDescriptor.Lifetime
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Lifetime
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ServiceType*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ServiceType
  isExternal: false
  name: ServiceType
  nameWithType: ServiceDescriptor.ServiceType
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ServiceType
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ImplementationType*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ImplementationType
  isExternal: false
  name: ImplementationType
  nameWithType: ServiceDescriptor.ImplementationType
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ImplementationType
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ImplementationInstance*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ImplementationInstance
  isExternal: false
  name: ImplementationInstance
  nameWithType: ServiceDescriptor.ImplementationInstance
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ImplementationInstance
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ImplementationFactory*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ImplementationFactory
  isExternal: false
  name: ImplementationFactory
  nameWithType: ServiceDescriptor.ImplementationFactory
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ImplementationFactory
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Transient*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Transient
  isExternal: false
  name: Transient
  nameWithType: ServiceDescriptor.Transient
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Transient
- uid: Func{IServiceProvider,{TImplementation}}
  commentId: '!:Func{IServiceProvider,``1}'
  definition: Func`2
  name: Func<IServiceProvider, TImplementation>
  nameWithType: Func<IServiceProvider, TImplementation>
  fullName: Func<IServiceProvider, TImplementation>
  nameWithType.vb: Func(Of IServiceProvider, TImplementation)
  fullName.vb: Func(Of IServiceProvider, TImplementation)
  name.vb: Func(Of IServiceProvider, TImplementation)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TImplementation
    nameWithType: TImplementation
    fullName: TImplementation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TImplementation
    nameWithType: TImplementation
    fullName: TImplementation
  - name: )
    nameWithType: )
    fullName: )
- uid: Func{IServiceProvider,{TService}}
  commentId: '!:Func{IServiceProvider,``0}'
  definition: Func`2
  name: Func<IServiceProvider, TService>
  nameWithType: Func<IServiceProvider, TService>
  fullName: Func<IServiceProvider, TService>
  nameWithType.vb: Func(Of IServiceProvider, TService)
  fullName.vb: Func(Of IServiceProvider, TService)
  name.vb: Func(Of IServiceProvider, TService)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TService
    nameWithType: TService
    fullName: TService
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TService
    nameWithType: TService
    fullName: TService
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Scoped*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Scoped
  isExternal: false
  name: Scoped
  nameWithType: ServiceDescriptor.Scoped
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Scoped
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton
  isExternal: false
  name: Singleton
  nameWithType: ServiceDescriptor.Singleton
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton
- uid: '{TService}'
  commentId: '!:TService'
  definition: TService
  name: TService
  nameWithType: TService
  fullName: TService
- uid: TService
  isExternal: false
  name: TService
  nameWithType: TService
  fullName: TService
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Describe*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Describe
  isExternal: false
  name: Describe
  nameWithType: ServiceDescriptor.Describe
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Describe
shouldSkipMarkup: true
