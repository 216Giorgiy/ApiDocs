### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.ProxyEnumerator
  commentId: T:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.ProxyEnumerator
  id: ProxyEnumerable`2.ProxyEnumerator
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal
  children:
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.ProxyEnumerator.#ctor(IEnumerator{`0},Type)
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.ProxyEnumerator.Current
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.ProxyEnumerator.Dispose
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.ProxyEnumerator.MoveNext
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.ProxyEnumerator.Reset
  langs:
  - csharp
  - vb
  name: ProxyEnumerable<TSourceElement, TTargetElement>.ProxyEnumerator
  nameWithType: ProxyEnumerable<TSourceElement, TTargetElement>.ProxyEnumerator
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable<TSourceElement, TTargetElement>.ProxyEnumerator
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyEnumerable.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: ProxyEnumerator
    path: ../aspnet/EventNotification/src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyEnumerable.cs
    startLine: 30
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: 'public class ProxyEnumerator : IEnumerator<TTargetElement>'
    content.vb: >-
      Public Class ProxyEnumerator
          Inherits IEnumerator(Of TTargetElement)
  inheritance:
  - System.Object
  nameWithType.vb: ProxyEnumerable(Of TSourceElement, TTargetElement).ProxyEnumerator
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable(Of TSourceElement, TTargetElement).ProxyEnumerator
  name.vb: ProxyEnumerable(Of TSourceElement, TTargetElement).ProxyEnumerator
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.ProxyEnumerator.#ctor(IEnumerator{`0},Type)
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.ProxyEnumerator.#ctor(IEnumerator{`0},Type)
  id: '#ctor(IEnumerator{`0},Type)'
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.ProxyEnumerator
  langs:
  - csharp
  - vb
  name: ProxyEnumerator(IEnumerator<TSourceElement>, Type)
  nameWithType: ProxyEnumerable<TSourceElement, TTargetElement>.ProxyEnumerator.ProxyEnumerator(IEnumerator<TSourceElement>, Type)
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable<TSourceElement, TTargetElement>.ProxyEnumerator.ProxyEnumerator(IEnumerator<TSourceElement>, Type)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyEnumerable.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: .ctor
    path: ../aspnet/EventNotification/src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyEnumerable.cs
    startLine: 35
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: public ProxyEnumerator(IEnumerator<TSourceElement> source, Type proxyType)
    parameters:
    - id: source
      type: IEnumerator{{TSourceElement}}
    - id: proxyType
      type: Type
    content.vb: Public Sub New(source As IEnumerator(Of TSourceElement), proxyType As Type)
  overload: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.ProxyEnumerator.#ctor*
  nameWithType.vb: ProxyEnumerable(Of TSourceElement, TTargetElement).ProxyEnumerator.ProxyEnumerator(IEnumerator(Of TSourceElement), Type)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable(Of TSourceElement, TTargetElement).ProxyEnumerator.ProxyEnumerator(IEnumerator(Of TSourceElement), Type)
  name.vb: ProxyEnumerator(IEnumerator(Of TSourceElement), Type)
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.ProxyEnumerator.Current
  commentId: P:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.ProxyEnumerator.Current
  id: Current
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.ProxyEnumerator
  langs:
  - csharp
  - vb
  name: Current
  nameWithType: ProxyEnumerable<TSourceElement, TTargetElement>.ProxyEnumerator.Current
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable<TSourceElement, TTargetElement>.ProxyEnumerator.Current
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyEnumerable.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: Current
    path: ../aspnet/EventNotification/src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyEnumerable.cs
    startLine: 42
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: public TTargetElement Current { get; }
    parameters: []
    return:
      type: '{TTargetElement}'
    content.vb: Public ReadOnly Property Current As TTargetElement
  overload: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.ProxyEnumerator.Current*
  nameWithType.vb: ProxyEnumerable(Of TSourceElement, TTargetElement).ProxyEnumerator.Current
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable(Of TSourceElement, TTargetElement).ProxyEnumerator.Current
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.ProxyEnumerator.Dispose
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.ProxyEnumerator.Dispose
  id: Dispose
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.ProxyEnumerator
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: ProxyEnumerable<TSourceElement, TTargetElement>.ProxyEnumerator.Dispose()
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable<TSourceElement, TTargetElement>.ProxyEnumerator.Dispose()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyEnumerable.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: Dispose
    path: ../aspnet/EventNotification/src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyEnumerable.cs
    startLine: 59
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.ProxyEnumerator.Dispose*
  nameWithType.vb: ProxyEnumerable(Of TSourceElement, TTargetElement).ProxyEnumerator.Dispose()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable(Of TSourceElement, TTargetElement).ProxyEnumerator.Dispose()
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.ProxyEnumerator.MoveNext
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.ProxyEnumerator.MoveNext
  id: MoveNext
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.ProxyEnumerator
  langs:
  - csharp
  - vb
  name: MoveNext()
  nameWithType: ProxyEnumerable<TSourceElement, TTargetElement>.ProxyEnumerator.MoveNext()
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable<TSourceElement, TTargetElement>.ProxyEnumerator.MoveNext()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyEnumerable.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: MoveNext
    path: ../aspnet/EventNotification/src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyEnumerable.cs
    startLine: 64
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: public bool MoveNext()
    return:
      type: System.Boolean
    content.vb: Public Function MoveNext As Boolean
  overload: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.ProxyEnumerator.MoveNext*
  nameWithType.vb: ProxyEnumerable(Of TSourceElement, TTargetElement).ProxyEnumerator.MoveNext()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable(Of TSourceElement, TTargetElement).ProxyEnumerator.MoveNext()
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.ProxyEnumerator.Reset
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.ProxyEnumerator.Reset
  id: Reset
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.ProxyEnumerator
  langs:
  - csharp
  - vb
  name: Reset()
  nameWithType: ProxyEnumerable<TSourceElement, TTargetElement>.ProxyEnumerator.Reset()
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable<TSourceElement, TTargetElement>.ProxyEnumerator.Reset()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyEnumerable.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: Reset
    path: ../aspnet/EventNotification/src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyEnumerable.cs
    startLine: 69
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: public void Reset()
    content.vb: Public Sub Reset
  overload: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.ProxyEnumerator.Reset*
  nameWithType.vb: ProxyEnumerable(Of TSourceElement, TTargetElement).ProxyEnumerator.Reset()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable(Of TSourceElement, TTargetElement).ProxyEnumerator.Reset()
references:
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal
  commentId: N:Microsoft.Extensions.DiagnosticAdapter.Internal
  isExternal: false
  name: Microsoft.Extensions.DiagnosticAdapter.Internal
  nameWithType: Microsoft.Extensions.DiagnosticAdapter.Internal
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.ProxyEnumerator.#ctor*
  commentId: Overload:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.ProxyEnumerator.#ctor
  isExternal: false
  name: ProxyEnumerator
  nameWithType: ProxyEnumerable<TSourceElement, TTargetElement>.ProxyEnumerator.ProxyEnumerator
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable<TSourceElement, TTargetElement>.ProxyEnumerator.ProxyEnumerator
  nameWithType.vb: ProxyEnumerable(Of TSourceElement, TTargetElement).ProxyEnumerator.ProxyEnumerator
  fullName.vb: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable(Of TSourceElement, TTargetElement).ProxyEnumerator.ProxyEnumerator
- uid: IEnumerator{{TSourceElement}}
  commentId: '!:IEnumerator{`0}'
  definition: IEnumerator`1
  name: IEnumerator<TSourceElement>
  nameWithType: IEnumerator<TSourceElement>
  fullName: IEnumerator<TSourceElement>
  nameWithType.vb: IEnumerator(Of TSourceElement)
  fullName.vb: IEnumerator(Of TSourceElement)
  name.vb: IEnumerator(Of TSourceElement)
  spec.csharp:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSourceElement
    nameWithType: TSourceElement
    fullName: TSourceElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSourceElement
    nameWithType: TSourceElement
    fullName: TSourceElement
  - name: )
    nameWithType: )
    fullName: )
- uid: Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: Type
- uid: IEnumerator`1
  isExternal: true
  name: IEnumerator<>
  nameWithType: IEnumerator<>
  fullName: IEnumerator<>
  nameWithType.vb: IEnumerator(Of )
  fullName.vb: IEnumerator(Of )
  name.vb: IEnumerator(Of )
  spec.csharp:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.ProxyEnumerator.Current*
  commentId: Overload:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.ProxyEnumerator.Current
  isExternal: false
  name: Current
  nameWithType: ProxyEnumerable<TSourceElement, TTargetElement>.ProxyEnumerator.Current
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable<TSourceElement, TTargetElement>.ProxyEnumerator.Current
  nameWithType.vb: ProxyEnumerable(Of TSourceElement, TTargetElement).ProxyEnumerator.Current
  fullName.vb: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable(Of TSourceElement, TTargetElement).ProxyEnumerator.Current
- uid: '{TTargetElement}'
  commentId: '!:TTargetElement'
  definition: TTargetElement
  name: TTargetElement
  nameWithType: TTargetElement
  fullName: TTargetElement
- uid: TTargetElement
  isExternal: false
  name: TTargetElement
  nameWithType: TTargetElement
  fullName: TTargetElement
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.ProxyEnumerator.Dispose*
  commentId: Overload:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.ProxyEnumerator.Dispose
  isExternal: false
  name: Dispose
  nameWithType: ProxyEnumerable<TSourceElement, TTargetElement>.ProxyEnumerator.Dispose
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable<TSourceElement, TTargetElement>.ProxyEnumerator.Dispose
  nameWithType.vb: ProxyEnumerable(Of TSourceElement, TTargetElement).ProxyEnumerator.Dispose
  fullName.vb: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable(Of TSourceElement, TTargetElement).ProxyEnumerator.Dispose
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.ProxyEnumerator.MoveNext*
  commentId: Overload:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.ProxyEnumerator.MoveNext
  isExternal: false
  name: MoveNext
  nameWithType: ProxyEnumerable<TSourceElement, TTargetElement>.ProxyEnumerator.MoveNext
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable<TSourceElement, TTargetElement>.ProxyEnumerator.MoveNext
  nameWithType.vb: ProxyEnumerable(Of TSourceElement, TTargetElement).ProxyEnumerator.MoveNext
  fullName.vb: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable(Of TSourceElement, TTargetElement).ProxyEnumerator.MoveNext
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.ProxyEnumerator.Reset*
  commentId: Overload:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable`2.ProxyEnumerator.Reset
  isExternal: false
  name: Reset
  nameWithType: ProxyEnumerable<TSourceElement, TTargetElement>.ProxyEnumerator.Reset
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable<TSourceElement, TTargetElement>.ProxyEnumerator.Reset
  nameWithType.vb: ProxyEnumerable(Of TSourceElement, TTargetElement).ProxyEnumerator.Reset
  fullName.vb: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyEnumerable(Of TSourceElement, TTargetElement).ProxyEnumerator.Reset
shouldSkipMarkup: true
