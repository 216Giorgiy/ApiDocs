### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions
  commentId: T:Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions
  id: OptionsServiceCollectionExtensions
  parent: Microsoft.Extensions.DependencyInjection
  children:
  - Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.AddOptions(IServiceCollection)
  - Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.Configure``1(IServiceCollection,Action{``0})
  langs:
  - csharp
  - vb
  name: OptionsServiceCollectionExtensions
  nameWithType: OptionsServiceCollectionExtensions
  fullName: Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Options/OptionsServiceCollectionExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Options.git
    id: OptionsServiceCollectionExtensions
    path: ../aspnet/Options/src/Microsoft.Extensions.Options/OptionsServiceCollectionExtensions.cs
    startLine: 12
  assemblies:
  - Microsoft.Extensions.Options
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nExtension methods for adding options services to the DI container.\n"
  example: []
  syntax:
    content: 'public static class OptionsServiceCollectionExtensions : object'
    content.vb: >-
      Public Module OptionsServiceCollectionExtensions
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.AddOptions(IServiceCollection)
  commentId: M:Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.AddOptions(IServiceCollection)
  id: AddOptions(IServiceCollection)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddOptions(IServiceCollection)
  nameWithType: OptionsServiceCollectionExtensions.AddOptions(IServiceCollection)
  fullName: Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.AddOptions(IServiceCollection)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Options/OptionsServiceCollectionExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Options.git
    id: AddOptions
    path: ../aspnet/Options/src/Microsoft.Extensions.Options/OptionsServiceCollectionExtensions.cs
    startLine: 19
  assemblies:
  - Microsoft.Extensions.Options
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nAdds services required for using options.\n"
  example: []
  syntax:
    content: public static IServiceCollection AddOptions(this IServiceCollection services)
    parameters:
    - id: services
      type: IServiceCollection
      description: The <see cref="!:IServiceCollection"></see> to add the services to.
    return:
      type: IServiceCollection
      description: The <see cref="!:IServiceCollection"></see> so that additional calls can be chained.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddOptions(services As IServiceCollection) As IServiceCollection
  overload: Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.AddOptions*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.Configure``1(IServiceCollection,Action{``0})
  commentId: M:Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.Configure``1(IServiceCollection,Action{``0})
  id: Configure``1(IServiceCollection,Action{``0})
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: Configure<TOptions>(IServiceCollection, Action<TOptions>)
  nameWithType: OptionsServiceCollectionExtensions.Configure<TOptions>(IServiceCollection, Action<TOptions>)
  fullName: Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.Configure<TOptions>(IServiceCollection, Action<TOptions>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Options/OptionsServiceCollectionExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Options.git
    id: Configure
    path: ../aspnet/Options/src/Microsoft.Extensions.Options/OptionsServiceCollectionExtensions.cs
    startLine: 37
  assemblies:
  - Microsoft.Extensions.Options
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nRegisters an action used to configure a particular type of options.\n"
  example: []
  syntax:
    content: 'public static IServiceCollection Configure<TOptions>(this IServiceCollection services, Action<TOptions> configureOptions)where TOptions : class'
    parameters:
    - id: services
      type: IServiceCollection
      description: The <see cref="!:IServiceCollection"></see> to add the services to.
    - id: configureOptions
      type: Action{{TOptions}}
      description: The action used to configure the options.
    typeParameters:
    - id: TOptions
      description: The options type to be configured.
    return:
      type: IServiceCollection
      description: The <see cref="!:IServiceCollection"></see> so that additional calls can be chained.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Configure(Of TOptions As Class)(services As IServiceCollection, configureOptions As Action(Of TOptions)) As IServiceCollection
  overload: Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.Configure*
  nameWithType.vb: OptionsServiceCollectionExtensions.Configure(Of TOptions)(IServiceCollection, Action(Of TOptions))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.Configure(Of TOptions)(IServiceCollection, Action(Of TOptions))
  name.vb: Configure(Of TOptions)(IServiceCollection, Action(Of TOptions))
references:
- uid: Microsoft.Extensions.DependencyInjection
  commentId: N:Microsoft.Extensions.DependencyInjection
  isExternal: false
  name: Microsoft.Extensions.DependencyInjection
  nameWithType: Microsoft.Extensions.DependencyInjection
  fullName: Microsoft.Extensions.DependencyInjection
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.AddOptions*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.AddOptions
  isExternal: false
  name: AddOptions
  nameWithType: OptionsServiceCollectionExtensions.AddOptions
  fullName: Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.AddOptions
- uid: IServiceCollection
  isExternal: true
  name: IServiceCollection
  nameWithType: IServiceCollection
  fullName: IServiceCollection
- uid: Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.Configure*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.Configure
  isExternal: false
  name: Configure
  nameWithType: OptionsServiceCollectionExtensions.Configure
  fullName: Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.Configure
- uid: Action{{TOptions}}
  commentId: '!:Action{`0}'
  definition: Action`1
  name: Action<TOptions>
  nameWithType: Action<TOptions>
  fullName: Action<TOptions>
  nameWithType.vb: Action(Of TOptions)
  fullName.vb: Action(Of TOptions)
  name.vb: Action(Of TOptions)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
