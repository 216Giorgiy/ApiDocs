### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Logging.FilterLoggerSettings
  commentId: T:Microsoft.Extensions.Logging.FilterLoggerSettings
  id: FilterLoggerSettings
  parent: Microsoft.Extensions.Logging
  children:
  - Microsoft.Extensions.Logging.FilterLoggerSettings.Add(System.String,LogLevel)
  - Microsoft.Extensions.Logging.FilterLoggerSettings.Microsoft#Extensions#Logging#IFilterLoggerSettings#ChangeToken
  - Microsoft.Extensions.Logging.FilterLoggerSettings.Microsoft#Extensions#Logging#IFilterLoggerSettings#Reload
  - Microsoft.Extensions.Logging.FilterLoggerSettings.Switches
  - Microsoft.Extensions.Logging.FilterLoggerSettings.TryGetSwitch(System.String,LogLevel@)
  langs:
  - csharp
  - vb
  name: FilterLoggerSettings
  nameWithType: FilterLoggerSettings
  fullName: Microsoft.Extensions.Logging.FilterLoggerSettings
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Filter/FilterLoggerSettings.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: FilterLoggerSettings
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Filter/FilterLoggerSettings.cs
    startLine: 12
  assemblies:
  - Microsoft.Extensions.Logging.Filter
  namespace: Microsoft.Extensions.Logging
  summary: "\nFilter settings for messages logged by an <see cref=\"!:ILogger\"></see>.\n"
  example: []
  syntax:
    content: 'public class FilterLoggerSettings : object, IFilterLoggerSettings, IEnumerable<KeyValuePair<string, LogLevel>>'
    content.vb: >-
      Public Class FilterLoggerSettings
          Inherits Object
          Implements IFilterLoggerSettings, IEnumerable(Of KeyValuePair(Of String, LogLevel))
  inheritance:
  - System.Object
  implements:
  - Microsoft.Extensions.Logging.IFilterLoggerSettings
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.Logging.FilterLoggerSettings.Microsoft#Extensions#Logging#IFilterLoggerSettings#ChangeToken
  commentId: P:Microsoft.Extensions.Logging.FilterLoggerSettings.Microsoft#Extensions#Logging#IFilterLoggerSettings#ChangeToken
  id: Microsoft#Extensions#Logging#IFilterLoggerSettings#ChangeToken
  isEii: true
  parent: Microsoft.Extensions.Logging.FilterLoggerSettings
  langs:
  - csharp
  - vb
  name: IFilterLoggerSettings.ChangeToken
  nameWithType: FilterLoggerSettings.IFilterLoggerSettings.ChangeToken
  fullName: Microsoft.Extensions.Logging.FilterLoggerSettings.Microsoft.Extensions.Logging.IFilterLoggerSettings.ChangeToken
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Filter/FilterLoggerSettings.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: Microsoft.Extensions.Logging.IFilterLoggerSettings.ChangeToken
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Filter/FilterLoggerSettings.cs
    startLine: 14
  assemblies:
  - Microsoft.Extensions.Logging.Filter
  namespace: Microsoft.Extensions.Logging
  syntax:
    content: IChangeToken IFilterLoggerSettings.ChangeToken { get; }
    parameters: []
    return:
      type: IChangeToken
    content.vb: ReadOnly WriteOnly Property Microsoft.Extensions.Logging.IFilterLoggerSettings.ChangeToken As IChangeToken Implements IFilterLoggerSettings.ChangeToken
  overload: Microsoft.Extensions.Logging.FilterLoggerSettings.Microsoft#Extensions#Logging#IFilterLoggerSettings#ChangeToken*
  implements:
  - Microsoft.Extensions.Logging.IFilterLoggerSettings.ChangeToken
  nameWithType.vb: FilterLoggerSettings.Microsoft.Extensions.Logging.IFilterLoggerSettings.ChangeToken
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Microsoft.Extensions.Logging.IFilterLoggerSettings.ChangeToken
- uid: Microsoft.Extensions.Logging.FilterLoggerSettings.Switches
  commentId: P:Microsoft.Extensions.Logging.FilterLoggerSettings.Switches
  id: Switches
  parent: Microsoft.Extensions.Logging.FilterLoggerSettings
  langs:
  - csharp
  - vb
  name: Switches
  nameWithType: FilterLoggerSettings.Switches
  fullName: Microsoft.Extensions.Logging.FilterLoggerSettings.Switches
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Filter/FilterLoggerSettings.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: Switches
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Filter/FilterLoggerSettings.cs
    startLine: 16
  assemblies:
  - Microsoft.Extensions.Logging.Filter
  namespace: Microsoft.Extensions.Logging
  syntax:
    content: public IDictionary<string, LogLevel> Switches { get; set; }
    parameters: []
    return:
      type: IDictionary{System.String,LogLevel}
    content.vb: Public Property Switches As IDictionary(Of String, LogLevel)
  overload: Microsoft.Extensions.Logging.FilterLoggerSettings.Switches*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Logging.FilterLoggerSettings.Add(System.String,LogLevel)
  commentId: M:Microsoft.Extensions.Logging.FilterLoggerSettings.Add(System.String,LogLevel)
  id: Add(System.String,LogLevel)
  parent: Microsoft.Extensions.Logging.FilterLoggerSettings
  langs:
  - csharp
  - vb
  name: Add(String, LogLevel)
  nameWithType: FilterLoggerSettings.Add(String, LogLevel)
  fullName: Microsoft.Extensions.Logging.FilterLoggerSettings.Add(System.String, LogLevel)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Filter/FilterLoggerSettings.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: Add
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Filter/FilterLoggerSettings.cs
    startLine: 23
  assemblies:
  - Microsoft.Extensions.Logging.Filter
  namespace: Microsoft.Extensions.Logging
  summary: "\nAdds a filter for given logger category name and <see cref=\"!:LogLevel\"></see>.\n"
  example: []
  syntax:
    content: public void Add(string categoryName, LogLevel logLevel)
    parameters:
    - id: categoryName
      type: System.String
      description: The logger category name.
    - id: logLevel
      type: LogLevel
      description: The log level.
    content.vb: Public Sub Add(categoryName As String, logLevel As LogLevel)
  overload: Microsoft.Extensions.Logging.FilterLoggerSettings.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Logging.FilterLoggerSettings.Microsoft#Extensions#Logging#IFilterLoggerSettings#Reload
  commentId: M:Microsoft.Extensions.Logging.FilterLoggerSettings.Microsoft#Extensions#Logging#IFilterLoggerSettings#Reload
  id: Microsoft#Extensions#Logging#IFilterLoggerSettings#Reload
  isEii: true
  parent: Microsoft.Extensions.Logging.FilterLoggerSettings
  langs:
  - csharp
  - vb
  name: IFilterLoggerSettings.Reload()
  nameWithType: FilterLoggerSettings.IFilterLoggerSettings.Reload()
  fullName: Microsoft.Extensions.Logging.FilterLoggerSettings.Microsoft.Extensions.Logging.IFilterLoggerSettings.Reload()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Filter/FilterLoggerSettings.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: Microsoft.Extensions.Logging.IFilterLoggerSettings.Reload
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Filter/FilterLoggerSettings.cs
    startLine: 28
  assemblies:
  - Microsoft.Extensions.Logging.Filter
  namespace: Microsoft.Extensions.Logging
  syntax:
    content: IFilterLoggerSettings IFilterLoggerSettings.Reload()
    return:
      type: Microsoft.Extensions.Logging.IFilterLoggerSettings
    content.vb: Function Microsoft.Extensions.Logging.IFilterLoggerSettings.Reload As IFilterLoggerSettings Implements IFilterLoggerSettings.Reload
  overload: Microsoft.Extensions.Logging.FilterLoggerSettings.Microsoft#Extensions#Logging#IFilterLoggerSettings#Reload*
  implements:
  - Microsoft.Extensions.Logging.IFilterLoggerSettings.Reload
  nameWithType.vb: FilterLoggerSettings.Microsoft.Extensions.Logging.IFilterLoggerSettings.Reload()
  name.vb: Microsoft.Extensions.Logging.IFilterLoggerSettings.Reload()
- uid: Microsoft.Extensions.Logging.FilterLoggerSettings.TryGetSwitch(System.String,LogLevel@)
  commentId: M:Microsoft.Extensions.Logging.FilterLoggerSettings.TryGetSwitch(System.String,LogLevel@)
  id: TryGetSwitch(System.String,LogLevel@)
  parent: Microsoft.Extensions.Logging.FilterLoggerSettings
  langs:
  - csharp
  - vb
  name: TryGetSwitch(String, out LogLevel)
  nameWithType: FilterLoggerSettings.TryGetSwitch(String, out LogLevel)
  fullName: Microsoft.Extensions.Logging.FilterLoggerSettings.TryGetSwitch(System.String, out LogLevel)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Filter/FilterLoggerSettings.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: TryGetSwitch
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Filter/FilterLoggerSettings.cs
    startLine: 33
  assemblies:
  - Microsoft.Extensions.Logging.Filter
  namespace: Microsoft.Extensions.Logging
  syntax:
    content: public bool TryGetSwitch(string name, out LogLevel level)
    parameters:
    - id: name
      type: System.String
    - id: level
      type: LogLevel
    return:
      type: System.Boolean
    content.vb: Public Function TryGetSwitch(name As String, ByRef level As LogLevel) As Boolean
  overload: Microsoft.Extensions.Logging.FilterLoggerSettings.TryGetSwitch*
  implements:
  - Microsoft.Extensions.Logging.IFilterLoggerSettings.TryGetSwitch(System.String,LogLevel@)
  nameWithType.vb: FilterLoggerSettings.TryGetSwitch(String, ByRef LogLevel)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.Logging.FilterLoggerSettings.TryGetSwitch(System.String, ByRef LogLevel)
  name.vb: TryGetSwitch(String, ByRef LogLevel)
references:
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: false
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Extensions.Logging.IFilterLoggerSettings
  commentId: T:Microsoft.Extensions.Logging.IFilterLoggerSettings
  parent: Microsoft.Extensions.Logging
  isExternal: false
  name: IFilterLoggerSettings
  nameWithType: IFilterLoggerSettings
  fullName: Microsoft.Extensions.Logging.IFilterLoggerSettings
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Logging.FilterLoggerSettings.Microsoft#Extensions#Logging#IFilterLoggerSettings#ChangeToken*
  commentId: Overload:Microsoft.Extensions.Logging.FilterLoggerSettings.Microsoft#Extensions#Logging#IFilterLoggerSettings#ChangeToken
  isExternal: false
  name: IFilterLoggerSettings.ChangeToken
  nameWithType: FilterLoggerSettings.IFilterLoggerSettings.ChangeToken
  fullName: Microsoft.Extensions.Logging.FilterLoggerSettings.Microsoft.Extensions.Logging.IFilterLoggerSettings.ChangeToken
  nameWithType.vb: FilterLoggerSettings.Microsoft.Extensions.Logging.IFilterLoggerSettings.ChangeToken
  name.vb: Microsoft.Extensions.Logging.IFilterLoggerSettings.ChangeToken
- uid: Microsoft.Extensions.Logging.IFilterLoggerSettings.ChangeToken
  commentId: P:Microsoft.Extensions.Logging.IFilterLoggerSettings.ChangeToken
  parent: Microsoft.Extensions.Logging.IFilterLoggerSettings
  isExternal: false
  name: ChangeToken
  nameWithType: IFilterLoggerSettings.ChangeToken
  fullName: Microsoft.Extensions.Logging.IFilterLoggerSettings.ChangeToken
- uid: IChangeToken
  isExternal: true
  name: IChangeToken
  nameWithType: IChangeToken
  fullName: IChangeToken
- uid: Microsoft.Extensions.Logging.FilterLoggerSettings.Switches*
  commentId: Overload:Microsoft.Extensions.Logging.FilterLoggerSettings.Switches
  isExternal: false
  name: Switches
  nameWithType: FilterLoggerSettings.Switches
  fullName: Microsoft.Extensions.Logging.FilterLoggerSettings.Switches
- uid: IDictionary{System.String,LogLevel}
  commentId: '!:IDictionary{System.String,LogLevel}'
  definition: IDictionary`2
  name: IDictionary<String, LogLevel>
  nameWithType: IDictionary<String, LogLevel>
  fullName: IDictionary<System.String, LogLevel>
  nameWithType.vb: IDictionary(Of String, LogLevel)
  fullName.vb: IDictionary(Of System.String, LogLevel)
  name.vb: IDictionary(Of String, LogLevel)
  spec.csharp:
  - uid: IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: LogLevel
    name: LogLevel
    nameWithType: LogLevel
    fullName: LogLevel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: LogLevel
    name: LogLevel
    nameWithType: LogLevel
    fullName: LogLevel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IDictionary`2
  isExternal: true
  name: IDictionary<, >
  nameWithType: IDictionary<, >
  fullName: IDictionary<, >
  nameWithType.vb: IDictionary(Of , )
  fullName.vb: IDictionary(Of , )
  name.vb: IDictionary(Of , )
  spec.csharp:
  - uid: IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.FilterLoggerSettings.Add*
  commentId: Overload:Microsoft.Extensions.Logging.FilterLoggerSettings.Add
  isExternal: false
  name: Add
  nameWithType: FilterLoggerSettings.Add
  fullName: Microsoft.Extensions.Logging.FilterLoggerSettings.Add
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: LogLevel
  commentId: M:LogLevel
  isExternal: true
  name: LogLevel
  nameWithType: LogLevel
  fullName: LogLevel
- uid: Microsoft.Extensions.Logging.FilterLoggerSettings.Microsoft#Extensions#Logging#IFilterLoggerSettings#Reload*
  commentId: Overload:Microsoft.Extensions.Logging.FilterLoggerSettings.Microsoft#Extensions#Logging#IFilterLoggerSettings#Reload
  isExternal: false
  name: IFilterLoggerSettings.Reload
  nameWithType: FilterLoggerSettings.IFilterLoggerSettings.Reload
  fullName: Microsoft.Extensions.Logging.FilterLoggerSettings.Microsoft.Extensions.Logging.IFilterLoggerSettings.Reload
  nameWithType.vb: FilterLoggerSettings.Microsoft.Extensions.Logging.IFilterLoggerSettings.Reload
  name.vb: Microsoft.Extensions.Logging.IFilterLoggerSettings.Reload
- uid: Microsoft.Extensions.Logging.IFilterLoggerSettings.Reload
  commentId: M:Microsoft.Extensions.Logging.IFilterLoggerSettings.Reload
  parent: Microsoft.Extensions.Logging.IFilterLoggerSettings
  isExternal: false
  name: Reload()
  nameWithType: IFilterLoggerSettings.Reload()
  fullName: Microsoft.Extensions.Logging.IFilterLoggerSettings.Reload()
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.IFilterLoggerSettings.Reload
    name: Reload
    nameWithType: IFilterLoggerSettings.Reload
    fullName: Microsoft.Extensions.Logging.IFilterLoggerSettings.Reload
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.Logging.IFilterLoggerSettings.Reload
    name: Reload
    nameWithType: IFilterLoggerSettings.Reload
    fullName: Microsoft.Extensions.Logging.IFilterLoggerSettings.Reload
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.FilterLoggerSettings.TryGetSwitch*
  commentId: Overload:Microsoft.Extensions.Logging.FilterLoggerSettings.TryGetSwitch
  isExternal: false
  name: TryGetSwitch
  nameWithType: FilterLoggerSettings.TryGetSwitch
  fullName: Microsoft.Extensions.Logging.FilterLoggerSettings.TryGetSwitch
- uid: Microsoft.Extensions.Logging.IFilterLoggerSettings.TryGetSwitch(System.String,LogLevel@)
  commentId: M:Microsoft.Extensions.Logging.IFilterLoggerSettings.TryGetSwitch(System.String,LogLevel@)
  parent: Microsoft.Extensions.Logging.IFilterLoggerSettings
  isExternal: true
  name: TryGetSwitch(String, LogLevel)
  nameWithType: IFilterLoggerSettings.TryGetSwitch(String, LogLevel)
  fullName: Microsoft.Extensions.Logging.IFilterLoggerSettings.TryGetSwitch(System.String, LogLevel)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.IFilterLoggerSettings.TryGetSwitch(System.String,LogLevel@)
    name: TryGetSwitch
    nameWithType: IFilterLoggerSettings.TryGetSwitch
    fullName: Microsoft.Extensions.Logging.IFilterLoggerSettings.TryGetSwitch
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: LogLevel
    name: LogLevel
    nameWithType: LogLevel
    fullName: LogLevel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.Logging.IFilterLoggerSettings.TryGetSwitch(System.String,LogLevel@)
    name: TryGetSwitch
    nameWithType: IFilterLoggerSettings.TryGetSwitch
    fullName: Microsoft.Extensions.Logging.IFilterLoggerSettings.TryGetSwitch
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: LogLevel
    name: LogLevel
    nameWithType: LogLevel
    fullName: LogLevel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
shouldSkipMarkup: true
