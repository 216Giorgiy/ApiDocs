### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Logging.LoggerMessage
  commentId: T:Microsoft.Extensions.Logging.LoggerMessage
  id: LoggerMessage
  parent: Microsoft.Extensions.Logging
  children:
  - Microsoft.Extensions.Logging.LoggerMessage.Define(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String)
  - Microsoft.Extensions.Logging.LoggerMessage.Define``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String)
  - Microsoft.Extensions.Logging.LoggerMessage.Define``2(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String)
  - Microsoft.Extensions.Logging.LoggerMessage.Define``3(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String)
  - Microsoft.Extensions.Logging.LoggerMessage.Define``4(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String)
  - Microsoft.Extensions.Logging.LoggerMessage.Define``5(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String)
  - Microsoft.Extensions.Logging.LoggerMessage.Define``6(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String)
  - Microsoft.Extensions.Logging.LoggerMessage.DefineScope(System.String)
  - Microsoft.Extensions.Logging.LoggerMessage.DefineScope``1(System.String)
  - Microsoft.Extensions.Logging.LoggerMessage.DefineScope``2(System.String)
  - Microsoft.Extensions.Logging.LoggerMessage.DefineScope``3(System.String)
  langs:
  - csharp
  - vb
  name: LoggerMessage
  nameWithType: LoggerMessage
  fullName: Microsoft.Extensions.Logging.LoggerMessage
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Abstractions/LoggerMessage.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: LoggerMessage
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Abstractions/LoggerMessage.cs
    startLine: 14
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging
  summary: "\nCreates delegates which can be later cached to log messages in a performant way.\n"
  example: []
  syntax:
    content: 'public static class LoggerMessage : object'
    content.vb: >-
      Public Module LoggerMessage
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Extensions.Logging.LoggerMessage.DefineScope(System.String)
  commentId: M:Microsoft.Extensions.Logging.LoggerMessage.DefineScope(System.String)
  id: DefineScope(System.String)
  parent: Microsoft.Extensions.Logging.LoggerMessage
  langs:
  - csharp
  - vb
  name: DefineScope(String)
  nameWithType: LoggerMessage.DefineScope(String)
  fullName: Microsoft.Extensions.Logging.LoggerMessage.DefineScope(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Abstractions/LoggerMessage.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: DefineScope
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Abstractions/LoggerMessage.cs
    startLine: 21
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging
  summary: "\nCreates a delegate which can be invoked to create a log scope.\n"
  example: []
  syntax:
    content: public static Func<ILogger, IDisposable> DefineScope(string formatString)
    parameters:
    - id: formatString
      type: System.String
      description: The named format string
    return:
      type: Func{Microsoft.Extensions.Logging.ILogger,IDisposable}
      description: A delegate which when invoked creates a log scope.
    content.vb: Public Shared Function DefineScope(formatString As String) As Func(Of ILogger, IDisposable)
  overload: Microsoft.Extensions.Logging.LoggerMessage.DefineScope*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Logging.LoggerMessage.DefineScope``1(System.String)
  commentId: M:Microsoft.Extensions.Logging.LoggerMessage.DefineScope``1(System.String)
  id: DefineScope``1(System.String)
  parent: Microsoft.Extensions.Logging.LoggerMessage
  langs:
  - csharp
  - vb
  name: DefineScope<T1>(String)
  nameWithType: LoggerMessage.DefineScope<T1>(String)
  fullName: Microsoft.Extensions.Logging.LoggerMessage.DefineScope<T1>(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Abstractions/LoggerMessage.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: DefineScope
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Abstractions/LoggerMessage.cs
    startLine: 36
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging
  summary: "\nCreates a delegate which can be invoked to create a log scope.\n"
  example: []
  syntax:
    content: public static Func<ILogger, T1, IDisposable> DefineScope<T1>(string formatString)
    parameters:
    - id: formatString
      type: System.String
      description: The named format string
    typeParameters:
    - id: T1
      description: The type of the first parameter passed to the named format string.
    return:
      type: Func{Microsoft.Extensions.Logging.ILogger,{T1},IDisposable}
      description: A delegate which when invoked creates a log scope.
    content.vb: Public Shared Function DefineScope(Of T1)(formatString As String) As Func(Of ILogger, T1, IDisposable)
  overload: Microsoft.Extensions.Logging.LoggerMessage.DefineScope*
  nameWithType.vb: LoggerMessage.DefineScope(Of T1)(String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Logging.LoggerMessage.DefineScope(Of T1)(System.String)
  name.vb: DefineScope(Of T1)(String)
- uid: Microsoft.Extensions.Logging.LoggerMessage.DefineScope``2(System.String)
  commentId: M:Microsoft.Extensions.Logging.LoggerMessage.DefineScope``2(System.String)
  id: DefineScope``2(System.String)
  parent: Microsoft.Extensions.Logging.LoggerMessage
  langs:
  - csharp
  - vb
  name: DefineScope<T1, T2>(String)
  nameWithType: LoggerMessage.DefineScope<T1, T2>(String)
  fullName: Microsoft.Extensions.Logging.LoggerMessage.DefineScope<T1, T2>(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Abstractions/LoggerMessage.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: DefineScope
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Abstractions/LoggerMessage.cs
    startLine: 50
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging
  summary: "\nCreates a delegate which can be invoked to create a log scope.\n"
  example: []
  syntax:
    content: public static Func<ILogger, T1, T2, IDisposable> DefineScope<T1, T2>(string formatString)
    parameters:
    - id: formatString
      type: System.String
      description: The named format string
    typeParameters:
    - id: T1
      description: The type of the first parameter passed to the named format string.
    - id: T2
      description: The type of the second parameter passed to the named format string.
    return:
      type: Func{Microsoft.Extensions.Logging.ILogger,{T1},{T2},IDisposable}
      description: A delegate which when invoked creates a log scope.
    content.vb: Public Shared Function DefineScope(Of T1, T2)(formatString As String) As Func(Of ILogger, T1, T2, IDisposable)
  overload: Microsoft.Extensions.Logging.LoggerMessage.DefineScope*
  nameWithType.vb: LoggerMessage.DefineScope(Of T1, T2)(String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Logging.LoggerMessage.DefineScope(Of T1, T2)(System.String)
  name.vb: DefineScope(Of T1, T2)(String)
- uid: Microsoft.Extensions.Logging.LoggerMessage.DefineScope``3(System.String)
  commentId: M:Microsoft.Extensions.Logging.LoggerMessage.DefineScope``3(System.String)
  id: DefineScope``3(System.String)
  parent: Microsoft.Extensions.Logging.LoggerMessage
  langs:
  - csharp
  - vb
  name: DefineScope<T1, T2, T3>(String)
  nameWithType: LoggerMessage.DefineScope<T1, T2, T3>(String)
  fullName: Microsoft.Extensions.Logging.LoggerMessage.DefineScope<T1, T2, T3>(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Abstractions/LoggerMessage.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: DefineScope
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Abstractions/LoggerMessage.cs
    startLine: 65
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging
  summary: "\nCreates a delegate which can be invoked to create a log scope.\n"
  example: []
  syntax:
    content: public static Func<ILogger, T1, T2, T3, IDisposable> DefineScope<T1, T2, T3>(string formatString)
    parameters:
    - id: formatString
      type: System.String
      description: The named format string
    typeParameters:
    - id: T1
      description: The type of the first parameter passed to the named format string.
    - id: T2
      description: The type of the second parameter passed to the named format string.
    - id: T3
      description: The type of the third parameter passed to the named format string.
    return:
      type: Func{Microsoft.Extensions.Logging.ILogger,{T1},{T2},{T3},IDisposable}
      description: A delegate which when invoked creates a log scope.
    content.vb: Public Shared Function DefineScope(Of T1, T2, T3)(formatString As String) As Func(Of ILogger, T1, T2, T3, IDisposable)
  overload: Microsoft.Extensions.Logging.LoggerMessage.DefineScope*
  nameWithType.vb: LoggerMessage.DefineScope(Of T1, T2, T3)(String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Logging.LoggerMessage.DefineScope(Of T1, T2, T3)(System.String)
  name.vb: DefineScope(Of T1, T2, T3)(String)
- uid: Microsoft.Extensions.Logging.LoggerMessage.Define(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String)
  commentId: M:Microsoft.Extensions.Logging.LoggerMessage.Define(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String)
  id: Define(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String)
  parent: Microsoft.Extensions.Logging.LoggerMessage
  langs:
  - csharp
  - vb
  name: Define(LogLevel, EventId, String)
  nameWithType: LoggerMessage.Define(LogLevel, EventId, String)
  fullName: Microsoft.Extensions.Logging.LoggerMessage.Define(Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Abstractions/LoggerMessage.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: Define
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Abstractions/LoggerMessage.cs
    startLine: 79
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging
  summary: "\nCreates a delegate which can be invoked for logging a message.\n"
  example: []
  syntax:
    content: public static Action<ILogger, Exception> Define(LogLevel logLevel, EventId eventId, string formatString)
    parameters:
    - id: logLevel
      type: Microsoft.Extensions.Logging.LogLevel
      description: The <xref href="Microsoft.Extensions.Logging.LogLevel" data-throw-if-not-resolved="false"></xref>
    - id: eventId
      type: Microsoft.Extensions.Logging.EventId
      description: The event id
    - id: formatString
      type: System.String
      description: The named format string
    return:
      type: Action{Microsoft.Extensions.Logging.ILogger,Exception}
      description: A delegate which when invoked creates a log message.
    content.vb: Public Shared Function Define(logLevel As LogLevel, eventId As EventId, formatString As String) As Action(Of ILogger, Exception)
  overload: Microsoft.Extensions.Logging.LoggerMessage.Define*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Logging.LoggerMessage.Define``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String)
  commentId: M:Microsoft.Extensions.Logging.LoggerMessage.Define``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String)
  id: Define``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String)
  parent: Microsoft.Extensions.Logging.LoggerMessage
  langs:
  - csharp
  - vb
  name: Define<T1>(LogLevel, EventId, String)
  nameWithType: LoggerMessage.Define<T1>(LogLevel, EventId, String)
  fullName: Microsoft.Extensions.Logging.LoggerMessage.Define<T1>(Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Abstractions/LoggerMessage.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: Define
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Abstractions/LoggerMessage.cs
    startLine: 100
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging
  summary: "\nCreates a delegate which can be invoked for logging a message.\n"
  example: []
  syntax:
    content: public static Action<ILogger, T1, Exception> Define<T1>(LogLevel logLevel, EventId eventId, string formatString)
    parameters:
    - id: logLevel
      type: Microsoft.Extensions.Logging.LogLevel
      description: The <xref href="Microsoft.Extensions.Logging.LogLevel" data-throw-if-not-resolved="false"></xref>
    - id: eventId
      type: Microsoft.Extensions.Logging.EventId
      description: The event id
    - id: formatString
      type: System.String
      description: The named format string
    typeParameters:
    - id: T1
      description: The type of the first parameter passed to the named format string.
    return:
      type: Action{Microsoft.Extensions.Logging.ILogger,{T1},Exception}
      description: A delegate which when invoked creates a log message.
    content.vb: Public Shared Function Define(Of T1)(logLevel As LogLevel, eventId As EventId, formatString As String) As Action(Of ILogger, T1, Exception)
  overload: Microsoft.Extensions.Logging.LoggerMessage.Define*
  nameWithType.vb: LoggerMessage.Define(Of T1)(LogLevel, EventId, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Logging.LoggerMessage.Define(Of T1)(Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, System.String)
  name.vb: Define(Of T1)(LogLevel, EventId, String)
- uid: Microsoft.Extensions.Logging.LoggerMessage.Define``2(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String)
  commentId: M:Microsoft.Extensions.Logging.LoggerMessage.Define``2(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String)
  id: Define``2(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String)
  parent: Microsoft.Extensions.Logging.LoggerMessage
  langs:
  - csharp
  - vb
  name: Define<T1, T2>(LogLevel, EventId, String)
  nameWithType: LoggerMessage.Define<T1, T2>(LogLevel, EventId, String)
  fullName: Microsoft.Extensions.Logging.LoggerMessage.Define<T1, T2>(Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Abstractions/LoggerMessage.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: Define
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Abstractions/LoggerMessage.cs
    startLine: 122
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging
  summary: "\nCreates a delegate which can be invoked for logging a message.\n"
  example: []
  syntax:
    content: public static Action<ILogger, T1, T2, Exception> Define<T1, T2>(LogLevel logLevel, EventId eventId, string formatString)
    parameters:
    - id: logLevel
      type: Microsoft.Extensions.Logging.LogLevel
      description: The <xref href="Microsoft.Extensions.Logging.LogLevel" data-throw-if-not-resolved="false"></xref>
    - id: eventId
      type: Microsoft.Extensions.Logging.EventId
      description: The event id
    - id: formatString
      type: System.String
      description: The named format string
    typeParameters:
    - id: T1
      description: The type of the first parameter passed to the named format string.
    - id: T2
      description: The type of the second parameter passed to the named format string.
    return:
      type: Action{Microsoft.Extensions.Logging.ILogger,{T1},{T2},Exception}
      description: A delegate which when invoked creates a log message.
    content.vb: Public Shared Function Define(Of T1, T2)(logLevel As LogLevel, eventId As EventId, formatString As String) As Action(Of ILogger, T1, T2, Exception)
  overload: Microsoft.Extensions.Logging.LoggerMessage.Define*
  nameWithType.vb: LoggerMessage.Define(Of T1, T2)(LogLevel, EventId, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Logging.LoggerMessage.Define(Of T1, T2)(Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, System.String)
  name.vb: Define(Of T1, T2)(LogLevel, EventId, String)
- uid: Microsoft.Extensions.Logging.LoggerMessage.Define``3(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String)
  commentId: M:Microsoft.Extensions.Logging.LoggerMessage.Define``3(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String)
  id: Define``3(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String)
  parent: Microsoft.Extensions.Logging.LoggerMessage
  langs:
  - csharp
  - vb
  name: Define<T1, T2, T3>(LogLevel, EventId, String)
  nameWithType: LoggerMessage.Define<T1, T2, T3>(LogLevel, EventId, String)
  fullName: Microsoft.Extensions.Logging.LoggerMessage.Define<T1, T2, T3>(Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Abstractions/LoggerMessage.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: Define
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Abstractions/LoggerMessage.cs
    startLine: 145
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging
  summary: "\nCreates a delegate which can be invoked for logging a message.\n"
  example: []
  syntax:
    content: public static Action<ILogger, T1, T2, T3, Exception> Define<T1, T2, T3>(LogLevel logLevel, EventId eventId, string formatString)
    parameters:
    - id: logLevel
      type: Microsoft.Extensions.Logging.LogLevel
      description: The <xref href="Microsoft.Extensions.Logging.LogLevel" data-throw-if-not-resolved="false"></xref>
    - id: eventId
      type: Microsoft.Extensions.Logging.EventId
      description: The event id
    - id: formatString
      type: System.String
      description: The named format string
    typeParameters:
    - id: T1
      description: The type of the first parameter passed to the named format string.
    - id: T2
      description: The type of the second parameter passed to the named format string.
    - id: T3
      description: The type of the third parameter passed to the named format string.
    return:
      type: Action{Microsoft.Extensions.Logging.ILogger,{T1},{T2},{T3},Exception}
      description: A delegate which when invoked creates a log message.
    content.vb: Public Shared Function Define(Of T1, T2, T3)(logLevel As LogLevel, eventId As EventId, formatString As String) As Action(Of ILogger, T1, T2, T3, Exception)
  overload: Microsoft.Extensions.Logging.LoggerMessage.Define*
  nameWithType.vb: LoggerMessage.Define(Of T1, T2, T3)(LogLevel, EventId, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Logging.LoggerMessage.Define(Of T1, T2, T3)(Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, System.String)
  name.vb: Define(Of T1, T2, T3)(LogLevel, EventId, String)
- uid: Microsoft.Extensions.Logging.LoggerMessage.Define``4(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String)
  commentId: M:Microsoft.Extensions.Logging.LoggerMessage.Define``4(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String)
  id: Define``4(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String)
  parent: Microsoft.Extensions.Logging.LoggerMessage
  langs:
  - csharp
  - vb
  name: Define<T1, T2, T3, T4>(LogLevel, EventId, String)
  nameWithType: LoggerMessage.Define<T1, T2, T3, T4>(LogLevel, EventId, String)
  fullName: Microsoft.Extensions.Logging.LoggerMessage.Define<T1, T2, T3, T4>(Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Abstractions/LoggerMessage.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: Define
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Abstractions/LoggerMessage.cs
    startLine: 169
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging
  summary: "\nCreates a delegate which can be invoked for logging a message.\n"
  example: []
  syntax:
    content: public static Action<ILogger, T1, T2, T3, T4, Exception> Define<T1, T2, T3, T4>(LogLevel logLevel, EventId eventId, string formatString)
    parameters:
    - id: logLevel
      type: Microsoft.Extensions.Logging.LogLevel
      description: The <xref href="Microsoft.Extensions.Logging.LogLevel" data-throw-if-not-resolved="false"></xref>
    - id: eventId
      type: Microsoft.Extensions.Logging.EventId
      description: The event id
    - id: formatString
      type: System.String
      description: The named format string
    typeParameters:
    - id: T1
      description: The type of the first parameter passed to the named format string.
    - id: T2
      description: The type of the second parameter passed to the named format string.
    - id: T3
      description: The type of the third parameter passed to the named format string.
    - id: T4
      description: The type of the fourth parameter passed to the named format string.
    return:
      type: Action{Microsoft.Extensions.Logging.ILogger,{T1},{T2},{T3},{T4},Exception}
      description: A delegate which when invoked creates a log message.
    content.vb: Public Shared Function Define(Of T1, T2, T3, T4)(logLevel As LogLevel, eventId As EventId, formatString As String) As Action(Of ILogger, T1, T2, T3, T4, Exception)
  overload: Microsoft.Extensions.Logging.LoggerMessage.Define*
  nameWithType.vb: LoggerMessage.Define(Of T1, T2, T3, T4)(LogLevel, EventId, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Logging.LoggerMessage.Define(Of T1, T2, T3, T4)(Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, System.String)
  name.vb: Define(Of T1, T2, T3, T4)(LogLevel, EventId, String)
- uid: Microsoft.Extensions.Logging.LoggerMessage.Define``5(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String)
  commentId: M:Microsoft.Extensions.Logging.LoggerMessage.Define``5(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String)
  id: Define``5(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String)
  parent: Microsoft.Extensions.Logging.LoggerMessage
  langs:
  - csharp
  - vb
  name: Define<T1, T2, T3, T4, T5>(LogLevel, EventId, String)
  nameWithType: LoggerMessage.Define<T1, T2, T3, T4, T5>(LogLevel, EventId, String)
  fullName: Microsoft.Extensions.Logging.LoggerMessage.Define<T1, T2, T3, T4, T5>(Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Abstractions/LoggerMessage.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: Define
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Abstractions/LoggerMessage.cs
    startLine: 194
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging
  summary: "\nCreates a delegate which can be invoked for logging a message.\n"
  example: []
  syntax:
    content: public static Action<ILogger, T1, T2, T3, T4, T5, Exception> Define<T1, T2, T3, T4, T5>(LogLevel logLevel, EventId eventId, string formatString)
    parameters:
    - id: logLevel
      type: Microsoft.Extensions.Logging.LogLevel
      description: The <xref href="Microsoft.Extensions.Logging.LogLevel" data-throw-if-not-resolved="false"></xref>
    - id: eventId
      type: Microsoft.Extensions.Logging.EventId
      description: The event id
    - id: formatString
      type: System.String
      description: The named format string
    typeParameters:
    - id: T1
      description: The type of the first parameter passed to the named format string.
    - id: T2
      description: The type of the second parameter passed to the named format string.
    - id: T3
      description: The type of the third parameter passed to the named format string.
    - id: T4
      description: The type of the fourth parameter passed to the named format string.
    - id: T5
      description: The type of the fifth parameter passed to the named format string.
    return:
      type: Action{Microsoft.Extensions.Logging.ILogger,{T1},{T2},{T3},{T4},{T5},Exception}
      description: A delegate which when invoked creates a log message.
    content.vb: Public Shared Function Define(Of T1, T2, T3, T4, T5)(logLevel As LogLevel, eventId As EventId, formatString As String) As Action(Of ILogger, T1, T2, T3, T4, T5, Exception)
  overload: Microsoft.Extensions.Logging.LoggerMessage.Define*
  nameWithType.vb: LoggerMessage.Define(Of T1, T2, T3, T4, T5)(LogLevel, EventId, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Logging.LoggerMessage.Define(Of T1, T2, T3, T4, T5)(Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, System.String)
  name.vb: Define(Of T1, T2, T3, T4, T5)(LogLevel, EventId, String)
- uid: Microsoft.Extensions.Logging.LoggerMessage.Define``6(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String)
  commentId: M:Microsoft.Extensions.Logging.LoggerMessage.Define``6(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String)
  id: Define``6(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String)
  parent: Microsoft.Extensions.Logging.LoggerMessage
  langs:
  - csharp
  - vb
  name: Define<T1, T2, T3, T4, T5, T6>(LogLevel, EventId, String)
  nameWithType: LoggerMessage.Define<T1, T2, T3, T4, T5, T6>(LogLevel, EventId, String)
  fullName: Microsoft.Extensions.Logging.LoggerMessage.Define<T1, T2, T3, T4, T5, T6>(Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Abstractions/LoggerMessage.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: Define
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Abstractions/LoggerMessage.cs
    startLine: 220
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging
  summary: "\nCreates a delegate which can be invoked for logging a message.\n"
  example: []
  syntax:
    content: public static Action<ILogger, T1, T2, T3, T4, T5, T6, Exception> Define<T1, T2, T3, T4, T5, T6>(LogLevel logLevel, EventId eventId, string formatString)
    parameters:
    - id: logLevel
      type: Microsoft.Extensions.Logging.LogLevel
      description: The <xref href="Microsoft.Extensions.Logging.LogLevel" data-throw-if-not-resolved="false"></xref>
    - id: eventId
      type: Microsoft.Extensions.Logging.EventId
      description: The event id
    - id: formatString
      type: System.String
      description: The named format string
    typeParameters:
    - id: T1
      description: The type of the first parameter passed to the named format string.
    - id: T2
      description: The type of the second parameter passed to the named format string.
    - id: T3
      description: The type of the third parameter passed to the named format string.
    - id: T4
      description: The type of the fourth parameter passed to the named format string.
    - id: T5
      description: The type of the fifth parameter passed to the named format string.
    - id: T6
      description: The type of the sixth parameter passed to the named format string.
    return:
      type: Action{Microsoft.Extensions.Logging.ILogger,{T1},{T2},{T3},{T4},{T5},{T6},Exception}
      description: A delegate which when invoked creates a log message.
    content.vb: Public Shared Function Define(Of T1, T2, T3, T4, T5, T6)(logLevel As LogLevel, eventId As EventId, formatString As String) As Action(Of ILogger, T1, T2, T3, T4, T5, T6, Exception)
  overload: Microsoft.Extensions.Logging.LoggerMessage.Define*
  nameWithType.vb: LoggerMessage.Define(Of T1, T2, T3, T4, T5, T6)(LogLevel, EventId, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Logging.LoggerMessage.Define(Of T1, T2, T3, T4, T5, T6)(Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, System.String)
  name.vb: Define(Of T1, T2, T3, T4, T5, T6)(LogLevel, EventId, String)
references:
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: false
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Logging.LoggerMessage.DefineScope*
  commentId: Overload:Microsoft.Extensions.Logging.LoggerMessage.DefineScope
  isExternal: false
  name: DefineScope
  nameWithType: LoggerMessage.DefineScope
  fullName: Microsoft.Extensions.Logging.LoggerMessage.DefineScope
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Func{Microsoft.Extensions.Logging.ILogger,IDisposable}
  commentId: '!:Func{Microsoft.Extensions.Logging.ILogger,IDisposable}'
  definition: Func`2
  name: Func<ILogger, IDisposable>
  nameWithType: Func<ILogger, IDisposable>
  fullName: Func<Microsoft.Extensions.Logging.ILogger, IDisposable>
  nameWithType.vb: Func(Of ILogger, IDisposable)
  fullName.vb: Func(Of Microsoft.Extensions.Logging.ILogger, IDisposable)
  name.vb: Func(Of ILogger, IDisposable)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.Logging.ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IDisposable
    name: IDisposable
    nameWithType: IDisposable
    fullName: IDisposable
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.Logging.ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IDisposable
    name: IDisposable
    nameWithType: IDisposable
    fullName: IDisposable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Func{Microsoft.Extensions.Logging.ILogger,{T1},IDisposable}
  commentId: '!:Func{Microsoft.Extensions.Logging.ILogger,``0,IDisposable}'
  definition: Func`3
  name: Func<ILogger, T1, IDisposable>
  nameWithType: Func<ILogger, T1, IDisposable>
  fullName: Func<Microsoft.Extensions.Logging.ILogger, T1, IDisposable>
  nameWithType.vb: Func(Of ILogger, T1, IDisposable)
  fullName.vb: Func(Of Microsoft.Extensions.Logging.ILogger, T1, IDisposable)
  name.vb: Func(Of ILogger, T1, IDisposable)
  spec.csharp:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.Logging.ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IDisposable
    name: IDisposable
    nameWithType: IDisposable
    fullName: IDisposable
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.Logging.ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IDisposable
    name: IDisposable
    nameWithType: IDisposable
    fullName: IDisposable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`3
  isExternal: true
  name: Func<, , >
  nameWithType: Func<, , >
  fullName: Func<, , >
  nameWithType.vb: Func(Of , , )
  fullName.vb: Func(Of , , )
  name.vb: Func(Of , , )
  spec.csharp:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Func{Microsoft.Extensions.Logging.ILogger,{T1},{T2},IDisposable}
  commentId: '!:Func{Microsoft.Extensions.Logging.ILogger,``0,``1,IDisposable}'
  definition: Func`4
  name: Func<ILogger, T1, T2, IDisposable>
  nameWithType: Func<ILogger, T1, T2, IDisposable>
  fullName: Func<Microsoft.Extensions.Logging.ILogger, T1, T2, IDisposable>
  nameWithType.vb: Func(Of ILogger, T1, T2, IDisposable)
  fullName.vb: Func(Of Microsoft.Extensions.Logging.ILogger, T1, T2, IDisposable)
  name.vb: Func(Of ILogger, T1, T2, IDisposable)
  spec.csharp:
  - uid: Func`4
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.Logging.ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IDisposable
    name: IDisposable
    nameWithType: IDisposable
    fullName: IDisposable
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`4
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.Logging.ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IDisposable
    name: IDisposable
    nameWithType: IDisposable
    fullName: IDisposable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`4
  isExternal: true
  name: Func<, , , >
  nameWithType: Func<, , , >
  fullName: Func<, , , >
  nameWithType.vb: Func(Of , , , )
  fullName.vb: Func(Of , , , )
  name.vb: Func(Of , , , )
  spec.csharp:
  - uid: Func`4
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`4
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Func{Microsoft.Extensions.Logging.ILogger,{T1},{T2},{T3},IDisposable}
  commentId: '!:Func{Microsoft.Extensions.Logging.ILogger,``0,``1,``2,IDisposable}'
  definition: Func`5
  name: Func<ILogger, T1, T2, T3, IDisposable>
  nameWithType: Func<ILogger, T1, T2, T3, IDisposable>
  fullName: Func<Microsoft.Extensions.Logging.ILogger, T1, T2, T3, IDisposable>
  nameWithType.vb: Func(Of ILogger, T1, T2, T3, IDisposable)
  fullName.vb: Func(Of Microsoft.Extensions.Logging.ILogger, T1, T2, T3, IDisposable)
  name.vb: Func(Of ILogger, T1, T2, T3, IDisposable)
  spec.csharp:
  - uid: Func`5
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.Logging.ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IDisposable
    name: IDisposable
    nameWithType: IDisposable
    fullName: IDisposable
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`5
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.Logging.ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IDisposable
    name: IDisposable
    nameWithType: IDisposable
    fullName: IDisposable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`5
  commentId: '!:Func`5'
  isExternal: true
  name: Func<, , , , >
  nameWithType: Func<, , , , >
  fullName: Func<, , , , >
  nameWithType.vb: Func(Of , , , , )
  fullName.vb: Func(Of , , , , )
  name.vb: Func(Of , , , , )
  spec.csharp:
  - uid: Func`5
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`5
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.LogLevel
  commentId: T:Microsoft.Extensions.Logging.LogLevel
  parent: Microsoft.Extensions.Logging
  isExternal: false
  name: LogLevel
  nameWithType: LogLevel
  fullName: Microsoft.Extensions.Logging.LogLevel
- uid: Microsoft.Extensions.Logging.LoggerMessage.Define*
  commentId: Overload:Microsoft.Extensions.Logging.LoggerMessage.Define
  isExternal: false
  name: Define
  nameWithType: LoggerMessage.Define
  fullName: Microsoft.Extensions.Logging.LoggerMessage.Define
- uid: Microsoft.Extensions.Logging.EventId
  commentId: T:Microsoft.Extensions.Logging.EventId
  parent: Microsoft.Extensions.Logging
  isExternal: false
  name: EventId
  nameWithType: EventId
  fullName: Microsoft.Extensions.Logging.EventId
- uid: Action{Microsoft.Extensions.Logging.ILogger,Exception}
  commentId: '!:Action{Microsoft.Extensions.Logging.ILogger,Exception}'
  definition: Action`2
  name: Action<ILogger, Exception>
  nameWithType: Action<ILogger, Exception>
  fullName: Action<Microsoft.Extensions.Logging.ILogger, Exception>
  nameWithType.vb: Action(Of ILogger, Exception)
  fullName.vb: Action(Of Microsoft.Extensions.Logging.ILogger, Exception)
  name.vb: Action(Of ILogger, Exception)
  spec.csharp:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.Logging.ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.Logging.ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`2
  commentId: '!:Action`2'
  isExternal: true
  name: Action<, >
  nameWithType: Action<, >
  fullName: Action<, >
  nameWithType.vb: Action(Of , )
  fullName.vb: Action(Of , )
  name.vb: Action(Of , )
  spec.csharp:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Action{Microsoft.Extensions.Logging.ILogger,{T1},Exception}
  commentId: '!:Action{Microsoft.Extensions.Logging.ILogger,``0,Exception}'
  definition: Action`3
  name: Action<ILogger, T1, Exception>
  nameWithType: Action<ILogger, T1, Exception>
  fullName: Action<Microsoft.Extensions.Logging.ILogger, T1, Exception>
  nameWithType.vb: Action(Of ILogger, T1, Exception)
  fullName.vb: Action(Of Microsoft.Extensions.Logging.ILogger, T1, Exception)
  name.vb: Action(Of ILogger, T1, Exception)
  spec.csharp:
  - uid: Action`3
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.Logging.ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`3
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.Logging.ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`3
  commentId: '!:Action`3'
  isExternal: true
  name: Action<, , >
  nameWithType: Action<, , >
  fullName: Action<, , >
  nameWithType.vb: Action(Of , , )
  fullName.vb: Action(Of , , )
  name.vb: Action(Of , , )
  spec.csharp:
  - uid: Action`3
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`3
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Action{Microsoft.Extensions.Logging.ILogger,{T1},{T2},Exception}
  commentId: '!:Action{Microsoft.Extensions.Logging.ILogger,``0,``1,Exception}'
  definition: Action`4
  name: Action<ILogger, T1, T2, Exception>
  nameWithType: Action<ILogger, T1, T2, Exception>
  fullName: Action<Microsoft.Extensions.Logging.ILogger, T1, T2, Exception>
  nameWithType.vb: Action(Of ILogger, T1, T2, Exception)
  fullName.vb: Action(Of Microsoft.Extensions.Logging.ILogger, T1, T2, Exception)
  name.vb: Action(Of ILogger, T1, T2, Exception)
  spec.csharp:
  - uid: Action`4
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.Logging.ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`4
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.Logging.ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`4
  commentId: '!:Action`4'
  isExternal: true
  name: Action<, , , >
  nameWithType: Action<, , , >
  fullName: Action<, , , >
  nameWithType.vb: Action(Of , , , )
  fullName.vb: Action(Of , , , )
  name.vb: Action(Of , , , )
  spec.csharp:
  - uid: Action`4
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`4
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Action{Microsoft.Extensions.Logging.ILogger,{T1},{T2},{T3},Exception}
  commentId: '!:Action{Microsoft.Extensions.Logging.ILogger,``0,``1,``2,Exception}'
  definition: Action`5
  name: Action<ILogger, T1, T2, T3, Exception>
  nameWithType: Action<ILogger, T1, T2, T3, Exception>
  fullName: Action<Microsoft.Extensions.Logging.ILogger, T1, T2, T3, Exception>
  nameWithType.vb: Action(Of ILogger, T1, T2, T3, Exception)
  fullName.vb: Action(Of Microsoft.Extensions.Logging.ILogger, T1, T2, T3, Exception)
  name.vb: Action(Of ILogger, T1, T2, T3, Exception)
  spec.csharp:
  - uid: Action`5
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.Logging.ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`5
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.Logging.ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`5
  commentId: '!:Action`5'
  isExternal: true
  name: Action<, , , , >
  nameWithType: Action<, , , , >
  fullName: Action<, , , , >
  nameWithType.vb: Action(Of , , , , )
  fullName.vb: Action(Of , , , , )
  name.vb: Action(Of , , , , )
  spec.csharp:
  - uid: Action`5
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`5
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Action{Microsoft.Extensions.Logging.ILogger,{T1},{T2},{T3},{T4},Exception}
  commentId: '!:Action{Microsoft.Extensions.Logging.ILogger,``0,``1,``2,``3,Exception}'
  definition: Action`6
  name: Action<ILogger, T1, T2, T3, T4, Exception>
  nameWithType: Action<ILogger, T1, T2, T3, T4, Exception>
  fullName: Action<Microsoft.Extensions.Logging.ILogger, T1, T2, T3, T4, Exception>
  nameWithType.vb: Action(Of ILogger, T1, T2, T3, T4, Exception)
  fullName.vb: Action(Of Microsoft.Extensions.Logging.ILogger, T1, T2, T3, T4, Exception)
  name.vb: Action(Of ILogger, T1, T2, T3, T4, Exception)
  spec.csharp:
  - uid: Action`6
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.Logging.ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`6
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.Logging.ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`6
  commentId: '!:Action`6'
  isExternal: true
  name: Action<, , , , , >
  nameWithType: Action<, , , , , >
  fullName: Action<, , , , , >
  nameWithType.vb: Action(Of , , , , , )
  fullName.vb: Action(Of , , , , , )
  name.vb: Action(Of , , , , , )
  spec.csharp:
  - uid: Action`6
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`6
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Action{Microsoft.Extensions.Logging.ILogger,{T1},{T2},{T3},{T4},{T5},Exception}
  commentId: '!:Action{Microsoft.Extensions.Logging.ILogger,``0,``1,``2,``3,``4,Exception}'
  definition: Action`7
  name: Action<ILogger, T1, T2, T3, T4, T5, Exception>
  nameWithType: Action<ILogger, T1, T2, T3, T4, T5, Exception>
  fullName: Action<Microsoft.Extensions.Logging.ILogger, T1, T2, T3, T4, T5, Exception>
  nameWithType.vb: Action(Of ILogger, T1, T2, T3, T4, T5, Exception)
  fullName.vb: Action(Of Microsoft.Extensions.Logging.ILogger, T1, T2, T3, T4, T5, Exception)
  name.vb: Action(Of ILogger, T1, T2, T3, T4, T5, Exception)
  spec.csharp:
  - uid: Action`7
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.Logging.ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`7
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.Logging.ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`7
  commentId: '!:Action`7'
  isExternal: true
  name: Action<, , , , , , >
  nameWithType: Action<, , , , , , >
  fullName: Action<, , , , , , >
  nameWithType.vb: Action(Of , , , , , , )
  fullName.vb: Action(Of , , , , , , )
  name.vb: Action(Of , , , , , , )
  spec.csharp:
  - uid: Action`7
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`7
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Action{Microsoft.Extensions.Logging.ILogger,{T1},{T2},{T3},{T4},{T5},{T6},Exception}
  commentId: '!:Action{Microsoft.Extensions.Logging.ILogger,``0,``1,``2,``3,``4,``5,Exception}'
  definition: Action`8
  name: Action<ILogger, T1, T2, T3, T4, T5, T6, Exception>
  nameWithType: Action<ILogger, T1, T2, T3, T4, T5, T6, Exception>
  fullName: Action<Microsoft.Extensions.Logging.ILogger, T1, T2, T3, T4, T5, T6, Exception>
  nameWithType.vb: Action(Of ILogger, T1, T2, T3, T4, T5, T6, Exception)
  fullName.vb: Action(Of Microsoft.Extensions.Logging.ILogger, T1, T2, T3, T4, T5, T6, Exception)
  name.vb: Action(Of ILogger, T1, T2, T3, T4, T5, T6, Exception)
  spec.csharp:
  - uid: Action`8
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.Logging.ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`8
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.Logging.ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`8
  commentId: '!:Action`8'
  isExternal: true
  name: Action<, , , , , , , >
  nameWithType: Action<, , , , , , , >
  fullName: Action<, , , , , , , >
  nameWithType.vb: Action(Of , , , , , , , )
  fullName.vb: Action(Of , , , , , , , )
  name.vb: Action(Of , , , , , , , )
  spec.csharp:
  - uid: Action`8
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`8
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
