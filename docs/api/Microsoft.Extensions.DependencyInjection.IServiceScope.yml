### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.DependencyInjection.IServiceScope
  commentId: T:Microsoft.Extensions.DependencyInjection.IServiceScope
  id: IServiceScope
  parent: Microsoft.Extensions.DependencyInjection
  children:
  - Microsoft.Extensions.DependencyInjection.IServiceScope.ServiceProvider
  langs:
  - csharp
  - vb
  name: IServiceScope
  nameWithType: IServiceScope
  fullName: Microsoft.Extensions.DependencyInjection.IServiceScope
  type: Interface
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/IServiceScope.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: IServiceScope
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/IServiceScope.cs
    startLine: 13
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nThe <see cref=\"!:System.IDisposable.Dispose\"></see> method ends the scope lifetime. Once Dispose\nis called, any scoped services that have been resolved from\n<xref href=\"Microsoft.Extensions.DependencyInjection.IServiceScope.ServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> will be\ndisposed.\n"
  example: []
  syntax:
    content: 'public interface IServiceScope : IDisposable'
    content.vb: >-
      Public Interface IServiceScope
          Inherits IDisposable
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.Extensions.DependencyInjection.IServiceScope.ServiceProvider
  commentId: P:Microsoft.Extensions.DependencyInjection.IServiceScope.ServiceProvider
  id: ServiceProvider
  parent: Microsoft.Extensions.DependencyInjection.IServiceScope
  langs:
  - csharp
  - vb
  name: ServiceProvider
  nameWithType: IServiceScope.ServiceProvider
  fullName: Microsoft.Extensions.DependencyInjection.IServiceScope.ServiceProvider
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/IServiceScope.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: ServiceProvider
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/IServiceScope.cs
    startLine: 18
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nThe <see cref=\"!:System.IServiceProvider\"></see> used to resolve dependencies from the scope.\n"
  example: []
  syntax:
    content: IServiceProvider ServiceProvider { get; }
    parameters: []
    return:
      type: IServiceProvider
    content.vb: ReadOnly Property ServiceProvider As IServiceProvider
  overload: Microsoft.Extensions.DependencyInjection.IServiceScope.ServiceProvider*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Microsoft.Extensions.DependencyInjection.IServiceScope.ServiceProvider
  commentId: P:Microsoft.Extensions.DependencyInjection.IServiceScope.ServiceProvider
- uid: Microsoft.Extensions.DependencyInjection
  commentId: N:Microsoft.Extensions.DependencyInjection
  isExternal: false
  name: Microsoft.Extensions.DependencyInjection
  nameWithType: Microsoft.Extensions.DependencyInjection
  fullName: Microsoft.Extensions.DependencyInjection
- uid: Microsoft.Extensions.DependencyInjection.IServiceScope.ServiceProvider*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.IServiceScope.ServiceProvider
  isExternal: false
  name: ServiceProvider
  nameWithType: IServiceScope.ServiceProvider
  fullName: Microsoft.Extensions.DependencyInjection.IServiceScope.ServiceProvider
- uid: IServiceProvider
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: IServiceProvider
shouldSkipMarkup: true
