### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyMethodEmitter
  commentId: T:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyMethodEmitter
  id: ProxyMethodEmitter
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal
  children:
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyMethodEmitter.CreateProxyMethod(MethodInfo,Type)
  langs:
  - csharp
  - vb
  name: ProxyMethodEmitter
  nameWithType: ProxyMethodEmitter
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyMethodEmitter
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyMethodEmitter.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: ProxyMethodEmitter
    path: ../aspnet/EventNotification/src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyMethodEmitter.cs
    startLine: 15
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: 'public static class ProxyMethodEmitter : object'
    content.vb: >-
      Public Module ProxyMethodEmitter
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyMethodEmitter.CreateProxyMethod(MethodInfo,Type)
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyMethodEmitter.CreateProxyMethod(MethodInfo,Type)
  id: CreateProxyMethod(MethodInfo,Type)
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyMethodEmitter
  langs:
  - csharp
  - vb
  name: CreateProxyMethod(MethodInfo, Type)
  nameWithType: ProxyMethodEmitter.CreateProxyMethod(MethodInfo, Type)
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyMethodEmitter.CreateProxyMethod(MethodInfo, Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyMethodEmitter.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: CreateProxyMethod
    path: ../aspnet/EventNotification/src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyMethodEmitter.cs
    startLine: 34
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: public static Func<object, object, IProxyFactory, bool> CreateProxyMethod(MethodInfo method, Type inputType)
    parameters:
    - id: method
      type: MethodInfo
    - id: inputType
      type: Type
    return:
      type: Func{System.Object,System.Object,Microsoft.Extensions.DiagnosticAdapter.Infrastructure.IProxyFactory,System.Boolean}
    content.vb: Public Shared Function CreateProxyMethod(method As MethodInfo, inputType As Type) As Func(Of Object, Object, IProxyFactory, Boolean)
  overload: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyMethodEmitter.CreateProxyMethod*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal
  commentId: N:Microsoft.Extensions.DiagnosticAdapter.Internal
  isExternal: false
  name: Microsoft.Extensions.DiagnosticAdapter.Internal
  nameWithType: Microsoft.Extensions.DiagnosticAdapter.Internal
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyMethodEmitter.CreateProxyMethod*
  commentId: Overload:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyMethodEmitter.CreateProxyMethod
  isExternal: false
  name: CreateProxyMethod
  nameWithType: ProxyMethodEmitter.CreateProxyMethod
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyMethodEmitter.CreateProxyMethod
- uid: MethodInfo
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: MethodInfo
- uid: Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: Type
- uid: Func{System.Object,System.Object,Microsoft.Extensions.DiagnosticAdapter.Infrastructure.IProxyFactory,System.Boolean}
  commentId: '!:Func{System.Object,System.Object,Microsoft.Extensions.DiagnosticAdapter.Infrastructure.IProxyFactory,System.Boolean}'
  definition: Func`4
  name: Func<Object, Object, IProxyFactory, Boolean>
  nameWithType: Func<Object, Object, IProxyFactory, Boolean>
  fullName: Func<System.Object, System.Object, Microsoft.Extensions.DiagnosticAdapter.Infrastructure.IProxyFactory, System.Boolean>
  nameWithType.vb: Func(Of Object, Object, IProxyFactory, Boolean)
  fullName.vb: Func(Of System.Object, System.Object, Microsoft.Extensions.DiagnosticAdapter.Infrastructure.IProxyFactory, System.Boolean)
  name.vb: Func(Of Object, Object, IProxyFactory, Boolean)
  spec.csharp:
  - uid: Func`4
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Extensions.DiagnosticAdapter.Infrastructure.IProxyFactory
    name: IProxyFactory
    nameWithType: IProxyFactory
    fullName: Microsoft.Extensions.DiagnosticAdapter.Infrastructure.IProxyFactory
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`4
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Extensions.DiagnosticAdapter.Infrastructure.IProxyFactory
    name: IProxyFactory
    nameWithType: IProxyFactory
    fullName: Microsoft.Extensions.DiagnosticAdapter.Infrastructure.IProxyFactory
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`4
  isExternal: true
  name: Func<, , , >
  nameWithType: Func<, , , >
  fullName: Func<, , , >
  nameWithType.vb: Func(Of , , , )
  fullName.vb: Func(Of , , , )
  name.vb: Func(Of , , , )
  spec.csharp:
  - uid: Func`4
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`4
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
