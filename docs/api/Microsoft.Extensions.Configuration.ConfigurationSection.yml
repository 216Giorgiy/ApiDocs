### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Configuration.ConfigurationSection
  commentId: T:Microsoft.Extensions.Configuration.ConfigurationSection
  id: ConfigurationSection
  parent: Microsoft.Extensions.Configuration
  children:
  - Microsoft.Extensions.Configuration.ConfigurationSection.#ctor(Microsoft.Extensions.Configuration.ConfigurationRoot,System.String)
  - Microsoft.Extensions.Configuration.ConfigurationSection.GetChildren
  - Microsoft.Extensions.Configuration.ConfigurationSection.GetReloadToken
  - Microsoft.Extensions.Configuration.ConfigurationSection.GetSection(System.String)
  - Microsoft.Extensions.Configuration.ConfigurationSection.Item(System.String)
  - Microsoft.Extensions.Configuration.ConfigurationSection.Key
  - Microsoft.Extensions.Configuration.ConfigurationSection.Path
  - Microsoft.Extensions.Configuration.ConfigurationSection.Value
  langs:
  - csharp
  - vb
  name: ConfigurationSection
  nameWithType: ConfigurationSection
  fullName: Microsoft.Extensions.Configuration.ConfigurationSection
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration/ConfigurationSection.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: ConfigurationSection
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration/ConfigurationSection.cs
    startLine: 13
  assemblies:
  - Microsoft.Extensions.Configuration
  namespace: Microsoft.Extensions.Configuration
  summary: "\nRepresents a section of application configuration values.\n"
  example: []
  syntax:
    content: 'public class ConfigurationSection : IConfigurationSection'
    content.vb: >-
      Public Class ConfigurationSection
          Inherits IConfigurationSection
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.Configuration.ConfigurationSection.#ctor(Microsoft.Extensions.Configuration.ConfigurationRoot,System.String)
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationSection.#ctor(Microsoft.Extensions.Configuration.ConfigurationRoot,System.String)
  id: '#ctor(Microsoft.Extensions.Configuration.ConfigurationRoot,System.String)'
  parent: Microsoft.Extensions.Configuration.ConfigurationSection
  langs:
  - csharp
  - vb
  name: ConfigurationSection(ConfigurationRoot, String)
  nameWithType: ConfigurationSection.ConfigurationSection(ConfigurationRoot, String)
  fullName: Microsoft.Extensions.Configuration.ConfigurationSection.ConfigurationSection(Microsoft.Extensions.Configuration.ConfigurationRoot, System.String)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration/ConfigurationSection.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: .ctor
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration/ConfigurationSection.cs
    startLine: 24
  assemblies:
  - Microsoft.Extensions.Configuration
  namespace: Microsoft.Extensions.Configuration
  summary: "\nInitializes a new instance.\n"
  example: []
  syntax:
    content: public ConfigurationSection(ConfigurationRoot root, string path)
    parameters:
    - id: root
      type: Microsoft.Extensions.Configuration.ConfigurationRoot
      description: The configuration root.
    - id: path
      type: System.String
      description: The path to this section.
    content.vb: Public Sub New(root As ConfigurationRoot, path As String)
  overload: Microsoft.Extensions.Configuration.ConfigurationSection.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Configuration.ConfigurationSection.Path
  commentId: P:Microsoft.Extensions.Configuration.ConfigurationSection.Path
  id: Path
  parent: Microsoft.Extensions.Configuration.ConfigurationSection
  langs:
  - csharp
  - vb
  name: Path
  nameWithType: ConfigurationSection.Path
  fullName: Microsoft.Extensions.Configuration.ConfigurationSection.Path
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration/ConfigurationSection.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: Path
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration/ConfigurationSection.cs
    startLine: 43
  assemblies:
  - Microsoft.Extensions.Configuration
  namespace: Microsoft.Extensions.Configuration
  summary: "\nGets the full path to this section from the <see cref=\"!:IConfigurationRoot\"></see>.\n"
  example: []
  syntax:
    content: public string Path { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Path As String
  overload: Microsoft.Extensions.Configuration.ConfigurationSection.Path*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.Configuration.ConfigurationSection.Key
  commentId: P:Microsoft.Extensions.Configuration.ConfigurationSection.Key
  id: Key
  parent: Microsoft.Extensions.Configuration.ConfigurationSection
  langs:
  - csharp
  - vb
  name: Key
  nameWithType: ConfigurationSection.Key
  fullName: Microsoft.Extensions.Configuration.ConfigurationSection.Key
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration/ConfigurationSection.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: Key
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration/ConfigurationSection.cs
    startLine: 48
  assemblies:
  - Microsoft.Extensions.Configuration
  namespace: Microsoft.Extensions.Configuration
  summary: "\nGets the key this section occupies in its parent.\n"
  example: []
  syntax:
    content: public string Key { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Key As String
  overload: Microsoft.Extensions.Configuration.ConfigurationSection.Key*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.Configuration.ConfigurationSection.Value
  commentId: P:Microsoft.Extensions.Configuration.ConfigurationSection.Value
  id: Value
  parent: Microsoft.Extensions.Configuration.ConfigurationSection
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: ConfigurationSection.Value
  fullName: Microsoft.Extensions.Configuration.ConfigurationSection.Value
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration/ConfigurationSection.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: Value
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration/ConfigurationSection.cs
    startLine: 64
  assemblies:
  - Microsoft.Extensions.Configuration
  namespace: Microsoft.Extensions.Configuration
  summary: "\nGets or sets the section value.\n"
  example: []
  syntax:
    content: public string Value { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Value As String
  overload: Microsoft.Extensions.Configuration.ConfigurationSection.Value*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Configuration.ConfigurationSection.Item(System.String)
  commentId: P:Microsoft.Extensions.Configuration.ConfigurationSection.Item(System.String)
  id: Item(System.String)
  parent: Microsoft.Extensions.Configuration.ConfigurationSection
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: ConfigurationSection.Item[String]
  fullName: Microsoft.Extensions.Configuration.ConfigurationSection.Item[System.String]
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration/ConfigurationSection.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: this[]
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration/ConfigurationSection.cs
    startLine: 81
  assemblies:
  - Microsoft.Extensions.Configuration
  namespace: Microsoft.Extensions.Configuration
  summary: "\nGets or sets the value corresponding to a configuration key.\n"
  example: []
  syntax:
    content: public string this[string key] { get; set; }
    parameters:
    - id: key
      type: System.String
      description: The configuration key.
    return:
      type: System.String
      description: The configuration value.
    content.vb: Public Property Item(key As String) As String
  overload: Microsoft.Extensions.Configuration.ConfigurationSection.Item*
  nameWithType.vb: ConfigurationSection.Item(String)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.Configuration.ConfigurationSection.Item(System.String)
  name.vb: Item(String)
- uid: Microsoft.Extensions.Configuration.ConfigurationSection.GetSection(System.String)
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationSection.GetSection(System.String)
  id: GetSection(System.String)
  parent: Microsoft.Extensions.Configuration.ConfigurationSection
  langs:
  - csharp
  - vb
  name: GetSection(String)
  nameWithType: ConfigurationSection.GetSection(String)
  fullName: Microsoft.Extensions.Configuration.ConfigurationSection.GetSection(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration/ConfigurationSection.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: GetSection
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration/ConfigurationSection.cs
    startLine: 103
  assemblies:
  - Microsoft.Extensions.Configuration
  namespace: Microsoft.Extensions.Configuration
  summary: "\nGets a configuration sub-section with the specified key.\n"
  remarks: "\nThis method will never return <code>null</code>. If no matching sub-section is found with the specified key,\nan empty <see cref=\"!:IConfigurationSection\"></see> will be returned.\n"
  example: []
  syntax:
    content: public IConfigurationSection GetSection(string key)
    parameters:
    - id: key
      type: System.String
      description: The key of the configuration section.
    return:
      type: IConfigurationSection
      description: The <see cref="!:IConfigurationSection"></see>.
    content.vb: Public Function GetSection(key As String) As IConfigurationSection
  overload: Microsoft.Extensions.Configuration.ConfigurationSection.GetSection*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Configuration.ConfigurationSection.GetChildren
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationSection.GetChildren
  id: GetChildren
  parent: Microsoft.Extensions.Configuration.ConfigurationSection
  langs:
  - csharp
  - vb
  name: GetChildren()
  nameWithType: ConfigurationSection.GetChildren()
  fullName: Microsoft.Extensions.Configuration.ConfigurationSection.GetChildren()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration/ConfigurationSection.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: GetChildren
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration/ConfigurationSection.cs
    startLine: 109
  assemblies:
  - Microsoft.Extensions.Configuration
  namespace: Microsoft.Extensions.Configuration
  summary: "\nGets the immediate descendant configuration sub-sections.\n"
  example: []
  syntax:
    content: public IEnumerable<IConfigurationSection> GetChildren()
    return:
      type: IEnumerable{IConfigurationSection}
      description: The configuration sub-sections.
    content.vb: Public Function GetChildren As IEnumerable(Of IConfigurationSection)
  overload: Microsoft.Extensions.Configuration.ConfigurationSection.GetChildren*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Configuration.ConfigurationSection.GetReloadToken
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationSection.GetReloadToken
  id: GetReloadToken
  parent: Microsoft.Extensions.Configuration.ConfigurationSection
  langs:
  - csharp
  - vb
  name: GetReloadToken()
  nameWithType: ConfigurationSection.GetReloadToken()
  fullName: Microsoft.Extensions.Configuration.ConfigurationSection.GetReloadToken()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration/ConfigurationSection.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: GetReloadToken
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration/ConfigurationSection.cs
    startLine: 115
  assemblies:
  - Microsoft.Extensions.Configuration
  namespace: Microsoft.Extensions.Configuration
  summary: "\nReturns a <see cref=\"!:IChangeToken\"></see> that can be used to observe when this configuration is reloaded.\n"
  example: []
  syntax:
    content: public IChangeToken GetReloadToken()
    return:
      type: IChangeToken
      description: ''
    content.vb: Public Function GetReloadToken As IChangeToken
  overload: Microsoft.Extensions.Configuration.ConfigurationSection.GetReloadToken*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Extensions.Configuration
  commentId: N:Microsoft.Extensions.Configuration
  isExternal: false
  name: Microsoft.Extensions.Configuration
  nameWithType: Microsoft.Extensions.Configuration
  fullName: Microsoft.Extensions.Configuration
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Configuration.ConfigurationSection.#ctor*
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationSection.#ctor
  isExternal: false
  name: ConfigurationSection
  nameWithType: ConfigurationSection.ConfigurationSection
  fullName: Microsoft.Extensions.Configuration.ConfigurationSection.ConfigurationSection
- uid: Microsoft.Extensions.Configuration.ConfigurationRoot
  commentId: T:Microsoft.Extensions.Configuration.ConfigurationRoot
  parent: Microsoft.Extensions.Configuration
  isExternal: false
  name: ConfigurationRoot
  nameWithType: ConfigurationRoot
  fullName: Microsoft.Extensions.Configuration.ConfigurationRoot
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Extensions.Configuration.ConfigurationSection.Path*
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationSection.Path
  isExternal: false
  name: Path
  nameWithType: ConfigurationSection.Path
  fullName: Microsoft.Extensions.Configuration.ConfigurationSection.Path
- uid: Microsoft.Extensions.Configuration.ConfigurationSection.Key*
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationSection.Key
  isExternal: false
  name: Key
  nameWithType: ConfigurationSection.Key
  fullName: Microsoft.Extensions.Configuration.ConfigurationSection.Key
- uid: Microsoft.Extensions.Configuration.ConfigurationSection.Value*
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationSection.Value
  isExternal: false
  name: Value
  nameWithType: ConfigurationSection.Value
  fullName: Microsoft.Extensions.Configuration.ConfigurationSection.Value
- uid: Microsoft.Extensions.Configuration.ConfigurationSection.Item*
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationSection.Item
  isExternal: false
  name: Item
  nameWithType: ConfigurationSection.Item
  fullName: Microsoft.Extensions.Configuration.ConfigurationSection.Item
- uid: Microsoft.Extensions.Configuration.ConfigurationSection.GetSection*
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationSection.GetSection
  isExternal: false
  name: GetSection
  nameWithType: ConfigurationSection.GetSection
  fullName: Microsoft.Extensions.Configuration.ConfigurationSection.GetSection
- uid: IConfigurationSection
  isExternal: true
  name: IConfigurationSection
  nameWithType: IConfigurationSection
  fullName: IConfigurationSection
- uid: Microsoft.Extensions.Configuration.ConfigurationSection.GetChildren*
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationSection.GetChildren
  isExternal: false
  name: GetChildren
  nameWithType: ConfigurationSection.GetChildren
  fullName: Microsoft.Extensions.Configuration.ConfigurationSection.GetChildren
- uid: IEnumerable{IConfigurationSection}
  commentId: '!:IEnumerable{IConfigurationSection}'
  definition: IEnumerable`1
  name: IEnumerable<IConfigurationSection>
  nameWithType: IEnumerable<IConfigurationSection>
  fullName: IEnumerable<IConfigurationSection>
  nameWithType.vb: IEnumerable(Of IConfigurationSection)
  fullName.vb: IEnumerable(Of IConfigurationSection)
  name.vb: IEnumerable(Of IConfigurationSection)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IConfigurationSection
    name: IConfigurationSection
    nameWithType: IConfigurationSection
    fullName: IConfigurationSection
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IConfigurationSection
    name: IConfigurationSection
    nameWithType: IConfigurationSection
    fullName: IConfigurationSection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Configuration.ConfigurationSection.GetReloadToken*
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationSection.GetReloadToken
  isExternal: false
  name: GetReloadToken
  nameWithType: ConfigurationSection.GetReloadToken
  fullName: Microsoft.Extensions.Configuration.ConfigurationSection.GetReloadToken
- uid: IChangeToken
  isExternal: true
  name: IChangeToken
  nameWithType: IChangeToken
  fullName: IChangeToken
shouldSkipMarkup: true
