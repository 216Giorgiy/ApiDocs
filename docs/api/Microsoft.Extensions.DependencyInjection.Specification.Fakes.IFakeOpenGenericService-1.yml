### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOpenGenericService`1
  commentId: T:Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOpenGenericService`1
  id: IFakeOpenGenericService`1
  parent: Microsoft.Extensions.DependencyInjection.Specification.Fakes
  children:
  - Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOpenGenericService`1.Value
  langs:
  - csharp
  - vb
  name: IFakeOpenGenericService<TValue>
  nameWithType: IFakeOpenGenericService<TValue>
  fullName: Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOpenGenericService<TValue>
  type: Interface
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/Fakes/IFakeOpenGenericService.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: IFakeOpenGenericService
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/Fakes/IFakeOpenGenericService.cs
    startLine: 5
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification.Fakes
  syntax:
    content: public interface IFakeOpenGenericService<TValue>
    content.vb: Public Interface IFakeOpenGenericService(Of TValue)
    typeParameters:
    - id: TValue
  nameWithType.vb: IFakeOpenGenericService(Of TValue)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOpenGenericService(Of TValue)
  name.vb: IFakeOpenGenericService(Of TValue)
- uid: Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOpenGenericService`1.Value
  commentId: P:Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOpenGenericService`1.Value
  id: Value
  parent: Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOpenGenericService`1
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: IFakeOpenGenericService<TValue>.Value
  fullName: Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOpenGenericService<TValue>.Value
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/Fakes/IFakeOpenGenericService.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: Value
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/Fakes/IFakeOpenGenericService.cs
    startLine: 7
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification.Fakes
  syntax:
    content: TValue Value { get; }
    content.vb: ReadOnly Property Value As TValue
    parameters: []
    return:
      type: '{TValue}'
  overload: Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOpenGenericService`1.Value*
  nameWithType.vb: IFakeOpenGenericService(Of TValue).Value
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOpenGenericService(Of TValue).Value
references:
- uid: Microsoft.Extensions.DependencyInjection.Specification.Fakes
  commentId: N:Microsoft.Extensions.DependencyInjection.Specification.Fakes
  isExternal: false
  name: Microsoft.Extensions.DependencyInjection.Specification.Fakes
  nameWithType: Microsoft.Extensions.DependencyInjection.Specification.Fakes
  fullName: Microsoft.Extensions.DependencyInjection.Specification.Fakes
- uid: Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOpenGenericService`1.Value*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOpenGenericService`1.Value
  isExternal: false
  name: Value
  nameWithType: IFakeOpenGenericService<TValue>.Value
  fullName: Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOpenGenericService<TValue>.Value
  nameWithType.vb: IFakeOpenGenericService(Of TValue).Value
  fullname.vb: Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOpenGenericService(Of TValue).Value
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TValue
  isExternal: false
  name: TValue
  nameWithType: TValue
  fullName: TValue
shouldSkipMarkup: true
