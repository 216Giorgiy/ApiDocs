### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.DependencyInjection.ActivatorUtilities
  commentId: T:Microsoft.Extensions.DependencyInjection.ActivatorUtilities
  id: ActivatorUtilities
  parent: Microsoft.Extensions.DependencyInjection
  children:
  - Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateFactory(Type,Type[])
  - Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateInstance(IServiceProvider,Type,System.Object[])
  - Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateInstance``1(IServiceProvider,System.Object[])
  - Microsoft.Extensions.DependencyInjection.ActivatorUtilities.GetServiceOrCreateInstance(IServiceProvider,Type)
  - Microsoft.Extensions.DependencyInjection.ActivatorUtilities.GetServiceOrCreateInstance``1(IServiceProvider)
  langs:
  - csharp
  - vb
  name: ActivatorUtilities
  nameWithType: ActivatorUtilities
  fullName: Microsoft.Extensions.DependencyInjection.ActivatorUtilities
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ActivatorUtilities.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: ActivatorUtilities
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ActivatorUtilities.cs
    startLine: 11
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nHelper code for the various activator services.\n"
  example: []
  syntax:
    content: 'public static class ActivatorUtilities : object'
    content.vb: >-
      Public Module ActivatorUtilities
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateInstance(IServiceProvider,Type,System.Object[])
  commentId: M:Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateInstance(IServiceProvider,Type,System.Object[])
  id: CreateInstance(IServiceProvider,Type,System.Object[])
  parent: Microsoft.Extensions.DependencyInjection.ActivatorUtilities
  langs:
  - csharp
  - vb
  name: CreateInstance(IServiceProvider, Type, Object[])
  nameWithType: ActivatorUtilities.CreateInstance(IServiceProvider, Type, Object[])
  fullName: Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateInstance(IServiceProvider, Type, System.Object[])
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ActivatorUtilities.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: CreateInstance
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ActivatorUtilities.cs
    startLine: 20
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nInstantiate a type with constructor arguments provided directly and/or from an <see cref=\"!:IServiceProvider\"></see>.\n"
  example: []
  syntax:
    content: public static object CreateInstance(IServiceProvider provider, Type instanceType, params object[] parameters)
    parameters:
    - id: provider
      type: IServiceProvider
      description: The service provider used to resolve dependencies
    - id: instanceType
      type: Type
      description: The type to activate
    - id: parameters
      type: System.Object[]
      description: Constructor arguments not provided by the <span class="paramref">provider</span>.
    return:
      type: System.Object
      description: An activated object of type instanceType
    content.vb: Public Shared Function CreateInstance(provider As IServiceProvider, instanceType As Type, ParamArray parameters As Object()) As Object
  overload: Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateInstance*
  nameWithType.vb: ActivatorUtilities.CreateInstance(IServiceProvider, Type, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateInstance(IServiceProvider, Type, System.Object())
  name.vb: CreateInstance(IServiceProvider, Type, Object())
- uid: Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateFactory(Type,Type[])
  commentId: M:Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateFactory(Type,Type[])
  id: CreateFactory(Type,Type[])
  parent: Microsoft.Extensions.DependencyInjection.ActivatorUtilities
  langs:
  - csharp
  - vb
  name: CreateFactory(Type, Type[])
  nameWithType: ActivatorUtilities.CreateFactory(Type, Type[])
  fullName: Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateFactory(Type, Type[])
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ActivatorUtilities.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: CreateFactory
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ActivatorUtilities.cs
    startLine: 37
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nCreate a delegate that will instantiate a type with constructor arguments provided directly\nand/or from an <see cref=\"!:IServiceProvider\"></see>.\n"
  example: []
  syntax:
    content: public static ObjectFactory CreateFactory(Type instanceType, Type[] argumentTypes)
    parameters:
    - id: instanceType
      type: Type
      description: The type to activate
    - id: argumentTypes
      type: Type[]
      description: "\nThe types of objects, in order, that will be passed to the returned function as its second parameter\n"
    return:
      type: Microsoft.Extensions.DependencyInjection.ObjectFactory
      description: "\nA factory that will instantiate instanceType using an <see cref=\"!:IServiceProvider\"></see>\nand an argument array containing objects matching the types defined in argumentTypes\n"
    content.vb: Public Shared Function CreateFactory(instanceType As Type, argumentTypes As Type()) As ObjectFactory
  overload: Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateFactory*
  nameWithType.vb: ActivatorUtilities.CreateFactory(Type, Type())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateFactory(Type, Type())
  name.vb: CreateFactory(Type, Type())
- uid: Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateInstance``1(IServiceProvider,System.Object[])
  commentId: M:Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateInstance``1(IServiceProvider,System.Object[])
  id: CreateInstance``1(IServiceProvider,System.Object[])
  parent: Microsoft.Extensions.DependencyInjection.ActivatorUtilities
  langs:
  - csharp
  - vb
  name: CreateInstance<T>(IServiceProvider, Object[])
  nameWithType: ActivatorUtilities.CreateInstance<T>(IServiceProvider, Object[])
  fullName: Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateInstance<T>(IServiceProvider, System.Object[])
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ActivatorUtilities.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: CreateInstance
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ActivatorUtilities.cs
    startLine: 49
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nInstantiate a type with constructor arguments provided directly and/or from an <see cref=\"!:IServiceProvider\"></see>.\n"
  example: []
  syntax:
    content: public static T CreateInstance<T>(IServiceProvider provider, params object[] parameters)
    parameters:
    - id: provider
      type: IServiceProvider
      description: The service provider used to resolve dependencies
    - id: parameters
      type: System.Object[]
      description: Constructor arguments not provided by the <span class="paramref">provider</span>.
    typeParameters:
    - id: T
      description: The type to activate
    return:
      type: '{T}'
      description: An activated object of type T
    content.vb: Public Shared Function CreateInstance(Of T)(provider As IServiceProvider, ParamArray parameters As Object()) As T
  overload: Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateInstance*
  nameWithType.vb: ActivatorUtilities.CreateInstance(Of T)(IServiceProvider, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateInstance(Of T)(IServiceProvider, System.Object())
  name.vb: CreateInstance(Of T)(IServiceProvider, Object())
- uid: Microsoft.Extensions.DependencyInjection.ActivatorUtilities.GetServiceOrCreateInstance``1(IServiceProvider)
  commentId: M:Microsoft.Extensions.DependencyInjection.ActivatorUtilities.GetServiceOrCreateInstance``1(IServiceProvider)
  id: GetServiceOrCreateInstance``1(IServiceProvider)
  parent: Microsoft.Extensions.DependencyInjection.ActivatorUtilities
  langs:
  - csharp
  - vb
  name: GetServiceOrCreateInstance<T>(IServiceProvider)
  nameWithType: ActivatorUtilities.GetServiceOrCreateInstance<T>(IServiceProvider)
  fullName: Microsoft.Extensions.DependencyInjection.ActivatorUtilities.GetServiceOrCreateInstance<T>(IServiceProvider)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ActivatorUtilities.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: GetServiceOrCreateInstance
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ActivatorUtilities.cs
    startLine: 60
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nRetrieve an instance of the given type from the service provider. If one is not found then instantiate it directly.\n"
  example: []
  syntax:
    content: public static T GetServiceOrCreateInstance<T>(IServiceProvider provider)
    parameters:
    - id: provider
      type: IServiceProvider
      description: The service provider used to resolve dependencies
    typeParameters:
    - id: T
      description: The type of the service
    return:
      type: '{T}'
      description: The resolved service or created instance
    content.vb: Public Shared Function GetServiceOrCreateInstance(Of T)(provider As IServiceProvider) As T
  overload: Microsoft.Extensions.DependencyInjection.ActivatorUtilities.GetServiceOrCreateInstance*
  nameWithType.vb: ActivatorUtilities.GetServiceOrCreateInstance(Of T)(IServiceProvider)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ActivatorUtilities.GetServiceOrCreateInstance(Of T)(IServiceProvider)
  name.vb: GetServiceOrCreateInstance(Of T)(IServiceProvider)
- uid: Microsoft.Extensions.DependencyInjection.ActivatorUtilities.GetServiceOrCreateInstance(IServiceProvider,Type)
  commentId: M:Microsoft.Extensions.DependencyInjection.ActivatorUtilities.GetServiceOrCreateInstance(IServiceProvider,Type)
  id: GetServiceOrCreateInstance(IServiceProvider,Type)
  parent: Microsoft.Extensions.DependencyInjection.ActivatorUtilities
  langs:
  - csharp
  - vb
  name: GetServiceOrCreateInstance(IServiceProvider, Type)
  nameWithType: ActivatorUtilities.GetServiceOrCreateInstance(IServiceProvider, Type)
  fullName: Microsoft.Extensions.DependencyInjection.ActivatorUtilities.GetServiceOrCreateInstance(IServiceProvider, Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ActivatorUtilities.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: GetServiceOrCreateInstance
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ActivatorUtilities.cs
    startLine: 71
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nRetrieve an instance of the given type from the service provider. If one is not found then instantiate it directly.\n"
  example: []
  syntax:
    content: public static object GetServiceOrCreateInstance(IServiceProvider provider, Type type)
    parameters:
    - id: provider
      type: IServiceProvider
      description: The service provider
    - id: type
      type: Type
      description: The type of the service
    return:
      type: System.Object
      description: The resolved service or created instance
    content.vb: Public Shared Function GetServiceOrCreateInstance(provider As IServiceProvider, type As Type) As Object
  overload: Microsoft.Extensions.DependencyInjection.ActivatorUtilities.GetServiceOrCreateInstance*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Extensions.DependencyInjection
  commentId: N:Microsoft.Extensions.DependencyInjection
  isExternal: false
  name: Microsoft.Extensions.DependencyInjection
  nameWithType: Microsoft.Extensions.DependencyInjection
  fullName: Microsoft.Extensions.DependencyInjection
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateInstance*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateInstance
  isExternal: false
  name: CreateInstance
  nameWithType: ActivatorUtilities.CreateInstance
  fullName: Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateInstance
- uid: IServiceProvider
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: IServiceProvider
- uid: Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: Type
- uid: System.Object[]
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateFactory*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateFactory
  isExternal: false
  name: CreateFactory
  nameWithType: ActivatorUtilities.CreateFactory
  fullName: Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateFactory
- uid: Type[]
  name: Type[]
  nameWithType: Type[]
  fullName: Type[]
  nameWithType.vb: Type()
  fullName.vb: Type()
  name.vb: Type()
  spec.csharp:
  - uid: Type
    name: Type
    nameWithType: Type
    fullName: Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Type
    name: Type
    nameWithType: Type
    fullName: Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Extensions.DependencyInjection.ObjectFactory
  commentId: T:Microsoft.Extensions.DependencyInjection.ObjectFactory
  parent: Microsoft.Extensions.DependencyInjection
  isExternal: false
  name: ObjectFactory
  nameWithType: ObjectFactory
  fullName: Microsoft.Extensions.DependencyInjection.ObjectFactory
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: Microsoft.Extensions.DependencyInjection.ActivatorUtilities.GetServiceOrCreateInstance*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.ActivatorUtilities.GetServiceOrCreateInstance
  isExternal: false
  name: GetServiceOrCreateInstance
  nameWithType: ActivatorUtilities.GetServiceOrCreateInstance
  fullName: Microsoft.Extensions.DependencyInjection.ActivatorUtilities.GetServiceOrCreateInstance
shouldSkipMarkup: true
