### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool`1
  commentId: T:Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool`1
  id: JsonArrayPool`1
  parent: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal
  children:
  - Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool`1.#ctor(ArrayPool{`0})
  - Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool`1.Rent(System.Int32)
  - Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool`1.Return(`0[])
  langs:
  - csharp
  - vb
  name: JsonArrayPool<T>
  nameWithType: JsonArrayPool<T>
  fullName: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool<T>
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Formatters.Json/Internal/JsonArrayPool.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: JsonArrayPool
    path: ../aspnet/Mvc/src/Microsoft.AspNetCore.Mvc.Formatters.Json/Internal/JsonArrayPool.cs
    startLine: 9
  assemblies:
  - Microsoft.AspNetCore.Mvc.Formatters.Json
  namespace: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal
  syntax:
    content: 'public class JsonArrayPool<T> : IArrayPool<T>'
    typeParameters:
    - id: T
    content.vb: >-
      Public Class JsonArrayPool(Of T)
          Inherits IArrayPool(Of T)
  inheritance:
  - System.Object
  nameWithType.vb: JsonArrayPool(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool(Of T)
  name.vb: JsonArrayPool(Of T)
- uid: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool`1.#ctor(ArrayPool{`0})
  commentId: M:Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool`1.#ctor(ArrayPool{`0})
  id: '#ctor(ArrayPool{`0})'
  parent: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool`1
  langs:
  - csharp
  - vb
  name: JsonArrayPool(ArrayPool<T>)
  nameWithType: JsonArrayPool<T>.JsonArrayPool(ArrayPool<T>)
  fullName: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool<T>.JsonArrayPool(ArrayPool<T>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Formatters.Json/Internal/JsonArrayPool.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: .ctor
    path: ../aspnet/Mvc/src/Microsoft.AspNetCore.Mvc.Formatters.Json/Internal/JsonArrayPool.cs
    startLine: 13
  assemblies:
  - Microsoft.AspNetCore.Mvc.Formatters.Json
  namespace: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal
  syntax:
    content: public JsonArrayPool(ArrayPool<T> inner)
    parameters:
    - id: inner
      type: ArrayPool{{T}}
    content.vb: Public Sub New(inner As ArrayPool(Of T))
  overload: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool`1.#ctor*
  nameWithType.vb: JsonArrayPool(Of T).JsonArrayPool(ArrayPool(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool(Of T).JsonArrayPool(ArrayPool(Of T))
  name.vb: JsonArrayPool(ArrayPool(Of T))
- uid: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool`1.Rent(System.Int32)
  commentId: M:Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool`1.Rent(System.Int32)
  id: Rent(System.Int32)
  parent: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool`1
  langs:
  - csharp
  - vb
  name: Rent(Int32)
  nameWithType: JsonArrayPool<T>.Rent(Int32)
  fullName: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool<T>.Rent(System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Formatters.Json/Internal/JsonArrayPool.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Rent
    path: ../aspnet/Mvc/src/Microsoft.AspNetCore.Mvc.Formatters.Json/Internal/JsonArrayPool.cs
    startLine: 23
  assemblies:
  - Microsoft.AspNetCore.Mvc.Formatters.Json
  namespace: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal
  syntax:
    content: public T[] Rent(int minimumLength)
    parameters:
    - id: minimumLength
      type: System.Int32
    return:
      type: '{T}[]'
    content.vb: Public Function Rent(minimumLength As Integer) As T()
  overload: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool`1.Rent*
  nameWithType.vb: JsonArrayPool(Of T).Rent(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool(Of T).Rent(System.Int32)
- uid: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool`1.Return(`0[])
  commentId: M:Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool`1.Return(`0[])
  id: Return(`0[])
  parent: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool`1
  langs:
  - csharp
  - vb
  name: Return(T[])
  nameWithType: JsonArrayPool<T>.Return(T[])
  fullName: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool<T>.Return(T[])
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Formatters.Json/Internal/JsonArrayPool.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Return
    path: ../aspnet/Mvc/src/Microsoft.AspNetCore.Mvc.Formatters.Json/Internal/JsonArrayPool.cs
    startLine: 28
  assemblies:
  - Microsoft.AspNetCore.Mvc.Formatters.Json
  namespace: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal
  syntax:
    content: public void Return(T[] array)
    parameters:
    - id: array
      type: '{T}[]'
    content.vb: Public Sub Return(array As T())
  overload: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool`1.Return*
  nameWithType.vb: JsonArrayPool(Of T).Return(T())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool(Of T).Return(T())
  name.vb: Return(T())
references:
- uid: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal
  commentId: N:Microsoft.AspNetCore.Mvc.Formatters.Json.Internal
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal
  nameWithType: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal
  fullName: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool`1.#ctor*
  commentId: Overload:Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool`1.#ctor
  isExternal: false
  name: JsonArrayPool
  nameWithType: JsonArrayPool<T>.JsonArrayPool
  fullName: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool<T>.JsonArrayPool
  nameWithType.vb: JsonArrayPool(Of T).JsonArrayPool
  fullName.vb: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool(Of T).JsonArrayPool
- uid: ArrayPool{{T}}
  commentId: '!:ArrayPool{`0}'
  definition: ArrayPool`1
  name: ArrayPool<T>
  nameWithType: ArrayPool<T>
  fullName: ArrayPool<T>
  nameWithType.vb: ArrayPool(Of T)
  fullName.vb: ArrayPool(Of T)
  name.vb: ArrayPool(Of T)
  spec.csharp:
  - uid: ArrayPool`1
    name: ArrayPool
    nameWithType: ArrayPool
    fullName: ArrayPool
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ArrayPool`1
    name: ArrayPool
    nameWithType: ArrayPool
    fullName: ArrayPool
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: ArrayPool`1
  isExternal: true
  name: ArrayPool<>
  nameWithType: ArrayPool<>
  fullName: ArrayPool<>
  nameWithType.vb: ArrayPool(Of )
  fullName.vb: ArrayPool(Of )
  name.vb: ArrayPool(Of )
  spec.csharp:
  - uid: ArrayPool`1
    name: ArrayPool
    nameWithType: ArrayPool
    fullName: ArrayPool
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ArrayPool`1
    name: ArrayPool
    nameWithType: ArrayPool
    fullName: ArrayPool
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool`1.Rent*
  commentId: Overload:Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool`1.Rent
  isExternal: false
  name: Rent
  nameWithType: JsonArrayPool<T>.Rent
  fullName: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool<T>.Rent
  nameWithType.vb: JsonArrayPool(Of T).Rent
  fullName.vb: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool(Of T).Rent
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: '{T}[]'
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool`1.Return*
  commentId: Overload:Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool`1.Return
  isExternal: false
  name: Return
  nameWithType: JsonArrayPool<T>.Return
  fullName: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool<T>.Return
  nameWithType.vb: JsonArrayPool(Of T).Return
  fullName.vb: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool(Of T).Return
shouldSkipMarkup: true
