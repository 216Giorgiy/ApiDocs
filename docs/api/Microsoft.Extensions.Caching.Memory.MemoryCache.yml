### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Caching.Memory.MemoryCache
  commentId: T:Microsoft.Extensions.Caching.Memory.MemoryCache
  id: MemoryCache
  parent: Microsoft.Extensions.Caching.Memory
  children:
  - Microsoft.Extensions.Caching.Memory.MemoryCache.#ctor(IOptions{Microsoft.Extensions.Caching.Memory.MemoryCacheOptions})
  - Microsoft.Extensions.Caching.Memory.MemoryCache.Compact(System.Double)
  - Microsoft.Extensions.Caching.Memory.MemoryCache.Count
  - Microsoft.Extensions.Caching.Memory.MemoryCache.CreateEntry(System.Object)
  - Microsoft.Extensions.Caching.Memory.MemoryCache.Dispose
  - Microsoft.Extensions.Caching.Memory.MemoryCache.Dispose(System.Boolean)
  - Microsoft.Extensions.Caching.Memory.MemoryCache.Finalize
  - Microsoft.Extensions.Caching.Memory.MemoryCache.Remove(System.Object)
  - Microsoft.Extensions.Caching.Memory.MemoryCache.TryGetValue(System.Object,System.Object@)
  langs:
  - csharp
  - vb
  name: MemoryCache
  nameWithType: MemoryCache
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCache
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: MemoryCache
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
    startLine: 17
  assemblies:
  - Microsoft.Extensions.Caching.Memory
  namespace: Microsoft.Extensions.Caching.Memory
  summary: "\nAn implementation of <see cref=\"!:IMemoryCache\"></see> using a dictionary to\nstore its entries.\n"
  example: []
  syntax:
    content: 'public class MemoryCache : IMemoryCache'
    content.vb: >-
      Public Class MemoryCache
          Inherits IMemoryCache
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.Caching.Memory.MemoryCache.#ctor(IOptions{Microsoft.Extensions.Caching.Memory.MemoryCacheOptions})
  commentId: M:Microsoft.Extensions.Caching.Memory.MemoryCache.#ctor(IOptions{Microsoft.Extensions.Caching.Memory.MemoryCacheOptions})
  id: '#ctor(IOptions{Microsoft.Extensions.Caching.Memory.MemoryCacheOptions})'
  parent: Microsoft.Extensions.Caching.Memory.MemoryCache
  langs:
  - csharp
  - vb
  name: MemoryCache(IOptions<MemoryCacheOptions>)
  nameWithType: MemoryCache.MemoryCache(IOptions<MemoryCacheOptions>)
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCache.MemoryCache(IOptions<Microsoft.Extensions.Caching.Memory.MemoryCacheOptions>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: .ctor
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
    startLine: 37
  assemblies:
  - Microsoft.Extensions.Caching.Memory
  namespace: Microsoft.Extensions.Caching.Memory
  summary: "\nCreates a new <xref href=\"Microsoft.Extensions.Caching.Memory.MemoryCache\" data-throw-if-not-resolved=\"false\"></xref> instance.\n"
  example: []
  syntax:
    content: public MemoryCache(IOptions<MemoryCacheOptions> optionsAccessor)
    parameters:
    - id: optionsAccessor
      type: IOptions{Microsoft.Extensions.Caching.Memory.MemoryCacheOptions}
      description: The options of the cache.
    content.vb: Public Sub New(optionsAccessor As IOptions(Of MemoryCacheOptions))
  overload: Microsoft.Extensions.Caching.Memory.MemoryCache.#ctor*
  nameWithType.vb: MemoryCache.MemoryCache(IOptions(Of MemoryCacheOptions))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.Caching.Memory.MemoryCache.MemoryCache(IOptions(Of Microsoft.Extensions.Caching.Memory.MemoryCacheOptions))
  name.vb: MemoryCache(IOptions(Of MemoryCacheOptions))
- uid: Microsoft.Extensions.Caching.Memory.MemoryCache.Finalize
  commentId: M:Microsoft.Extensions.Caching.Memory.MemoryCache.Finalize
  id: Finalize
  parent: Microsoft.Extensions.Caching.Memory.MemoryCache
  langs:
  - csharp
  - vb
  name: Finalize()
  nameWithType: MemoryCache.Finalize()
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCache.Finalize()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: Finalize
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
    startLine: 62
  assemblies:
  - Microsoft.Extensions.Caching.Memory
  namespace: Microsoft.Extensions.Caching.Memory
  summary: "\nCleans up the background collection events.\n"
  example: []
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  overload: Microsoft.Extensions.Caching.Memory.MemoryCache.Finalize*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.Extensions.Caching.Memory.MemoryCache.Count
  commentId: P:Microsoft.Extensions.Caching.Memory.MemoryCache.Count
  id: Count
  parent: Microsoft.Extensions.Caching.Memory.MemoryCache
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: MemoryCache.Count
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCache.Count
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: Count
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
    startLine: 70
  assemblies:
  - Microsoft.Extensions.Caching.Memory
  namespace: Microsoft.Extensions.Caching.Memory
  summary: "\nGets the count of the current entries for diagnostic purposes.\n"
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: Microsoft.Extensions.Caching.Memory.MemoryCache.Count*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.Caching.Memory.MemoryCache.CreateEntry(System.Object)
  commentId: M:Microsoft.Extensions.Caching.Memory.MemoryCache.CreateEntry(System.Object)
  id: CreateEntry(System.Object)
  parent: Microsoft.Extensions.Caching.Memory.MemoryCache
  langs:
  - csharp
  - vb
  name: CreateEntry(Object)
  nameWithType: MemoryCache.CreateEntry(Object)
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCache.CreateEntry(System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: CreateEntry
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
    startLine: 76
  assemblies:
  - Microsoft.Extensions.Caching.Memory
  namespace: Microsoft.Extensions.Caching.Memory
  example: []
  syntax:
    content: public ICacheEntry CreateEntry(object key)
    parameters:
    - id: key
      type: System.Object
    return:
      type: ICacheEntry
    content.vb: Public Function CreateEntry(key As Object) As ICacheEntry
  overload: Microsoft.Extensions.Caching.Memory.MemoryCache.CreateEntry*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Caching.Memory.MemoryCache.TryGetValue(System.Object,System.Object@)
  commentId: M:Microsoft.Extensions.Caching.Memory.MemoryCache.TryGetValue(System.Object,System.Object@)
  id: TryGetValue(System.Object,System.Object@)
  parent: Microsoft.Extensions.Caching.Memory.MemoryCache
  langs:
  - csharp
  - vb
  name: TryGetValue(Object, out Object)
  nameWithType: MemoryCache.TryGetValue(Object, out Object)
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCache.TryGetValue(System.Object, out System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: TryGetValue
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
    startLine: 154
  assemblies:
  - Microsoft.Extensions.Caching.Memory
  namespace: Microsoft.Extensions.Caching.Memory
  example: []
  syntax:
    content: public bool TryGetValue(object key, out object result)
    parameters:
    - id: key
      type: System.Object
    - id: result
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Function TryGetValue(key As Object, ByRef result As Object) As Boolean
  overload: Microsoft.Extensions.Caching.Memory.MemoryCache.TryGetValue*
  nameWithType.vb: MemoryCache.TryGetValue(Object, ByRef Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.Caching.Memory.MemoryCache.TryGetValue(System.Object, ByRef System.Object)
  name.vb: TryGetValue(Object, ByRef Object)
- uid: Microsoft.Extensions.Caching.Memory.MemoryCache.Remove(System.Object)
  commentId: M:Microsoft.Extensions.Caching.Memory.MemoryCache.Remove(System.Object)
  id: Remove(System.Object)
  parent: Microsoft.Extensions.Caching.Memory.MemoryCache
  langs:
  - csharp
  - vb
  name: Remove(Object)
  nameWithType: MemoryCache.Remove(Object)
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCache.Remove(System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: Remove
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
    startLine: 206
  assemblies:
  - Microsoft.Extensions.Caching.Memory
  namespace: Microsoft.Extensions.Caching.Memory
  example: []
  syntax:
    content: public void Remove(object key)
    parameters:
    - id: key
      type: System.Object
    content.vb: Public Sub Remove(key As Object)
  overload: Microsoft.Extensions.Caching.Memory.MemoryCache.Remove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Caching.Memory.MemoryCache.Compact(System.Double)
  commentId: M:Microsoft.Extensions.Caching.Memory.MemoryCache.Compact(System.Double)
  id: Compact(System.Double)
  parent: Microsoft.Extensions.Caching.Memory.MemoryCache
  langs:
  - csharp
  - vb
  name: Compact(Double)
  nameWithType: MemoryCache.Compact(Double)
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCache.Compact(System.Double)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: Compact
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
    startLine: 349
  assemblies:
  - Microsoft.Extensions.Caching.Memory
  namespace: Microsoft.Extensions.Caching.Memory
  example: []
  syntax:
    content: public void Compact(double percentage)
    parameters:
    - id: percentage
      type: System.Double
    content.vb: Public Sub Compact(percentage As Double)
  overload: Microsoft.Extensions.Caching.Memory.MemoryCache.Compact*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Caching.Memory.MemoryCache.Dispose
  commentId: M:Microsoft.Extensions.Caching.Memory.MemoryCache.Dispose
  id: Dispose
  parent: Microsoft.Extensions.Caching.Memory.MemoryCache
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: MemoryCache.Dispose()
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCache.Dispose()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: Dispose
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
    startLine: 445
  assemblies:
  - Microsoft.Extensions.Caching.Memory
  namespace: Microsoft.Extensions.Caching.Memory
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Microsoft.Extensions.Caching.Memory.MemoryCache.Dispose*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Caching.Memory.MemoryCache.Dispose(System.Boolean)
  commentId: M:Microsoft.Extensions.Caching.Memory.MemoryCache.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: Microsoft.Extensions.Caching.Memory.MemoryCache
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: MemoryCache.Dispose(Boolean)
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCache.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: Dispose
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
    startLine: 450
  assemblies:
  - Microsoft.Extensions.Caching.Memory
  namespace: Microsoft.Extensions.Caching.Memory
  syntax:
    content: protected virtual void Dispose(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
  overload: Microsoft.Extensions.Caching.Memory.MemoryCache.Dispose*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: Microsoft.Extensions.Caching.Memory
  commentId: N:Microsoft.Extensions.Caching.Memory
  isExternal: false
  name: Microsoft.Extensions.Caching.Memory
  nameWithType: Microsoft.Extensions.Caching.Memory
  fullName: Microsoft.Extensions.Caching.Memory
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Caching.Memory.MemoryCache
  commentId: T:Microsoft.Extensions.Caching.Memory.MemoryCache
  isExternal: false
  name: MemoryCache
  nameWithType: MemoryCache
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCache
- uid: Microsoft.Extensions.Caching.Memory.MemoryCache.#ctor*
  commentId: Overload:Microsoft.Extensions.Caching.Memory.MemoryCache.#ctor
  isExternal: false
  name: MemoryCache
  nameWithType: MemoryCache.MemoryCache
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCache.MemoryCache
- uid: IOptions{Microsoft.Extensions.Caching.Memory.MemoryCacheOptions}
  commentId: '!:IOptions{Microsoft.Extensions.Caching.Memory.MemoryCacheOptions}'
  definition: IOptions`1
  name: IOptions<MemoryCacheOptions>
  nameWithType: IOptions<MemoryCacheOptions>
  fullName: IOptions<Microsoft.Extensions.Caching.Memory.MemoryCacheOptions>
  nameWithType.vb: IOptions(Of MemoryCacheOptions)
  fullName.vb: IOptions(Of Microsoft.Extensions.Caching.Memory.MemoryCacheOptions)
  name.vb: IOptions(Of MemoryCacheOptions)
  spec.csharp:
  - uid: IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: IOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.Caching.Memory.MemoryCacheOptions
    name: MemoryCacheOptions
    nameWithType: MemoryCacheOptions
    fullName: Microsoft.Extensions.Caching.Memory.MemoryCacheOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: IOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.Caching.Memory.MemoryCacheOptions
    name: MemoryCacheOptions
    nameWithType: MemoryCacheOptions
    fullName: Microsoft.Extensions.Caching.Memory.MemoryCacheOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: IOptions`1
  isExternal: true
  name: IOptions<>
  nameWithType: IOptions<>
  fullName: IOptions<>
  nameWithType.vb: IOptions(Of )
  fullName.vb: IOptions(Of )
  name.vb: IOptions(Of )
  spec.csharp:
  - uid: IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: IOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: IOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Caching.Memory.MemoryCache.Finalize*
  commentId: Overload:Microsoft.Extensions.Caching.Memory.MemoryCache.Finalize
  isExternal: false
  name: Finalize
  nameWithType: MemoryCache.Finalize
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCache.Finalize
- uid: Microsoft.Extensions.Caching.Memory.MemoryCache.Count*
  commentId: Overload:Microsoft.Extensions.Caching.Memory.MemoryCache.Count
  isExternal: false
  name: Count
  nameWithType: MemoryCache.Count
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCache.Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Extensions.Caching.Memory.MemoryCache.CreateEntry*
  commentId: Overload:Microsoft.Extensions.Caching.Memory.MemoryCache.CreateEntry
  isExternal: false
  name: CreateEntry
  nameWithType: MemoryCache.CreateEntry
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCache.CreateEntry
- uid: ICacheEntry
  commentId: '!:ICacheEntry'
  isExternal: true
  name: ICacheEntry
  nameWithType: ICacheEntry
  fullName: ICacheEntry
- uid: Microsoft.Extensions.Caching.Memory.MemoryCache.TryGetValue*
  commentId: Overload:Microsoft.Extensions.Caching.Memory.MemoryCache.TryGetValue
  isExternal: false
  name: TryGetValue
  nameWithType: MemoryCache.TryGetValue
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCache.TryGetValue
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Extensions.Caching.Memory.MemoryCache.Remove*
  commentId: Overload:Microsoft.Extensions.Caching.Memory.MemoryCache.Remove
  isExternal: false
  name: Remove
  nameWithType: MemoryCache.Remove
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCache.Remove
- uid: Microsoft.Extensions.Caching.Memory.MemoryCache.Compact*
  commentId: Overload:Microsoft.Extensions.Caching.Memory.MemoryCache.Compact
  isExternal: false
  name: Compact
  nameWithType: MemoryCache.Compact
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCache.Compact
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Microsoft.Extensions.Caching.Memory.MemoryCache.Dispose*
  commentId: Overload:Microsoft.Extensions.Caching.Memory.MemoryCache.Dispose
  isExternal: false
  name: Dispose
  nameWithType: MemoryCache.Dispose
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCache.Dispose
shouldSkipMarkup: true
