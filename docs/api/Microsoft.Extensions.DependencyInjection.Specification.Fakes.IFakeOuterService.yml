### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOuterService
  commentId: T:Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOuterService
  id: IFakeOuterService
  parent: Microsoft.Extensions.DependencyInjection.Specification.Fakes
  children:
  - Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOuterService.MultipleServices
  - Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOuterService.SingleService
  langs:
  - csharp
  - vb
  name: IFakeOuterService
  nameWithType: IFakeOuterService
  fullName: Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOuterService
  type: Interface
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/Fakes/IFakeOuterService.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: IFakeOuterService
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/Fakes/IFakeOuterService.cs
    startLine: 7
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification.Fakes
  syntax:
    content: public interface IFakeOuterService
    content.vb: Public Interface IFakeOuterService
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOuterService.SingleService
  commentId: P:Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOuterService.SingleService
  id: SingleService
  parent: Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOuterService
  langs:
  - csharp
  - vb
  name: SingleService
  nameWithType: IFakeOuterService.SingleService
  fullName: Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOuterService.SingleService
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/Fakes/IFakeOuterService.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: SingleService
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/Fakes/IFakeOuterService.cs
    startLine: 9
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification.Fakes
  syntax:
    content: IFakeService SingleService { get; }
    parameters: []
    return:
      type: Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeService
    content.vb: ReadOnly Property SingleService As IFakeService
  overload: Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOuterService.SingleService*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOuterService.MultipleServices
  commentId: P:Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOuterService.MultipleServices
  id: MultipleServices
  parent: Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOuterService
  langs:
  - csharp
  - vb
  name: MultipleServices
  nameWithType: IFakeOuterService.MultipleServices
  fullName: Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOuterService.MultipleServices
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/Fakes/IFakeOuterService.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: MultipleServices
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/Fakes/IFakeOuterService.cs
    startLine: 11
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification.Fakes
  syntax:
    content: IEnumerable<IFakeMultipleService> MultipleServices { get; }
    parameters: []
    return:
      type: IEnumerable{Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeMultipleService}
    content.vb: ReadOnly Property MultipleServices As IEnumerable(Of IFakeMultipleService)
  overload: Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOuterService.MultipleServices*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Microsoft.Extensions.DependencyInjection.Specification.Fakes
  commentId: N:Microsoft.Extensions.DependencyInjection.Specification.Fakes
  isExternal: false
  name: Microsoft.Extensions.DependencyInjection.Specification.Fakes
  nameWithType: Microsoft.Extensions.DependencyInjection.Specification.Fakes
  fullName: Microsoft.Extensions.DependencyInjection.Specification.Fakes
- uid: Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOuterService.SingleService*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOuterService.SingleService
  isExternal: false
  name: SingleService
  nameWithType: IFakeOuterService.SingleService
  fullName: Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOuterService.SingleService
- uid: Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeService
  commentId: T:Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeService
  parent: Microsoft.Extensions.DependencyInjection.Specification.Fakes
  isExternal: false
  name: IFakeService
  nameWithType: IFakeService
  fullName: Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeService
- uid: Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOuterService.MultipleServices*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOuterService.MultipleServices
  isExternal: false
  name: MultipleServices
  nameWithType: IFakeOuterService.MultipleServices
  fullName: Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOuterService.MultipleServices
- uid: IEnumerable{Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeMultipleService}
  commentId: '!:IEnumerable{Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeMultipleService}'
  definition: IEnumerable`1
  name: IEnumerable<IFakeMultipleService>
  nameWithType: IEnumerable<IFakeMultipleService>
  fullName: IEnumerable<Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeMultipleService>
  nameWithType.vb: IEnumerable(Of IFakeMultipleService)
  fullName.vb: IEnumerable(Of Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeMultipleService)
  name.vb: IEnumerable(Of IFakeMultipleService)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeMultipleService
    name: IFakeMultipleService
    nameWithType: IFakeMultipleService
    fullName: Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeMultipleService
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeMultipleService
    name: IFakeMultipleService
    nameWithType: IFakeMultipleService
    fullName: Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeMultipleService
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
