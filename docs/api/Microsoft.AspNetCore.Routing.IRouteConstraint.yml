### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Routing.IRouteConstraint
  commentId: T:Microsoft.AspNetCore.Routing.IRouteConstraint
  id: IRouteConstraint
  parent: Microsoft.AspNetCore.Routing
  children:
  - Microsoft.AspNetCore.Routing.IRouteConstraint.Match(HttpContext,Microsoft.AspNetCore.Routing.IRouter,System.String,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteDirection)
  langs:
  - csharp
  - vb
  name: IRouteConstraint
  nameWithType: IRouteConstraint
  fullName: Microsoft.AspNetCore.Routing.IRouteConstraint
  type: Interface
  source:
    remote:
      path: src/Microsoft.AspNetCore.Routing.Abstractions/IRouteConstraint.cs
      branch: master
      repo: https://github.com/aspnet/Routing.git
    id: IRouteConstraint
    path: ../aspnet/Routing/src/Microsoft.AspNetCore.Routing.Abstractions/IRouteConstraint.cs
    startLine: 11
  assemblies:
  - Microsoft.AspNetCore.Routing.Abstractions
  namespace: Microsoft.AspNetCore.Routing
  summary: "\nDefines the contract that a class must implement in order to check whether a URL parameter\nvalue is valid for a constraint.\n"
  example: []
  syntax:
    content: public interface IRouteConstraint
    content.vb: Public Interface IRouteConstraint
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.AspNetCore.Routing.IRouteConstraint.Match(HttpContext,Microsoft.AspNetCore.Routing.IRouter,System.String,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteDirection)
  commentId: M:Microsoft.AspNetCore.Routing.IRouteConstraint.Match(HttpContext,Microsoft.AspNetCore.Routing.IRouter,System.String,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteDirection)
  id: Match(HttpContext,Microsoft.AspNetCore.Routing.IRouter,System.String,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteDirection)
  parent: Microsoft.AspNetCore.Routing.IRouteConstraint
  langs:
  - csharp
  - vb
  name: Match(HttpContext, IRouter, String, RouteValueDictionary, RouteDirection)
  nameWithType: IRouteConstraint.Match(HttpContext, IRouter, String, RouteValueDictionary, RouteDirection)
  fullName: Microsoft.AspNetCore.Routing.IRouteConstraint.Match(HttpContext, Microsoft.AspNetCore.Routing.IRouter, System.String, Microsoft.AspNetCore.Routing.RouteValueDictionary, Microsoft.AspNetCore.Routing.RouteDirection)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Routing.Abstractions/IRouteConstraint.cs
      branch: master
      repo: https://github.com/aspnet/Routing.git
    id: Match
    path: ../aspnet/Routing/src/Microsoft.AspNetCore.Routing.Abstractions/IRouteConstraint.cs
    startLine: 25
  assemblies:
  - Microsoft.AspNetCore.Routing.Abstractions
  namespace: Microsoft.AspNetCore.Routing
  summary: "\nDetermines whether the URL parameter contains a valid value for this constraint.\n"
  example: []
  syntax:
    content: bool Match(HttpContext httpContext, IRouter route, string routeKey, RouteValueDictionary values, RouteDirection routeDirection)
    parameters:
    - id: httpContext
      type: HttpContext
      description: An object that encapsulates information about the HTTP request.
    - id: route
      type: Microsoft.AspNetCore.Routing.IRouter
      description: The router that this constraint belongs to.
    - id: routeKey
      type: System.String
      description: The name of the parameter that is being checked.
    - id: values
      type: Microsoft.AspNetCore.Routing.RouteValueDictionary
      description: A dictionary that contains the parameters for the URL.
    - id: routeDirection
      type: Microsoft.AspNetCore.Routing.RouteDirection
      description: "\nAn object that indicates whether the constraint check is being performed\nwhen an incoming request is being handled or when a URL is being generated.\n"
    return:
      type: System.Boolean
      description: <code>true</code> if the URL parameter contains a valid value; otherwise, <code>false</code>.
    content.vb: Function Match(httpContext As HttpContext, route As IRouter, routeKey As String, values As RouteValueDictionary, routeDirection As RouteDirection) As Boolean
  overload: Microsoft.AspNetCore.Routing.IRouteConstraint.Match*
references:
- uid: Microsoft.AspNetCore.Routing
  commentId: N:Microsoft.AspNetCore.Routing
  isExternal: false
  name: Microsoft.AspNetCore.Routing
  nameWithType: Microsoft.AspNetCore.Routing
  fullName: Microsoft.AspNetCore.Routing
- uid: Microsoft.AspNetCore.Routing.IRouteConstraint.Match*
  commentId: Overload:Microsoft.AspNetCore.Routing.IRouteConstraint.Match
  isExternal: false
  name: Match
  nameWithType: IRouteConstraint.Match
  fullName: Microsoft.AspNetCore.Routing.IRouteConstraint.Match
- uid: HttpContext
  isExternal: true
  name: HttpContext
  nameWithType: HttpContext
  fullName: HttpContext
- uid: Microsoft.AspNetCore.Routing.IRouter
  commentId: T:Microsoft.AspNetCore.Routing.IRouter
  parent: Microsoft.AspNetCore.Routing
  isExternal: false
  name: IRouter
  nameWithType: IRouter
  fullName: Microsoft.AspNetCore.Routing.IRouter
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.AspNetCore.Routing.RouteValueDictionary
  commentId: T:Microsoft.AspNetCore.Routing.RouteValueDictionary
  parent: Microsoft.AspNetCore.Routing
  isExternal: false
  name: RouteValueDictionary
  nameWithType: RouteValueDictionary
  fullName: Microsoft.AspNetCore.Routing.RouteValueDictionary
- uid: Microsoft.AspNetCore.Routing.RouteDirection
  commentId: T:Microsoft.AspNetCore.Routing.RouteDirection
  parent: Microsoft.AspNetCore.Routing
  isExternal: false
  name: RouteDirection
  nameWithType: RouteDirection
  fullName: Microsoft.AspNetCore.Routing.RouteDirection
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
shouldSkipMarkup: true
