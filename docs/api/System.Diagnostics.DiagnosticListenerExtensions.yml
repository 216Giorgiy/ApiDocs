### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.DiagnosticListenerExtensions
  commentId: T:System.Diagnostics.DiagnosticListenerExtensions
  id: DiagnosticListenerExtensions
  parent: System.Diagnostics
  children:
  - System.Diagnostics.DiagnosticListenerExtensions.SubscribeWithAdapter(DiagnosticListener,System.Object)
  - System.Diagnostics.DiagnosticListenerExtensions.SubscribeWithAdapter(DiagnosticListener,System.Object,Func{System.String,System.Boolean})
  langs:
  - csharp
  - vb
  name: DiagnosticListenerExtensions
  nameWithType: DiagnosticListenerExtensions
  fullName: System.Diagnostics.DiagnosticListenerExtensions
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/DiagnosticListenerExtensions.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: DiagnosticListenerExtensions
    path: ../aspnet/EventNotification/src/Microsoft.Extensions.DiagnosticAdapter/DiagnosticListenerExtensions.cs
    startLine: 7
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: System.Diagnostics
  syntax:
    content: 'public static class DiagnosticListenerExtensions : object'
    content.vb: >-
      Public Module DiagnosticListenerExtensions
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: System.Diagnostics.DiagnosticListenerExtensions.SubscribeWithAdapter(DiagnosticListener,System.Object)
  commentId: M:System.Diagnostics.DiagnosticListenerExtensions.SubscribeWithAdapter(DiagnosticListener,System.Object)
  id: SubscribeWithAdapter(DiagnosticListener,System.Object)
  isExtensionMethod: true
  parent: System.Diagnostics.DiagnosticListenerExtensions
  langs:
  - csharp
  - vb
  name: SubscribeWithAdapter(DiagnosticListener, Object)
  nameWithType: DiagnosticListenerExtensions.SubscribeWithAdapter(DiagnosticListener, Object)
  fullName: System.Diagnostics.DiagnosticListenerExtensions.SubscribeWithAdapter(DiagnosticListener, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/DiagnosticListenerExtensions.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: SubscribeWithAdapter
    path: ../aspnet/EventNotification/src/Microsoft.Extensions.DiagnosticAdapter/DiagnosticListenerExtensions.cs
    startLine: 9
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: System.Diagnostics
  syntax:
    content: public static IDisposable SubscribeWithAdapter(this DiagnosticListener diagnostic, object target)
    parameters:
    - id: diagnostic
      type: DiagnosticListener
    - id: target
      type: System.Object
    return:
      type: IDisposable
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SubscribeWithAdapter(diagnostic As DiagnosticListener, target As Object) As IDisposable
  overload: System.Diagnostics.DiagnosticListenerExtensions.SubscribeWithAdapter*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.DiagnosticListenerExtensions.SubscribeWithAdapter(DiagnosticListener,System.Object,Func{System.String,System.Boolean})
  commentId: M:System.Diagnostics.DiagnosticListenerExtensions.SubscribeWithAdapter(DiagnosticListener,System.Object,Func{System.String,System.Boolean})
  id: SubscribeWithAdapter(DiagnosticListener,System.Object,Func{System.String,System.Boolean})
  isExtensionMethod: true
  parent: System.Diagnostics.DiagnosticListenerExtensions
  langs:
  - csharp
  - vb
  name: SubscribeWithAdapter(DiagnosticListener, Object, Func<String, Boolean>)
  nameWithType: DiagnosticListenerExtensions.SubscribeWithAdapter(DiagnosticListener, Object, Func<String, Boolean>)
  fullName: System.Diagnostics.DiagnosticListenerExtensions.SubscribeWithAdapter(DiagnosticListener, System.Object, Func<System.String, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/DiagnosticListenerExtensions.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: SubscribeWithAdapter
    path: ../aspnet/EventNotification/src/Microsoft.Extensions.DiagnosticAdapter/DiagnosticListenerExtensions.cs
    startLine: 15
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: System.Diagnostics
  syntax:
    content: public static IDisposable SubscribeWithAdapter(this DiagnosticListener diagnostic, object target, Func<string, bool> isEnabled)
    parameters:
    - id: diagnostic
      type: DiagnosticListener
    - id: target
      type: System.Object
    - id: isEnabled
      type: Func{System.String,System.Boolean}
    return:
      type: IDisposable
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SubscribeWithAdapter(diagnostic As DiagnosticListener, target As Object, isEnabled As Func(Of String, Boolean)) As IDisposable
  overload: System.Diagnostics.DiagnosticListenerExtensions.SubscribeWithAdapter*
  nameWithType.vb: DiagnosticListenerExtensions.SubscribeWithAdapter(DiagnosticListener, Object, Func(Of String, Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Diagnostics.DiagnosticListenerExtensions.SubscribeWithAdapter(DiagnosticListener, System.Object, Func(Of System.String, System.Boolean))
  name.vb: SubscribeWithAdapter(DiagnosticListener, Object, Func(Of String, Boolean))
references:
- uid: System.Diagnostics
  commentId: N:System.Diagnostics
  isExternal: false
  name: System.Diagnostics
  nameWithType: System.Diagnostics
  fullName: System.Diagnostics
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Diagnostics.DiagnosticListenerExtensions.SubscribeWithAdapter*
  commentId: Overload:System.Diagnostics.DiagnosticListenerExtensions.SubscribeWithAdapter
  isExternal: false
  name: SubscribeWithAdapter
  nameWithType: DiagnosticListenerExtensions.SubscribeWithAdapter
  fullName: System.Diagnostics.DiagnosticListenerExtensions.SubscribeWithAdapter
- uid: DiagnosticListener
  isExternal: true
  name: DiagnosticListener
  nameWithType: DiagnosticListener
  fullName: DiagnosticListener
- uid: IDisposable
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: IDisposable
- uid: Func{System.String,System.Boolean}
  commentId: '!:Func{System.String,System.Boolean}'
  definition: Func`2
  name: Func<String, Boolean>
  nameWithType: Func<String, Boolean>
  fullName: Func<System.String, System.Boolean>
  nameWithType.vb: Func(Of String, Boolean)
  fullName.vb: Func(Of System.String, System.Boolean)
  name.vb: Func(Of String, Boolean)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
