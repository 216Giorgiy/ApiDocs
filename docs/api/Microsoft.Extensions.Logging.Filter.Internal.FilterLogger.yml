### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Logging.Filter.Internal.FilterLogger
  commentId: T:Microsoft.Extensions.Logging.Filter.Internal.FilterLogger
  id: FilterLogger
  parent: Microsoft.Extensions.Logging.Filter.Internal
  children:
  - Microsoft.Extensions.Logging.Filter.Internal.FilterLogger.#ctor(ILogger,System.String,Microsoft.Extensions.Logging.IFilterLoggerSettings)
  - Microsoft.Extensions.Logging.Filter.Internal.FilterLogger.BeginScope``1(``0)
  - Microsoft.Extensions.Logging.Filter.Internal.FilterLogger.IsEnabled(LogLevel)
  - Microsoft.Extensions.Logging.Filter.Internal.FilterLogger.Log``1(LogLevel,EventId,``0,Exception,Func{``0,Exception,System.String})
  langs:
  - csharp
  - vb
  name: FilterLogger
  nameWithType: FilterLogger
  fullName: Microsoft.Extensions.Logging.Filter.Internal.FilterLogger
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Filter/Internal/FilterLogger.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: FilterLogger
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Filter/Internal/FilterLogger.cs
    startLine: 8
  assemblies:
  - Microsoft.Extensions.Logging.Filter
  namespace: Microsoft.Extensions.Logging.Filter.Internal
  syntax:
    content: 'public class FilterLogger : ILogger'
    content.vb: >-
      Public Class FilterLogger
          Inherits ILogger
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.Logging.Filter.Internal.FilterLogger.#ctor(ILogger,System.String,Microsoft.Extensions.Logging.IFilterLoggerSettings)
  commentId: M:Microsoft.Extensions.Logging.Filter.Internal.FilterLogger.#ctor(ILogger,System.String,Microsoft.Extensions.Logging.IFilterLoggerSettings)
  id: '#ctor(ILogger,System.String,Microsoft.Extensions.Logging.IFilterLoggerSettings)'
  parent: Microsoft.Extensions.Logging.Filter.Internal.FilterLogger
  langs:
  - csharp
  - vb
  name: FilterLogger(ILogger, String, IFilterLoggerSettings)
  nameWithType: FilterLogger.FilterLogger(ILogger, String, IFilterLoggerSettings)
  fullName: Microsoft.Extensions.Logging.Filter.Internal.FilterLogger.FilterLogger(ILogger, System.String, Microsoft.Extensions.Logging.IFilterLoggerSettings)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Filter/Internal/FilterLogger.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: .ctor
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Filter/Internal/FilterLogger.cs
    startLine: 15
  assemblies:
  - Microsoft.Extensions.Logging.Filter
  namespace: Microsoft.Extensions.Logging.Filter.Internal
  syntax:
    content: public FilterLogger(ILogger innerLogger, string categoryName, IFilterLoggerSettings settings)
    parameters:
    - id: innerLogger
      type: ILogger
    - id: categoryName
      type: System.String
    - id: settings
      type: Microsoft.Extensions.Logging.IFilterLoggerSettings
    content.vb: Public Sub New(innerLogger As ILogger, categoryName As String, settings As IFilterLoggerSettings)
  overload: Microsoft.Extensions.Logging.Filter.Internal.FilterLogger.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Logging.Filter.Internal.FilterLogger.IsEnabled(LogLevel)
  commentId: M:Microsoft.Extensions.Logging.Filter.Internal.FilterLogger.IsEnabled(LogLevel)
  id: IsEnabled(LogLevel)
  parent: Microsoft.Extensions.Logging.Filter.Internal.FilterLogger
  langs:
  - csharp
  - vb
  name: IsEnabled(LogLevel)
  nameWithType: FilterLogger.IsEnabled(LogLevel)
  fullName: Microsoft.Extensions.Logging.Filter.Internal.FilterLogger.IsEnabled(LogLevel)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Filter/Internal/FilterLogger.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: IsEnabled
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Filter/Internal/FilterLogger.cs
    startLine: 24
  assemblies:
  - Microsoft.Extensions.Logging.Filter
  namespace: Microsoft.Extensions.Logging.Filter.Internal
  syntax:
    content: public bool IsEnabled(LogLevel logLevel)
    parameters:
    - id: logLevel
      type: LogLevel
    return:
      type: System.Boolean
    content.vb: Public Function IsEnabled(logLevel As LogLevel) As Boolean
  overload: Microsoft.Extensions.Logging.Filter.Internal.FilterLogger.IsEnabled*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Logging.Filter.Internal.FilterLogger.Log``1(LogLevel,EventId,``0,Exception,Func{``0,Exception,System.String})
  commentId: M:Microsoft.Extensions.Logging.Filter.Internal.FilterLogger.Log``1(LogLevel,EventId,``0,Exception,Func{``0,Exception,System.String})
  id: Log``1(LogLevel,EventId,``0,Exception,Func{``0,Exception,System.String})
  parent: Microsoft.Extensions.Logging.Filter.Internal.FilterLogger
  langs:
  - csharp
  - vb
  name: Log<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, String>)
  nameWithType: FilterLogger.Log<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, String>)
  fullName: Microsoft.Extensions.Logging.Filter.Internal.FilterLogger.Log<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, System.String>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Filter/Internal/FilterLogger.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: Log
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Filter/Internal/FilterLogger.cs
    startLine: 29
  assemblies:
  - Microsoft.Extensions.Logging.Filter
  namespace: Microsoft.Extensions.Logging.Filter.Internal
  syntax:
    content: public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter)
    parameters:
    - id: logLevel
      type: LogLevel
    - id: eventId
      type: EventId
    - id: state
      type: '{TState}'
    - id: exception
      type: Exception
    - id: formatter
      type: Func{{TState},Exception,System.String}
    typeParameters:
    - id: TState
    content.vb: Public Sub Log(Of TState)(logLevel As LogLevel, eventId As EventId, state As TState, exception As Exception, formatter As Func(Of TState, Exception, String))
  overload: Microsoft.Extensions.Logging.Filter.Internal.FilterLogger.Log*
  nameWithType.vb: FilterLogger.Log(Of TState)(LogLevel, EventId, TState, Exception, Func(Of TState, Exception, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.Logging.Filter.Internal.FilterLogger.Log(Of TState)(LogLevel, EventId, TState, Exception, Func(Of TState, Exception, System.String))
  name.vb: Log(Of TState)(LogLevel, EventId, TState, Exception, Func(Of TState, Exception, String))
- uid: Microsoft.Extensions.Logging.Filter.Internal.FilterLogger.BeginScope``1(``0)
  commentId: M:Microsoft.Extensions.Logging.Filter.Internal.FilterLogger.BeginScope``1(``0)
  id: BeginScope``1(``0)
  parent: Microsoft.Extensions.Logging.Filter.Internal.FilterLogger
  langs:
  - csharp
  - vb
  name: BeginScope<TState>(TState)
  nameWithType: FilterLogger.BeginScope<TState>(TState)
  fullName: Microsoft.Extensions.Logging.Filter.Internal.FilterLogger.BeginScope<TState>(TState)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Filter/Internal/FilterLogger.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: BeginScope
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Filter/Internal/FilterLogger.cs
    startLine: 42
  assemblies:
  - Microsoft.Extensions.Logging.Filter
  namespace: Microsoft.Extensions.Logging.Filter.Internal
  syntax:
    content: public IDisposable BeginScope<TState>(TState state)
    parameters:
    - id: state
      type: '{TState}'
    typeParameters:
    - id: TState
    return:
      type: IDisposable
    content.vb: Public Function BeginScope(Of TState)(state As TState) As IDisposable
  overload: Microsoft.Extensions.Logging.Filter.Internal.FilterLogger.BeginScope*
  nameWithType.vb: FilterLogger.BeginScope(Of TState)(TState)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.Logging.Filter.Internal.FilterLogger.BeginScope(Of TState)(TState)
  name.vb: BeginScope(Of TState)(TState)
references:
- uid: Microsoft.Extensions.Logging.Filter.Internal
  commentId: N:Microsoft.Extensions.Logging.Filter.Internal
  isExternal: false
  name: Microsoft.Extensions.Logging.Filter.Internal
  nameWithType: Microsoft.Extensions.Logging.Filter.Internal
  fullName: Microsoft.Extensions.Logging.Filter.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Logging.Filter.Internal.FilterLogger.#ctor*
  commentId: Overload:Microsoft.Extensions.Logging.Filter.Internal.FilterLogger.#ctor
  isExternal: false
  name: FilterLogger
  nameWithType: FilterLogger.FilterLogger
  fullName: Microsoft.Extensions.Logging.Filter.Internal.FilterLogger.FilterLogger
- uid: ILogger
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: ILogger
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Extensions.Logging.IFilterLoggerSettings
  commentId: T:Microsoft.Extensions.Logging.IFilterLoggerSettings
  parent: Microsoft.Extensions.Logging
  isExternal: false
  name: IFilterLoggerSettings
  nameWithType: IFilterLoggerSettings
  fullName: Microsoft.Extensions.Logging.IFilterLoggerSettings
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: false
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: Microsoft.Extensions.Logging.Filter.Internal.FilterLogger.IsEnabled*
  commentId: Overload:Microsoft.Extensions.Logging.Filter.Internal.FilterLogger.IsEnabled
  isExternal: false
  name: IsEnabled
  nameWithType: FilterLogger.IsEnabled
  fullName: Microsoft.Extensions.Logging.Filter.Internal.FilterLogger.IsEnabled
- uid: LogLevel
  commentId: M:LogLevel
  isExternal: true
  name: LogLevel
  nameWithType: LogLevel
  fullName: LogLevel
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Extensions.Logging.Filter.Internal.FilterLogger.Log*
  commentId: Overload:Microsoft.Extensions.Logging.Filter.Internal.FilterLogger.Log
  isExternal: false
  name: Log
  nameWithType: FilterLogger.Log
  fullName: Microsoft.Extensions.Logging.Filter.Internal.FilterLogger.Log
- uid: EventId
  isExternal: true
  name: EventId
  nameWithType: EventId
  fullName: EventId
- uid: '{TState}'
  commentId: '!:TState'
  definition: TState
  name: TState
  nameWithType: TState
  fullName: TState
- uid: Exception
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: Exception
- uid: Func{{TState},Exception,System.String}
  commentId: '!:Func{``0,Exception,System.String}'
  definition: Func`3
  name: Func<TState, Exception, String>
  nameWithType: Func<TState, Exception, String>
  fullName: Func<TState, Exception, System.String>
  nameWithType.vb: Func(Of TState, Exception, String)
  fullName.vb: Func(Of TState, Exception, System.String)
  name.vb: Func(Of TState, Exception, String)
  spec.csharp:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TState
  isExternal: false
  name: TState
  nameWithType: TState
  fullName: TState
- uid: Func`3
  isExternal: true
  name: Func<, , >
  nameWithType: Func<, , >
  fullName: Func<, , >
  nameWithType.vb: Func(Of , , )
  fullName.vb: Func(Of , , )
  name.vb: Func(Of , , )
  spec.csharp:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.Filter.Internal.FilterLogger.BeginScope*
  commentId: Overload:Microsoft.Extensions.Logging.Filter.Internal.FilterLogger.BeginScope
  isExternal: false
  name: BeginScope
  nameWithType: FilterLogger.BeginScope
  fullName: Microsoft.Extensions.Logging.Filter.Internal.FilterLogger.BeginScope
- uid: IDisposable
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: IDisposable
shouldSkipMarkup: true
