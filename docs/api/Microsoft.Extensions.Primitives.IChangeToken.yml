### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Primitives.IChangeToken
  commentId: T:Microsoft.Extensions.Primitives.IChangeToken
  id: IChangeToken
  parent: Microsoft.Extensions.Primitives
  children:
  - Microsoft.Extensions.Primitives.IChangeToken.ActiveChangeCallbacks
  - Microsoft.Extensions.Primitives.IChangeToken.HasChanged
  - Microsoft.Extensions.Primitives.IChangeToken.RegisterChangeCallback(Action{System.Object},System.Object)
  langs:
  - csharp
  - vb
  name: IChangeToken
  nameWithType: IChangeToken
  fullName: Microsoft.Extensions.Primitives.IChangeToken
  type: Interface
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/IChangeToken.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: IChangeToken
    path: ../aspnet/Common/src/Microsoft.Extensions.Primitives/IChangeToken.cs
    startLine: 10
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nPropagates notifications that a change has occured.\n"
  example: []
  syntax:
    content: public interface IChangeToken
    content.vb: Public Interface IChangeToken
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.Extensions.Primitives.IChangeToken.HasChanged
  commentId: P:Microsoft.Extensions.Primitives.IChangeToken.HasChanged
  id: HasChanged
  parent: Microsoft.Extensions.Primitives.IChangeToken
  langs:
  - csharp
  - vb
  name: HasChanged
  nameWithType: IChangeToken.HasChanged
  fullName: Microsoft.Extensions.Primitives.IChangeToken.HasChanged
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/IChangeToken.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: HasChanged
    path: ../aspnet/Common/src/Microsoft.Extensions.Primitives/IChangeToken.cs
    startLine: 15
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nGets a value that indicates if a change has occured.\n"
  example: []
  syntax:
    content: bool HasChanged { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property HasChanged As Boolean
  overload: Microsoft.Extensions.Primitives.IChangeToken.HasChanged*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.Extensions.Primitives.IChangeToken.ActiveChangeCallbacks
  commentId: P:Microsoft.Extensions.Primitives.IChangeToken.ActiveChangeCallbacks
  id: ActiveChangeCallbacks
  parent: Microsoft.Extensions.Primitives.IChangeToken
  langs:
  - csharp
  - vb
  name: ActiveChangeCallbacks
  nameWithType: IChangeToken.ActiveChangeCallbacks
  fullName: Microsoft.Extensions.Primitives.IChangeToken.ActiveChangeCallbacks
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/IChangeToken.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: ActiveChangeCallbacks
    path: ../aspnet/Common/src/Microsoft.Extensions.Primitives/IChangeToken.cs
    startLine: 20
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nIndicates if this token will pro-actively raise callbacks. Callbacks are still guaranteed to fire, eventually.\n"
  example: []
  syntax:
    content: bool ActiveChangeCallbacks { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property ActiveChangeCallbacks As Boolean
  overload: Microsoft.Extensions.Primitives.IChangeToken.ActiveChangeCallbacks*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.Extensions.Primitives.IChangeToken.RegisterChangeCallback(Action{System.Object},System.Object)
  commentId: M:Microsoft.Extensions.Primitives.IChangeToken.RegisterChangeCallback(Action{System.Object},System.Object)
  id: RegisterChangeCallback(Action{System.Object},System.Object)
  parent: Microsoft.Extensions.Primitives.IChangeToken
  langs:
  - csharp
  - vb
  name: RegisterChangeCallback(Action<Object>, Object)
  nameWithType: IChangeToken.RegisterChangeCallback(Action<Object>, Object)
  fullName: Microsoft.Extensions.Primitives.IChangeToken.RegisterChangeCallback(Action<System.Object>, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/IChangeToken.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: RegisterChangeCallback
    path: ../aspnet/Common/src/Microsoft.Extensions.Primitives/IChangeToken.cs
    startLine: 29
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nRegisters for a callback that will be invoked when the entry has changed.\n<xref href=\"Microsoft.Extensions.Primitives.IChangeToken.HasChanged\" data-throw-if-not-resolved=\"false\"></xref> MUST be set before the callback is invoked.\n"
  example: []
  syntax:
    content: IDisposable RegisterChangeCallback(Action<object> callback, object state)
    parameters:
    - id: callback
      type: Action{System.Object}
      description: The <see cref="!:Action&lt;Object>"></see> to invoke.
    - id: state
      type: System.Object
      description: State to be passed into the callback.
    return:
      type: IDisposable
      description: An <see cref="!:IDisposable"></see> that is used to unregister the callback.
    content.vb: Function RegisterChangeCallback(callback As Action(Of Object), state As Object) As IDisposable
  overload: Microsoft.Extensions.Primitives.IChangeToken.RegisterChangeCallback*
  nameWithType.vb: IChangeToken.RegisterChangeCallback(Action(Of Object), Object)
  fullName.vb: Microsoft.Extensions.Primitives.IChangeToken.RegisterChangeCallback(Action(Of System.Object), System.Object)
  name.vb: RegisterChangeCallback(Action(Of Object), Object)
references:
- uid: Microsoft.Extensions.Primitives
  commentId: N:Microsoft.Extensions.Primitives
  isExternal: false
  name: Microsoft.Extensions.Primitives
  nameWithType: Microsoft.Extensions.Primitives
  fullName: Microsoft.Extensions.Primitives
- uid: Microsoft.Extensions.Primitives.IChangeToken.HasChanged*
  commentId: Overload:Microsoft.Extensions.Primitives.IChangeToken.HasChanged
  isExternal: false
  name: HasChanged
  nameWithType: IChangeToken.HasChanged
  fullName: Microsoft.Extensions.Primitives.IChangeToken.HasChanged
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Primitives.IChangeToken.ActiveChangeCallbacks*
  commentId: Overload:Microsoft.Extensions.Primitives.IChangeToken.ActiveChangeCallbacks
  isExternal: false
  name: ActiveChangeCallbacks
  nameWithType: IChangeToken.ActiveChangeCallbacks
  fullName: Microsoft.Extensions.Primitives.IChangeToken.ActiveChangeCallbacks
- uid: Microsoft.Extensions.Primitives.IChangeToken.HasChanged
  commentId: P:Microsoft.Extensions.Primitives.IChangeToken.HasChanged
  parent: Microsoft.Extensions.Primitives.IChangeToken
  isExternal: false
  name: HasChanged
  nameWithType: IChangeToken.HasChanged
  fullName: Microsoft.Extensions.Primitives.IChangeToken.HasChanged
- uid: Microsoft.Extensions.Primitives.IChangeToken.RegisterChangeCallback*
  commentId: Overload:Microsoft.Extensions.Primitives.IChangeToken.RegisterChangeCallback
  isExternal: false
  name: RegisterChangeCallback
  nameWithType: IChangeToken.RegisterChangeCallback
  fullName: Microsoft.Extensions.Primitives.IChangeToken.RegisterChangeCallback
- uid: Action{System.Object}
  commentId: '!:Action{System.Object}'
  definition: Action`1
  name: Action<Object>
  nameWithType: Action<Object>
  fullName: Action<System.Object>
  nameWithType.vb: Action(Of Object)
  fullName.vb: Action(Of System.Object)
  name.vb: Action(Of Object)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: IDisposable
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: IDisposable
- uid: Microsoft.Extensions.Primitives.IChangeToken
  commentId: T:Microsoft.Extensions.Primitives.IChangeToken
  parent: Microsoft.Extensions.Primitives
  isExternal: false
  name: IChangeToken
  nameWithType: IChangeToken
  fullName: Microsoft.Extensions.Primitives.IChangeToken
- uid: Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
