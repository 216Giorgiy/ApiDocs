### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Logging.Debug.DebugLoggerProvider
  commentId: T:Microsoft.Extensions.Logging.Debug.DebugLoggerProvider
  id: DebugLoggerProvider
  parent: Microsoft.Extensions.Logging.Debug
  children:
  - Microsoft.Extensions.Logging.Debug.DebugLoggerProvider.#ctor(System.Func{System.String,System.LogLevel,System.Boolean})
  - Microsoft.Extensions.Logging.Debug.DebugLoggerProvider.CreateLogger(System.String)
  - Microsoft.Extensions.Logging.Debug.DebugLoggerProvider.Dispose
  langs:
  - csharp
  - vb
  name: DebugLoggerProvider
  nameWithType: DebugLoggerProvider
  fullName: Microsoft.Extensions.Logging.Debug.DebugLoggerProvider
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Debug/DebugLoggerProvider.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: DebugLoggerProvider
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Debug/DebugLoggerProvider.cs
    startLine: 10
  assemblies:
  - Microsoft.Extensions.Logging.Debug
  namespace: Microsoft.Extensions.Logging.Debug
  summary: "\nThe provider for the <xref href=\"Microsoft.Extensions.Logging.Debug.DebugLogger\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public class DebugLoggerProvider : ILoggerProvider'
    content.vb: >-
      Public Class DebugLoggerProvider
          Inherits ILoggerProvider
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.Logging.Debug.DebugLoggerProvider.#ctor(System.Func{System.String,System.LogLevel,System.Boolean})
  commentId: M:Microsoft.Extensions.Logging.Debug.DebugLoggerProvider.#ctor(System.Func{System.String,System.LogLevel,System.Boolean})
  id: '#ctor(System.Func{System.String,System.LogLevel,System.Boolean})'
  parent: Microsoft.Extensions.Logging.Debug.DebugLoggerProvider
  langs:
  - csharp
  - vb
  name: DebugLoggerProvider(Func<String, LogLevel, Boolean>)
  nameWithType: DebugLoggerProvider.DebugLoggerProvider(Func<String, LogLevel, Boolean>)
  fullName: Microsoft.Extensions.Logging.Debug.DebugLoggerProvider.DebugLoggerProvider(System.Func<System.String, System.LogLevel, System.Boolean>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Debug/DebugLoggerProvider.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: .ctor
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Debug/DebugLoggerProvider.cs
    startLine: 18
  assemblies:
  - Microsoft.Extensions.Logging.Debug
  namespace: Microsoft.Extensions.Logging.Debug
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.Extensions.Logging.Debug.DebugLoggerProvider\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public DebugLoggerProvider(Func<string, LogLevel, bool> filter)
    parameters:
    - id: filter
      type: System.Func{System.String,System.LogLevel,System.Boolean}
      description: The function used to filter events based on the log level.
    content.vb: Public Sub New(filter As Func(Of String, LogLevel, Boolean))
  overload: Microsoft.Extensions.Logging.Debug.DebugLoggerProvider.#ctor*
  nameWithType.vb: DebugLoggerProvider.DebugLoggerProvider(Func(Of String, LogLevel, Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.Logging.Debug.DebugLoggerProvider.DebugLoggerProvider(System.Func(Of System.String, System.LogLevel, System.Boolean))
  name.vb: DebugLoggerProvider(Func(Of String, LogLevel, Boolean))
- uid: Microsoft.Extensions.Logging.Debug.DebugLoggerProvider.CreateLogger(System.String)
  commentId: M:Microsoft.Extensions.Logging.Debug.DebugLoggerProvider.CreateLogger(System.String)
  id: CreateLogger(System.String)
  parent: Microsoft.Extensions.Logging.Debug.DebugLoggerProvider
  langs:
  - csharp
  - vb
  name: CreateLogger(String)
  nameWithType: DebugLoggerProvider.CreateLogger(String)
  fullName: Microsoft.Extensions.Logging.Debug.DebugLoggerProvider.CreateLogger(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Debug/DebugLoggerProvider.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: CreateLogger
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Debug/DebugLoggerProvider.cs
    startLine: 24
  assemblies:
  - Microsoft.Extensions.Logging.Debug
  namespace: Microsoft.Extensions.Logging.Debug
  example: []
  syntax:
    content: public ILogger CreateLogger(string name)
    parameters:
    - id: name
      type: System.String
    return:
      type: ILogger
    content.vb: Public Function CreateLogger(name As String) As ILogger
  overload: Microsoft.Extensions.Logging.Debug.DebugLoggerProvider.CreateLogger*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Logging.Debug.DebugLoggerProvider.Dispose
  commentId: M:Microsoft.Extensions.Logging.Debug.DebugLoggerProvider.Dispose
  id: Dispose
  parent: Microsoft.Extensions.Logging.Debug.DebugLoggerProvider
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: DebugLoggerProvider.Dispose()
  fullName: Microsoft.Extensions.Logging.Debug.DebugLoggerProvider.Dispose()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Debug/DebugLoggerProvider.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: Dispose
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Debug/DebugLoggerProvider.cs
    startLine: 29
  assemblies:
  - Microsoft.Extensions.Logging.Debug
  namespace: Microsoft.Extensions.Logging.Debug
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Microsoft.Extensions.Logging.Debug.DebugLoggerProvider.Dispose*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Extensions.Logging.Debug.DebugLogger
  commentId: T:Microsoft.Extensions.Logging.Debug.DebugLogger
  isExternal: false
  name: DebugLogger
  nameWithType: DebugLogger
  fullName: Microsoft.Extensions.Logging.Debug.DebugLogger
- uid: Microsoft.Extensions.Logging.Debug
  commentId: N:Microsoft.Extensions.Logging.Debug
  isExternal: false
  name: Microsoft.Extensions.Logging.Debug
  nameWithType: Microsoft.Extensions.Logging.Debug
  fullName: Microsoft.Extensions.Logging.Debug
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Logging.Debug.DebugLoggerProvider
  commentId: T:Microsoft.Extensions.Logging.Debug.DebugLoggerProvider
  isExternal: false
  name: DebugLoggerProvider
  nameWithType: DebugLoggerProvider
  fullName: Microsoft.Extensions.Logging.Debug.DebugLoggerProvider
- uid: Microsoft.Extensions.Logging.Debug.DebugLoggerProvider.#ctor*
  commentId: Overload:Microsoft.Extensions.Logging.Debug.DebugLoggerProvider.#ctor
  isExternal: false
  name: DebugLoggerProvider
  nameWithType: DebugLoggerProvider.DebugLoggerProvider
  fullName: Microsoft.Extensions.Logging.Debug.DebugLoggerProvider.DebugLoggerProvider
- uid: System.Func{System.String,System.LogLevel,System.Boolean}
  commentId: T:System.Func{System.String,System.LogLevel,System.Boolean}
  parent: System
  definition: System.Func`3
  name: Func<String, LogLevel, Boolean>
  nameWithType: Func<String, LogLevel, Boolean>
  fullName: System.Func<System.String, System.LogLevel, System.Boolean>
  nameWithType.vb: Func(Of String, LogLevel, Boolean)
  fullName.vb: System.Func(Of System.String, System.LogLevel, System.Boolean)
  name.vb: Func(Of String, LogLevel, Boolean)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.LogLevel
    name: LogLevel
    nameWithType: LogLevel
    fullName: System.LogLevel
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.LogLevel
    name: LogLevel
    nameWithType: LogLevel
    fullName: System.LogLevel
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.Debug.DebugLoggerProvider.CreateLogger*
  commentId: Overload:Microsoft.Extensions.Logging.Debug.DebugLoggerProvider.CreateLogger
  isExternal: false
  name: CreateLogger
  nameWithType: DebugLoggerProvider.CreateLogger
  fullName: Microsoft.Extensions.Logging.Debug.DebugLoggerProvider.CreateLogger
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: ILogger
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: ILogger
- uid: Microsoft.Extensions.Logging.Debug.DebugLoggerProvider.Dispose*
  commentId: Overload:Microsoft.Extensions.Logging.Debug.DebugLoggerProvider.Dispose
  isExternal: false
  name: Dispose
  nameWithType: DebugLoggerProvider.Dispose
  fullName: Microsoft.Extensions.Logging.Debug.DebugLoggerProvider.Dispose
shouldSkipMarkup: true
