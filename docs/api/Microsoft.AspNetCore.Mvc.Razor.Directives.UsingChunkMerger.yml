### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Mvc.Razor.Directives.UsingChunkMerger
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.Directives.UsingChunkMerger
  id: UsingChunkMerger
  parent: Microsoft.AspNetCore.Mvc.Razor.Directives
  children:
  - Microsoft.AspNetCore.Mvc.Razor.Directives.UsingChunkMerger.MergeInheritedChunks(ChunkTree,System.Collections.Generic.IReadOnlyList{Chunk})
  - Microsoft.AspNetCore.Mvc.Razor.Directives.UsingChunkMerger.VisitChunk(Chunk)
  langs:
  - csharp
  - vb
  name: UsingChunkMerger
  nameWithType: UsingChunkMerger
  fullName: Microsoft.AspNetCore.Mvc.Razor.Directives.UsingChunkMerger
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor.Host/Directives/UsingChunkMerger.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: UsingChunkMerger
    path: ../aspnet/Mvc/src/Microsoft.AspNetCore.Mvc.Razor.Host/Directives/UsingChunkMerger.cs
    startLine: 13
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor.Host
  namespace: Microsoft.AspNetCore.Mvc.Razor.Directives
  summary: "\nA <xref href=\"Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger\" data-throw-if-not-resolved=\"false\"></xref> that merges <see cref=\"!:UsingChunk\"></see> instances.\n"
  example: []
  syntax:
    content: 'public class UsingChunkMerger : IChunkMerger'
    content.vb: >-
      Public Class UsingChunkMerger
          Implements IChunkMerger
  inheritance:
  - System.Object
  implements:
  - Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Mvc.Razor.Directives.UsingChunkMerger.VisitChunk(Chunk)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.Directives.UsingChunkMerger.VisitChunk(Chunk)
  id: VisitChunk(Chunk)
  parent: Microsoft.AspNetCore.Mvc.Razor.Directives.UsingChunkMerger
  langs:
  - csharp
  - vb
  name: VisitChunk(Chunk)
  nameWithType: UsingChunkMerger.VisitChunk(Chunk)
  fullName: Microsoft.AspNetCore.Mvc.Razor.Directives.UsingChunkMerger.VisitChunk(Chunk)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor.Host/Directives/UsingChunkMerger.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: VisitChunk
    path: ../aspnet/Mvc/src/Microsoft.AspNetCore.Mvc.Razor.Host/Directives/UsingChunkMerger.cs
    startLine: 18
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor.Host
  namespace: Microsoft.AspNetCore.Mvc.Razor.Directives
  summary: "\nVisits a <see cref=\"!:Chunk\"></see> from the <see cref=\"!:ChunkTree\"></see> to merge into.\n"
  example: []
  syntax:
    content: public void VisitChunk(Chunk chunk)
    parameters:
    - id: chunk
      type: Chunk
      description: A <see cref="!:Chunk"></see> from the tree.
    content.vb: Public Sub VisitChunk(chunk As Chunk)
  overload: Microsoft.AspNetCore.Mvc.Razor.Directives.UsingChunkMerger.VisitChunk*
  implements:
  - Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger.VisitChunk(Chunk)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Mvc.Razor.Directives.UsingChunkMerger.MergeInheritedChunks(ChunkTree,System.Collections.Generic.IReadOnlyList{Chunk})
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.Directives.UsingChunkMerger.MergeInheritedChunks(ChunkTree,System.Collections.Generic.IReadOnlyList{Chunk})
  id: MergeInheritedChunks(ChunkTree,System.Collections.Generic.IReadOnlyList{Chunk})
  parent: Microsoft.AspNetCore.Mvc.Razor.Directives.UsingChunkMerger
  langs:
  - csharp
  - vb
  name: MergeInheritedChunks(ChunkTree, IReadOnlyList<Chunk>)
  nameWithType: UsingChunkMerger.MergeInheritedChunks(ChunkTree, IReadOnlyList<Chunk>)
  fullName: Microsoft.AspNetCore.Mvc.Razor.Directives.UsingChunkMerger.MergeInheritedChunks(ChunkTree, System.Collections.Generic.IReadOnlyList<Chunk>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor.Host/Directives/UsingChunkMerger.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: MergeInheritedChunks
    path: ../aspnet/Mvc/src/Microsoft.AspNetCore.Mvc.Razor.Host/Directives/UsingChunkMerger.cs
    startLine: 33
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor.Host
  namespace: Microsoft.AspNetCore.Mvc.Razor.Directives
  summary: "\nMerges an inherited <see cref=\"!:Chunk\"></see> into the <see cref=\"!:ChunkTree\"></see>.\n"
  example: []
  syntax:
    content: public void MergeInheritedChunks(ChunkTree chunkTree, IReadOnlyList<Chunk> inheritedChunks)
    parameters:
    - id: chunkTree
      type: ChunkTree
      description: The <see cref="!:ChunkTree"></see> to merge into.
    - id: inheritedChunks
      type: System.Collections.Generic.IReadOnlyList{Chunk}
      description: The <xref href="System.Collections.Generic.IReadOnlyList%601" data-throw-if-not-resolved="false"></xref>s to merge.
    content.vb: Public Sub MergeInheritedChunks(chunkTree As ChunkTree, inheritedChunks As IReadOnlyList(Of Chunk))
  overload: Microsoft.AspNetCore.Mvc.Razor.Directives.UsingChunkMerger.MergeInheritedChunks*
  implements:
  - Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger.MergeInheritedChunks(ChunkTree,System.Collections.Generic.IReadOnlyList{Chunk})
  nameWithType.vb: UsingChunkMerger.MergeInheritedChunks(ChunkTree, IReadOnlyList(Of Chunk))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Mvc.Razor.Directives.UsingChunkMerger.MergeInheritedChunks(ChunkTree, System.Collections.Generic.IReadOnlyList(Of Chunk))
  name.vb: MergeInheritedChunks(ChunkTree, IReadOnlyList(Of Chunk))
references:
- uid: Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger
  parent: Microsoft.AspNetCore.Mvc.Razor.Directives
  isExternal: false
  name: IChunkMerger
  nameWithType: IChunkMerger
  fullName: Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger
- uid: Microsoft.AspNetCore.Mvc.Razor.Directives
  commentId: N:Microsoft.AspNetCore.Mvc.Razor.Directives
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.Razor.Directives
  nameWithType: Microsoft.AspNetCore.Mvc.Razor.Directives
  fullName: Microsoft.AspNetCore.Mvc.Razor.Directives
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Mvc.Razor.Directives.UsingChunkMerger.VisitChunk*
  commentId: Overload:Microsoft.AspNetCore.Mvc.Razor.Directives.UsingChunkMerger.VisitChunk
  isExternal: false
  name: VisitChunk
  nameWithType: UsingChunkMerger.VisitChunk
  fullName: Microsoft.AspNetCore.Mvc.Razor.Directives.UsingChunkMerger.VisitChunk
- uid: Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger.VisitChunk(Chunk)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger.VisitChunk(Chunk)
  parent: Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger
  isExternal: true
  name: VisitChunk(Chunk)
  nameWithType: IChunkMerger.VisitChunk(Chunk)
  fullName: Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger.VisitChunk(Chunk)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger.VisitChunk(Chunk)
    name: VisitChunk
    nameWithType: IChunkMerger.VisitChunk
    fullName: Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger.VisitChunk
  - name: (
    nameWithType: (
    fullName: (
  - uid: Chunk
    name: Chunk
    nameWithType: Chunk
    fullName: Chunk
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger.VisitChunk(Chunk)
    name: VisitChunk
    nameWithType: IChunkMerger.VisitChunk
    fullName: Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger.VisitChunk
  - name: (
    nameWithType: (
    fullName: (
  - uid: Chunk
    name: Chunk
    nameWithType: Chunk
    fullName: Chunk
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Chunk
  isExternal: true
  name: Chunk
  nameWithType: Chunk
  fullName: Chunk
- uid: Microsoft.AspNetCore.Mvc.Razor.Directives.UsingChunkMerger.MergeInheritedChunks*
  commentId: Overload:Microsoft.AspNetCore.Mvc.Razor.Directives.UsingChunkMerger.MergeInheritedChunks
  isExternal: false
  name: MergeInheritedChunks
  nameWithType: UsingChunkMerger.MergeInheritedChunks
  fullName: Microsoft.AspNetCore.Mvc.Razor.Directives.UsingChunkMerger.MergeInheritedChunks
- uid: Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger.MergeInheritedChunks(ChunkTree,System.Collections.Generic.IReadOnlyList{Chunk})
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger.MergeInheritedChunks(ChunkTree,System.Collections.Generic.IReadOnlyList{Chunk})
  parent: Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger
  isExternal: true
  name: MergeInheritedChunks(ChunkTree, IReadOnlyList<Chunk>)
  nameWithType: IChunkMerger.MergeInheritedChunks(ChunkTree, IReadOnlyList<Chunk>)
  fullName: Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger.MergeInheritedChunks(ChunkTree, System.Collections.Generic.IReadOnlyList<Chunk>)
  nameWithType.vb: IChunkMerger.MergeInheritedChunks(ChunkTree, IReadOnlyList(Of Chunk))
  fullName.vb: Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger.MergeInheritedChunks(ChunkTree, System.Collections.Generic.IReadOnlyList(Of Chunk))
  name.vb: MergeInheritedChunks(ChunkTree, IReadOnlyList(Of Chunk))
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger.MergeInheritedChunks(ChunkTree,System.Collections.Generic.IReadOnlyList{Chunk})
    name: MergeInheritedChunks
    nameWithType: IChunkMerger.MergeInheritedChunks
    fullName: Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger.MergeInheritedChunks
  - name: (
    nameWithType: (
    fullName: (
  - uid: ChunkTree
    name: ChunkTree
    nameWithType: ChunkTree
    fullName: ChunkTree
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Chunk
    name: Chunk
    nameWithType: Chunk
    fullName: Chunk
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger.MergeInheritedChunks(ChunkTree,System.Collections.Generic.IReadOnlyList{Chunk})
    name: MergeInheritedChunks
    nameWithType: IChunkMerger.MergeInheritedChunks
    fullName: Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger.MergeInheritedChunks
  - name: (
    nameWithType: (
    fullName: (
  - uid: ChunkTree
    name: ChunkTree
    nameWithType: ChunkTree
    fullName: ChunkTree
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Chunk
    name: Chunk
    nameWithType: Chunk
    fullName: Chunk
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: ChunkTree
  isExternal: true
  name: ChunkTree
  nameWithType: ChunkTree
  fullName: ChunkTree
- uid: System.Collections.Generic.IReadOnlyList{Chunk}
  commentId: T:System.Collections.Generic.IReadOnlyList{Chunk}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<Chunk>
  nameWithType: IReadOnlyList<Chunk>
  fullName: System.Collections.Generic.IReadOnlyList<Chunk>
  nameWithType.vb: IReadOnlyList(Of Chunk)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of Chunk)
  name.vb: IReadOnlyList(Of Chunk)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Chunk
    name: Chunk
    nameWithType: Chunk
    fullName: Chunk
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Chunk
    name: Chunk
    nameWithType: Chunk
    fullName: Chunk
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
shouldSkipMarkup: true
