### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Options.OptionsManager`1
  commentId: T:Microsoft.Extensions.Options.OptionsManager`1
  id: OptionsManager`1
  parent: Microsoft.Extensions.Options
  children:
  - Microsoft.Extensions.Options.OptionsManager`1.#ctor(IEnumerable{Microsoft.Extensions.Options.IConfigureOptions{`0}})
  - Microsoft.Extensions.Options.OptionsManager`1.Value
  langs:
  - csharp
  - vb
  name: OptionsManager<TOptions>
  nameWithType: OptionsManager<TOptions>
  fullName: Microsoft.Extensions.Options.OptionsManager<TOptions>
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Options/OptionsManager.cs
      branch: master
      repo: https://github.com/aspnet/Options.git
    id: OptionsManager
    path: ../aspnet/Options/src/Microsoft.Extensions.Options/OptionsManager.cs
    startLine: 11
  assemblies:
  - Microsoft.Extensions.Options
  namespace: Microsoft.Extensions.Options
  summary: "\nImplementation of IOptions.\n"
  example: []
  syntax:
    content: 'public class OptionsManager<TOptions> : object, IOptions<TOptions> where TOptions : class, new ()'
    typeParameters:
    - id: TOptions
      description: ''
    content.vb: >-
      Public Class OptionsManager(Of TOptions As {Class, New})
          Inherits Object
          Implements IOptions(Of TOptions)
  inheritance:
  - System.Object
  implements:
  - Microsoft.Extensions.Options.IOptions{{TOptions}}
  nameWithType.vb: OptionsManager(Of TOptions)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.Extensions.Options.OptionsManager(Of TOptions)
  name.vb: OptionsManager(Of TOptions)
- uid: Microsoft.Extensions.Options.OptionsManager`1.#ctor(IEnumerable{Microsoft.Extensions.Options.IConfigureOptions{`0}})
  commentId: M:Microsoft.Extensions.Options.OptionsManager`1.#ctor(IEnumerable{Microsoft.Extensions.Options.IConfigureOptions{`0}})
  id: '#ctor(IEnumerable{Microsoft.Extensions.Options.IConfigureOptions{`0}})'
  parent: Microsoft.Extensions.Options.OptionsManager`1
  langs:
  - csharp
  - vb
  name: OptionsManager(IEnumerable<IConfigureOptions<TOptions>>)
  nameWithType: OptionsManager<TOptions>.OptionsManager(IEnumerable<IConfigureOptions<TOptions>>)
  fullName: Microsoft.Extensions.Options.OptionsManager<TOptions>.OptionsManager(IEnumerable<Microsoft.Extensions.Options.IConfigureOptions<TOptions>>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.Options/OptionsManager.cs
      branch: master
      repo: https://github.com/aspnet/Options.git
    id: .ctor
    path: ../aspnet/Options/src/Microsoft.Extensions.Options/OptionsManager.cs
    startLine: 19
  assemblies:
  - Microsoft.Extensions.Options
  namespace: Microsoft.Extensions.Options
  summary: "\nInitializes a new instance with the specified options configurations.\n"
  example: []
  syntax:
    content: public OptionsManager(IEnumerable<IConfigureOptions<TOptions>> setups)
    parameters:
    - id: setups
      type: IEnumerable{Microsoft.Extensions.Options.IConfigureOptions{{TOptions}}}
      description: The configuration actions to run.
    content.vb: Public Sub New(setups As IEnumerable(Of IConfigureOptions(Of TOptions)))
  overload: Microsoft.Extensions.Options.OptionsManager`1.#ctor*
  nameWithType.vb: OptionsManager(Of TOptions).OptionsManager(IEnumerable(Of IConfigureOptions(Of TOptions)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.Options.OptionsManager(Of TOptions).OptionsManager(IEnumerable(Of Microsoft.Extensions.Options.IConfigureOptions(Of TOptions)))
  name.vb: OptionsManager(IEnumerable(Of IConfigureOptions(Of TOptions)))
- uid: Microsoft.Extensions.Options.OptionsManager`1.Value
  commentId: P:Microsoft.Extensions.Options.OptionsManager`1.Value
  id: Value
  parent: Microsoft.Extensions.Options.OptionsManager`1
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: OptionsManager<TOptions>.Value
  fullName: Microsoft.Extensions.Options.OptionsManager<TOptions>.Value
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Options/OptionsManager.cs
      branch: master
      repo: https://github.com/aspnet/Options.git
    id: Value
    path: ../aspnet/Options/src/Microsoft.Extensions.Options/OptionsManager.cs
    startLine: 27
  assemblies:
  - Microsoft.Extensions.Options
  namespace: Microsoft.Extensions.Options
  summary: "\nThe configured options instance.\n"
  example: []
  syntax:
    content: public virtual TOptions Value { get; }
    parameters: []
    return:
      type: '{TOptions}'
    content.vb: Public Overridable ReadOnly Property Value As TOptions
  overload: Microsoft.Extensions.Options.OptionsManager`1.Value*
  implements:
  - Microsoft.Extensions.Options.IOptions{{TOptions}}.Value
  nameWithType.vb: OptionsManager(Of TOptions).Value
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Microsoft.Extensions.Options.OptionsManager(Of TOptions).Value
references:
- uid: Microsoft.Extensions.Options
  commentId: N:Microsoft.Extensions.Options
  isExternal: false
  name: Microsoft.Extensions.Options
  nameWithType: Microsoft.Extensions.Options
  fullName: Microsoft.Extensions.Options
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Extensions.Options.IOptions{{TOptions}}
  commentId: T:Microsoft.Extensions.Options.IOptions{``0}
  parent: Microsoft.Extensions.Options
  definition: Microsoft.Extensions.Options.IOptions`1
  name: IOptions<TOptions>
  nameWithType: IOptions<TOptions>
  fullName: Microsoft.Extensions.Options.IOptions<TOptions>
  nameWithType.vb: IOptions(Of TOptions)
  fullName.vb: Microsoft.Extensions.Options.IOptions(Of TOptions)
  name.vb: IOptions(Of TOptions)
  spec.csharp:
  - uid: Microsoft.Extensions.Options.IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: Microsoft.Extensions.Options.IOptions
  - name: <
    nameWithType: <
    fullName: <
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Options.IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: Microsoft.Extensions.Options.IOptions
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Options.IOptions`1
  commentId: T:Microsoft.Extensions.Options.IOptions`1
  isExternal: false
  name: IOptions<TOptions>
  nameWithType: IOptions<TOptions>
  fullName: Microsoft.Extensions.Options.IOptions<TOptions>
  nameWithType.vb: IOptions(Of TOptions)
  fullName.vb: Microsoft.Extensions.Options.IOptions(Of TOptions)
  name.vb: IOptions(Of TOptions)
  spec.csharp:
  - uid: Microsoft.Extensions.Options.IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: Microsoft.Extensions.Options.IOptions
  - name: <
    nameWithType: <
    fullName: <
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Options.IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: Microsoft.Extensions.Options.IOptions
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Options.OptionsManager`1.#ctor*
  commentId: Overload:Microsoft.Extensions.Options.OptionsManager`1.#ctor
  isExternal: false
  name: OptionsManager
  nameWithType: OptionsManager<TOptions>.OptionsManager
  fullName: Microsoft.Extensions.Options.OptionsManager<TOptions>.OptionsManager
  nameWithType.vb: OptionsManager(Of TOptions).OptionsManager
  fullName.vb: Microsoft.Extensions.Options.OptionsManager(Of TOptions).OptionsManager
- uid: IEnumerable{Microsoft.Extensions.Options.IConfigureOptions{{TOptions}}}
  commentId: '!:IEnumerable{Microsoft.Extensions.Options.IConfigureOptions{`0}}'
  definition: IEnumerable`1
  name: IEnumerable<IConfigureOptions<TOptions>>
  nameWithType: IEnumerable<IConfigureOptions<TOptions>>
  fullName: IEnumerable<Microsoft.Extensions.Options.IConfigureOptions<TOptions>>
  nameWithType.vb: IEnumerable(Of IConfigureOptions(Of TOptions))
  fullName.vb: IEnumerable(Of Microsoft.Extensions.Options.IConfigureOptions(Of TOptions))
  name.vb: IEnumerable(Of IConfigureOptions(Of TOptions))
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.Options.IConfigureOptions`1
    name: IConfigureOptions
    nameWithType: IConfigureOptions
    fullName: Microsoft.Extensions.Options.IConfigureOptions
  - name: <
    nameWithType: <
    fullName: <
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.Options.IConfigureOptions`1
    name: IConfigureOptions
    nameWithType: IConfigureOptions
    fullName: Microsoft.Extensions.Options.IConfigureOptions
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Options.OptionsManager`1.Value*
  commentId: Overload:Microsoft.Extensions.Options.OptionsManager`1.Value
  isExternal: false
  name: Value
  nameWithType: OptionsManager<TOptions>.Value
  fullName: Microsoft.Extensions.Options.OptionsManager<TOptions>.Value
  nameWithType.vb: OptionsManager(Of TOptions).Value
  fullName.vb: Microsoft.Extensions.Options.OptionsManager(Of TOptions).Value
- uid: Microsoft.Extensions.Options.IOptions{{TOptions}}.Value
  commentId: P:Microsoft.Extensions.Options.IOptions{`0}.Value
  parent: Microsoft.Extensions.Options.IOptions{{TOptions}}
  definition: Microsoft.Extensions.Options.IOptions`1.Value
  name: Value
  nameWithType: IOptions<TOptions>.Value
  fullName: Microsoft.Extensions.Options.IOptions<TOptions>.Value
  nameWithType.vb: IOptions(Of TOptions).Value
  fullName.vb: Microsoft.Extensions.Options.IOptions(Of TOptions).Value
- uid: '{TOptions}'
  commentId: '!:TOptions'
  definition: TOptions
  name: TOptions
  nameWithType: TOptions
  fullName: TOptions
- uid: Microsoft.Extensions.Options.IOptions`1.Value
  commentId: P:Microsoft.Extensions.Options.IOptions`1.Value
  isExternal: false
  name: Value
  nameWithType: IOptions<TOptions>.Value
  fullName: Microsoft.Extensions.Options.IOptions<TOptions>.Value
  nameWithType.vb: IOptions(Of TOptions).Value
  fullName.vb: Microsoft.Extensions.Options.IOptions(Of TOptions).Value
- uid: TOptions
  isExternal: false
  name: TOptions
  nameWithType: TOptions
  fullName: TOptions
shouldSkipMarkup: true
