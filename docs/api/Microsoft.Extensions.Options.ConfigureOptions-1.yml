### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Options.ConfigureOptions`1
  commentId: T:Microsoft.Extensions.Options.ConfigureOptions`1
  id: ConfigureOptions`1
  parent: Microsoft.Extensions.Options
  children:
  - Microsoft.Extensions.Options.ConfigureOptions`1.#ctor(Action{`0})
  - Microsoft.Extensions.Options.ConfigureOptions`1.Action
  - Microsoft.Extensions.Options.ConfigureOptions`1.Configure(`0)
  langs:
  - csharp
  - vb
  name: ConfigureOptions<TOptions>
  nameWithType: ConfigureOptions<TOptions>
  fullName: Microsoft.Extensions.Options.ConfigureOptions<TOptions>
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Options/ConfigureOptions.cs
      branch: master
      repo: https://github.com/aspnet/Options.git
    id: ConfigureOptions
    path: ../aspnet/Options/src/Microsoft.Extensions.Options/ConfigureOptions.cs
    startLine: 11
  assemblies:
  - Microsoft.Extensions.Options
  namespace: Microsoft.Extensions.Options
  summary: "\nImplementation of IConfigureOptions.\n"
  example: []
  syntax:
    content: 'public class ConfigureOptions<TOptions> : object, IConfigureOptions<TOptions> where TOptions : class'
    typeParameters:
    - id: TOptions
      description: ''
    content.vb: >-
      Public Class ConfigureOptions(Of TOptions As Class)
          Inherits Object
          Implements IConfigureOptions(Of TOptions)
  inheritance:
  - System.Object
  implements:
  - Microsoft.Extensions.Options.IConfigureOptions{{TOptions}}
  nameWithType.vb: ConfigureOptions(Of TOptions)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.Extensions.Options.ConfigureOptions(Of TOptions)
  name.vb: ConfigureOptions(Of TOptions)
- uid: Microsoft.Extensions.Options.ConfigureOptions`1.#ctor(Action{`0})
  commentId: M:Microsoft.Extensions.Options.ConfigureOptions`1.#ctor(Action{`0})
  id: '#ctor(Action{`0})'
  parent: Microsoft.Extensions.Options.ConfigureOptions`1
  langs:
  - csharp
  - vb
  name: ConfigureOptions(Action<TOptions>)
  nameWithType: ConfigureOptions<TOptions>.ConfigureOptions(Action<TOptions>)
  fullName: Microsoft.Extensions.Options.ConfigureOptions<TOptions>.ConfigureOptions(Action<TOptions>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.Options/ConfigureOptions.cs
      branch: master
      repo: https://github.com/aspnet/Options.git
    id: .ctor
    path: ../aspnet/Options/src/Microsoft.Extensions.Options/ConfigureOptions.cs
    startLine: 17
  assemblies:
  - Microsoft.Extensions.Options
  namespace: Microsoft.Extensions.Options
  summary: "\nConstructor.\n"
  example: []
  syntax:
    content: public ConfigureOptions(Action<TOptions> action)
    parameters:
    - id: action
      type: Action{{TOptions}}
      description: The action to register.
    content.vb: Public Sub New(action As Action(Of TOptions))
  overload: Microsoft.Extensions.Options.ConfigureOptions`1.#ctor*
  nameWithType.vb: ConfigureOptions(Of TOptions).ConfigureOptions(Action(Of TOptions))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.Options.ConfigureOptions(Of TOptions).ConfigureOptions(Action(Of TOptions))
  name.vb: ConfigureOptions(Action(Of TOptions))
- uid: Microsoft.Extensions.Options.ConfigureOptions`1.Action
  commentId: P:Microsoft.Extensions.Options.ConfigureOptions`1.Action
  id: Action
  parent: Microsoft.Extensions.Options.ConfigureOptions`1
  langs:
  - csharp
  - vb
  name: Action
  nameWithType: ConfigureOptions<TOptions>.Action
  fullName: Microsoft.Extensions.Options.ConfigureOptions<TOptions>.Action
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Options/ConfigureOptions.cs
      branch: master
      repo: https://github.com/aspnet/Options.git
    id: Action
    path: ../aspnet/Options/src/Microsoft.Extensions.Options/ConfigureOptions.cs
    startLine: 30
  assemblies:
  - Microsoft.Extensions.Options
  namespace: Microsoft.Extensions.Options
  summary: "\nThe configuration action.\n"
  example: []
  syntax:
    content: public Action<TOptions> Action { get; }
    parameters: []
    return:
      type: Action{{TOptions}}
    content.vb: Public ReadOnly Property Action As Action(Of TOptions)
  overload: Microsoft.Extensions.Options.ConfigureOptions`1.Action*
  nameWithType.vb: ConfigureOptions(Of TOptions).Action
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Extensions.Options.ConfigureOptions(Of TOptions).Action
- uid: Microsoft.Extensions.Options.ConfigureOptions`1.Configure(`0)
  commentId: M:Microsoft.Extensions.Options.ConfigureOptions`1.Configure(`0)
  id: Configure(`0)
  parent: Microsoft.Extensions.Options.ConfigureOptions`1
  langs:
  - csharp
  - vb
  name: Configure(TOptions)
  nameWithType: ConfigureOptions<TOptions>.Configure(TOptions)
  fullName: Microsoft.Extensions.Options.ConfigureOptions<TOptions>.Configure(TOptions)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Options/ConfigureOptions.cs
      branch: master
      repo: https://github.com/aspnet/Options.git
    id: Configure
    path: ../aspnet/Options/src/Microsoft.Extensions.Options/ConfigureOptions.cs
    startLine: 36
  assemblies:
  - Microsoft.Extensions.Options
  namespace: Microsoft.Extensions.Options
  summary: "\nInvokes the registered configure Action.\n"
  example: []
  syntax:
    content: public virtual void Configure(TOptions options)
    parameters:
    - id: options
      type: '{TOptions}'
      description: ''
    content.vb: Public Overridable Sub Configure(options As TOptions)
  overload: Microsoft.Extensions.Options.ConfigureOptions`1.Configure*
  implements:
  - Microsoft.Extensions.Options.IConfigureOptions{{TOptions}}.Configure({TOptions})
  nameWithType.vb: ConfigureOptions(Of TOptions).Configure(TOptions)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.Extensions.Options.ConfigureOptions(Of TOptions).Configure(TOptions)
references:
- uid: Microsoft.Extensions.Options
  commentId: N:Microsoft.Extensions.Options
  isExternal: false
  name: Microsoft.Extensions.Options
  nameWithType: Microsoft.Extensions.Options
  fullName: Microsoft.Extensions.Options
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Extensions.Options.IConfigureOptions{{TOptions}}
  commentId: T:Microsoft.Extensions.Options.IConfigureOptions{`0}
  parent: Microsoft.Extensions.Options
  definition: Microsoft.Extensions.Options.IConfigureOptions`1
  name: IConfigureOptions<TOptions>
  nameWithType: IConfigureOptions<TOptions>
  fullName: Microsoft.Extensions.Options.IConfigureOptions<TOptions>
  nameWithType.vb: IConfigureOptions(Of TOptions)
  fullName.vb: Microsoft.Extensions.Options.IConfigureOptions(Of TOptions)
  name.vb: IConfigureOptions(Of TOptions)
  spec.csharp:
  - uid: Microsoft.Extensions.Options.IConfigureOptions`1
    name: IConfigureOptions
    nameWithType: IConfigureOptions
    fullName: Microsoft.Extensions.Options.IConfigureOptions
  - name: <
    nameWithType: <
    fullName: <
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Options.IConfigureOptions`1
    name: IConfigureOptions
    nameWithType: IConfigureOptions
    fullName: Microsoft.Extensions.Options.IConfigureOptions
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Options.IConfigureOptions`1
  commentId: T:Microsoft.Extensions.Options.IConfigureOptions`1
  isExternal: false
  name: IConfigureOptions<TOptions>
  nameWithType: IConfigureOptions<TOptions>
  fullName: Microsoft.Extensions.Options.IConfigureOptions<TOptions>
  nameWithType.vb: IConfigureOptions(Of TOptions)
  fullName.vb: Microsoft.Extensions.Options.IConfigureOptions(Of TOptions)
  name.vb: IConfigureOptions(Of TOptions)
  spec.csharp:
  - uid: Microsoft.Extensions.Options.IConfigureOptions`1
    name: IConfigureOptions
    nameWithType: IConfigureOptions
    fullName: Microsoft.Extensions.Options.IConfigureOptions
  - name: <
    nameWithType: <
    fullName: <
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Options.IConfigureOptions`1
    name: IConfigureOptions
    nameWithType: IConfigureOptions
    fullName: Microsoft.Extensions.Options.IConfigureOptions
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Options.ConfigureOptions`1.#ctor*
  commentId: Overload:Microsoft.Extensions.Options.ConfigureOptions`1.#ctor
  isExternal: false
  name: ConfigureOptions
  nameWithType: ConfigureOptions<TOptions>.ConfigureOptions
  fullName: Microsoft.Extensions.Options.ConfigureOptions<TOptions>.ConfigureOptions
  nameWithType.vb: ConfigureOptions(Of TOptions).ConfigureOptions
  fullName.vb: Microsoft.Extensions.Options.ConfigureOptions(Of TOptions).ConfigureOptions
- uid: Action{{TOptions}}
  commentId: '!:Action{`0}'
  definition: Action`1
  name: Action<TOptions>
  nameWithType: Action<TOptions>
  fullName: Action<TOptions>
  nameWithType.vb: Action(Of TOptions)
  fullName.vb: Action(Of TOptions)
  name.vb: Action(Of TOptions)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Options.ConfigureOptions`1.Action*
  commentId: Overload:Microsoft.Extensions.Options.ConfigureOptions`1.Action
  isExternal: false
  name: Action
  nameWithType: ConfigureOptions<TOptions>.Action
  fullName: Microsoft.Extensions.Options.ConfigureOptions<TOptions>.Action
  nameWithType.vb: ConfigureOptions(Of TOptions).Action
  fullName.vb: Microsoft.Extensions.Options.ConfigureOptions(Of TOptions).Action
- uid: Microsoft.Extensions.Options.ConfigureOptions`1.Configure*
  commentId: Overload:Microsoft.Extensions.Options.ConfigureOptions`1.Configure
  isExternal: false
  name: Configure
  nameWithType: ConfigureOptions<TOptions>.Configure
  fullName: Microsoft.Extensions.Options.ConfigureOptions<TOptions>.Configure
  nameWithType.vb: ConfigureOptions(Of TOptions).Configure
  fullName.vb: Microsoft.Extensions.Options.ConfigureOptions(Of TOptions).Configure
- uid: Microsoft.Extensions.Options.IConfigureOptions{{TOptions}}.Configure({TOptions})
  commentId: M:Microsoft.Extensions.Options.IConfigureOptions{`0}.Configure(`0)
  parent: Microsoft.Extensions.Options.IConfigureOptions{{TOptions}}
  definition: Microsoft.Extensions.Options.IConfigureOptions`1.Configure(`0)
  name: Configure(TOptions)
  nameWithType: IConfigureOptions<TOptions>.Configure(TOptions)
  fullName: Microsoft.Extensions.Options.IConfigureOptions<TOptions>.Configure(TOptions)
  nameWithType.vb: IConfigureOptions(Of TOptions).Configure(TOptions)
  fullName.vb: Microsoft.Extensions.Options.IConfigureOptions(Of TOptions).Configure(TOptions)
  spec.csharp:
  - uid: Microsoft.Extensions.Options.IConfigureOptions`1.Configure(`0)
    name: Configure
    nameWithType: IConfigureOptions<TOptions>.Configure
    fullName: Microsoft.Extensions.Options.IConfigureOptions<TOptions>.Configure
  - name: (
    nameWithType: (
    fullName: (
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.Options.IConfigureOptions`1.Configure(`0)
    name: Configure
    nameWithType: IConfigureOptions(Of TOptions).Configure
    fullName: Microsoft.Extensions.Options.IConfigureOptions(Of TOptions).Configure
  - name: (
    nameWithType: (
    fullName: (
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TOptions}'
  commentId: '!:TOptions'
  definition: TOptions
  name: TOptions
  nameWithType: TOptions
  fullName: TOptions
- uid: Microsoft.Extensions.Options.IConfigureOptions`1.Configure(`0)
  commentId: M:Microsoft.Extensions.Options.IConfigureOptions`1.Configure(`0)
  isExternal: false
  name: Configure(TOptions)
  nameWithType: IConfigureOptions<TOptions>.Configure(TOptions)
  fullName: Microsoft.Extensions.Options.IConfigureOptions<TOptions>.Configure(TOptions)
  nameWithType.vb: IConfigureOptions(Of TOptions).Configure(TOptions)
  fullName.vb: Microsoft.Extensions.Options.IConfigureOptions(Of TOptions).Configure(TOptions)
  spec.csharp:
  - uid: Microsoft.Extensions.Options.IConfigureOptions`1.Configure(`0)
    name: Configure
    nameWithType: IConfigureOptions<TOptions>.Configure
    fullName: Microsoft.Extensions.Options.IConfigureOptions<TOptions>.Configure
  - name: (
    nameWithType: (
    fullName: (
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.Options.IConfigureOptions`1.Configure(`0)
    name: Configure
    nameWithType: IConfigureOptions(Of TOptions).Configure
    fullName: Microsoft.Extensions.Options.IConfigureOptions(Of TOptions).Configure
  - name: (
    nameWithType: (
    fullName: (
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: TOptions
  isExternal: false
  name: TOptions
  nameWithType: TOptions
  fullName: TOptions
shouldSkipMarkup: true
