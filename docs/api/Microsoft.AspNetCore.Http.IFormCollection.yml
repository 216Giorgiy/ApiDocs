### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Http.IFormCollection
  commentId: T:Microsoft.AspNetCore.Http.IFormCollection
  id: IFormCollection
  parent: Microsoft.AspNetCore.Http
  children:
  - Microsoft.AspNetCore.Http.IFormCollection.ContainsKey(System.String)
  - Microsoft.AspNetCore.Http.IFormCollection.Count
  - Microsoft.AspNetCore.Http.IFormCollection.Files
  - Microsoft.AspNetCore.Http.IFormCollection.Item(System.String)
  - Microsoft.AspNetCore.Http.IFormCollection.Keys
  - Microsoft.AspNetCore.Http.IFormCollection.TryGetValue(System.String,StringValues@)
  langs:
  - csharp
  - vb
  name: IFormCollection
  nameWithType: IFormCollection
  fullName: Microsoft.AspNetCore.Http.IFormCollection
  type: Interface
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Features/IFormCollection.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: IFormCollection
    path: ../aspnet/HttpAbstractions/src/Microsoft.AspNetCore.Http.Features/IFormCollection.cs
    startLine: 11
  assemblies:
  - Microsoft.AspNetCore.Http.Features
  namespace: Microsoft.AspNetCore.Http
  summary: "\nRepresents the parsed form values sent with the HttpRequest.\n"
  example: []
  syntax:
    content: 'public interface IFormCollection : IEnumerable<KeyValuePair<string, StringValues>>, IEnumerable'
    content.vb: >-
      Public Interface IFormCollection
          Inherits IEnumerable(Of KeyValuePair(Of String, StringValues))
  inheritedMembers:
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,StringValues}}.GetEnumerator
  - System.Collections.IEnumerable.GetEnumerator
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.AspNetCore.Http.IFormCollection.Count
  commentId: P:Microsoft.AspNetCore.Http.IFormCollection.Count
  id: Count
  parent: Microsoft.AspNetCore.Http.IFormCollection
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: IFormCollection.Count
  fullName: Microsoft.AspNetCore.Http.IFormCollection.Count
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Features/IFormCollection.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: Count
    path: ../aspnet/HttpAbstractions/src/Microsoft.AspNetCore.Http.Features/IFormCollection.cs
    startLine: 19
  assemblies:
  - Microsoft.AspNetCore.Http.Features
  namespace: Microsoft.AspNetCore.Http
  summary: "\nGets the number of elements contained in the <xref href=\"Microsoft.AspNetCore.Http.IFormCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: int Count { get; }
    parameters: []
    return:
      type: System.Int32
      description: "\nThe number of elements contained in the <xref href=\"Microsoft.AspNetCore.Http.IFormCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: ReadOnly Property Count As Integer
  overload: Microsoft.AspNetCore.Http.IFormCollection.Count*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.AspNetCore.Http.IFormCollection.Keys
  commentId: P:Microsoft.AspNetCore.Http.IFormCollection.Keys
  id: Keys
  parent: Microsoft.AspNetCore.Http.IFormCollection
  langs:
  - csharp
  - vb
  name: Keys
  nameWithType: IFormCollection.Keys
  fullName: Microsoft.AspNetCore.Http.IFormCollection.Keys
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Features/IFormCollection.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: Keys
    path: ../aspnet/HttpAbstractions/src/Microsoft.AspNetCore.Http.Features/IFormCollection.cs
    startLine: 29
  assemblies:
  - Microsoft.AspNetCore.Http.Features
  namespace: Microsoft.AspNetCore.Http
  summary: "\nGets an <xref href=\"System.Collections.Generic.ICollection%601\" data-throw-if-not-resolved=\"false\"></xref> containing the keys of the\n<xref href=\"Microsoft.AspNetCore.Http.IFormCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: ICollection<string> Keys { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{System.String}
      description: "\nAn <xref href=\"System.Collections.Generic.ICollection%601\" data-throw-if-not-resolved=\"false\"></xref> containing the keys of the object\nthat implements <xref href=\"Microsoft.AspNetCore.Http.IFormCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: ReadOnly Property Keys As ICollection(Of String)
  overload: Microsoft.AspNetCore.Http.IFormCollection.Keys*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.AspNetCore.Http.IFormCollection.ContainsKey(System.String)
  commentId: M:Microsoft.AspNetCore.Http.IFormCollection.ContainsKey(System.String)
  id: ContainsKey(System.String)
  parent: Microsoft.AspNetCore.Http.IFormCollection
  langs:
  - csharp
  - vb
  name: ContainsKey(String)
  nameWithType: IFormCollection.ContainsKey(String)
  fullName: Microsoft.AspNetCore.Http.IFormCollection.ContainsKey(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Features/IFormCollection.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: ContainsKey
    path: ../aspnet/HttpAbstractions/src/Microsoft.AspNetCore.Http.Features/IFormCollection.cs
    startLine: 45
  assemblies:
  - Microsoft.AspNetCore.Http.Features
  namespace: Microsoft.AspNetCore.Http
  summary: "\nDetermines whether the <xref href=\"Microsoft.AspNetCore.Http.IFormCollection\" data-throw-if-not-resolved=\"false\"></xref> contains an element\nwith the specified key.\n"
  example: []
  syntax:
    content: bool ContainsKey(string key)
    parameters:
    - id: key
      type: System.String
      description: "\nThe key to locate in the <xref href=\"Microsoft.AspNetCore.Http.IFormCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    return:
      type: System.Boolean
      description: "\ntrue if the <xref href=\"Microsoft.AspNetCore.Http.IFormCollection\" data-throw-if-not-resolved=\"false\"></xref> contains an element with\nthe key; otherwise, false.\n"
    content.vb: Function ContainsKey(key As String) As Boolean
  overload: Microsoft.AspNetCore.Http.IFormCollection.ContainsKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nkey is null.\n"
- uid: Microsoft.AspNetCore.Http.IFormCollection.TryGetValue(System.String,StringValues@)
  commentId: M:Microsoft.AspNetCore.Http.IFormCollection.TryGetValue(System.String,StringValues@)
  id: TryGetValue(System.String,StringValues@)
  parent: Microsoft.AspNetCore.Http.IFormCollection
  langs:
  - csharp
  - vb
  name: TryGetValue(String, out StringValues)
  nameWithType: IFormCollection.TryGetValue(String, out StringValues)
  fullName: Microsoft.AspNetCore.Http.IFormCollection.TryGetValue(System.String, out StringValues)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Features/IFormCollection.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: TryGetValue
    path: ../aspnet/HttpAbstractions/src/Microsoft.AspNetCore.Http.Features/IFormCollection.cs
    startLine: 66
  assemblies:
  - Microsoft.AspNetCore.Http.Features
  namespace: Microsoft.AspNetCore.Http
  summary: "\nGets the value associated with the specified key.\n"
  example: []
  syntax:
    content: bool TryGetValue(string key, out StringValues value)
    parameters:
    - id: key
      type: System.String
      description: "\nThe key of the value to get.\n"
    - id: value
      type: StringValues
      description: "\nThe key of the value to get.\nWhen this method returns, the value associated with the specified key, if the\nkey is found; otherwise, the default value for the type of the value parameter.\nThis parameter is passed uninitialized.\n"
    return:
      type: System.Boolean
      description: "\ntrue if the object that implements <xref href=\"Microsoft.AspNetCore.Http.IFormCollection\" data-throw-if-not-resolved=\"false\"></xref> contains\nan element with the specified key; otherwise, false.\n"
    content.vb: Function TryGetValue(key As String, ByRef value As StringValues) As Boolean
  overload: Microsoft.AspNetCore.Http.IFormCollection.TryGetValue*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nkey is null.\n"
  nameWithType.vb: IFormCollection.TryGetValue(String, ByRef StringValues)
  fullName.vb: Microsoft.AspNetCore.Http.IFormCollection.TryGetValue(System.String, ByRef StringValues)
  name.vb: TryGetValue(String, ByRef StringValues)
- uid: Microsoft.AspNetCore.Http.IFormCollection.Item(System.String)
  commentId: P:Microsoft.AspNetCore.Http.IFormCollection.Item(System.String)
  id: Item(System.String)
  parent: Microsoft.AspNetCore.Http.IFormCollection
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: IFormCollection.Item[String]
  fullName: Microsoft.AspNetCore.Http.IFormCollection.Item[System.String]
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Features/IFormCollection.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: this[]
    path: ../aspnet/HttpAbstractions/src/Microsoft.AspNetCore.Http.Features/IFormCollection.cs
    startLine: 85
  assemblies:
  - Microsoft.AspNetCore.Http.Features
  namespace: Microsoft.AspNetCore.Http
  summary: "\nGets the value with the specified key.\n"
  remarks: "\n<xref href=\"Microsoft.AspNetCore.Http.IFormCollection\" data-throw-if-not-resolved=\"false\"></xref> has a different indexer contract than\n<xref href=\"System.Collections.Generic.IDictionary%602\" data-throw-if-not-resolved=\"false\"></xref>, as it will return <code>StringValues.Empty</code> for missing entries\nrather than throwing an Exception.\n"
  example: []
  syntax:
    content: StringValues this[string key] { get; }
    parameters:
    - id: key
      type: System.String
      description: "\nThe key of the value to get.\n"
    return:
      type: StringValues
      description: "\nThe element with the specified key, or <code>StringValues.Empty</code> if the key is not present.\n"
    content.vb: ReadOnly Property Item(key As String) As StringValues
  overload: Microsoft.AspNetCore.Http.IFormCollection.Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nkey is null.\n"
  nameWithType.vb: IFormCollection.Item(String)
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Http.IFormCollection.Item(System.String)
  name.vb: Item(String)
- uid: Microsoft.AspNetCore.Http.IFormCollection.Files
  commentId: P:Microsoft.AspNetCore.Http.IFormCollection.Files
  id: Files
  parent: Microsoft.AspNetCore.Http.IFormCollection
  langs:
  - csharp
  - vb
  name: Files
  nameWithType: IFormCollection.Files
  fullName: Microsoft.AspNetCore.Http.IFormCollection.Files
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Features/IFormCollection.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: Files
    path: ../aspnet/HttpAbstractions/src/Microsoft.AspNetCore.Http.Features/IFormCollection.cs
    startLine: 91
  assemblies:
  - Microsoft.AspNetCore.Http.Features
  namespace: Microsoft.AspNetCore.Http
  summary: "\nThe file collection sent with the request.\n"
  example: []
  syntax:
    content: IFormFileCollection Files { get; }
    parameters: []
    return:
      type: Microsoft.AspNetCore.Http.IFormFileCollection
      description: The files included with the request.
    content.vb: ReadOnly Property Files As IFormFileCollection
  overload: Microsoft.AspNetCore.Http.IFormCollection.Files*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Microsoft.AspNetCore.Http
  commentId: N:Microsoft.AspNetCore.Http
  isExternal: false
  name: Microsoft.AspNetCore.Http
  nameWithType: Microsoft.AspNetCore.Http
  fullName: Microsoft.AspNetCore.Http
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,StringValues}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,StringValues}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,StringValues}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<KeyValuePair<String, StringValues>>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, StringValues>>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of String, StringValues)).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, StringValues)).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<KeyValuePair<String, StringValues>>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, StringValues>>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of KeyValuePair(Of String, StringValues)).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, StringValues)).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,StringValues}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,StringValues}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<String, StringValues>>
  nameWithType: IEnumerable<KeyValuePair<String, StringValues>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, StringValues>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of String, StringValues))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, StringValues))
  name.vb: IEnumerable(Of KeyValuePair(Of String, StringValues))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: StringValues
    name: StringValues
    nameWithType: StringValues
    fullName: StringValues
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: StringValues
    name: StringValues
    nameWithType: StringValues
    fullName: StringValues
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: Microsoft.AspNetCore.Http.IFormCollection
  commentId: T:Microsoft.AspNetCore.Http.IFormCollection
  parent: Microsoft.AspNetCore.Http
  isExternal: false
  name: IFormCollection
  nameWithType: IFormCollection
  fullName: Microsoft.AspNetCore.Http.IFormCollection
- uid: Microsoft.AspNetCore.Http.IFormCollection.Count*
  commentId: Overload:Microsoft.AspNetCore.Http.IFormCollection.Count
  isExternal: false
  name: Count
  nameWithType: IFormCollection.Count
  fullName: Microsoft.AspNetCore.Http.IFormCollection.Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Http.IFormCollection.Keys*
  commentId: Overload:Microsoft.AspNetCore.Http.IFormCollection.Keys
  isExternal: false
  name: Keys
  nameWithType: IFormCollection.Keys
  fullName: Microsoft.AspNetCore.Http.IFormCollection.Keys
- uid: System.Collections.Generic.ICollection{System.String}
  commentId: T:System.Collections.Generic.ICollection{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<String>
  nameWithType: ICollection<String>
  fullName: System.Collections.Generic.ICollection<System.String>
  nameWithType.vb: ICollection(Of String)
  fullName.vb: System.Collections.Generic.ICollection(Of System.String)
  name.vb: ICollection(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Http.IFormCollection.ContainsKey*
  commentId: Overload:Microsoft.AspNetCore.Http.IFormCollection.ContainsKey
  isExternal: false
  name: ContainsKey
  nameWithType: IFormCollection.ContainsKey
  fullName: Microsoft.AspNetCore.Http.IFormCollection.ContainsKey
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.AspNetCore.Http.IFormCollection.TryGetValue*
  commentId: Overload:Microsoft.AspNetCore.Http.IFormCollection.TryGetValue
  isExternal: false
  name: TryGetValue
  nameWithType: IFormCollection.TryGetValue
  fullName: Microsoft.AspNetCore.Http.IFormCollection.TryGetValue
- uid: StringValues
  isExternal: true
  name: StringValues
  nameWithType: StringValues
  fullName: StringValues
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Http.IFormCollection.Item*
  commentId: Overload:Microsoft.AspNetCore.Http.IFormCollection.Item
  isExternal: false
  name: Item
  nameWithType: IFormCollection.Item
  fullName: Microsoft.AspNetCore.Http.IFormCollection.Item
- uid: Microsoft.AspNetCore.Http.IFormCollection.Files*
  commentId: Overload:Microsoft.AspNetCore.Http.IFormCollection.Files
  isExternal: false
  name: Files
  nameWithType: IFormCollection.Files
  fullName: Microsoft.AspNetCore.Http.IFormCollection.Files
- uid: Microsoft.AspNetCore.Http.IFormFileCollection
  commentId: T:Microsoft.AspNetCore.Http.IFormFileCollection
  parent: Microsoft.AspNetCore.Http
  isExternal: false
  name: IFormFileCollection
  nameWithType: IFormFileCollection
  fullName: Microsoft.AspNetCore.Http.IFormFileCollection
shouldSkipMarkup: true
