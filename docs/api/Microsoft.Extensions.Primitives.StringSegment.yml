### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Primitives.StringSegment
  commentId: T:Microsoft.Extensions.Primitives.StringSegment
  id: StringSegment
  parent: Microsoft.Extensions.Primitives
  children:
  - Microsoft.Extensions.Primitives.StringSegment.#ctor(System.String)
  - Microsoft.Extensions.Primitives.StringSegment.#ctor(System.String,System.Int32,System.Int32)
  - Microsoft.Extensions.Primitives.StringSegment.Buffer
  - Microsoft.Extensions.Primitives.StringSegment.EndsWith(System.String,StringComparison)
  - Microsoft.Extensions.Primitives.StringSegment.Equals(Microsoft.Extensions.Primitives.StringSegment)
  - Microsoft.Extensions.Primitives.StringSegment.Equals(Microsoft.Extensions.Primitives.StringSegment,StringComparison)
  - Microsoft.Extensions.Primitives.StringSegment.Equals(System.Object)
  - Microsoft.Extensions.Primitives.StringSegment.Equals(System.String)
  - Microsoft.Extensions.Primitives.StringSegment.Equals(System.String,StringComparison)
  - Microsoft.Extensions.Primitives.StringSegment.GetHashCode
  - Microsoft.Extensions.Primitives.StringSegment.HasValue
  - Microsoft.Extensions.Primitives.StringSegment.IndexOf(System.Char)
  - Microsoft.Extensions.Primitives.StringSegment.IndexOf(System.Char,System.Int32)
  - Microsoft.Extensions.Primitives.StringSegment.IndexOf(System.Char,System.Int32,System.Int32)
  - Microsoft.Extensions.Primitives.StringSegment.Length
  - Microsoft.Extensions.Primitives.StringSegment.Offset
  - Microsoft.Extensions.Primitives.StringSegment.op_Equality(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Extensions.Primitives.StringSegment)
  - Microsoft.Extensions.Primitives.StringSegment.op_Inequality(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Extensions.Primitives.StringSegment)
  - Microsoft.Extensions.Primitives.StringSegment.StartsWith(System.String,StringComparison)
  - Microsoft.Extensions.Primitives.StringSegment.Subsegment(System.Int32,System.Int32)
  - Microsoft.Extensions.Primitives.StringSegment.Substring(System.Int32,System.Int32)
  - Microsoft.Extensions.Primitives.StringSegment.ToString
  - Microsoft.Extensions.Primitives.StringSegment.Trim
  - Microsoft.Extensions.Primitives.StringSegment.TrimEnd
  - Microsoft.Extensions.Primitives.StringSegment.TrimStart
  - Microsoft.Extensions.Primitives.StringSegment.Value
  langs:
  - csharp
  - vb
  name: StringSegment
  nameWithType: StringSegment
  fullName: Microsoft.Extensions.Primitives.StringSegment
  type: Struct
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: StringSegment
    path: ../aspnet/Common/src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 11
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nAn optimized representation of a substring.\n"
  example: []
  syntax:
    content: 'public struct StringSegment : IEquatable<StringSegment>, IEquatable<string>'
    content.vb: >-
      Public Structure StringSegment
          Implements IEquatable(Of StringSegment), IEquatable(Of String)
  implements:
  - IEquatable{Microsoft.Extensions.Primitives.StringSegment}
  - IEquatable{System.String}
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Microsoft.Extensions.Primitives.StringSegment.#ctor(System.String)
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: StringSegment(String)
  nameWithType: StringSegment.StringSegment(String)
  fullName: Microsoft.Extensions.Primitives.StringSegment.StringSegment(System.String)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: .ctor
    path: ../aspnet/Common/src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 19
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nInitializes an instance of the <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref> struct.\n"
  example: []
  syntax:
    content: public StringSegment(string buffer)
    parameters:
    - id: buffer
      type: System.String
      description: "\nThe original <see cref=\"!:System.String\"></see>. The <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref> includes the whole <see cref=\"!:System.String\"></see>.\n"
    content.vb: Public Sub New(buffer As String)
  overload: Microsoft.Extensions.Primitives.StringSegment.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Primitives.StringSegment.#ctor(System.String,System.Int32,System.Int32)
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.#ctor(System.String,System.Int32,System.Int32)
  id: '#ctor(System.String,System.Int32,System.Int32)'
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: StringSegment(String, Int32, Int32)
  nameWithType: StringSegment.StringSegment(String, Int32, Int32)
  fullName: Microsoft.Extensions.Primitives.StringSegment.StringSegment(System.String, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: .ctor
    path: ../aspnet/Common/src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 32
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nInitializes an instance of the <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref> struct.\n"
  example: []
  syntax:
    content: public StringSegment(string buffer, int offset, int length)
    parameters:
    - id: buffer
      type: System.String
      description: The original <see cref="!:System.String"></see> used as buffer.
    - id: offset
      type: System.Int32
      description: The offset of the segment within the <code data-dev-comment-type="paramref" class="paramref">buffer</code>.
    - id: length
      type: System.Int32
      description: The length of the segment.
    content.vb: Public Sub New(buffer As String, offset As Integer, length As Integer)
  overload: Microsoft.Extensions.Primitives.StringSegment.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Primitives.StringSegment.Buffer
  commentId: P:Microsoft.Extensions.Primitives.StringSegment.Buffer
  id: Buffer
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: Buffer
  nameWithType: StringSegment.Buffer
  fullName: Microsoft.Extensions.Primitives.StringSegment.Buffer
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Buffer
    path: ../aspnet/Common/src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 62
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nGets the <see cref=\"!:System.String\"></see> buffer for this <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public string Buffer { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Buffer As String
  overload: Microsoft.Extensions.Primitives.StringSegment.Buffer*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.Primitives.StringSegment.Offset
  commentId: P:Microsoft.Extensions.Primitives.StringSegment.Offset
  id: Offset
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: Offset
  nameWithType: StringSegment.Offset
  fullName: Microsoft.Extensions.Primitives.StringSegment.Offset
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Offset
    path: ../aspnet/Common/src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 67
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nGets the offset within the buffer for this <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public int Offset { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Offset As Integer
  overload: Microsoft.Extensions.Primitives.StringSegment.Offset*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.Primitives.StringSegment.Length
  commentId: P:Microsoft.Extensions.Primitives.StringSegment.Length
  id: Length
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: StringSegment.Length
  fullName: Microsoft.Extensions.Primitives.StringSegment.Length
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Length
    path: ../aspnet/Common/src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 72
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nGets the length of this <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public int Length { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Length As Integer
  overload: Microsoft.Extensions.Primitives.StringSegment.Length*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.Primitives.StringSegment.Value
  commentId: P:Microsoft.Extensions.Primitives.StringSegment.Value
  id: Value
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: StringSegment.Value
  fullName: Microsoft.Extensions.Primitives.StringSegment.Value
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Value
    path: ../aspnet/Common/src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 77
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nGets the value of this segment as a <see cref=\"!:System.String\"></see>.\n"
  example: []
  syntax:
    content: public string Value { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Value As String
  overload: Microsoft.Extensions.Primitives.StringSegment.Value*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.Primitives.StringSegment.HasValue
  commentId: P:Microsoft.Extensions.Primitives.StringSegment.HasValue
  id: HasValue
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: HasValue
  nameWithType: StringSegment.HasValue
  fullName: Microsoft.Extensions.Primitives.StringSegment.HasValue
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: HasValue
    path: ../aspnet/Common/src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 95
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nGets whether or not this <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref> contains a valid value.\n"
  example: []
  syntax:
    content: public bool HasValue { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasValue As Boolean
  overload: Microsoft.Extensions.Primitives.StringSegment.HasValue*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.Primitives.StringSegment.Equals(System.Object)
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.Equals(System.Object)
  id: Equals(System.Object)
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: StringSegment.Equals(Object)
  fullName: Microsoft.Extensions.Primitives.StringSegment.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Equals
    path: ../aspnet/Common/src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 101
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overload: Microsoft.Extensions.Primitives.StringSegment.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Extensions.Primitives.StringSegment.Equals(Microsoft.Extensions.Primitives.StringSegment)
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.Equals(Microsoft.Extensions.Primitives.StringSegment)
  id: Equals(Microsoft.Extensions.Primitives.StringSegment)
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: Equals(StringSegment)
  nameWithType: StringSegment.Equals(StringSegment)
  fullName: Microsoft.Extensions.Primitives.StringSegment.Equals(Microsoft.Extensions.Primitives.StringSegment)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Equals
    path: ../aspnet/Common/src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 116
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nIndicates whether the current object is equal to another object of the same type.\n"
  example: []
  syntax:
    content: public bool Equals(StringSegment other)
    parameters:
    - id: other
      type: Microsoft.Extensions.Primitives.StringSegment
      description: An object to compare with this object.
    return:
      type: System.Boolean
      description: <pre><code>true</code></pre> if the current object is equal to the other parameter; otherwise, <pre><code>false</code></pre>.
    content.vb: Public Function Equals(other As StringSegment) As Boolean
  overload: Microsoft.Extensions.Primitives.StringSegment.Equals*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Primitives.StringSegment.Equals(Microsoft.Extensions.Primitives.StringSegment,StringComparison)
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.Equals(Microsoft.Extensions.Primitives.StringSegment,StringComparison)
  id: Equals(Microsoft.Extensions.Primitives.StringSegment,StringComparison)
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: Equals(StringSegment, StringComparison)
  nameWithType: StringSegment.Equals(StringSegment, StringComparison)
  fullName: Microsoft.Extensions.Primitives.StringSegment.Equals(Microsoft.Extensions.Primitives.StringSegment, StringComparison)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Equals
    path: ../aspnet/Common/src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 128
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nIndicates whether the current object is equal to another object of the same type.\n"
  example: []
  syntax:
    content: public bool Equals(StringSegment other, StringComparison comparisonType)
    parameters:
    - id: other
      type: Microsoft.Extensions.Primitives.StringSegment
      description: An object to compare with this object.
    - id: comparisonType
      type: StringComparison
      description: One of the enumeration values that specifies the rules to use in the comparison.
    return:
      type: System.Boolean
      description: <pre><code>true</code></pre> if the current object is equal to the other parameter; otherwise, <pre><code>false</code></pre>.
    content.vb: Public Function Equals(other As StringSegment, comparisonType As StringComparison) As Boolean
  overload: Microsoft.Extensions.Primitives.StringSegment.Equals*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Primitives.StringSegment.Equals(System.String)
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.Equals(System.String)
  id: Equals(System.String)
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: Equals(String)
  nameWithType: StringSegment.Equals(String)
  fullName: Microsoft.Extensions.Primitives.StringSegment.Equals(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Equals
    path: ../aspnet/Common/src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 144
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nChecks if the specified <see cref=\"!:System.String\"></see> is equal to the current <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool Equals(string text)
    parameters:
    - id: text
      type: System.String
      description: The <see cref="!:System.String"></see> to compare with the current <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: <pre><code>true</code></pre> if the specified <see cref="!:System.String"></see> is equal to the current <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref>; otherwise, <pre><code>false</code></pre>.
    content.vb: Public Function Equals(text As String) As Boolean
  overload: Microsoft.Extensions.Primitives.StringSegment.Equals*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Primitives.StringSegment.Equals(System.String,StringComparison)
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.Equals(System.String,StringComparison)
  id: Equals(System.String,StringComparison)
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: Equals(String, StringComparison)
  nameWithType: StringSegment.Equals(String, StringComparison)
  fullName: Microsoft.Extensions.Primitives.StringSegment.Equals(System.String, StringComparison)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Equals
    path: ../aspnet/Common/src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 155
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nChecks if the specified <see cref=\"!:System.String\"></see> is equal to the current <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool Equals(string text, StringComparison comparisonType)
    parameters:
    - id: text
      type: System.String
      description: The <see cref="!:System.String"></see> to compare with the current <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref>.
    - id: comparisonType
      type: StringComparison
      description: One of the enumeration values that specifies the rules to use in the comparison.
    return:
      type: System.Boolean
      description: <pre><code>true</code></pre> if the specified <see cref="!:System.String"></see> is equal to the current <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref>; otherwise, <pre><code>false</code></pre>.
    content.vb: Public Function Equals(text As String, comparisonType As StringComparison) As Boolean
  overload: Microsoft.Extensions.Primitives.StringSegment.Equals*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Primitives.StringSegment.GetHashCode
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.GetHashCode
  id: GetHashCode
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: StringSegment.GetHashCode()
  fullName: Microsoft.Extensions.Primitives.StringSegment.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: GetHashCode
    path: ../aspnet/Common/src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 172
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overload: Microsoft.Extensions.Primitives.StringSegment.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Extensions.Primitives.StringSegment.op_Equality(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Extensions.Primitives.StringSegment)
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.op_Equality(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Extensions.Primitives.StringSegment)
  id: op_Equality(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Extensions.Primitives.StringSegment)
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: Equality(StringSegment, StringSegment)
  nameWithType: StringSegment.Equality(StringSegment, StringSegment)
  fullName: Microsoft.Extensions.Primitives.StringSegment.Equality(Microsoft.Extensions.Primitives.StringSegment, Microsoft.Extensions.Primitives.StringSegment)
  type: Operator
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: op_Equality
    path: ../aspnet/Common/src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 187
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nChecks if two specified <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref> have the same value.\n"
  example: []
  syntax:
    content: public static bool operator ==(StringSegment left, StringSegment right)
    parameters:
    - id: left
      type: Microsoft.Extensions.Primitives.StringSegment
      description: The first <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref> to compare, or <pre><code>null</code></pre>.
    - id: right
      type: Microsoft.Extensions.Primitives.StringSegment
      description: The second <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref> to compare, or <pre><code>null</code></pre>.
    return:
      type: System.Boolean
      description: <pre><code>true</code></pre> if the value of <code data-dev-comment-type="paramref" class="paramref">left</code> is the same as the value of <code data-dev-comment-type="paramref" class="paramref">right</code>; otherwise, <pre><code>false</code></pre>.
    content.vb: Public Shared Operator =(left As StringSegment, right As StringSegment) As Boolean
  overload: Microsoft.Extensions.Primitives.StringSegment.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Primitives.StringSegment.op_Inequality(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Extensions.Primitives.StringSegment)
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.op_Inequality(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Extensions.Primitives.StringSegment)
  id: op_Inequality(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Extensions.Primitives.StringSegment)
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: Inequality(StringSegment, StringSegment)
  nameWithType: StringSegment.Inequality(StringSegment, StringSegment)
  fullName: Microsoft.Extensions.Primitives.StringSegment.Inequality(Microsoft.Extensions.Primitives.StringSegment, Microsoft.Extensions.Primitives.StringSegment)
  type: Operator
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: op_Inequality
    path: ../aspnet/Common/src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 198
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nChecks if two specified <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref> have different values.\n"
  example: []
  syntax:
    content: public static bool operator !=(StringSegment left, StringSegment right)
    parameters:
    - id: left
      type: Microsoft.Extensions.Primitives.StringSegment
      description: The first <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref> to compare, or <pre><code>null</code></pre>.
    - id: right
      type: Microsoft.Extensions.Primitives.StringSegment
      description: The second <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref> to compare, or <pre><code>null</code></pre>.
    return:
      type: System.Boolean
      description: <pre><code>true</code></pre> if the value of <code data-dev-comment-type="paramref" class="paramref">left</code> is different from the value of <code data-dev-comment-type="paramref" class="paramref">right</code>; otherwise, <pre><code>false</code></pre>.
    content.vb: Public Shared Operator <>(left As StringSegment, right As StringSegment) As Boolean
  overload: Microsoft.Extensions.Primitives.StringSegment.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Primitives.StringSegment.StartsWith(System.String,StringComparison)
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.StartsWith(System.String,StringComparison)
  id: StartsWith(System.String,StringComparison)
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: StartsWith(String, StringComparison)
  nameWithType: StringSegment.StartsWith(String, StringComparison)
  fullName: Microsoft.Extensions.Primitives.StringSegment.StartsWith(System.String, StringComparison)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: StartsWith
    path: ../aspnet/Common/src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 209
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nChecks if the beginning of this <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref> matches the specified <see cref=\"!:System.String\"></see> when compared using the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">comparisonType</code>.\n"
  example: []
  syntax:
    content: public bool StartsWith(string text, StringComparison comparisonType)
    parameters:
    - id: text
      type: System.String
      description: The <see cref="!:System.String"></see>to compare.
    - id: comparisonType
      type: StringComparison
      description: One of the enumeration values that specifies the rules to use in the comparison.
    return:
      type: System.Boolean
      description: <pre><code>true</code></pre> if <code data-dev-comment-type="paramref" class="paramref">text</code> matches the beginning of this <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref>; otherwise, <pre><code>false</code></pre>.
    content.vb: Public Function StartsWith(text As String, comparisonType As StringComparison) As Boolean
  overload: Microsoft.Extensions.Primitives.StringSegment.StartsWith*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Primitives.StringSegment.EndsWith(System.String,StringComparison)
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.EndsWith(System.String,StringComparison)
  id: EndsWith(System.String,StringComparison)
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: EndsWith(String, StringComparison)
  nameWithType: StringSegment.EndsWith(String, StringComparison)
  fullName: Microsoft.Extensions.Primitives.StringSegment.EndsWith(System.String, StringComparison)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: EndsWith
    path: ../aspnet/Common/src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 231
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nChecks if the end of this <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref> matches the specified <see cref=\"!:System.String\"></see> when compared using the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">comparisonType</code>.\n"
  example: []
  syntax:
    content: public bool EndsWith(string text, StringComparison comparisonType)
    parameters:
    - id: text
      type: System.String
      description: The <see cref="!:System.String"></see>to compare.
    - id: comparisonType
      type: StringComparison
      description: One of the enumeration values that specifies the rules to use in the comparison.
    return:
      type: System.Boolean
      description: <pre><code>true</code></pre> if <code data-dev-comment-type="paramref" class="paramref">text</code> matches the end of this <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref>; otherwise, <pre><code>false</code></pre>.
    content.vb: Public Function EndsWith(text As String, comparisonType As StringComparison) As Boolean
  overload: Microsoft.Extensions.Primitives.StringSegment.EndsWith*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Primitives.StringSegment.Substring(System.Int32,System.Int32)
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.Substring(System.Int32,System.Int32)
  id: Substring(System.Int32,System.Int32)
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: Substring(Int32, Int32)
  nameWithType: StringSegment.Substring(Int32, Int32)
  fullName: Microsoft.Extensions.Primitives.StringSegment.Substring(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Substring
    path: ../aspnet/Common/src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 254
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nRetrieves a substring from this <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref>.\nThe substring starts at the position specified by <code data-dev-comment-type=\"paramref\" class=\"paramref\">offset</code> and has the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">length</code>.\n"
  example: []
  syntax:
    content: public string Substring(int offset, int length)
    parameters:
    - id: offset
      type: System.Int32
      description: The zero-based starting character position of a substring in this <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref>.
    - id: length
      type: System.Int32
      description: The number of characters in the substring.
    return:
      type: System.String
      description: A <see cref="!:System.String"></see> that is equivalent to the substring of length <code data-dev-comment-type="paramref" class="paramref">length</code> that begins at <code data-dev-comment-type="paramref" class="paramref">offset</code> in this <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Function Substring(offset As Integer, length As Integer) As String
  overload: Microsoft.Extensions.Primitives.StringSegment.Substring*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Primitives.StringSegment.Subsegment(System.Int32,System.Int32)
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.Subsegment(System.Int32,System.Int32)
  id: Subsegment(System.Int32,System.Int32)
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: Subsegment(Int32, Int32)
  nameWithType: StringSegment.Subsegment(Int32, Int32)
  fullName: Microsoft.Extensions.Primitives.StringSegment.Subsegment(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Subsegment
    path: ../aspnet/Common/src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 281
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nRetrieves a <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref> that represents a substring from this <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref>.\nThe <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref> starts at the position specified by <code data-dev-comment-type=\"paramref\" class=\"paramref\">offset</code> and has the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">length</code>.\n"
  example: []
  syntax:
    content: public StringSegment Subsegment(int offset, int length)
    parameters:
    - id: offset
      type: System.Int32
      description: The zero-based starting character position of a substring in this <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref>.
    - id: length
      type: System.Int32
      description: The number of characters in the substring.
    return:
      type: Microsoft.Extensions.Primitives.StringSegment
      description: A <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref> that is equivalent to the substring of length <code data-dev-comment-type="paramref" class="paramref">length</code> that begins at <code data-dev-comment-type="paramref" class="paramref">offset</code> in this <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Function Subsegment(offset As Integer, length As Integer) As StringSegment
  overload: Microsoft.Extensions.Primitives.StringSegment.Subsegment*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Primitives.StringSegment.IndexOf(System.Char,System.Int32,System.Int32)
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.IndexOf(System.Char,System.Int32,System.Int32)
  id: IndexOf(System.Char,System.Int32,System.Int32)
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: IndexOf(Char, Int32, Int32)
  nameWithType: StringSegment.IndexOf(Char, Int32, Int32)
  fullName: Microsoft.Extensions.Primitives.StringSegment.IndexOf(System.Char, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: IndexOf
    path: ../aspnet/Common/src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 309
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nGets the zero-based index of the first occurrence of the character <code data-dev-comment-type=\"paramref\" class=\"paramref\">c</code> in this <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref>.\nThe search starts at <code data-dev-comment-type=\"paramref\" class=\"paramref\">start</code> and examines a specified number of <code data-dev-comment-type=\"paramref\" class=\"paramref\">count</code> character positions.\n"
  example: []
  syntax:
    content: public int IndexOf(char c, int start, int count)
    parameters:
    - id: c
      type: System.Char
      description: The Unicode character to seek.
    - id: start
      type: System.Int32
      description: 'The zero-based index position at which the search starts. '
    - id: count
      type: System.Int32
      description: The number of characters to examine.
    return:
      type: System.Int32
      description: The zero-based index position of <code data-dev-comment-type="paramref" class="paramref">c</code> from the beginning of the <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref> if that character is found, or -1 if it is not.
    content.vb: Public Function IndexOf(c As Char, start As Integer, count As Integer) As Integer
  overload: Microsoft.Extensions.Primitives.StringSegment.IndexOf*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Primitives.StringSegment.IndexOf(System.Char,System.Int32)
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.IndexOf(System.Char,System.Int32)
  id: IndexOf(System.Char,System.Int32)
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: IndexOf(Char, Int32)
  nameWithType: StringSegment.IndexOf(Char, Int32)
  fullName: Microsoft.Extensions.Primitives.StringSegment.IndexOf(System.Char, System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: IndexOf
    path: ../aspnet/Common/src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 338
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nGets the zero-based index of the first occurrence of the character <code data-dev-comment-type=\"paramref\" class=\"paramref\">c</code> in this <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref>.\nThe search starts at <code data-dev-comment-type=\"paramref\" class=\"paramref\">start</code>.\n"
  example: []
  syntax:
    content: public int IndexOf(char c, int start)
    parameters:
    - id: c
      type: System.Char
      description: The Unicode character to seek.
    - id: start
      type: System.Int32
      description: 'The zero-based index position at which the search starts. '
    return:
      type: System.Int32
      description: The zero-based index position of <code data-dev-comment-type="paramref" class="paramref">c</code> from the beginning of the <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref> if that character is found, or -1 if it is not.
    content.vb: Public Function IndexOf(c As Char, start As Integer) As Integer
  overload: Microsoft.Extensions.Primitives.StringSegment.IndexOf*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Primitives.StringSegment.IndexOf(System.Char)
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.IndexOf(System.Char)
  id: IndexOf(System.Char)
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: IndexOf(Char)
  nameWithType: StringSegment.IndexOf(Char)
  fullName: Microsoft.Extensions.Primitives.StringSegment.IndexOf(System.Char)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: IndexOf
    path: ../aspnet/Common/src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 348
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nGets the zero-based index of the first occurrence of the character <code data-dev-comment-type=\"paramref\" class=\"paramref\">c</code> in this <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public int IndexOf(char c)
    parameters:
    - id: c
      type: System.Char
      description: The Unicode character to seek.
    return:
      type: System.Int32
      description: The zero-based index position of <code data-dev-comment-type="paramref" class="paramref">c</code> from the beginning of the <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref> if that character is found, or -1 if it is not.
    content.vb: Public Function IndexOf(c As Char) As Integer
  overload: Microsoft.Extensions.Primitives.StringSegment.IndexOf*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Primitives.StringSegment.Trim
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.Trim
  id: Trim
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: Trim()
  nameWithType: StringSegment.Trim()
  fullName: Microsoft.Extensions.Primitives.StringSegment.Trim()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Trim
    path: ../aspnet/Common/src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 357
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nRemoves all leading and trailing whitespaces.\n"
  example: []
  syntax:
    content: public StringSegment Trim()
    return:
      type: Microsoft.Extensions.Primitives.StringSegment
      description: The trimmed <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function Trim As StringSegment
  overload: Microsoft.Extensions.Primitives.StringSegment.Trim*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Primitives.StringSegment.TrimStart
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.TrimStart
  id: TrimStart
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: TrimStart()
  nameWithType: StringSegment.TrimStart()
  fullName: Microsoft.Extensions.Primitives.StringSegment.TrimStart()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: TrimStart
    path: ../aspnet/Common/src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 366
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nRemoves all leading whitespaces.\n"
  example: []
  syntax:
    content: public StringSegment TrimStart()
    return:
      type: Microsoft.Extensions.Primitives.StringSegment
      description: The trimmed <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function TrimStart As StringSegment
  overload: Microsoft.Extensions.Primitives.StringSegment.TrimStart*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Primitives.StringSegment.TrimEnd
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.TrimEnd
  id: TrimEnd
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: TrimEnd()
  nameWithType: StringSegment.TrimEnd()
  fullName: Microsoft.Extensions.Primitives.StringSegment.TrimEnd()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: TrimEnd
    path: ../aspnet/Common/src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 386
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nRemoves all trailing whitespaces.\n"
  example: []
  syntax:
    content: public StringSegment TrimEnd()
    return:
      type: Microsoft.Extensions.Primitives.StringSegment
      description: The trimmed <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function TrimEnd As StringSegment
  overload: Microsoft.Extensions.Primitives.StringSegment.TrimEnd*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Primitives.StringSegment.ToString
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.ToString
  id: ToString
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: StringSegment.ToString()
  fullName: Microsoft.Extensions.Primitives.StringSegment.ToString()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: ToString
    path: ../aspnet/Common/src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 406
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nReturns the <see cref=\"!:System.String\"></see> represented by this <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref> or <pre><code>String.Empty</code></pre> if the <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref> does not contain a value.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: The <see cref="!:System.String"></see> represented by this <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref> or <pre><code>String.Empty</code></pre> if the <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref> does not contain a value.
    content.vb: Public Overrides Function ToString As String
  overload: Microsoft.Extensions.Primitives.StringSegment.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.Extensions.Primitives
  commentId: N:Microsoft.Extensions.Primitives
  isExternal: false
  name: Microsoft.Extensions.Primitives
  nameWithType: Microsoft.Extensions.Primitives
  fullName: Microsoft.Extensions.Primitives
- uid: IEquatable{Microsoft.Extensions.Primitives.StringSegment}
  commentId: '!:IEquatable{Microsoft.Extensions.Primitives.StringSegment}'
  definition: IEquatable`1
  name: IEquatable<StringSegment>
  nameWithType: IEquatable<StringSegment>
  fullName: IEquatable<Microsoft.Extensions.Primitives.StringSegment>
  nameWithType.vb: IEquatable(Of StringSegment)
  fullName.vb: IEquatable(Of Microsoft.Extensions.Primitives.StringSegment)
  name.vb: IEquatable(Of StringSegment)
  spec.csharp:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.Primitives.StringSegment
    name: StringSegment
    nameWithType: StringSegment
    fullName: Microsoft.Extensions.Primitives.StringSegment
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.Primitives.StringSegment
    name: StringSegment
    nameWithType: StringSegment
    fullName: Microsoft.Extensions.Primitives.StringSegment
  - name: )
    nameWithType: )
    fullName: )
- uid: IEquatable{System.String}
  commentId: '!:IEquatable{System.String}'
  definition: IEquatable`1
  name: IEquatable<String>
  nameWithType: IEquatable<String>
  fullName: IEquatable<System.String>
  nameWithType.vb: IEquatable(Of String)
  fullName.vb: IEquatable(Of System.String)
  name.vb: IEquatable(Of String)
  spec.csharp:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEquatable`1
  isExternal: true
  name: IEquatable<>
  nameWithType: IEquatable<>
  fullName: IEquatable<>
  nameWithType.vb: IEquatable(Of )
  fullName.vb: IEquatable(Of )
  name.vb: IEquatable(Of )
  spec.csharp:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Primitives.StringSegment
  commentId: T:Microsoft.Extensions.Primitives.StringSegment
  parent: Microsoft.Extensions.Primitives
  isExternal: false
  name: StringSegment
  nameWithType: StringSegment
  fullName: Microsoft.Extensions.Primitives.StringSegment
- uid: Microsoft.Extensions.Primitives.StringSegment.#ctor*
  commentId: Overload:Microsoft.Extensions.Primitives.StringSegment.#ctor
  isExternal: false
  name: StringSegment
  nameWithType: StringSegment.StringSegment
  fullName: Microsoft.Extensions.Primitives.StringSegment.StringSegment
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Extensions.Primitives.StringSegment.Buffer*
  commentId: Overload:Microsoft.Extensions.Primitives.StringSegment.Buffer
  isExternal: false
  name: Buffer
  nameWithType: StringSegment.Buffer
  fullName: Microsoft.Extensions.Primitives.StringSegment.Buffer
- uid: Microsoft.Extensions.Primitives.StringSegment.Offset*
  commentId: Overload:Microsoft.Extensions.Primitives.StringSegment.Offset
  isExternal: false
  name: Offset
  nameWithType: StringSegment.Offset
  fullName: Microsoft.Extensions.Primitives.StringSegment.Offset
- uid: Microsoft.Extensions.Primitives.StringSegment.Length*
  commentId: Overload:Microsoft.Extensions.Primitives.StringSegment.Length
  isExternal: false
  name: Length
  nameWithType: StringSegment.Length
  fullName: Microsoft.Extensions.Primitives.StringSegment.Length
- uid: Microsoft.Extensions.Primitives.StringSegment.Value*
  commentId: Overload:Microsoft.Extensions.Primitives.StringSegment.Value
  isExternal: false
  name: Value
  nameWithType: StringSegment.Value
  fullName: Microsoft.Extensions.Primitives.StringSegment.Value
- uid: Microsoft.Extensions.Primitives.StringSegment.HasValue*
  commentId: Overload:Microsoft.Extensions.Primitives.StringSegment.HasValue
  isExternal: false
  name: HasValue
  nameWithType: StringSegment.HasValue
  fullName: Microsoft.Extensions.Primitives.StringSegment.HasValue
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Extensions.Primitives.StringSegment.Equals*
  commentId: Overload:Microsoft.Extensions.Primitives.StringSegment.Equals
  isExternal: false
  name: Equals
  nameWithType: StringSegment.Equals
  fullName: Microsoft.Extensions.Primitives.StringSegment.Equals
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: StringComparison
  isExternal: true
  name: StringComparison
  nameWithType: StringComparison
  fullName: StringComparison
- uid: Microsoft.Extensions.Primitives.StringSegment.GetHashCode*
  commentId: Overload:Microsoft.Extensions.Primitives.StringSegment.GetHashCode
  isExternal: false
  name: GetHashCode
  nameWithType: StringSegment.GetHashCode
  fullName: Microsoft.Extensions.Primitives.StringSegment.GetHashCode
- uid: Microsoft.Extensions.Primitives.StringSegment.op_Equality*
  commentId: Overload:Microsoft.Extensions.Primitives.StringSegment.op_Equality
  isExternal: false
  name: Equality
  nameWithType: StringSegment.Equality
  fullName: Microsoft.Extensions.Primitives.StringSegment.Equality
- uid: Microsoft.Extensions.Primitives.StringSegment.op_Inequality*
  commentId: Overload:Microsoft.Extensions.Primitives.StringSegment.op_Inequality
  isExternal: false
  name: Inequality
  nameWithType: StringSegment.Inequality
  fullName: Microsoft.Extensions.Primitives.StringSegment.Inequality
- uid: Microsoft.Extensions.Primitives.StringSegment.StartsWith*
  commentId: Overload:Microsoft.Extensions.Primitives.StringSegment.StartsWith
  isExternal: false
  name: StartsWith
  nameWithType: StringSegment.StartsWith
  fullName: Microsoft.Extensions.Primitives.StringSegment.StartsWith
- uid: Microsoft.Extensions.Primitives.StringSegment.EndsWith*
  commentId: Overload:Microsoft.Extensions.Primitives.StringSegment.EndsWith
  isExternal: false
  name: EndsWith
  nameWithType: StringSegment.EndsWith
  fullName: Microsoft.Extensions.Primitives.StringSegment.EndsWith
- uid: Microsoft.Extensions.Primitives.StringSegment.Substring*
  commentId: Overload:Microsoft.Extensions.Primitives.StringSegment.Substring
  isExternal: false
  name: Substring
  nameWithType: StringSegment.Substring
  fullName: Microsoft.Extensions.Primitives.StringSegment.Substring
- uid: Microsoft.Extensions.Primitives.StringSegment.Subsegment*
  commentId: Overload:Microsoft.Extensions.Primitives.StringSegment.Subsegment
  isExternal: false
  name: Subsegment
  nameWithType: StringSegment.Subsegment
  fullName: Microsoft.Extensions.Primitives.StringSegment.Subsegment
- uid: Microsoft.Extensions.Primitives.StringSegment.IndexOf*
  commentId: Overload:Microsoft.Extensions.Primitives.StringSegment.IndexOf
  isExternal: false
  name: IndexOf
  nameWithType: StringSegment.IndexOf
  fullName: Microsoft.Extensions.Primitives.StringSegment.IndexOf
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: Microsoft.Extensions.Primitives.StringSegment.Trim*
  commentId: Overload:Microsoft.Extensions.Primitives.StringSegment.Trim
  isExternal: false
  name: Trim
  nameWithType: StringSegment.Trim
  fullName: Microsoft.Extensions.Primitives.StringSegment.Trim
- uid: Microsoft.Extensions.Primitives.StringSegment.TrimStart*
  commentId: Overload:Microsoft.Extensions.Primitives.StringSegment.TrimStart
  isExternal: false
  name: TrimStart
  nameWithType: StringSegment.TrimStart
  fullName: Microsoft.Extensions.Primitives.StringSegment.TrimStart
- uid: Microsoft.Extensions.Primitives.StringSegment.TrimEnd*
  commentId: Overload:Microsoft.Extensions.Primitives.StringSegment.TrimEnd
  isExternal: false
  name: TrimEnd
  nameWithType: StringSegment.TrimEnd
  fullName: Microsoft.Extensions.Primitives.StringSegment.TrimEnd
- uid: Microsoft.Extensions.Primitives.StringSegment.ToString*
  commentId: Overload:Microsoft.Extensions.Primitives.StringSegment.ToString
  isExternal: false
  name: ToString
  nameWithType: StringSegment.ToString
  fullName: Microsoft.Extensions.Primitives.StringSegment.ToString
shouldSkipMarkup: true
