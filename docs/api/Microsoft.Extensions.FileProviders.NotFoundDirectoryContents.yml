### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.FileProviders.NotFoundDirectoryContents
  commentId: T:Microsoft.Extensions.FileProviders.NotFoundDirectoryContents
  id: NotFoundDirectoryContents
  parent: Microsoft.Extensions.FileProviders
  children:
  - Microsoft.Extensions.FileProviders.NotFoundDirectoryContents.Exists
  - Microsoft.Extensions.FileProviders.NotFoundDirectoryContents.GetEnumerator
  langs:
  - csharp
  - vb
  name: NotFoundDirectoryContents
  nameWithType: NotFoundDirectoryContents
  fullName: Microsoft.Extensions.FileProviders.NotFoundDirectoryContents
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Abstractions/NotFoundDirectoryContents.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: NotFoundDirectoryContents
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Abstractions/NotFoundDirectoryContents.cs
    startLine: 12
  assemblies:
  - Microsoft.Extensions.FileProviders.Abstractions
  namespace: Microsoft.Extensions.FileProviders
  summary: "\nRepresents a non-existing directory\n"
  example: []
  syntax:
    content: 'public class NotFoundDirectoryContents : object, IDirectoryContents, IEnumerable<IFileInfo>'
    content.vb: >-
      Public Class NotFoundDirectoryContents
          Inherits Object
          Implements IDirectoryContents, IEnumerable(Of IFileInfo)
  inheritance:
  - System.Object
  implements:
  - Microsoft.Extensions.FileProviders.IDirectoryContents
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.FileProviders.NotFoundDirectoryContents.Exists
  commentId: P:Microsoft.Extensions.FileProviders.NotFoundDirectoryContents.Exists
  id: Exists
  parent: Microsoft.Extensions.FileProviders.NotFoundDirectoryContents
  langs:
  - csharp
  - vb
  name: Exists
  nameWithType: NotFoundDirectoryContents.Exists
  fullName: Microsoft.Extensions.FileProviders.NotFoundDirectoryContents.Exists
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Abstractions/NotFoundDirectoryContents.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: Exists
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Abstractions/NotFoundDirectoryContents.cs
    startLine: 14
  assemblies:
  - Microsoft.Extensions.FileProviders.Abstractions
  namespace: Microsoft.Extensions.FileProviders
  syntax:
    content: public bool Exists { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property Exists As Boolean
  overload: Microsoft.Extensions.FileProviders.NotFoundDirectoryContents.Exists*
  implements:
  - Microsoft.Extensions.FileProviders.IDirectoryContents.Exists
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.FileProviders.NotFoundDirectoryContents.GetEnumerator
  commentId: M:Microsoft.Extensions.FileProviders.NotFoundDirectoryContents.GetEnumerator
  id: GetEnumerator
  parent: Microsoft.Extensions.FileProviders.NotFoundDirectoryContents
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: NotFoundDirectoryContents.GetEnumerator()
  fullName: Microsoft.Extensions.FileProviders.NotFoundDirectoryContents.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Abstractions/NotFoundDirectoryContents.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: GetEnumerator
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Abstractions/NotFoundDirectoryContents.cs
    startLine: 16
  assemblies:
  - Microsoft.Extensions.FileProviders.Abstractions
  namespace: Microsoft.Extensions.FileProviders
  syntax:
    content: public IEnumerator<IFileInfo> GetEnumerator()
    return:
      type: IEnumerator{Microsoft.Extensions.FileProviders.IFileInfo}
    content.vb: Public Function GetEnumerator As IEnumerator(Of IFileInfo)
  overload: Microsoft.Extensions.FileProviders.NotFoundDirectoryContents.GetEnumerator*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Extensions.FileProviders
  commentId: N:Microsoft.Extensions.FileProviders
  isExternal: false
  name: Microsoft.Extensions.FileProviders
  nameWithType: Microsoft.Extensions.FileProviders
  fullName: Microsoft.Extensions.FileProviders
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Extensions.FileProviders.IDirectoryContents
  commentId: T:Microsoft.Extensions.FileProviders.IDirectoryContents
  parent: Microsoft.Extensions.FileProviders
  isExternal: false
  name: IDirectoryContents
  nameWithType: IDirectoryContents
  fullName: Microsoft.Extensions.FileProviders.IDirectoryContents
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.FileProviders.NotFoundDirectoryContents.Exists*
  commentId: Overload:Microsoft.Extensions.FileProviders.NotFoundDirectoryContents.Exists
  isExternal: false
  name: Exists
  nameWithType: NotFoundDirectoryContents.Exists
  fullName: Microsoft.Extensions.FileProviders.NotFoundDirectoryContents.Exists
- uid: Microsoft.Extensions.FileProviders.IDirectoryContents.Exists
  commentId: P:Microsoft.Extensions.FileProviders.IDirectoryContents.Exists
  parent: Microsoft.Extensions.FileProviders.IDirectoryContents
  isExternal: false
  name: Exists
  nameWithType: IDirectoryContents.Exists
  fullName: Microsoft.Extensions.FileProviders.IDirectoryContents.Exists
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Extensions.FileProviders.NotFoundDirectoryContents.GetEnumerator*
  commentId: Overload:Microsoft.Extensions.FileProviders.NotFoundDirectoryContents.GetEnumerator
  isExternal: false
  name: GetEnumerator
  nameWithType: NotFoundDirectoryContents.GetEnumerator
  fullName: Microsoft.Extensions.FileProviders.NotFoundDirectoryContents.GetEnumerator
- uid: IEnumerator{Microsoft.Extensions.FileProviders.IFileInfo}
  commentId: '!:IEnumerator{Microsoft.Extensions.FileProviders.IFileInfo}'
  definition: IEnumerator`1
  name: IEnumerator<IFileInfo>
  nameWithType: IEnumerator<IFileInfo>
  fullName: IEnumerator<Microsoft.Extensions.FileProviders.IFileInfo>
  nameWithType.vb: IEnumerator(Of IFileInfo)
  fullName.vb: IEnumerator(Of Microsoft.Extensions.FileProviders.IFileInfo)
  name.vb: IEnumerator(Of IFileInfo)
  spec.csharp:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.FileProviders.IFileInfo
    name: IFileInfo
    nameWithType: IFileInfo
    fullName: Microsoft.Extensions.FileProviders.IFileInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.FileProviders.IFileInfo
    name: IFileInfo
    nameWithType: IFileInfo
    fullName: Microsoft.Extensions.FileProviders.IFileInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerator`1
  isExternal: true
  name: IEnumerator<>
  nameWithType: IEnumerator<>
  fullName: IEnumerator<>
  nameWithType.vb: IEnumerator(Of )
  fullName.vb: IEnumerator(Of )
  name.vb: IEnumerator(Of )
  spec.csharp:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
