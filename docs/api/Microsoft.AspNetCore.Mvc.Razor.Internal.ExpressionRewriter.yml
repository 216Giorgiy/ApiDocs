### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ExpressionRewriter
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.Internal.ExpressionRewriter
  id: ExpressionRewriter
  parent: Microsoft.AspNetCore.Mvc.Razor.Internal
  children:
  - Microsoft.AspNetCore.Mvc.Razor.Internal.ExpressionRewriter.#ctor(SemanticModel)
  - Microsoft.AspNetCore.Mvc.Razor.Internal.ExpressionRewriter.VisitClassDeclaration(ClassDeclarationSyntax)
  - Microsoft.AspNetCore.Mvc.Razor.Internal.ExpressionRewriter.VisitSimpleLambdaExpression(SimpleLambdaExpressionSyntax)
  langs:
  - csharp
  - vb
  name: ExpressionRewriter
  nameWithType: ExpressionRewriter
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ExpressionRewriter
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ExpressionRewriter.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ExpressionRewriter
    path: ../aspnet/Mvc/src/Microsoft.AspNetCore.Mvc.Razor/Internal/ExpressionRewriter.cs
    startLine: 16
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor.Internal
  summary: "\nAn expression rewriter which can hoist a simple expression lambda into a private field.\n"
  example: []
  syntax:
    content: 'public class ExpressionRewriter : CSharpSyntaxRewriter'
    content.vb: >-
      Public Class ExpressionRewriter
          Inherits CSharpSyntaxRewriter
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ExpressionRewriter.#ctor(SemanticModel)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.Internal.ExpressionRewriter.#ctor(SemanticModel)
  id: '#ctor(SemanticModel)'
  parent: Microsoft.AspNetCore.Mvc.Razor.Internal.ExpressionRewriter
  langs:
  - csharp
  - vb
  name: ExpressionRewriter(SemanticModel)
  nameWithType: ExpressionRewriter.ExpressionRewriter(SemanticModel)
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ExpressionRewriter.ExpressionRewriter(SemanticModel)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ExpressionRewriter.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: .ctor
    path: ../aspnet/Mvc/src/Microsoft.AspNetCore.Mvc.Razor/Internal/ExpressionRewriter.cs
    startLine: 20
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor.Internal
  syntax:
    content: public ExpressionRewriter(SemanticModel semanticModel)
    parameters:
    - id: semanticModel
      type: SemanticModel
    content.vb: Public Sub New(semanticModel As SemanticModel)
  overload: Microsoft.AspNetCore.Mvc.Razor.Internal.ExpressionRewriter.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ExpressionRewriter.VisitClassDeclaration(ClassDeclarationSyntax)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.Internal.ExpressionRewriter.VisitClassDeclaration(ClassDeclarationSyntax)
  id: VisitClassDeclaration(ClassDeclarationSyntax)
  parent: Microsoft.AspNetCore.Mvc.Razor.Internal.ExpressionRewriter
  langs:
  - csharp
  - vb
  name: VisitClassDeclaration(ClassDeclarationSyntax)
  nameWithType: ExpressionRewriter.VisitClassDeclaration(ClassDeclarationSyntax)
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ExpressionRewriter.VisitClassDeclaration(ClassDeclarationSyntax)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ExpressionRewriter.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: VisitClassDeclaration
    path: ../aspnet/Mvc/src/Microsoft.AspNetCore.Mvc.Razor/Internal/ExpressionRewriter.cs
    startLine: 34
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor.Internal
  syntax:
    content: public override SyntaxNode VisitClassDeclaration(ClassDeclarationSyntax node)
    parameters:
    - id: node
      type: ClassDeclarationSyntax
    return:
      type: SyntaxNode
    content.vb: Public Overrides Function VisitClassDeclaration(node As ClassDeclarationSyntax) As SyntaxNode
  overload: Microsoft.AspNetCore.Mvc.Razor.Internal.ExpressionRewriter.VisitClassDeclaration*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ExpressionRewriter.VisitSimpleLambdaExpression(SimpleLambdaExpressionSyntax)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.Internal.ExpressionRewriter.VisitSimpleLambdaExpression(SimpleLambdaExpressionSyntax)
  id: VisitSimpleLambdaExpression(SimpleLambdaExpressionSyntax)
  parent: Microsoft.AspNetCore.Mvc.Razor.Internal.ExpressionRewriter
  langs:
  - csharp
  - vb
  name: VisitSimpleLambdaExpression(SimpleLambdaExpressionSyntax)
  nameWithType: ExpressionRewriter.VisitSimpleLambdaExpression(SimpleLambdaExpressionSyntax)
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ExpressionRewriter.VisitSimpleLambdaExpression(SimpleLambdaExpressionSyntax)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ExpressionRewriter.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: VisitSimpleLambdaExpression
    path: ../aspnet/Mvc/src/Microsoft.AspNetCore.Mvc.Razor/Internal/ExpressionRewriter.cs
    startLine: 79
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor.Internal
  syntax:
    content: public override SyntaxNode VisitSimpleLambdaExpression(SimpleLambdaExpressionSyntax node)
    parameters:
    - id: node
      type: SimpleLambdaExpressionSyntax
    return:
      type: SyntaxNode
    content.vb: Public Overrides Function VisitSimpleLambdaExpression(node As SimpleLambdaExpressionSyntax) As SyntaxNode
  overload: Microsoft.AspNetCore.Mvc.Razor.Internal.ExpressionRewriter.VisitSimpleLambdaExpression*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal
  commentId: N:Microsoft.AspNetCore.Mvc.Razor.Internal
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.Razor.Internal
  nameWithType: Microsoft.AspNetCore.Mvc.Razor.Internal
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ExpressionRewriter.#ctor*
  commentId: Overload:Microsoft.AspNetCore.Mvc.Razor.Internal.ExpressionRewriter.#ctor
  isExternal: false
  name: ExpressionRewriter
  nameWithType: ExpressionRewriter.ExpressionRewriter
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ExpressionRewriter.ExpressionRewriter
- uid: SemanticModel
  commentId: '!:SemanticModel'
  isExternal: true
  name: SemanticModel
  nameWithType: SemanticModel
  fullName: SemanticModel
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ExpressionRewriter.VisitClassDeclaration*
  commentId: Overload:Microsoft.AspNetCore.Mvc.Razor.Internal.ExpressionRewriter.VisitClassDeclaration
  isExternal: false
  name: VisitClassDeclaration
  nameWithType: ExpressionRewriter.VisitClassDeclaration
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ExpressionRewriter.VisitClassDeclaration
- uid: ClassDeclarationSyntax
  commentId: '!:ClassDeclarationSyntax'
  isExternal: true
  name: ClassDeclarationSyntax
  nameWithType: ClassDeclarationSyntax
  fullName: ClassDeclarationSyntax
- uid: SyntaxNode
  isExternal: true
  name: SyntaxNode
  nameWithType: SyntaxNode
  fullName: SyntaxNode
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ExpressionRewriter.VisitSimpleLambdaExpression*
  commentId: Overload:Microsoft.AspNetCore.Mvc.Razor.Internal.ExpressionRewriter.VisitSimpleLambdaExpression
  isExternal: false
  name: VisitSimpleLambdaExpression
  nameWithType: ExpressionRewriter.VisitSimpleLambdaExpression
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ExpressionRewriter.VisitSimpleLambdaExpression
- uid: SimpleLambdaExpressionSyntax
  commentId: '!:SimpleLambdaExpressionSyntax'
  isExternal: true
  name: SimpleLambdaExpressionSyntax
  nameWithType: SimpleLambdaExpressionSyntax
  fullName: SimpleLambdaExpressionSyntax
shouldSkipMarkup: true
