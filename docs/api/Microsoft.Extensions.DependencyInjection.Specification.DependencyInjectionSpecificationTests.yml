### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  commentId: T:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  id: DependencyInjectionSpecificationTests
  parent: Microsoft.Extensions.DependencyInjection.Specification
  children:
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.AttemptingToResolveNonexistentServiceReturnsNull
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ClosedServicesPreferredOverOpenGenericServices
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFuncs
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateServiceProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.DisposingScopeDisposesService
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.FactoryServicesAreCreatedAsPartOfCreatingObjectGraph
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.FactoryServicesCanBeCreatedByGetService
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceRegisteredServiceSingleton
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceRegisteredServiceTransient
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceUnregisteredService
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.LastServiceReplacesPreviousServices
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.MultipleServiceCanBeIEnumerableResolved
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NestedScopedServiceCanBeResolved
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NestedScopedServiceCanBeResolvedWithNoFallbackProvider
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NonexistentServiceCanBeIEnumerableResolved
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.OpenGenericServicesCanBeResolved
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.OuterServiceCanHaveOtherServicesInjected
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.RegistrationOrderIsPreservedWhenServicesAreIEnumerableResolved
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SafelyDisposeNestedProviderReferences
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ScopedServiceCanBeResolved
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ScopedServices_FromCachedScopeFactory_CanBeResolvedAndDisposed
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SelfResolveThenDispose
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceContainerPicksConstructorWithLongestMatches(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors)
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceContainerPicksConstructorWithLongestMatchesData
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceInstanceCanBeResolved
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceProviderRegistersServiceScopeFactory
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationType_ReturnDifferentInstancesPerResolution_ForTransientServices
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationType_ReturnSameInstancesPerResolution_ForSingletons
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationTypeCanBeResolved
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingleServiceCanBeIEnumerableResolved
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingletonServiceCanBeResolved
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingletonServicesComeFromRootProvider
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TransientServiceCanBeResolvedFromProvider
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TransientServiceCanBeResolvedFromScope
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorAcceptsAnyNumberOfAdditionalConstructorParametersToProvide(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorCanDisambiguateConstructorsWithUniqueArguments(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorCreateFactoryDoesNotAllowForAmbiguousConstructorMatches(System.Type)
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorEnablesYouToCreateAnyTypeWithServicesEvenWhenNotInIocContainer(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRequiresAllArgumentsCanBeAccepted(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRequiresPublicConstructor(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc,System.Type)
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRethrowsOriginalExceptionFromConstructor(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorWorksWithCtorWithOptionalArgs(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorWorksWithStaticCtor(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypesWithNonPublicConstructorData
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.UnRegisteredServiceAsConstructorParameterThrowsException(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  langs:
  - csharp
  - vb
  name: DependencyInjectionSpecificationTests
  nameWithType: DependencyInjectionSpecificationTests
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: DependencyInjectionSpecificationTests
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 11
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public abstract class DependencyInjectionSpecificationTests
    content.vb: Public MustInherit Class DependencyInjectionSpecificationTests
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFuncs
  commentId: P:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFuncs
  id: CreateInstanceFuncs
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: CreateInstanceFuncs
  nameWithType: DependencyInjectionSpecificationTests.CreateInstanceFuncs
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFuncs
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: CreateInstanceFuncs
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
    startLine: 31
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public static IEnumerable<object[]> CreateInstanceFuncs { get; }
    content.vb: Public Shared ReadOnly Property CreateInstanceFuncs As IEnumerable(Of Object())
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Object[]}
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorEnablesYouToCreateAnyTypeWithServicesEvenWhenNotInIocContainer(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorEnablesYouToCreateAnyTypeWithServicesEvenWhenNotInIocContainer(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  id: TypeActivatorEnablesYouToCreateAnyTypeWithServicesEvenWhenNotInIocContainer(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: TypeActivatorEnablesYouToCreateAnyTypeWithServicesEvenWhenNotInIocContainer(DependencyInjectionSpecificationTests.CreateInstanceFunc)
  nameWithType: DependencyInjectionSpecificationTests.TypeActivatorEnablesYouToCreateAnyTypeWithServicesEvenWhenNotInIocContainer(DependencyInjectionSpecificationTests.CreateInstanceFunc)
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorEnablesYouToCreateAnyTypeWithServicesEvenWhenNotInIocContainer(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TypeActivatorEnablesYouToCreateAnyTypeWithServicesEvenWhenNotInIocContainer
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
    startLine: 40
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Theory]

      [MemberData("CreateInstanceFuncs", new object[]{})]

      public void TypeActivatorEnablesYouToCreateAnyTypeWithServicesEvenWhenNotInIocContainer(DependencyInjectionSpecificationTests.CreateInstanceFunc createFunc)
    content.vb: >-
      <Theory>

      <MemberData("CreateInstanceFuncs", New Object() {})>

      Public Sub TypeActivatorEnablesYouToCreateAnyTypeWithServicesEvenWhenNotInIocContainer(createFunc As DependencyInjectionSpecificationTests.CreateInstanceFunc)
    parameters:
    - id: createFunc
      type: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorAcceptsAnyNumberOfAdditionalConstructorParametersToProvide(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorAcceptsAnyNumberOfAdditionalConstructorParametersToProvide(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  id: TypeActivatorAcceptsAnyNumberOfAdditionalConstructorParametersToProvide(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: TypeActivatorAcceptsAnyNumberOfAdditionalConstructorParametersToProvide(DependencyInjectionSpecificationTests.CreateInstanceFunc)
  nameWithType: DependencyInjectionSpecificationTests.TypeActivatorAcceptsAnyNumberOfAdditionalConstructorParametersToProvide(DependencyInjectionSpecificationTests.CreateInstanceFunc)
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorAcceptsAnyNumberOfAdditionalConstructorParametersToProvide(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TypeActivatorAcceptsAnyNumberOfAdditionalConstructorParametersToProvide
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
    startLine: 54
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Theory]

      [MemberData("CreateInstanceFuncs", new object[]{})]

      public void TypeActivatorAcceptsAnyNumberOfAdditionalConstructorParametersToProvide(DependencyInjectionSpecificationTests.CreateInstanceFunc createFunc)
    content.vb: >-
      <Theory>

      <MemberData("CreateInstanceFuncs", New Object() {})>

      Public Sub TypeActivatorAcceptsAnyNumberOfAdditionalConstructorParametersToProvide(createFunc As DependencyInjectionSpecificationTests.CreateInstanceFunc)
    parameters:
    - id: createFunc
      type: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorWorksWithStaticCtor(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorWorksWithStaticCtor(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  id: TypeActivatorWorksWithStaticCtor(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: TypeActivatorWorksWithStaticCtor(DependencyInjectionSpecificationTests.CreateInstanceFunc)
  nameWithType: DependencyInjectionSpecificationTests.TypeActivatorWorksWithStaticCtor(DependencyInjectionSpecificationTests.CreateInstanceFunc)
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorWorksWithStaticCtor(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TypeActivatorWorksWithStaticCtor
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
    startLine: 72
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Theory]

      [MemberData("CreateInstanceFuncs", new object[]{})]

      public void TypeActivatorWorksWithStaticCtor(DependencyInjectionSpecificationTests.CreateInstanceFunc createFunc)
    content.vb: >-
      <Theory>

      <MemberData("CreateInstanceFuncs", New Object() {})>

      Public Sub TypeActivatorWorksWithStaticCtor(createFunc As DependencyInjectionSpecificationTests.CreateInstanceFunc)
    parameters:
    - id: createFunc
      type: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorWorksWithCtorWithOptionalArgs(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorWorksWithCtorWithOptionalArgs(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  id: TypeActivatorWorksWithCtorWithOptionalArgs(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: TypeActivatorWorksWithCtorWithOptionalArgs(DependencyInjectionSpecificationTests.CreateInstanceFunc)
  nameWithType: DependencyInjectionSpecificationTests.TypeActivatorWorksWithCtorWithOptionalArgs(DependencyInjectionSpecificationTests.CreateInstanceFunc)
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorWorksWithCtorWithOptionalArgs(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TypeActivatorWorksWithCtorWithOptionalArgs
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
    startLine: 83
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Theory]

      [MemberData("CreateInstanceFuncs", new object[]{})]

      public void TypeActivatorWorksWithCtorWithOptionalArgs(DependencyInjectionSpecificationTests.CreateInstanceFunc createFunc)
    content.vb: >-
      <Theory>

      <MemberData("CreateInstanceFuncs", New Object() {})>

      Public Sub TypeActivatorWorksWithCtorWithOptionalArgs(createFunc As DependencyInjectionSpecificationTests.CreateInstanceFunc)
    parameters:
    - id: createFunc
      type: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorCanDisambiguateConstructorsWithUniqueArguments(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorCanDisambiguateConstructorsWithUniqueArguments(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  id: TypeActivatorCanDisambiguateConstructorsWithUniqueArguments(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: TypeActivatorCanDisambiguateConstructorsWithUniqueArguments(DependencyInjectionSpecificationTests.CreateInstanceFunc)
  nameWithType: DependencyInjectionSpecificationTests.TypeActivatorCanDisambiguateConstructorsWithUniqueArguments(DependencyInjectionSpecificationTests.CreateInstanceFunc)
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorCanDisambiguateConstructorsWithUniqueArguments(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TypeActivatorCanDisambiguateConstructorsWithUniqueArguments
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
    startLine: 99
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Theory]

      [MemberData("CreateInstanceFuncs", new object[]{})]

      public void TypeActivatorCanDisambiguateConstructorsWithUniqueArguments(DependencyInjectionSpecificationTests.CreateInstanceFunc createFunc)
    content.vb: >-
      <Theory>

      <MemberData("CreateInstanceFuncs", New Object() {})>

      Public Sub TypeActivatorCanDisambiguateConstructorsWithUniqueArguments(createFunc As DependencyInjectionSpecificationTests.CreateInstanceFunc)
    parameters:
    - id: createFunc
      type: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypesWithNonPublicConstructorData
  commentId: P:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypesWithNonPublicConstructorData
  id: TypesWithNonPublicConstructorData
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: TypesWithNonPublicConstructorData
  nameWithType: DependencyInjectionSpecificationTests.TypesWithNonPublicConstructorData
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypesWithNonPublicConstructorData
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TypesWithNonPublicConstructorData
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
    startLine: 118
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public static IEnumerable<object[]> TypesWithNonPublicConstructorData { get; }
    content.vb: Public Shared ReadOnly Property TypesWithNonPublicConstructorData As IEnumerable(Of Object())
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Object[]}
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRequiresPublicConstructor(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc,System.Type)
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRequiresPublicConstructor(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc,System.Type)
  id: TypeActivatorRequiresPublicConstructor(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc,System.Type)
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: TypeActivatorRequiresPublicConstructor(DependencyInjectionSpecificationTests.CreateInstanceFunc, Type)
  nameWithType: DependencyInjectionSpecificationTests.TypeActivatorRequiresPublicConstructor(DependencyInjectionSpecificationTests.CreateInstanceFunc, Type)
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRequiresPublicConstructor(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc, System.Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TypeActivatorRequiresPublicConstructor
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
    startLine: 123
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Theory]

      [MemberData("TypesWithNonPublicConstructorData", new object[]{})]

      public void TypeActivatorRequiresPublicConstructor(DependencyInjectionSpecificationTests.CreateInstanceFunc createFunc, Type type)
    content.vb: >-
      <Theory>

      <MemberData("TypesWithNonPublicConstructorData", New Object() {})>

      Public Sub TypeActivatorRequiresPublicConstructor(createFunc As DependencyInjectionSpecificationTests.CreateInstanceFunc, type As Type)
    parameters:
    - id: createFunc
      type: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc
    - id: type
      type: System.Type
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRequiresAllArgumentsCanBeAccepted(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRequiresAllArgumentsCanBeAccepted(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  id: TypeActivatorRequiresAllArgumentsCanBeAccepted(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: TypeActivatorRequiresAllArgumentsCanBeAccepted(DependencyInjectionSpecificationTests.CreateInstanceFunc)
  nameWithType: DependencyInjectionSpecificationTests.TypeActivatorRequiresAllArgumentsCanBeAccepted(DependencyInjectionSpecificationTests.CreateInstanceFunc)
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRequiresAllArgumentsCanBeAccepted(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TypeActivatorRequiresAllArgumentsCanBeAccepted
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
    startLine: 138
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Theory]

      [MemberData("CreateInstanceFuncs", new object[]{})]

      public void TypeActivatorRequiresAllArgumentsCanBeAccepted(DependencyInjectionSpecificationTests.CreateInstanceFunc createFunc)
    content.vb: >-
      <Theory>

      <MemberData("CreateInstanceFuncs", New Object() {})>

      Public Sub TypeActivatorRequiresAllArgumentsCanBeAccepted(createFunc As DependencyInjectionSpecificationTests.CreateInstanceFunc)
    parameters:
    - id: createFunc
      type: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRethrowsOriginalExceptionFromConstructor(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRethrowsOriginalExceptionFromConstructor(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  id: TypeActivatorRethrowsOriginalExceptionFromConstructor(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: TypeActivatorRethrowsOriginalExceptionFromConstructor(DependencyInjectionSpecificationTests.CreateInstanceFunc)
  nameWithType: DependencyInjectionSpecificationTests.TypeActivatorRethrowsOriginalExceptionFromConstructor(DependencyInjectionSpecificationTests.CreateInstanceFunc)
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRethrowsOriginalExceptionFromConstructor(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TypeActivatorRethrowsOriginalExceptionFromConstructor
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
    startLine: 158
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Theory]

      [MemberData("CreateInstanceFuncs", new object[]{})]

      public void TypeActivatorRethrowsOriginalExceptionFromConstructor(DependencyInjectionSpecificationTests.CreateInstanceFunc createFunc)
    content.vb: >-
      <Theory>

      <MemberData("CreateInstanceFuncs", New Object() {})>

      Public Sub TypeActivatorRethrowsOriginalExceptionFromConstructor(createFunc As DependencyInjectionSpecificationTests.CreateInstanceFunc)
    parameters:
    - id: createFunc
      type: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorCreateFactoryDoesNotAllowForAmbiguousConstructorMatches(System.Type)
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorCreateFactoryDoesNotAllowForAmbiguousConstructorMatches(System.Type)
  id: TypeActivatorCreateFactoryDoesNotAllowForAmbiguousConstructorMatches(System.Type)
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: TypeActivatorCreateFactoryDoesNotAllowForAmbiguousConstructorMatches(Type)
  nameWithType: DependencyInjectionSpecificationTests.TypeActivatorCreateFactoryDoesNotAllowForAmbiguousConstructorMatches(Type)
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorCreateFactoryDoesNotAllowForAmbiguousConstructorMatches(System.Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TypeActivatorCreateFactoryDoesNotAllowForAmbiguousConstructorMatches
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
    startLine: 174
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{typeof (string)})]

      [InlineData(new object[]{typeof (int)})]

      public void TypeActivatorCreateFactoryDoesNotAllowForAmbiguousConstructorMatches(Type paramType)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {GetType(String)})>

      <InlineData(New Object() {GetType(Integer)})>

      Public Sub TypeActivatorCreateFactoryDoesNotAllowForAmbiguousConstructorMatches(paramType As Type)
    parameters:
    - id: paramType
      type: System.Type
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceRegisteredServiceTransient
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceRegisteredServiceTransient
  id: GetServiceOrCreateInstanceRegisteredServiceTransient
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: GetServiceOrCreateInstanceRegisteredServiceTransient()
  nameWithType: DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceRegisteredServiceTransient()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceRegisteredServiceTransient()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: GetServiceOrCreateInstanceRegisteredServiceTransient
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
    startLine: 192
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Fact]

      public void GetServiceOrCreateInstanceRegisteredServiceTransient()
    content.vb: >-
      <Fact>

      Public Sub GetServiceOrCreateInstanceRegisteredServiceTransient
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceRegisteredServiceSingleton
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceRegisteredServiceSingleton
  id: GetServiceOrCreateInstanceRegisteredServiceSingleton
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: GetServiceOrCreateInstanceRegisteredServiceSingleton()
  nameWithType: DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceRegisteredServiceSingleton()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceRegisteredServiceSingleton()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: GetServiceOrCreateInstanceRegisteredServiceSingleton
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
    startLine: 218
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Fact]

      public void GetServiceOrCreateInstanceRegisteredServiceSingleton()
    content.vb: >-
      <Fact>

      Public Sub GetServiceOrCreateInstanceRegisteredServiceSingleton
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceUnregisteredService
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceUnregisteredService
  id: GetServiceOrCreateInstanceUnregisteredService
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: GetServiceOrCreateInstanceUnregisteredService()
  nameWithType: DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceUnregisteredService()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceUnregisteredService()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: GetServiceOrCreateInstanceUnregisteredService
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
    startLine: 245
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Fact]

      public void GetServiceOrCreateInstanceUnregisteredService()
    content.vb: >-
      <Fact>

      Public Sub GetServiceOrCreateInstanceUnregisteredService
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.UnRegisteredServiceAsConstructorParameterThrowsException(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.UnRegisteredServiceAsConstructorParameterThrowsException(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  id: UnRegisteredServiceAsConstructorParameterThrowsException(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: UnRegisteredServiceAsConstructorParameterThrowsException(DependencyInjectionSpecificationTests.CreateInstanceFunc)
  nameWithType: DependencyInjectionSpecificationTests.UnRegisteredServiceAsConstructorParameterThrowsException(DependencyInjectionSpecificationTests.CreateInstanceFunc)
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.UnRegisteredServiceAsConstructorParameterThrowsException(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: UnRegisteredServiceAsConstructorParameterThrowsException
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
    startLine: 273
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Theory]

      [MemberData("CreateInstanceFuncs", new object[]{})]

      public void UnRegisteredServiceAsConstructorParameterThrowsException(DependencyInjectionSpecificationTests.CreateInstanceFunc createFunc)
    content.vb: >-
      <Theory>

      <MemberData("CreateInstanceFuncs", New Object() {})>

      Public Sub UnRegisteredServiceAsConstructorParameterThrowsException(createFunc As DependencyInjectionSpecificationTests.CreateInstanceFunc)
    parameters:
    - id: createFunc
      type: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateServiceProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateServiceProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  id: CreateServiceProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: CreateServiceProvider(IServiceCollection)
  nameWithType: DependencyInjectionSpecificationTests.CreateServiceProvider(IServiceCollection)
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateServiceProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: CreateServiceProvider
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 13
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: protected abstract IServiceProvider CreateServiceProvider(IServiceCollection serviceCollection)
    content.vb: Protected MustOverride Function CreateServiceProvider(serviceCollection As IServiceCollection) As IServiceProvider
    parameters:
    - id: serviceCollection
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    return:
      type: System.IServiceProvider
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationTypeCanBeResolved
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationTypeCanBeResolved
  id: ServicesRegisteredWithImplementationTypeCanBeResolved
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: ServicesRegisteredWithImplementationTypeCanBeResolved()
  nameWithType: DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationTypeCanBeResolved()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationTypeCanBeResolved()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: ServicesRegisteredWithImplementationTypeCanBeResolved
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 15
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Fact]

      public void ServicesRegisteredWithImplementationTypeCanBeResolved()
    content.vb: >-
      <Fact>

      Public Sub ServicesRegisteredWithImplementationTypeCanBeResolved
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationType_ReturnDifferentInstancesPerResolution_ForTransientServices
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationType_ReturnDifferentInstancesPerResolution_ForTransientServices
  id: ServicesRegisteredWithImplementationType_ReturnDifferentInstancesPerResolution_ForTransientServices
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: ServicesRegisteredWithImplementationType_ReturnDifferentInstancesPerResolution_ForTransientServices()
  nameWithType: DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationType_ReturnDifferentInstancesPerResolution_ForTransientServices()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationType_ReturnDifferentInstancesPerResolution_ForTransientServices()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: ServicesRegisteredWithImplementationType_ReturnDifferentInstancesPerResolution_ForTransientServices
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 31
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Fact]

      public void ServicesRegisteredWithImplementationType_ReturnDifferentInstancesPerResolution_ForTransientServices()
    content.vb: >-
      <Fact>

      Public Sub ServicesRegisteredWithImplementationType_ReturnDifferentInstancesPerResolution_ForTransientServices
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationType_ReturnSameInstancesPerResolution_ForSingletons
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationType_ReturnSameInstancesPerResolution_ForSingletons
  id: ServicesRegisteredWithImplementationType_ReturnSameInstancesPerResolution_ForSingletons
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: ServicesRegisteredWithImplementationType_ReturnSameInstancesPerResolution_ForSingletons()
  nameWithType: DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationType_ReturnSameInstancesPerResolution_ForSingletons()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationType_ReturnSameInstancesPerResolution_ForSingletons()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: ServicesRegisteredWithImplementationType_ReturnSameInstancesPerResolution_ForSingletons
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 49
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Fact]

      public void ServicesRegisteredWithImplementationType_ReturnSameInstancesPerResolution_ForSingletons()
    content.vb: >-
      <Fact>

      Public Sub ServicesRegisteredWithImplementationType_ReturnSameInstancesPerResolution_ForSingletons
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceInstanceCanBeResolved
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceInstanceCanBeResolved
  id: ServiceInstanceCanBeResolved
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: ServiceInstanceCanBeResolved()
  nameWithType: DependencyInjectionSpecificationTests.ServiceInstanceCanBeResolved()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceInstanceCanBeResolved()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: ServiceInstanceCanBeResolved
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 67
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Fact]

      public void ServiceInstanceCanBeResolved()
    content.vb: >-
      <Fact>

      Public Sub ServiceInstanceCanBeResolved
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TransientServiceCanBeResolvedFromProvider
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TransientServiceCanBeResolvedFromProvider
  id: TransientServiceCanBeResolvedFromProvider
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: TransientServiceCanBeResolvedFromProvider()
  nameWithType: DependencyInjectionSpecificationTests.TransientServiceCanBeResolvedFromProvider()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TransientServiceCanBeResolvedFromProvider()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TransientServiceCanBeResolvedFromProvider
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 83
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Fact]

      public void TransientServiceCanBeResolvedFromProvider()
    content.vb: >-
      <Fact>

      Public Sub TransientServiceCanBeResolvedFromProvider
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TransientServiceCanBeResolvedFromScope
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TransientServiceCanBeResolvedFromScope
  id: TransientServiceCanBeResolvedFromScope
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: TransientServiceCanBeResolvedFromScope()
  nameWithType: DependencyInjectionSpecificationTests.TransientServiceCanBeResolvedFromScope()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TransientServiceCanBeResolvedFromScope()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TransientServiceCanBeResolvedFromScope
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 100
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Fact]

      public void TransientServiceCanBeResolvedFromScope()
    content.vb: >-
      <Fact>

      Public Sub TransientServiceCanBeResolvedFromScope
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingleServiceCanBeIEnumerableResolved
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingleServiceCanBeIEnumerableResolved
  id: SingleServiceCanBeIEnumerableResolved
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: SingleServiceCanBeIEnumerableResolved()
  nameWithType: DependencyInjectionSpecificationTests.SingleServiceCanBeIEnumerableResolved()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingleServiceCanBeIEnumerableResolved()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: SingleServiceCanBeIEnumerableResolved
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 124
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Fact]

      public void SingleServiceCanBeIEnumerableResolved()
    content.vb: >-
      <Fact>

      Public Sub SingleServiceCanBeIEnumerableResolved
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.MultipleServiceCanBeIEnumerableResolved
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.MultipleServiceCanBeIEnumerableResolved
  id: MultipleServiceCanBeIEnumerableResolved
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: MultipleServiceCanBeIEnumerableResolved()
  nameWithType: DependencyInjectionSpecificationTests.MultipleServiceCanBeIEnumerableResolved()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.MultipleServiceCanBeIEnumerableResolved()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: MultipleServiceCanBeIEnumerableResolved
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 141
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Fact]

      public void MultipleServiceCanBeIEnumerableResolved()
    content.vb: >-
      <Fact>

      Public Sub MultipleServiceCanBeIEnumerableResolved
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.RegistrationOrderIsPreservedWhenServicesAreIEnumerableResolved
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.RegistrationOrderIsPreservedWhenServicesAreIEnumerableResolved
  id: RegistrationOrderIsPreservedWhenServicesAreIEnumerableResolved
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: RegistrationOrderIsPreservedWhenServicesAreIEnumerableResolved()
  nameWithType: DependencyInjectionSpecificationTests.RegistrationOrderIsPreservedWhenServicesAreIEnumerableResolved()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.RegistrationOrderIsPreservedWhenServicesAreIEnumerableResolved()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: RegistrationOrderIsPreservedWhenServicesAreIEnumerableResolved
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 159
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Fact]

      public void RegistrationOrderIsPreservedWhenServicesAreIEnumerableResolved()
    content.vb: >-
      <Fact>

      Public Sub RegistrationOrderIsPreservedWhenServicesAreIEnumerableResolved
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.OuterServiceCanHaveOtherServicesInjected
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.OuterServiceCanHaveOtherServicesInjected
  id: OuterServiceCanHaveOtherServicesInjected
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: OuterServiceCanHaveOtherServicesInjected()
  nameWithType: DependencyInjectionSpecificationTests.OuterServiceCanHaveOtherServicesInjected()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.OuterServiceCanHaveOtherServicesInjected()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: OuterServiceCanHaveOtherServicesInjected
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 186
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Fact]

      public void OuterServiceCanHaveOtherServicesInjected()
    content.vb: >-
      <Fact>

      Public Sub OuterServiceCanHaveOtherServicesInjected
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.FactoryServicesCanBeCreatedByGetService
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.FactoryServicesCanBeCreatedByGetService
  id: FactoryServicesCanBeCreatedByGetService
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: FactoryServicesCanBeCreatedByGetService()
  nameWithType: DependencyInjectionSpecificationTests.FactoryServicesCanBeCreatedByGetService()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.FactoryServicesCanBeCreatedByGetService()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: FactoryServicesCanBeCreatedByGetService
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 208
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Fact]

      public void FactoryServicesCanBeCreatedByGetService()
    content.vb: >-
      <Fact>

      Public Sub FactoryServicesCanBeCreatedByGetService
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.FactoryServicesAreCreatedAsPartOfCreatingObjectGraph
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.FactoryServicesAreCreatedAsPartOfCreatingObjectGraph
  id: FactoryServicesAreCreatedAsPartOfCreatingObjectGraph
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: FactoryServicesAreCreatedAsPartOfCreatingObjectGraph()
  nameWithType: DependencyInjectionSpecificationTests.FactoryServicesAreCreatedAsPartOfCreatingObjectGraph()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.FactoryServicesAreCreatedAsPartOfCreatingObjectGraph()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: FactoryServicesAreCreatedAsPartOfCreatingObjectGraph
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 235
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Fact]

      public void FactoryServicesAreCreatedAsPartOfCreatingObjectGraph()
    content.vb: >-
      <Fact>

      Public Sub FactoryServicesAreCreatedAsPartOfCreatingObjectGraph
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.LastServiceReplacesPreviousServices
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.LastServiceReplacesPreviousServices
  id: LastServiceReplacesPreviousServices
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: LastServiceReplacesPreviousServices()
  nameWithType: DependencyInjectionSpecificationTests.LastServiceReplacesPreviousServices()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.LastServiceReplacesPreviousServices()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: LastServiceReplacesPreviousServices
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 279
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Fact]

      public void LastServiceReplacesPreviousServices()
    content.vb: >-
      <Fact>

      Public Sub LastServiceReplacesPreviousServices
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingletonServiceCanBeResolved
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingletonServiceCanBeResolved
  id: SingletonServiceCanBeResolved
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: SingletonServiceCanBeResolved()
  nameWithType: DependencyInjectionSpecificationTests.SingletonServiceCanBeResolved()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingletonServiceCanBeResolved()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: SingletonServiceCanBeResolved
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 295
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Fact]

      public void SingletonServiceCanBeResolved()
    content.vb: >-
      <Fact>

      Public Sub SingletonServiceCanBeResolved
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceProviderRegistersServiceScopeFactory
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceProviderRegistersServiceScopeFactory
  id: ServiceProviderRegistersServiceScopeFactory
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: ServiceProviderRegistersServiceScopeFactory()
  nameWithType: DependencyInjectionSpecificationTests.ServiceProviderRegistersServiceScopeFactory()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceProviderRegistersServiceScopeFactory()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: ServiceProviderRegistersServiceScopeFactory
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 312
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Fact]

      public void ServiceProviderRegistersServiceScopeFactory()
    content.vb: >-
      <Fact>

      Public Sub ServiceProviderRegistersServiceScopeFactory
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ScopedServiceCanBeResolved
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ScopedServiceCanBeResolved
  id: ScopedServiceCanBeResolved
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: ScopedServiceCanBeResolved()
  nameWithType: DependencyInjectionSpecificationTests.ScopedServiceCanBeResolved()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ScopedServiceCanBeResolved()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: ScopedServiceCanBeResolved
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 326
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Fact]

      public void ScopedServiceCanBeResolved()
    content.vb: >-
      <Fact>

      Public Sub ScopedServiceCanBeResolved
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NestedScopedServiceCanBeResolved
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NestedScopedServiceCanBeResolved
  id: NestedScopedServiceCanBeResolved
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: NestedScopedServiceCanBeResolved()
  nameWithType: DependencyInjectionSpecificationTests.NestedScopedServiceCanBeResolved()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NestedScopedServiceCanBeResolved()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: NestedScopedServiceCanBeResolved
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 348
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Fact]

      public void NestedScopedServiceCanBeResolved()
    content.vb: >-
      <Fact>

      Public Sub NestedScopedServiceCanBeResolved
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ScopedServices_FromCachedScopeFactory_CanBeResolvedAndDisposed
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ScopedServices_FromCachedScopeFactory_CanBeResolvedAndDisposed
  id: ScopedServices_FromCachedScopeFactory_CanBeResolvedAndDisposed
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: ScopedServices_FromCachedScopeFactory_CanBeResolvedAndDisposed()
  nameWithType: DependencyInjectionSpecificationTests.ScopedServices_FromCachedScopeFactory_CanBeResolvedAndDisposed()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ScopedServices_FromCachedScopeFactory_CanBeResolvedAndDisposed()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: ScopedServices_FromCachedScopeFactory_CanBeResolvedAndDisposed
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 374
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Fact]

      public void ScopedServices_FromCachedScopeFactory_CanBeResolvedAndDisposed()
    content.vb: >-
      <Fact>

      Public Sub ScopedServices_FromCachedScopeFactory_CanBeResolvedAndDisposed
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.DisposingScopeDisposesService
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.DisposingScopeDisposesService
  id: DisposingScopeDisposesService
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: DisposingScopeDisposesService()
  nameWithType: DependencyInjectionSpecificationTests.DisposingScopeDisposesService()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.DisposingScopeDisposesService()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: DisposingScopeDisposesService
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 411
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Fact]

      public void DisposingScopeDisposesService()
    content.vb: >-
      <Fact>

      Public Sub DisposingScopeDisposesService
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SelfResolveThenDispose
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SelfResolveThenDispose
  id: SelfResolveThenDispose
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: SelfResolveThenDispose()
  nameWithType: DependencyInjectionSpecificationTests.SelfResolveThenDispose()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SelfResolveThenDispose()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: SelfResolveThenDispose
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 456
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Fact]

      public void SelfResolveThenDispose()
    content.vb: >-
      <Fact>

      Public Sub SelfResolveThenDispose
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SafelyDisposeNestedProviderReferences
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SafelyDisposeNestedProviderReferences
  id: SafelyDisposeNestedProviderReferences
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: SafelyDisposeNestedProviderReferences()
  nameWithType: DependencyInjectionSpecificationTests.SafelyDisposeNestedProviderReferences()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SafelyDisposeNestedProviderReferences()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: SafelyDisposeNestedProviderReferences
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 471
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Fact]

      public void SafelyDisposeNestedProviderReferences()
    content.vb: >-
      <Fact>

      Public Sub SafelyDisposeNestedProviderReferences
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingletonServicesComeFromRootProvider
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingletonServicesComeFromRootProvider
  id: SingletonServicesComeFromRootProvider
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: SingletonServicesComeFromRootProvider()
  nameWithType: DependencyInjectionSpecificationTests.SingletonServicesComeFromRootProvider()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingletonServicesComeFromRootProvider()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: SingletonServicesComeFromRootProvider
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 487
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Fact]

      public void SingletonServicesComeFromRootProvider()
    content.vb: >-
      <Fact>

      Public Sub SingletonServicesComeFromRootProvider
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NestedScopedServiceCanBeResolvedWithNoFallbackProvider
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NestedScopedServiceCanBeResolvedWithNoFallbackProvider
  id: NestedScopedServiceCanBeResolvedWithNoFallbackProvider
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: NestedScopedServiceCanBeResolvedWithNoFallbackProvider()
  nameWithType: DependencyInjectionSpecificationTests.NestedScopedServiceCanBeResolvedWithNoFallbackProvider()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NestedScopedServiceCanBeResolvedWithNoFallbackProvider()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: NestedScopedServiceCanBeResolvedWithNoFallbackProvider
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 519
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Fact]

      public void NestedScopedServiceCanBeResolvedWithNoFallbackProvider()
    content.vb: >-
      <Fact>

      Public Sub NestedScopedServiceCanBeResolvedWithNoFallbackProvider
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.OpenGenericServicesCanBeResolved
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.OpenGenericServicesCanBeResolved
  id: OpenGenericServicesCanBeResolved
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: OpenGenericServicesCanBeResolved()
  nameWithType: DependencyInjectionSpecificationTests.OpenGenericServicesCanBeResolved()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.OpenGenericServicesCanBeResolved()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: OpenGenericServicesCanBeResolved
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 543
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Fact]

      public void OpenGenericServicesCanBeResolved()
    content.vb: >-
      <Fact>

      Public Sub OpenGenericServicesCanBeResolved
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ClosedServicesPreferredOverOpenGenericServices
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ClosedServicesPreferredOverOpenGenericServices
  id: ClosedServicesPreferredOverOpenGenericServices
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: ClosedServicesPreferredOverOpenGenericServices()
  nameWithType: DependencyInjectionSpecificationTests.ClosedServicesPreferredOverOpenGenericServices()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ClosedServicesPreferredOverOpenGenericServices()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: ClosedServicesPreferredOverOpenGenericServices
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 560
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Fact]

      public void ClosedServicesPreferredOverOpenGenericServices()
    content.vb: >-
      <Fact>

      Public Sub ClosedServicesPreferredOverOpenGenericServices
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.AttemptingToResolveNonexistentServiceReturnsNull
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.AttemptingToResolveNonexistentServiceReturnsNull
  id: AttemptingToResolveNonexistentServiceReturnsNull
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: AttemptingToResolveNonexistentServiceReturnsNull()
  nameWithType: DependencyInjectionSpecificationTests.AttemptingToResolveNonexistentServiceReturnsNull()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.AttemptingToResolveNonexistentServiceReturnsNull()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: AttemptingToResolveNonexistentServiceReturnsNull
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 577
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Fact]

      public void AttemptingToResolveNonexistentServiceReturnsNull()
    content.vb: >-
      <Fact>

      Public Sub AttemptingToResolveNonexistentServiceReturnsNull
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NonexistentServiceCanBeIEnumerableResolved
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NonexistentServiceCanBeIEnumerableResolved
  id: NonexistentServiceCanBeIEnumerableResolved
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: NonexistentServiceCanBeIEnumerableResolved()
  nameWithType: DependencyInjectionSpecificationTests.NonexistentServiceCanBeIEnumerableResolved()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NonexistentServiceCanBeIEnumerableResolved()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: NonexistentServiceCanBeIEnumerableResolved
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 591
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Fact]

      public void NonexistentServiceCanBeIEnumerableResolved()
    content.vb: >-
      <Fact>

      Public Sub NonexistentServiceCanBeIEnumerableResolved
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceContainerPicksConstructorWithLongestMatchesData
  commentId: P:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceContainerPicksConstructorWithLongestMatchesData
  id: ServiceContainerPicksConstructorWithLongestMatchesData
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: ServiceContainerPicksConstructorWithLongestMatchesData
  nameWithType: DependencyInjectionSpecificationTests.ServiceContainerPicksConstructorWithLongestMatchesData
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceContainerPicksConstructorWithLongestMatchesData
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: ServiceContainerPicksConstructorWithLongestMatchesData
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 605
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public static TheoryData ServiceContainerPicksConstructorWithLongestMatchesData { get; }
    content.vb: Public Shared ReadOnly Property ServiceContainerPicksConstructorWithLongestMatchesData As TheoryData
    parameters: []
    return:
      type: Xunit.TheoryData
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceContainerPicksConstructorWithLongestMatches(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors)
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceContainerPicksConstructorWithLongestMatches(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors)
  id: ServiceContainerPicksConstructorWithLongestMatches(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors)
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: ServiceContainerPicksConstructorWithLongestMatches(IServiceCollection, TypeWithSupersetConstructors)
  nameWithType: DependencyInjectionSpecificationTests.ServiceContainerPicksConstructorWithLongestMatches(IServiceCollection, TypeWithSupersetConstructors)
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceContainerPicksConstructorWithLongestMatches(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: ServiceContainerPicksConstructorWithLongestMatches
    path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 651
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: >-
      [Theory]

      [MemberData("ServiceContainerPicksConstructorWithLongestMatchesData", new object[]{})]

      public void ServiceContainerPicksConstructorWithLongestMatches(IServiceCollection serviceCollection, TypeWithSupersetConstructors expected)
    content.vb: >-
      <Theory>

      <MemberData("ServiceContainerPicksConstructorWithLongestMatchesData", New Object() {})>

      Public Sub ServiceContainerPicksConstructorWithLongestMatches(serviceCollection As IServiceCollection, expected As TypeWithSupersetConstructors)
    parameters:
    - id: serviceCollection
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: expected
      type: Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Extensions.DependencyInjection.Specification
  commentId: N:Microsoft.Extensions.DependencyInjection.Specification
  isExternal: false
  name: Microsoft.Extensions.DependencyInjection.Specification
  nameWithType: Microsoft.Extensions.DependencyInjection.Specification
  fullName: Microsoft.Extensions.DependencyInjection.Specification
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable{System.Object[]}
  commentId: T:System.Collections.Generic.IEnumerable{System.Object[]}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Object[]>
  nameWithType: IEnumerable<Object[]>
  fullName: System.Collections.Generic.IEnumerable<System.Object[]>
  nameWithType.vb: IEnumerable(Of Object())
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Object())
  name.vb: IEnumerable(Of Object())
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc
  commentId: T:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc
  parent: Microsoft.Extensions.DependencyInjection.Specification
  isExternal: false
  name: DependencyInjectionSpecificationTests.CreateInstanceFunc
  nameWithType: DependencyInjectionSpecificationTests.CreateInstanceFunc
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Microsoft.Extensions.DependencyInjection.IServiceCollection
  commentId: T:Microsoft.Extensions.DependencyInjection.IServiceCollection
  parent: Microsoft.Extensions.DependencyInjection
  isExternal: false
  name: IServiceCollection
  nameWithType: IServiceCollection
  fullName: Microsoft.Extensions.DependencyInjection.IServiceCollection
- uid: System.IServiceProvider
  commentId: T:System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: Microsoft.Extensions.DependencyInjection
  commentId: N:Microsoft.Extensions.DependencyInjection
  isExternal: false
  name: Microsoft.Extensions.DependencyInjection
  nameWithType: Microsoft.Extensions.DependencyInjection
  fullName: Microsoft.Extensions.DependencyInjection
- uid: Xunit.TheoryData
  commentId: T:Xunit.TheoryData
  parent: Xunit
  isExternal: true
  name: TheoryData
  nameWithType: TheoryData
  fullName: Xunit.TheoryData
- uid: Xunit
  commentId: N:Xunit
  isExternal: false
  name: Xunit
  nameWithType: Xunit
  fullName: Xunit
- uid: Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors
  commentId: T:Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors
  parent: Microsoft.Extensions.DependencyInjection.Specification.Fakes
  isExternal: false
  name: TypeWithSupersetConstructors
  nameWithType: TypeWithSupersetConstructors
  fullName: Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors
- uid: Microsoft.Extensions.DependencyInjection.Specification.Fakes
  commentId: N:Microsoft.Extensions.DependencyInjection.Specification.Fakes
  isExternal: false
  name: Microsoft.Extensions.DependencyInjection.Specification.Fakes
  nameWithType: Microsoft.Extensions.DependencyInjection.Specification.Fakes
  fullName: Microsoft.Extensions.DependencyInjection.Specification.Fakes
