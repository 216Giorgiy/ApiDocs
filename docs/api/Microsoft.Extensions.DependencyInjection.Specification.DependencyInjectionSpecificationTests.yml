### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  commentId: T:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  id: DependencyInjectionSpecificationTests
  parent: Microsoft.Extensions.DependencyInjection.Specification
  children:
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.AttemptingToResolveNonexistentServiceReturnsNull
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ClosedServicesPreferredOverOpenGenericServices
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFuncs
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateServiceProvider(IServiceCollection)
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.DisposingScopeDisposesService
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.FactoryServicesAreCreatedAsPartOfCreatingObjectGraph
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.FactoryServicesCanBeCreatedByGetService
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceRegisteredServiceSingleton
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceRegisteredServiceTransient
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceUnregisteredService
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.LastServiceReplacesPreviousServices
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.MultipleServiceCanBeIEnumerableResolved
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NestedScopedServiceCanBeResolved
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NestedScopedServiceCanBeResolvedWithNoFallbackProvider
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NonexistentServiceCanBeIEnumerableResolved
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.OpenGenericServicesCanBeResolved
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.OuterServiceCanHaveOtherServicesInjected
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.RegistrationOrderIsPreservedWhenServicesAreIEnumerableResolved
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SafelyDisposeNestedProviderReferences
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ScopedServiceCanBeResolved
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ScopedServices_FromCachedScopeFactory_CanBeResolvedAndDisposed
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SelfResolveThenDispose
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceContainerPicksConstructorWithLongestMatches(IServiceCollection,Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors)
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceContainerPicksConstructorWithLongestMatchesData
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceInstanceCanBeResolved
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceProviderRegistersServiceScopeFactory
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationType_ReturnDifferentInstancesPerResolution_ForTransientServices
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationType_ReturnSameInstancesPerResolution_ForSingletons
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationTypeCanBeResolved
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingleServiceCanBeIEnumerableResolved
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingletonServiceCanBeResolved
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingletonServicesComeFromRootProvider
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TransientServiceCanBeResolvedFromProvider
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TransientServiceCanBeResolvedFromScope
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorAcceptsAnyNumberOfAdditionalConstructorParametersToProvide(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorCanDisambiguateConstructorsWithUniqueArguments(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorCreateFactoryDoesNotAllowForAmbiguousConstructorMatches(Type)
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorEnablesYouToCreateAnyTypeWithServicesEvenWhenNotInIocContainer(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRequiresAllArgumentsCanBeAccepted(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRequiresPublicConstructor(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc,Type)
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRethrowsOriginalExceptionFromConstructor(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorWorksWithCtorWithOptionalArgs(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorWorksWithStaticCtor(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypesWithNonPublicConstructorData
  - Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.UnRegisteredServiceAsConstructorParameterThrowsException(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  langs:
  - csharp
  - vb
  name: DependencyInjectionSpecificationTests
  nameWithType: DependencyInjectionSpecificationTests
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: DependencyInjectionSpecificationTests
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 11
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: 'public abstract class DependencyInjectionSpecificationTests : object'
    content.vb: >-
      Public MustInherit Class DependencyInjectionSpecificationTests
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFuncs
  commentId: P:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFuncs
  id: CreateInstanceFuncs
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: CreateInstanceFuncs
  nameWithType: DependencyInjectionSpecificationTests.CreateInstanceFuncs
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFuncs
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: CreateInstanceFuncs
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
    startLine: 31
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public static IEnumerable<object[]> CreateInstanceFuncs { get; }
    parameters: []
    return:
      type: IEnumerable{System.Object[]}
    content.vb: Public Shared ReadOnly Property CreateInstanceFuncs As IEnumerable(Of Object())
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFuncs*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorEnablesYouToCreateAnyTypeWithServicesEvenWhenNotInIocContainer(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorEnablesYouToCreateAnyTypeWithServicesEvenWhenNotInIocContainer(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  id: TypeActivatorEnablesYouToCreateAnyTypeWithServicesEvenWhenNotInIocContainer(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: TypeActivatorEnablesYouToCreateAnyTypeWithServicesEvenWhenNotInIocContainer(DependencyInjectionSpecificationTests.CreateInstanceFunc)
  nameWithType: DependencyInjectionSpecificationTests.TypeActivatorEnablesYouToCreateAnyTypeWithServicesEvenWhenNotInIocContainer(DependencyInjectionSpecificationTests.CreateInstanceFunc)
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorEnablesYouToCreateAnyTypeWithServicesEvenWhenNotInIocContainer(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TypeActivatorEnablesYouToCreateAnyTypeWithServicesEvenWhenNotInIocContainer
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
    startLine: 40
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void TypeActivatorEnablesYouToCreateAnyTypeWithServicesEvenWhenNotInIocContainer(DependencyInjectionSpecificationTests.CreateInstanceFunc createFunc)
    parameters:
    - id: createFunc
      type: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc
    content.vb: Public Sub TypeActivatorEnablesYouToCreateAnyTypeWithServicesEvenWhenNotInIocContainer(createFunc As DependencyInjectionSpecificationTests.CreateInstanceFunc)
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorEnablesYouToCreateAnyTypeWithServicesEvenWhenNotInIocContainer*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorAcceptsAnyNumberOfAdditionalConstructorParametersToProvide(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorAcceptsAnyNumberOfAdditionalConstructorParametersToProvide(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  id: TypeActivatorAcceptsAnyNumberOfAdditionalConstructorParametersToProvide(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: TypeActivatorAcceptsAnyNumberOfAdditionalConstructorParametersToProvide(DependencyInjectionSpecificationTests.CreateInstanceFunc)
  nameWithType: DependencyInjectionSpecificationTests.TypeActivatorAcceptsAnyNumberOfAdditionalConstructorParametersToProvide(DependencyInjectionSpecificationTests.CreateInstanceFunc)
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorAcceptsAnyNumberOfAdditionalConstructorParametersToProvide(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TypeActivatorAcceptsAnyNumberOfAdditionalConstructorParametersToProvide
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
    startLine: 54
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void TypeActivatorAcceptsAnyNumberOfAdditionalConstructorParametersToProvide(DependencyInjectionSpecificationTests.CreateInstanceFunc createFunc)
    parameters:
    - id: createFunc
      type: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc
    content.vb: Public Sub TypeActivatorAcceptsAnyNumberOfAdditionalConstructorParametersToProvide(createFunc As DependencyInjectionSpecificationTests.CreateInstanceFunc)
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorAcceptsAnyNumberOfAdditionalConstructorParametersToProvide*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorWorksWithStaticCtor(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorWorksWithStaticCtor(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  id: TypeActivatorWorksWithStaticCtor(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: TypeActivatorWorksWithStaticCtor(DependencyInjectionSpecificationTests.CreateInstanceFunc)
  nameWithType: DependencyInjectionSpecificationTests.TypeActivatorWorksWithStaticCtor(DependencyInjectionSpecificationTests.CreateInstanceFunc)
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorWorksWithStaticCtor(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TypeActivatorWorksWithStaticCtor
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
    startLine: 72
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void TypeActivatorWorksWithStaticCtor(DependencyInjectionSpecificationTests.CreateInstanceFunc createFunc)
    parameters:
    - id: createFunc
      type: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc
    content.vb: Public Sub TypeActivatorWorksWithStaticCtor(createFunc As DependencyInjectionSpecificationTests.CreateInstanceFunc)
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorWorksWithStaticCtor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorWorksWithCtorWithOptionalArgs(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorWorksWithCtorWithOptionalArgs(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  id: TypeActivatorWorksWithCtorWithOptionalArgs(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: TypeActivatorWorksWithCtorWithOptionalArgs(DependencyInjectionSpecificationTests.CreateInstanceFunc)
  nameWithType: DependencyInjectionSpecificationTests.TypeActivatorWorksWithCtorWithOptionalArgs(DependencyInjectionSpecificationTests.CreateInstanceFunc)
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorWorksWithCtorWithOptionalArgs(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TypeActivatorWorksWithCtorWithOptionalArgs
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
    startLine: 83
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void TypeActivatorWorksWithCtorWithOptionalArgs(DependencyInjectionSpecificationTests.CreateInstanceFunc createFunc)
    parameters:
    - id: createFunc
      type: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc
    content.vb: Public Sub TypeActivatorWorksWithCtorWithOptionalArgs(createFunc As DependencyInjectionSpecificationTests.CreateInstanceFunc)
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorWorksWithCtorWithOptionalArgs*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorCanDisambiguateConstructorsWithUniqueArguments(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorCanDisambiguateConstructorsWithUniqueArguments(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  id: TypeActivatorCanDisambiguateConstructorsWithUniqueArguments(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: TypeActivatorCanDisambiguateConstructorsWithUniqueArguments(DependencyInjectionSpecificationTests.CreateInstanceFunc)
  nameWithType: DependencyInjectionSpecificationTests.TypeActivatorCanDisambiguateConstructorsWithUniqueArguments(DependencyInjectionSpecificationTests.CreateInstanceFunc)
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorCanDisambiguateConstructorsWithUniqueArguments(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TypeActivatorCanDisambiguateConstructorsWithUniqueArguments
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
    startLine: 99
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void TypeActivatorCanDisambiguateConstructorsWithUniqueArguments(DependencyInjectionSpecificationTests.CreateInstanceFunc createFunc)
    parameters:
    - id: createFunc
      type: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc
    content.vb: Public Sub TypeActivatorCanDisambiguateConstructorsWithUniqueArguments(createFunc As DependencyInjectionSpecificationTests.CreateInstanceFunc)
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorCanDisambiguateConstructorsWithUniqueArguments*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypesWithNonPublicConstructorData
  commentId: P:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypesWithNonPublicConstructorData
  id: TypesWithNonPublicConstructorData
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: TypesWithNonPublicConstructorData
  nameWithType: DependencyInjectionSpecificationTests.TypesWithNonPublicConstructorData
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypesWithNonPublicConstructorData
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TypesWithNonPublicConstructorData
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
    startLine: 118
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public static IEnumerable<object[]> TypesWithNonPublicConstructorData { get; }
    parameters: []
    return:
      type: IEnumerable{System.Object[]}
    content.vb: Public Shared ReadOnly Property TypesWithNonPublicConstructorData As IEnumerable(Of Object())
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypesWithNonPublicConstructorData*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRequiresPublicConstructor(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc,Type)
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRequiresPublicConstructor(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc,Type)
  id: TypeActivatorRequiresPublicConstructor(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc,Type)
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: TypeActivatorRequiresPublicConstructor(DependencyInjectionSpecificationTests.CreateInstanceFunc, Type)
  nameWithType: DependencyInjectionSpecificationTests.TypeActivatorRequiresPublicConstructor(DependencyInjectionSpecificationTests.CreateInstanceFunc, Type)
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRequiresPublicConstructor(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc, Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TypeActivatorRequiresPublicConstructor
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
    startLine: 123
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void TypeActivatorRequiresPublicConstructor(DependencyInjectionSpecificationTests.CreateInstanceFunc createFunc, Type type)
    parameters:
    - id: createFunc
      type: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc
    - id: type
      type: Type
    content.vb: Public Sub TypeActivatorRequiresPublicConstructor(createFunc As DependencyInjectionSpecificationTests.CreateInstanceFunc, type As Type)
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRequiresPublicConstructor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRequiresAllArgumentsCanBeAccepted(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRequiresAllArgumentsCanBeAccepted(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  id: TypeActivatorRequiresAllArgumentsCanBeAccepted(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: TypeActivatorRequiresAllArgumentsCanBeAccepted(DependencyInjectionSpecificationTests.CreateInstanceFunc)
  nameWithType: DependencyInjectionSpecificationTests.TypeActivatorRequiresAllArgumentsCanBeAccepted(DependencyInjectionSpecificationTests.CreateInstanceFunc)
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRequiresAllArgumentsCanBeAccepted(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TypeActivatorRequiresAllArgumentsCanBeAccepted
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
    startLine: 138
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void TypeActivatorRequiresAllArgumentsCanBeAccepted(DependencyInjectionSpecificationTests.CreateInstanceFunc createFunc)
    parameters:
    - id: createFunc
      type: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc
    content.vb: Public Sub TypeActivatorRequiresAllArgumentsCanBeAccepted(createFunc As DependencyInjectionSpecificationTests.CreateInstanceFunc)
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRequiresAllArgumentsCanBeAccepted*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRethrowsOriginalExceptionFromConstructor(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRethrowsOriginalExceptionFromConstructor(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  id: TypeActivatorRethrowsOriginalExceptionFromConstructor(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: TypeActivatorRethrowsOriginalExceptionFromConstructor(DependencyInjectionSpecificationTests.CreateInstanceFunc)
  nameWithType: DependencyInjectionSpecificationTests.TypeActivatorRethrowsOriginalExceptionFromConstructor(DependencyInjectionSpecificationTests.CreateInstanceFunc)
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRethrowsOriginalExceptionFromConstructor(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TypeActivatorRethrowsOriginalExceptionFromConstructor
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
    startLine: 158
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void TypeActivatorRethrowsOriginalExceptionFromConstructor(DependencyInjectionSpecificationTests.CreateInstanceFunc createFunc)
    parameters:
    - id: createFunc
      type: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc
    content.vb: Public Sub TypeActivatorRethrowsOriginalExceptionFromConstructor(createFunc As DependencyInjectionSpecificationTests.CreateInstanceFunc)
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRethrowsOriginalExceptionFromConstructor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorCreateFactoryDoesNotAllowForAmbiguousConstructorMatches(Type)
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorCreateFactoryDoesNotAllowForAmbiguousConstructorMatches(Type)
  id: TypeActivatorCreateFactoryDoesNotAllowForAmbiguousConstructorMatches(Type)
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: TypeActivatorCreateFactoryDoesNotAllowForAmbiguousConstructorMatches(Type)
  nameWithType: DependencyInjectionSpecificationTests.TypeActivatorCreateFactoryDoesNotAllowForAmbiguousConstructorMatches(Type)
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorCreateFactoryDoesNotAllowForAmbiguousConstructorMatches(Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TypeActivatorCreateFactoryDoesNotAllowForAmbiguousConstructorMatches
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
    startLine: 174
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void TypeActivatorCreateFactoryDoesNotAllowForAmbiguousConstructorMatches(Type paramType)
    parameters:
    - id: paramType
      type: Type
    content.vb: Public Sub TypeActivatorCreateFactoryDoesNotAllowForAmbiguousConstructorMatches(paramType As Type)
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorCreateFactoryDoesNotAllowForAmbiguousConstructorMatches*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceRegisteredServiceTransient
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceRegisteredServiceTransient
  id: GetServiceOrCreateInstanceRegisteredServiceTransient
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: GetServiceOrCreateInstanceRegisteredServiceTransient()
  nameWithType: DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceRegisteredServiceTransient()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceRegisteredServiceTransient()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: GetServiceOrCreateInstanceRegisteredServiceTransient
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
    startLine: 192
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void GetServiceOrCreateInstanceRegisteredServiceTransient()
    content.vb: Public Sub GetServiceOrCreateInstanceRegisteredServiceTransient
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceRegisteredServiceTransient*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceRegisteredServiceSingleton
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceRegisteredServiceSingleton
  id: GetServiceOrCreateInstanceRegisteredServiceSingleton
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: GetServiceOrCreateInstanceRegisteredServiceSingleton()
  nameWithType: DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceRegisteredServiceSingleton()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceRegisteredServiceSingleton()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: GetServiceOrCreateInstanceRegisteredServiceSingleton
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
    startLine: 218
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void GetServiceOrCreateInstanceRegisteredServiceSingleton()
    content.vb: Public Sub GetServiceOrCreateInstanceRegisteredServiceSingleton
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceRegisteredServiceSingleton*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceUnregisteredService
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceUnregisteredService
  id: GetServiceOrCreateInstanceUnregisteredService
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: GetServiceOrCreateInstanceUnregisteredService()
  nameWithType: DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceUnregisteredService()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceUnregisteredService()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: GetServiceOrCreateInstanceUnregisteredService
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
    startLine: 245
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void GetServiceOrCreateInstanceUnregisteredService()
    content.vb: Public Sub GetServiceOrCreateInstanceUnregisteredService
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceUnregisteredService*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.UnRegisteredServiceAsConstructorParameterThrowsException(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.UnRegisteredServiceAsConstructorParameterThrowsException(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  id: UnRegisteredServiceAsConstructorParameterThrowsException(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: UnRegisteredServiceAsConstructorParameterThrowsException(DependencyInjectionSpecificationTests.CreateInstanceFunc)
  nameWithType: DependencyInjectionSpecificationTests.UnRegisteredServiceAsConstructorParameterThrowsException(DependencyInjectionSpecificationTests.CreateInstanceFunc)
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.UnRegisteredServiceAsConstructorParameterThrowsException(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: UnRegisteredServiceAsConstructorParameterThrowsException
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/ActivatorUtilitiesTests.cs
    startLine: 273
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void UnRegisteredServiceAsConstructorParameterThrowsException(DependencyInjectionSpecificationTests.CreateInstanceFunc createFunc)
    parameters:
    - id: createFunc
      type: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc
    content.vb: Public Sub UnRegisteredServiceAsConstructorParameterThrowsException(createFunc As DependencyInjectionSpecificationTests.CreateInstanceFunc)
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.UnRegisteredServiceAsConstructorParameterThrowsException*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateServiceProvider(IServiceCollection)
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateServiceProvider(IServiceCollection)
  id: CreateServiceProvider(IServiceCollection)
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: CreateServiceProvider(IServiceCollection)
  nameWithType: DependencyInjectionSpecificationTests.CreateServiceProvider(IServiceCollection)
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateServiceProvider(IServiceCollection)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: CreateServiceProvider
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 13
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: protected abstract IServiceProvider CreateServiceProvider(IServiceCollection serviceCollection)
    parameters:
    - id: serviceCollection
      type: IServiceCollection
    return:
      type: IServiceProvider
    content.vb: Protected MustOverride Function CreateServiceProvider(serviceCollection As IServiceCollection) As IServiceProvider
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateServiceProvider*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationTypeCanBeResolved
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationTypeCanBeResolved
  id: ServicesRegisteredWithImplementationTypeCanBeResolved
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: ServicesRegisteredWithImplementationTypeCanBeResolved()
  nameWithType: DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationTypeCanBeResolved()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationTypeCanBeResolved()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: ServicesRegisteredWithImplementationTypeCanBeResolved
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 15
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void ServicesRegisteredWithImplementationTypeCanBeResolved()
    content.vb: Public Sub ServicesRegisteredWithImplementationTypeCanBeResolved
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationTypeCanBeResolved*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationType_ReturnDifferentInstancesPerResolution_ForTransientServices
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationType_ReturnDifferentInstancesPerResolution_ForTransientServices
  id: ServicesRegisteredWithImplementationType_ReturnDifferentInstancesPerResolution_ForTransientServices
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: ServicesRegisteredWithImplementationType_ReturnDifferentInstancesPerResolution_ForTransientServices()
  nameWithType: DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationType_ReturnDifferentInstancesPerResolution_ForTransientServices()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationType_ReturnDifferentInstancesPerResolution_ForTransientServices()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: ServicesRegisteredWithImplementationType_ReturnDifferentInstancesPerResolution_ForTransientServices
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 31
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void ServicesRegisteredWithImplementationType_ReturnDifferentInstancesPerResolution_ForTransientServices()
    content.vb: Public Sub ServicesRegisteredWithImplementationType_ReturnDifferentInstancesPerResolution_ForTransientServices
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationType_ReturnDifferentInstancesPerResolution_ForTransientServices*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationType_ReturnSameInstancesPerResolution_ForSingletons
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationType_ReturnSameInstancesPerResolution_ForSingletons
  id: ServicesRegisteredWithImplementationType_ReturnSameInstancesPerResolution_ForSingletons
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: ServicesRegisteredWithImplementationType_ReturnSameInstancesPerResolution_ForSingletons()
  nameWithType: DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationType_ReturnSameInstancesPerResolution_ForSingletons()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationType_ReturnSameInstancesPerResolution_ForSingletons()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: ServicesRegisteredWithImplementationType_ReturnSameInstancesPerResolution_ForSingletons
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 49
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void ServicesRegisteredWithImplementationType_ReturnSameInstancesPerResolution_ForSingletons()
    content.vb: Public Sub ServicesRegisteredWithImplementationType_ReturnSameInstancesPerResolution_ForSingletons
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationType_ReturnSameInstancesPerResolution_ForSingletons*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceInstanceCanBeResolved
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceInstanceCanBeResolved
  id: ServiceInstanceCanBeResolved
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: ServiceInstanceCanBeResolved()
  nameWithType: DependencyInjectionSpecificationTests.ServiceInstanceCanBeResolved()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceInstanceCanBeResolved()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: ServiceInstanceCanBeResolved
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 67
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void ServiceInstanceCanBeResolved()
    content.vb: Public Sub ServiceInstanceCanBeResolved
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceInstanceCanBeResolved*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TransientServiceCanBeResolvedFromProvider
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TransientServiceCanBeResolvedFromProvider
  id: TransientServiceCanBeResolvedFromProvider
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: TransientServiceCanBeResolvedFromProvider()
  nameWithType: DependencyInjectionSpecificationTests.TransientServiceCanBeResolvedFromProvider()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TransientServiceCanBeResolvedFromProvider()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TransientServiceCanBeResolvedFromProvider
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 83
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void TransientServiceCanBeResolvedFromProvider()
    content.vb: Public Sub TransientServiceCanBeResolvedFromProvider
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TransientServiceCanBeResolvedFromProvider*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TransientServiceCanBeResolvedFromScope
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TransientServiceCanBeResolvedFromScope
  id: TransientServiceCanBeResolvedFromScope
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: TransientServiceCanBeResolvedFromScope()
  nameWithType: DependencyInjectionSpecificationTests.TransientServiceCanBeResolvedFromScope()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TransientServiceCanBeResolvedFromScope()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TransientServiceCanBeResolvedFromScope
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 100
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void TransientServiceCanBeResolvedFromScope()
    content.vb: Public Sub TransientServiceCanBeResolvedFromScope
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TransientServiceCanBeResolvedFromScope*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingleServiceCanBeIEnumerableResolved
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingleServiceCanBeIEnumerableResolved
  id: SingleServiceCanBeIEnumerableResolved
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: SingleServiceCanBeIEnumerableResolved()
  nameWithType: DependencyInjectionSpecificationTests.SingleServiceCanBeIEnumerableResolved()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingleServiceCanBeIEnumerableResolved()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: SingleServiceCanBeIEnumerableResolved
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 124
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void SingleServiceCanBeIEnumerableResolved()
    content.vb: Public Sub SingleServiceCanBeIEnumerableResolved
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingleServiceCanBeIEnumerableResolved*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.MultipleServiceCanBeIEnumerableResolved
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.MultipleServiceCanBeIEnumerableResolved
  id: MultipleServiceCanBeIEnumerableResolved
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: MultipleServiceCanBeIEnumerableResolved()
  nameWithType: DependencyInjectionSpecificationTests.MultipleServiceCanBeIEnumerableResolved()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.MultipleServiceCanBeIEnumerableResolved()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: MultipleServiceCanBeIEnumerableResolved
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 141
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void MultipleServiceCanBeIEnumerableResolved()
    content.vb: Public Sub MultipleServiceCanBeIEnumerableResolved
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.MultipleServiceCanBeIEnumerableResolved*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.RegistrationOrderIsPreservedWhenServicesAreIEnumerableResolved
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.RegistrationOrderIsPreservedWhenServicesAreIEnumerableResolved
  id: RegistrationOrderIsPreservedWhenServicesAreIEnumerableResolved
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: RegistrationOrderIsPreservedWhenServicesAreIEnumerableResolved()
  nameWithType: DependencyInjectionSpecificationTests.RegistrationOrderIsPreservedWhenServicesAreIEnumerableResolved()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.RegistrationOrderIsPreservedWhenServicesAreIEnumerableResolved()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: RegistrationOrderIsPreservedWhenServicesAreIEnumerableResolved
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 159
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void RegistrationOrderIsPreservedWhenServicesAreIEnumerableResolved()
    content.vb: Public Sub RegistrationOrderIsPreservedWhenServicesAreIEnumerableResolved
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.RegistrationOrderIsPreservedWhenServicesAreIEnumerableResolved*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.OuterServiceCanHaveOtherServicesInjected
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.OuterServiceCanHaveOtherServicesInjected
  id: OuterServiceCanHaveOtherServicesInjected
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: OuterServiceCanHaveOtherServicesInjected()
  nameWithType: DependencyInjectionSpecificationTests.OuterServiceCanHaveOtherServicesInjected()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.OuterServiceCanHaveOtherServicesInjected()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: OuterServiceCanHaveOtherServicesInjected
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 186
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void OuterServiceCanHaveOtherServicesInjected()
    content.vb: Public Sub OuterServiceCanHaveOtherServicesInjected
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.OuterServiceCanHaveOtherServicesInjected*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.FactoryServicesCanBeCreatedByGetService
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.FactoryServicesCanBeCreatedByGetService
  id: FactoryServicesCanBeCreatedByGetService
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: FactoryServicesCanBeCreatedByGetService()
  nameWithType: DependencyInjectionSpecificationTests.FactoryServicesCanBeCreatedByGetService()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.FactoryServicesCanBeCreatedByGetService()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: FactoryServicesCanBeCreatedByGetService
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 208
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void FactoryServicesCanBeCreatedByGetService()
    content.vb: Public Sub FactoryServicesCanBeCreatedByGetService
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.FactoryServicesCanBeCreatedByGetService*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.FactoryServicesAreCreatedAsPartOfCreatingObjectGraph
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.FactoryServicesAreCreatedAsPartOfCreatingObjectGraph
  id: FactoryServicesAreCreatedAsPartOfCreatingObjectGraph
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: FactoryServicesAreCreatedAsPartOfCreatingObjectGraph()
  nameWithType: DependencyInjectionSpecificationTests.FactoryServicesAreCreatedAsPartOfCreatingObjectGraph()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.FactoryServicesAreCreatedAsPartOfCreatingObjectGraph()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: FactoryServicesAreCreatedAsPartOfCreatingObjectGraph
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 235
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void FactoryServicesAreCreatedAsPartOfCreatingObjectGraph()
    content.vb: Public Sub FactoryServicesAreCreatedAsPartOfCreatingObjectGraph
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.FactoryServicesAreCreatedAsPartOfCreatingObjectGraph*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.LastServiceReplacesPreviousServices
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.LastServiceReplacesPreviousServices
  id: LastServiceReplacesPreviousServices
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: LastServiceReplacesPreviousServices()
  nameWithType: DependencyInjectionSpecificationTests.LastServiceReplacesPreviousServices()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.LastServiceReplacesPreviousServices()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: LastServiceReplacesPreviousServices
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 279
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void LastServiceReplacesPreviousServices()
    content.vb: Public Sub LastServiceReplacesPreviousServices
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.LastServiceReplacesPreviousServices*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingletonServiceCanBeResolved
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingletonServiceCanBeResolved
  id: SingletonServiceCanBeResolved
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: SingletonServiceCanBeResolved()
  nameWithType: DependencyInjectionSpecificationTests.SingletonServiceCanBeResolved()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingletonServiceCanBeResolved()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: SingletonServiceCanBeResolved
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 295
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void SingletonServiceCanBeResolved()
    content.vb: Public Sub SingletonServiceCanBeResolved
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingletonServiceCanBeResolved*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceProviderRegistersServiceScopeFactory
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceProviderRegistersServiceScopeFactory
  id: ServiceProviderRegistersServiceScopeFactory
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: ServiceProviderRegistersServiceScopeFactory()
  nameWithType: DependencyInjectionSpecificationTests.ServiceProviderRegistersServiceScopeFactory()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceProviderRegistersServiceScopeFactory()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: ServiceProviderRegistersServiceScopeFactory
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 312
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void ServiceProviderRegistersServiceScopeFactory()
    content.vb: Public Sub ServiceProviderRegistersServiceScopeFactory
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceProviderRegistersServiceScopeFactory*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ScopedServiceCanBeResolved
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ScopedServiceCanBeResolved
  id: ScopedServiceCanBeResolved
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: ScopedServiceCanBeResolved()
  nameWithType: DependencyInjectionSpecificationTests.ScopedServiceCanBeResolved()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ScopedServiceCanBeResolved()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: ScopedServiceCanBeResolved
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 326
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void ScopedServiceCanBeResolved()
    content.vb: Public Sub ScopedServiceCanBeResolved
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ScopedServiceCanBeResolved*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NestedScopedServiceCanBeResolved
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NestedScopedServiceCanBeResolved
  id: NestedScopedServiceCanBeResolved
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: NestedScopedServiceCanBeResolved()
  nameWithType: DependencyInjectionSpecificationTests.NestedScopedServiceCanBeResolved()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NestedScopedServiceCanBeResolved()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: NestedScopedServiceCanBeResolved
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 348
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void NestedScopedServiceCanBeResolved()
    content.vb: Public Sub NestedScopedServiceCanBeResolved
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NestedScopedServiceCanBeResolved*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ScopedServices_FromCachedScopeFactory_CanBeResolvedAndDisposed
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ScopedServices_FromCachedScopeFactory_CanBeResolvedAndDisposed
  id: ScopedServices_FromCachedScopeFactory_CanBeResolvedAndDisposed
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: ScopedServices_FromCachedScopeFactory_CanBeResolvedAndDisposed()
  nameWithType: DependencyInjectionSpecificationTests.ScopedServices_FromCachedScopeFactory_CanBeResolvedAndDisposed()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ScopedServices_FromCachedScopeFactory_CanBeResolvedAndDisposed()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: ScopedServices_FromCachedScopeFactory_CanBeResolvedAndDisposed
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 374
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void ScopedServices_FromCachedScopeFactory_CanBeResolvedAndDisposed()
    content.vb: Public Sub ScopedServices_FromCachedScopeFactory_CanBeResolvedAndDisposed
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ScopedServices_FromCachedScopeFactory_CanBeResolvedAndDisposed*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.DisposingScopeDisposesService
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.DisposingScopeDisposesService
  id: DisposingScopeDisposesService
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: DisposingScopeDisposesService()
  nameWithType: DependencyInjectionSpecificationTests.DisposingScopeDisposesService()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.DisposingScopeDisposesService()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: DisposingScopeDisposesService
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 411
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void DisposingScopeDisposesService()
    content.vb: Public Sub DisposingScopeDisposesService
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.DisposingScopeDisposesService*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SelfResolveThenDispose
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SelfResolveThenDispose
  id: SelfResolveThenDispose
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: SelfResolveThenDispose()
  nameWithType: DependencyInjectionSpecificationTests.SelfResolveThenDispose()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SelfResolveThenDispose()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: SelfResolveThenDispose
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 456
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void SelfResolveThenDispose()
    content.vb: Public Sub SelfResolveThenDispose
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SelfResolveThenDispose*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SafelyDisposeNestedProviderReferences
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SafelyDisposeNestedProviderReferences
  id: SafelyDisposeNestedProviderReferences
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: SafelyDisposeNestedProviderReferences()
  nameWithType: DependencyInjectionSpecificationTests.SafelyDisposeNestedProviderReferences()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SafelyDisposeNestedProviderReferences()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: SafelyDisposeNestedProviderReferences
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 471
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void SafelyDisposeNestedProviderReferences()
    content.vb: Public Sub SafelyDisposeNestedProviderReferences
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SafelyDisposeNestedProviderReferences*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingletonServicesComeFromRootProvider
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingletonServicesComeFromRootProvider
  id: SingletonServicesComeFromRootProvider
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: SingletonServicesComeFromRootProvider()
  nameWithType: DependencyInjectionSpecificationTests.SingletonServicesComeFromRootProvider()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingletonServicesComeFromRootProvider()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: SingletonServicesComeFromRootProvider
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 487
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void SingletonServicesComeFromRootProvider()
    content.vb: Public Sub SingletonServicesComeFromRootProvider
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingletonServicesComeFromRootProvider*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NestedScopedServiceCanBeResolvedWithNoFallbackProvider
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NestedScopedServiceCanBeResolvedWithNoFallbackProvider
  id: NestedScopedServiceCanBeResolvedWithNoFallbackProvider
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: NestedScopedServiceCanBeResolvedWithNoFallbackProvider()
  nameWithType: DependencyInjectionSpecificationTests.NestedScopedServiceCanBeResolvedWithNoFallbackProvider()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NestedScopedServiceCanBeResolvedWithNoFallbackProvider()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: NestedScopedServiceCanBeResolvedWithNoFallbackProvider
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 519
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void NestedScopedServiceCanBeResolvedWithNoFallbackProvider()
    content.vb: Public Sub NestedScopedServiceCanBeResolvedWithNoFallbackProvider
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NestedScopedServiceCanBeResolvedWithNoFallbackProvider*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.OpenGenericServicesCanBeResolved
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.OpenGenericServicesCanBeResolved
  id: OpenGenericServicesCanBeResolved
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: OpenGenericServicesCanBeResolved()
  nameWithType: DependencyInjectionSpecificationTests.OpenGenericServicesCanBeResolved()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.OpenGenericServicesCanBeResolved()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: OpenGenericServicesCanBeResolved
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 543
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void OpenGenericServicesCanBeResolved()
    content.vb: Public Sub OpenGenericServicesCanBeResolved
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.OpenGenericServicesCanBeResolved*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ClosedServicesPreferredOverOpenGenericServices
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ClosedServicesPreferredOverOpenGenericServices
  id: ClosedServicesPreferredOverOpenGenericServices
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: ClosedServicesPreferredOverOpenGenericServices()
  nameWithType: DependencyInjectionSpecificationTests.ClosedServicesPreferredOverOpenGenericServices()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ClosedServicesPreferredOverOpenGenericServices()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: ClosedServicesPreferredOverOpenGenericServices
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 560
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void ClosedServicesPreferredOverOpenGenericServices()
    content.vb: Public Sub ClosedServicesPreferredOverOpenGenericServices
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ClosedServicesPreferredOverOpenGenericServices*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.AttemptingToResolveNonexistentServiceReturnsNull
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.AttemptingToResolveNonexistentServiceReturnsNull
  id: AttemptingToResolveNonexistentServiceReturnsNull
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: AttemptingToResolveNonexistentServiceReturnsNull()
  nameWithType: DependencyInjectionSpecificationTests.AttemptingToResolveNonexistentServiceReturnsNull()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.AttemptingToResolveNonexistentServiceReturnsNull()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: AttemptingToResolveNonexistentServiceReturnsNull
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 577
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void AttemptingToResolveNonexistentServiceReturnsNull()
    content.vb: Public Sub AttemptingToResolveNonexistentServiceReturnsNull
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.AttemptingToResolveNonexistentServiceReturnsNull*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NonexistentServiceCanBeIEnumerableResolved
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NonexistentServiceCanBeIEnumerableResolved
  id: NonexistentServiceCanBeIEnumerableResolved
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: NonexistentServiceCanBeIEnumerableResolved()
  nameWithType: DependencyInjectionSpecificationTests.NonexistentServiceCanBeIEnumerableResolved()
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NonexistentServiceCanBeIEnumerableResolved()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: NonexistentServiceCanBeIEnumerableResolved
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 591
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void NonexistentServiceCanBeIEnumerableResolved()
    content.vb: Public Sub NonexistentServiceCanBeIEnumerableResolved
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NonexistentServiceCanBeIEnumerableResolved*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceContainerPicksConstructorWithLongestMatchesData
  commentId: P:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceContainerPicksConstructorWithLongestMatchesData
  id: ServiceContainerPicksConstructorWithLongestMatchesData
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: ServiceContainerPicksConstructorWithLongestMatchesData
  nameWithType: DependencyInjectionSpecificationTests.ServiceContainerPicksConstructorWithLongestMatchesData
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceContainerPicksConstructorWithLongestMatchesData
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: ServiceContainerPicksConstructorWithLongestMatchesData
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 605
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public static TheoryData ServiceContainerPicksConstructorWithLongestMatchesData { get; }
    parameters: []
    return:
      type: TheoryData
    content.vb: Public Shared ReadOnly Property ServiceContainerPicksConstructorWithLongestMatchesData As TheoryData
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceContainerPicksConstructorWithLongestMatchesData*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceContainerPicksConstructorWithLongestMatches(IServiceCollection,Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors)
  commentId: M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceContainerPicksConstructorWithLongestMatches(IServiceCollection,Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors)
  id: ServiceContainerPicksConstructorWithLongestMatches(IServiceCollection,Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors)
  parent: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests
  langs:
  - csharp
  - vb
  name: ServiceContainerPicksConstructorWithLongestMatches(IServiceCollection, TypeWithSupersetConstructors)
  nameWithType: DependencyInjectionSpecificationTests.ServiceContainerPicksConstructorWithLongestMatches(IServiceCollection, TypeWithSupersetConstructors)
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceContainerPicksConstructorWithLongestMatches(IServiceCollection, Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: ServiceContainerPicksConstructorWithLongestMatches
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Specification.Tests/DependencyInjectionSpecificationTests.cs
    startLine: 651
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Specification.Tests
  namespace: Microsoft.Extensions.DependencyInjection.Specification
  syntax:
    content: public void ServiceContainerPicksConstructorWithLongestMatches(IServiceCollection serviceCollection, TypeWithSupersetConstructors expected)
    parameters:
    - id: serviceCollection
      type: IServiceCollection
    - id: expected
      type: Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors
    content.vb: Public Sub ServiceContainerPicksConstructorWithLongestMatches(serviceCollection As IServiceCollection, expected As TypeWithSupersetConstructors)
  overload: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceContainerPicksConstructorWithLongestMatches*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Extensions.DependencyInjection.Specification
  commentId: N:Microsoft.Extensions.DependencyInjection.Specification
  isExternal: false
  name: Microsoft.Extensions.DependencyInjection.Specification
  nameWithType: Microsoft.Extensions.DependencyInjection.Specification
  fullName: Microsoft.Extensions.DependencyInjection.Specification
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFuncs*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFuncs
  isExternal: false
  name: CreateInstanceFuncs
  nameWithType: DependencyInjectionSpecificationTests.CreateInstanceFuncs
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFuncs
- uid: IEnumerable{System.Object[]}
  commentId: '!:IEnumerable{System.Object[]}'
  definition: IEnumerable`1
  name: IEnumerable<Object[]>
  nameWithType: IEnumerable<Object[]>
  fullName: IEnumerable<System.Object[]>
  nameWithType.vb: IEnumerable(Of Object())
  fullName.vb: IEnumerable(Of System.Object())
  name.vb: IEnumerable(Of Object())
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorEnablesYouToCreateAnyTypeWithServicesEvenWhenNotInIocContainer*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorEnablesYouToCreateAnyTypeWithServicesEvenWhenNotInIocContainer
  isExternal: false
  name: TypeActivatorEnablesYouToCreateAnyTypeWithServicesEvenWhenNotInIocContainer
  nameWithType: DependencyInjectionSpecificationTests.TypeActivatorEnablesYouToCreateAnyTypeWithServicesEvenWhenNotInIocContainer
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorEnablesYouToCreateAnyTypeWithServicesEvenWhenNotInIocContainer
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc
  commentId: T:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc
  parent: Microsoft.Extensions.DependencyInjection.Specification
  isExternal: false
  name: DependencyInjectionSpecificationTests.CreateInstanceFunc
  nameWithType: DependencyInjectionSpecificationTests.CreateInstanceFunc
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorAcceptsAnyNumberOfAdditionalConstructorParametersToProvide*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorAcceptsAnyNumberOfAdditionalConstructorParametersToProvide
  isExternal: false
  name: TypeActivatorAcceptsAnyNumberOfAdditionalConstructorParametersToProvide
  nameWithType: DependencyInjectionSpecificationTests.TypeActivatorAcceptsAnyNumberOfAdditionalConstructorParametersToProvide
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorAcceptsAnyNumberOfAdditionalConstructorParametersToProvide
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorWorksWithStaticCtor*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorWorksWithStaticCtor
  isExternal: false
  name: TypeActivatorWorksWithStaticCtor
  nameWithType: DependencyInjectionSpecificationTests.TypeActivatorWorksWithStaticCtor
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorWorksWithStaticCtor
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorWorksWithCtorWithOptionalArgs*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorWorksWithCtorWithOptionalArgs
  isExternal: false
  name: TypeActivatorWorksWithCtorWithOptionalArgs
  nameWithType: DependencyInjectionSpecificationTests.TypeActivatorWorksWithCtorWithOptionalArgs
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorWorksWithCtorWithOptionalArgs
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorCanDisambiguateConstructorsWithUniqueArguments*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorCanDisambiguateConstructorsWithUniqueArguments
  isExternal: false
  name: TypeActivatorCanDisambiguateConstructorsWithUniqueArguments
  nameWithType: DependencyInjectionSpecificationTests.TypeActivatorCanDisambiguateConstructorsWithUniqueArguments
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorCanDisambiguateConstructorsWithUniqueArguments
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypesWithNonPublicConstructorData*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypesWithNonPublicConstructorData
  isExternal: false
  name: TypesWithNonPublicConstructorData
  nameWithType: DependencyInjectionSpecificationTests.TypesWithNonPublicConstructorData
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypesWithNonPublicConstructorData
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRequiresPublicConstructor*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRequiresPublicConstructor
  isExternal: false
  name: TypeActivatorRequiresPublicConstructor
  nameWithType: DependencyInjectionSpecificationTests.TypeActivatorRequiresPublicConstructor
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRequiresPublicConstructor
- uid: Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: Type
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRequiresAllArgumentsCanBeAccepted*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRequiresAllArgumentsCanBeAccepted
  isExternal: false
  name: TypeActivatorRequiresAllArgumentsCanBeAccepted
  nameWithType: DependencyInjectionSpecificationTests.TypeActivatorRequiresAllArgumentsCanBeAccepted
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRequiresAllArgumentsCanBeAccepted
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRethrowsOriginalExceptionFromConstructor*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRethrowsOriginalExceptionFromConstructor
  isExternal: false
  name: TypeActivatorRethrowsOriginalExceptionFromConstructor
  nameWithType: DependencyInjectionSpecificationTests.TypeActivatorRethrowsOriginalExceptionFromConstructor
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRethrowsOriginalExceptionFromConstructor
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorCreateFactoryDoesNotAllowForAmbiguousConstructorMatches*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorCreateFactoryDoesNotAllowForAmbiguousConstructorMatches
  isExternal: false
  name: TypeActivatorCreateFactoryDoesNotAllowForAmbiguousConstructorMatches
  nameWithType: DependencyInjectionSpecificationTests.TypeActivatorCreateFactoryDoesNotAllowForAmbiguousConstructorMatches
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorCreateFactoryDoesNotAllowForAmbiguousConstructorMatches
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceRegisteredServiceTransient*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceRegisteredServiceTransient
  isExternal: false
  name: GetServiceOrCreateInstanceRegisteredServiceTransient
  nameWithType: DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceRegisteredServiceTransient
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceRegisteredServiceTransient
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceRegisteredServiceSingleton*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceRegisteredServiceSingleton
  isExternal: false
  name: GetServiceOrCreateInstanceRegisteredServiceSingleton
  nameWithType: DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceRegisteredServiceSingleton
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceRegisteredServiceSingleton
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceUnregisteredService*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceUnregisteredService
  isExternal: false
  name: GetServiceOrCreateInstanceUnregisteredService
  nameWithType: DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceUnregisteredService
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceUnregisteredService
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.UnRegisteredServiceAsConstructorParameterThrowsException*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.UnRegisteredServiceAsConstructorParameterThrowsException
  isExternal: false
  name: UnRegisteredServiceAsConstructorParameterThrowsException
  nameWithType: DependencyInjectionSpecificationTests.UnRegisteredServiceAsConstructorParameterThrowsException
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.UnRegisteredServiceAsConstructorParameterThrowsException
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateServiceProvider*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateServiceProvider
  isExternal: false
  name: CreateServiceProvider
  nameWithType: DependencyInjectionSpecificationTests.CreateServiceProvider
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateServiceProvider
- uid: IServiceCollection
  isExternal: true
  name: IServiceCollection
  nameWithType: IServiceCollection
  fullName: IServiceCollection
- uid: IServiceProvider
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: IServiceProvider
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationTypeCanBeResolved*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationTypeCanBeResolved
  isExternal: false
  name: ServicesRegisteredWithImplementationTypeCanBeResolved
  nameWithType: DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationTypeCanBeResolved
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationTypeCanBeResolved
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationType_ReturnDifferentInstancesPerResolution_ForTransientServices*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationType_ReturnDifferentInstancesPerResolution_ForTransientServices
  isExternal: false
  name: ServicesRegisteredWithImplementationType_ReturnDifferentInstancesPerResolution_ForTransientServices
  nameWithType: DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationType_ReturnDifferentInstancesPerResolution_ForTransientServices
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationType_ReturnDifferentInstancesPerResolution_ForTransientServices
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationType_ReturnSameInstancesPerResolution_ForSingletons*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationType_ReturnSameInstancesPerResolution_ForSingletons
  isExternal: false
  name: ServicesRegisteredWithImplementationType_ReturnSameInstancesPerResolution_ForSingletons
  nameWithType: DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationType_ReturnSameInstancesPerResolution_ForSingletons
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationType_ReturnSameInstancesPerResolution_ForSingletons
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceInstanceCanBeResolved*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceInstanceCanBeResolved
  isExternal: false
  name: ServiceInstanceCanBeResolved
  nameWithType: DependencyInjectionSpecificationTests.ServiceInstanceCanBeResolved
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceInstanceCanBeResolved
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TransientServiceCanBeResolvedFromProvider*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TransientServiceCanBeResolvedFromProvider
  isExternal: false
  name: TransientServiceCanBeResolvedFromProvider
  nameWithType: DependencyInjectionSpecificationTests.TransientServiceCanBeResolvedFromProvider
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TransientServiceCanBeResolvedFromProvider
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TransientServiceCanBeResolvedFromScope*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TransientServiceCanBeResolvedFromScope
  isExternal: false
  name: TransientServiceCanBeResolvedFromScope
  nameWithType: DependencyInjectionSpecificationTests.TransientServiceCanBeResolvedFromScope
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TransientServiceCanBeResolvedFromScope
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingleServiceCanBeIEnumerableResolved*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingleServiceCanBeIEnumerableResolved
  isExternal: false
  name: SingleServiceCanBeIEnumerableResolved
  nameWithType: DependencyInjectionSpecificationTests.SingleServiceCanBeIEnumerableResolved
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingleServiceCanBeIEnumerableResolved
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.MultipleServiceCanBeIEnumerableResolved*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.MultipleServiceCanBeIEnumerableResolved
  isExternal: false
  name: MultipleServiceCanBeIEnumerableResolved
  nameWithType: DependencyInjectionSpecificationTests.MultipleServiceCanBeIEnumerableResolved
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.MultipleServiceCanBeIEnumerableResolved
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.RegistrationOrderIsPreservedWhenServicesAreIEnumerableResolved*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.RegistrationOrderIsPreservedWhenServicesAreIEnumerableResolved
  isExternal: false
  name: RegistrationOrderIsPreservedWhenServicesAreIEnumerableResolved
  nameWithType: DependencyInjectionSpecificationTests.RegistrationOrderIsPreservedWhenServicesAreIEnumerableResolved
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.RegistrationOrderIsPreservedWhenServicesAreIEnumerableResolved
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.OuterServiceCanHaveOtherServicesInjected*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.OuterServiceCanHaveOtherServicesInjected
  isExternal: false
  name: OuterServiceCanHaveOtherServicesInjected
  nameWithType: DependencyInjectionSpecificationTests.OuterServiceCanHaveOtherServicesInjected
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.OuterServiceCanHaveOtherServicesInjected
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.FactoryServicesCanBeCreatedByGetService*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.FactoryServicesCanBeCreatedByGetService
  isExternal: false
  name: FactoryServicesCanBeCreatedByGetService
  nameWithType: DependencyInjectionSpecificationTests.FactoryServicesCanBeCreatedByGetService
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.FactoryServicesCanBeCreatedByGetService
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.FactoryServicesAreCreatedAsPartOfCreatingObjectGraph*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.FactoryServicesAreCreatedAsPartOfCreatingObjectGraph
  isExternal: false
  name: FactoryServicesAreCreatedAsPartOfCreatingObjectGraph
  nameWithType: DependencyInjectionSpecificationTests.FactoryServicesAreCreatedAsPartOfCreatingObjectGraph
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.FactoryServicesAreCreatedAsPartOfCreatingObjectGraph
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.LastServiceReplacesPreviousServices*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.LastServiceReplacesPreviousServices
  isExternal: false
  name: LastServiceReplacesPreviousServices
  nameWithType: DependencyInjectionSpecificationTests.LastServiceReplacesPreviousServices
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.LastServiceReplacesPreviousServices
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingletonServiceCanBeResolved*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingletonServiceCanBeResolved
  isExternal: false
  name: SingletonServiceCanBeResolved
  nameWithType: DependencyInjectionSpecificationTests.SingletonServiceCanBeResolved
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingletonServiceCanBeResolved
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceProviderRegistersServiceScopeFactory*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceProviderRegistersServiceScopeFactory
  isExternal: false
  name: ServiceProviderRegistersServiceScopeFactory
  nameWithType: DependencyInjectionSpecificationTests.ServiceProviderRegistersServiceScopeFactory
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceProviderRegistersServiceScopeFactory
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ScopedServiceCanBeResolved*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ScopedServiceCanBeResolved
  isExternal: false
  name: ScopedServiceCanBeResolved
  nameWithType: DependencyInjectionSpecificationTests.ScopedServiceCanBeResolved
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ScopedServiceCanBeResolved
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NestedScopedServiceCanBeResolved*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NestedScopedServiceCanBeResolved
  isExternal: false
  name: NestedScopedServiceCanBeResolved
  nameWithType: DependencyInjectionSpecificationTests.NestedScopedServiceCanBeResolved
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NestedScopedServiceCanBeResolved
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ScopedServices_FromCachedScopeFactory_CanBeResolvedAndDisposed*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ScopedServices_FromCachedScopeFactory_CanBeResolvedAndDisposed
  isExternal: false
  name: ScopedServices_FromCachedScopeFactory_CanBeResolvedAndDisposed
  nameWithType: DependencyInjectionSpecificationTests.ScopedServices_FromCachedScopeFactory_CanBeResolvedAndDisposed
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ScopedServices_FromCachedScopeFactory_CanBeResolvedAndDisposed
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.DisposingScopeDisposesService*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.DisposingScopeDisposesService
  isExternal: false
  name: DisposingScopeDisposesService
  nameWithType: DependencyInjectionSpecificationTests.DisposingScopeDisposesService
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.DisposingScopeDisposesService
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SelfResolveThenDispose*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SelfResolveThenDispose
  isExternal: false
  name: SelfResolveThenDispose
  nameWithType: DependencyInjectionSpecificationTests.SelfResolveThenDispose
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SelfResolveThenDispose
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SafelyDisposeNestedProviderReferences*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SafelyDisposeNestedProviderReferences
  isExternal: false
  name: SafelyDisposeNestedProviderReferences
  nameWithType: DependencyInjectionSpecificationTests.SafelyDisposeNestedProviderReferences
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SafelyDisposeNestedProviderReferences
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingletonServicesComeFromRootProvider*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingletonServicesComeFromRootProvider
  isExternal: false
  name: SingletonServicesComeFromRootProvider
  nameWithType: DependencyInjectionSpecificationTests.SingletonServicesComeFromRootProvider
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingletonServicesComeFromRootProvider
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NestedScopedServiceCanBeResolvedWithNoFallbackProvider*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NestedScopedServiceCanBeResolvedWithNoFallbackProvider
  isExternal: false
  name: NestedScopedServiceCanBeResolvedWithNoFallbackProvider
  nameWithType: DependencyInjectionSpecificationTests.NestedScopedServiceCanBeResolvedWithNoFallbackProvider
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NestedScopedServiceCanBeResolvedWithNoFallbackProvider
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.OpenGenericServicesCanBeResolved*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.OpenGenericServicesCanBeResolved
  isExternal: false
  name: OpenGenericServicesCanBeResolved
  nameWithType: DependencyInjectionSpecificationTests.OpenGenericServicesCanBeResolved
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.OpenGenericServicesCanBeResolved
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ClosedServicesPreferredOverOpenGenericServices*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ClosedServicesPreferredOverOpenGenericServices
  isExternal: false
  name: ClosedServicesPreferredOverOpenGenericServices
  nameWithType: DependencyInjectionSpecificationTests.ClosedServicesPreferredOverOpenGenericServices
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ClosedServicesPreferredOverOpenGenericServices
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.AttemptingToResolveNonexistentServiceReturnsNull*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.AttemptingToResolveNonexistentServiceReturnsNull
  isExternal: false
  name: AttemptingToResolveNonexistentServiceReturnsNull
  nameWithType: DependencyInjectionSpecificationTests.AttemptingToResolveNonexistentServiceReturnsNull
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.AttemptingToResolveNonexistentServiceReturnsNull
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NonexistentServiceCanBeIEnumerableResolved*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NonexistentServiceCanBeIEnumerableResolved
  isExternal: false
  name: NonexistentServiceCanBeIEnumerableResolved
  nameWithType: DependencyInjectionSpecificationTests.NonexistentServiceCanBeIEnumerableResolved
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NonexistentServiceCanBeIEnumerableResolved
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceContainerPicksConstructorWithLongestMatchesData*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceContainerPicksConstructorWithLongestMatchesData
  isExternal: false
  name: ServiceContainerPicksConstructorWithLongestMatchesData
  nameWithType: DependencyInjectionSpecificationTests.ServiceContainerPicksConstructorWithLongestMatchesData
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceContainerPicksConstructorWithLongestMatchesData
- uid: TheoryData
  commentId: '!:TheoryData'
  isExternal: true
  name: TheoryData
  nameWithType: TheoryData
  fullName: TheoryData
- uid: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceContainerPicksConstructorWithLongestMatches*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceContainerPicksConstructorWithLongestMatches
  isExternal: false
  name: ServiceContainerPicksConstructorWithLongestMatches
  nameWithType: DependencyInjectionSpecificationTests.ServiceContainerPicksConstructorWithLongestMatches
  fullName: Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceContainerPicksConstructorWithLongestMatches
- uid: Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors
  commentId: T:Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors
  parent: Microsoft.Extensions.DependencyInjection.Specification.Fakes
  isExternal: false
  name: TypeWithSupersetConstructors
  nameWithType: TypeWithSupersetConstructors
  fullName: Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors
- uid: Microsoft.Extensions.DependencyInjection.Specification.Fakes
  commentId: N:Microsoft.Extensions.DependencyInjection.Specification.Fakes
  isExternal: false
  name: Microsoft.Extensions.DependencyInjection.Specification.Fakes
  nameWithType: Microsoft.Extensions.DependencyInjection.Specification.Fakes
  fullName: Microsoft.Extensions.DependencyInjection.Specification.Fakes
shouldSkipMarkup: true
