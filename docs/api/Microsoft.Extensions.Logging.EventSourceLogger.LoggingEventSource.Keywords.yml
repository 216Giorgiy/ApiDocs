### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Logging.EventSourceLogger.LoggingEventSource.Keywords
  commentId: T:Microsoft.Extensions.Logging.EventSourceLogger.LoggingEventSource.Keywords
  id: LoggingEventSource.Keywords
  parent: Microsoft.Extensions.Logging.EventSourceLogger
  children:
  - Microsoft.Extensions.Logging.EventSourceLogger.LoggingEventSource.Keywords.FormattedMessage
  - Microsoft.Extensions.Logging.EventSourceLogger.LoggingEventSource.Keywords.JsonMessage
  - Microsoft.Extensions.Logging.EventSourceLogger.LoggingEventSource.Keywords.Message
  - Microsoft.Extensions.Logging.EventSourceLogger.LoggingEventSource.Keywords.Meta
  langs:
  - csharp
  - vb
  name: LoggingEventSource.Keywords
  nameWithType: LoggingEventSource.Keywords
  fullName: Microsoft.Extensions.Logging.EventSourceLogger.LoggingEventSource.Keywords
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.EventSource/LoggingEventSource.cs
      branch: dev
      repo: https://github.com/aspnet/logging
    id: Keywords
    path: src/Microsoft.Extensions.Logging.EventSource/LoggingEventSource.cs
    startLine: 78
  assemblies:
  - Microsoft.Extensions.Logging.EventSource
  namespace: Microsoft.Extensions.Logging.EventSourceLogger
  summary: "\nThis is public from an EventSource consumer point of view, but since these defintions\nare not needed outside this class\n"
  example: []
  syntax:
    content: public class Keywords
    content.vb: Public Class Keywords
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.Logging.EventSourceLogger.LoggingEventSource.Keywords.Meta
  commentId: F:Microsoft.Extensions.Logging.EventSourceLogger.LoggingEventSource.Keywords.Meta
  id: Meta
  parent: Microsoft.Extensions.Logging.EventSourceLogger.LoggingEventSource.Keywords
  langs:
  - csharp
  - vb
  name: Meta
  nameWithType: LoggingEventSource.Keywords.Meta
  fullName: Microsoft.Extensions.Logging.EventSourceLogger.LoggingEventSource.Keywords.Meta
  type: Field
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.EventSource/LoggingEventSource.cs
      branch: dev
      repo: https://github.com/aspnet/logging
    id: Meta
    path: src/Microsoft.Extensions.Logging.EventSource/LoggingEventSource.cs
    startLine: 83
  assemblies:
  - Microsoft.Extensions.Logging.EventSource
  namespace: Microsoft.Extensions.Logging.EventSourceLogger
  summary: "\nMeta events are evnets about the LoggingEventSource itself (that is they did not come from ILogger\n"
  example: []
  syntax:
    content: public const EventKeywords Meta = (EventKeywords)1L
    content.vb: Public Const Meta As EventKeywords = CType(1L, EventKeywords)
    return:
      type: System.Diagnostics.Tracing.EventKeywords
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Microsoft.Extensions.Logging.EventSourceLogger.LoggingEventSource.Keywords.Message
  commentId: F:Microsoft.Extensions.Logging.EventSourceLogger.LoggingEventSource.Keywords.Message
  id: Message
  parent: Microsoft.Extensions.Logging.EventSourceLogger.LoggingEventSource.Keywords
  langs:
  - csharp
  - vb
  name: Message
  nameWithType: LoggingEventSource.Keywords.Message
  fullName: Microsoft.Extensions.Logging.EventSourceLogger.LoggingEventSource.Keywords.Message
  type: Field
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.EventSource/LoggingEventSource.cs
      branch: dev
      repo: https://github.com/aspnet/logging
    id: Message
    path: src/Microsoft.Extensions.Logging.EventSource/LoggingEventSource.cs
    startLine: 87
  assemblies:
  - Microsoft.Extensions.Logging.EventSource
  namespace: Microsoft.Extensions.Logging.EventSourceLogger
  summary: "\nTurns on the 'Message' event when ILogger.Log() is called.   It gives the information in a programatic (not formatted) way\n"
  example: []
  syntax:
    content: public const EventKeywords Message = (EventKeywords)2L
    content.vb: Public Const Message As EventKeywords = CType(2L, EventKeywords)
    return:
      type: System.Diagnostics.Tracing.EventKeywords
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Microsoft.Extensions.Logging.EventSourceLogger.LoggingEventSource.Keywords.FormattedMessage
  commentId: F:Microsoft.Extensions.Logging.EventSourceLogger.LoggingEventSource.Keywords.FormattedMessage
  id: FormattedMessage
  parent: Microsoft.Extensions.Logging.EventSourceLogger.LoggingEventSource.Keywords
  langs:
  - csharp
  - vb
  name: FormattedMessage
  nameWithType: LoggingEventSource.Keywords.FormattedMessage
  fullName: Microsoft.Extensions.Logging.EventSourceLogger.LoggingEventSource.Keywords.FormattedMessage
  type: Field
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.EventSource/LoggingEventSource.cs
      branch: dev
      repo: https://github.com/aspnet/logging
    id: FormattedMessage
    path: src/Microsoft.Extensions.Logging.EventSource/LoggingEventSource.cs
    startLine: 91
  assemblies:
  - Microsoft.Extensions.Logging.EventSource
  namespace: Microsoft.Extensions.Logging.EventSourceLogger
  summary: "\nTurns on the 'FormatMessage' event when ILogger.Log() is called.  It gives the formatted string version of the information.\n"
  example: []
  syntax:
    content: public const EventKeywords FormattedMessage = (EventKeywords)4L
    content.vb: Public Const FormattedMessage As EventKeywords = CType(4L, EventKeywords)
    return:
      type: System.Diagnostics.Tracing.EventKeywords
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Microsoft.Extensions.Logging.EventSourceLogger.LoggingEventSource.Keywords.JsonMessage
  commentId: F:Microsoft.Extensions.Logging.EventSourceLogger.LoggingEventSource.Keywords.JsonMessage
  id: JsonMessage
  parent: Microsoft.Extensions.Logging.EventSourceLogger.LoggingEventSource.Keywords
  langs:
  - csharp
  - vb
  name: JsonMessage
  nameWithType: LoggingEventSource.Keywords.JsonMessage
  fullName: Microsoft.Extensions.Logging.EventSourceLogger.LoggingEventSource.Keywords.JsonMessage
  type: Field
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.EventSource/LoggingEventSource.cs
      branch: dev
      repo: https://github.com/aspnet/logging
    id: JsonMessage
    path: src/Microsoft.Extensions.Logging.EventSource/LoggingEventSource.cs
    startLine: 95
  assemblies:
  - Microsoft.Extensions.Logging.EventSource
  namespace: Microsoft.Extensions.Logging.EventSourceLogger
  summary: "\nTurns on the 'MessageJson' event when ILogger.Log() is called.   It gives  JSON representation of the Arguments.\n"
  example: []
  syntax:
    content: public const EventKeywords JsonMessage = (EventKeywords)8L
    content.vb: Public Const JsonMessage As EventKeywords = CType(8L, EventKeywords)
    return:
      type: System.Diagnostics.Tracing.EventKeywords
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: Microsoft.Extensions.Logging.EventSourceLogger
  commentId: N:Microsoft.Extensions.Logging.EventSourceLogger
  isExternal: false
  name: Microsoft.Extensions.Logging.EventSourceLogger
  nameWithType: Microsoft.Extensions.Logging.EventSourceLogger
  fullName: Microsoft.Extensions.Logging.EventSourceLogger
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Diagnostics.Tracing.EventKeywords
  commentId: T:System.Diagnostics.Tracing.EventKeywords
  parent: System.Diagnostics.Tracing
  isExternal: true
  name: EventKeywords
  nameWithType: EventKeywords
  fullName: System.Diagnostics.Tracing.EventKeywords
- uid: System.Diagnostics.Tracing
  commentId: N:System.Diagnostics.Tracing
  isExternal: false
  name: System.Diagnostics.Tracing
  nameWithType: System.Diagnostics.Tracing
  fullName: System.Diagnostics.Tracing
