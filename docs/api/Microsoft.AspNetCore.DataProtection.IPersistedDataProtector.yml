### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.DataProtection.IPersistedDataProtector
  commentId: T:Microsoft.AspNetCore.DataProtection.IPersistedDataProtector
  id: IPersistedDataProtector
  parent: Microsoft.AspNetCore.DataProtection
  children:
  - Microsoft.AspNetCore.DataProtection.IPersistedDataProtector.DangerousUnprotect(System.Byte[],System.Boolean,System.Boolean@,System.Boolean@)
  langs:
  - csharp
  - vb
  name: IPersistedDataProtector
  nameWithType: IPersistedDataProtector
  fullName: Microsoft.AspNetCore.DataProtection.IPersistedDataProtector
  type: Interface
  source:
    remote:
      path: src/Microsoft.AspNetCore.DataProtection/IPersistedDataProtector.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: IPersistedDataProtector
    path: ../aspnet/DataProtection/src/Microsoft.AspNetCore.DataProtection/IPersistedDataProtector.cs
    startLine: 11
  assemblies:
  - Microsoft.AspNetCore.DataProtection
  namespace: Microsoft.AspNetCore.DataProtection
  summary: "\nAn interface that can provide data protection services for data which has been persisted\nto long-term storage.\n"
  example: []
  syntax:
    content: 'public interface IPersistedDataProtector : IDataProtector'
    content.vb: >-
      Public Interface IPersistedDataProtector
          Inherits IDataProtector
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.AspNetCore.DataProtection.IPersistedDataProtector.DangerousUnprotect(System.Byte[],System.Boolean,System.Boolean@,System.Boolean@)
  commentId: M:Microsoft.AspNetCore.DataProtection.IPersistedDataProtector.DangerousUnprotect(System.Byte[],System.Boolean,System.Boolean@,System.Boolean@)
  id: DangerousUnprotect(System.Byte[],System.Boolean,System.Boolean@,System.Boolean@)
  parent: Microsoft.AspNetCore.DataProtection.IPersistedDataProtector
  langs:
  - csharp
  - vb
  name: DangerousUnprotect(Byte[], Boolean, out Boolean, out Boolean)
  nameWithType: IPersistedDataProtector.DangerousUnprotect(Byte[], Boolean, out Boolean, out Boolean)
  fullName: Microsoft.AspNetCore.DataProtection.IPersistedDataProtector.DangerousUnprotect(System.Byte[], System.Boolean, out System.Boolean, out System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.DataProtection/IPersistedDataProtector.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: DangerousUnprotect
    path: ../aspnet/DataProtection/src/Microsoft.AspNetCore.DataProtection/IPersistedDataProtector.cs
    startLine: 33
  assemblies:
  - Microsoft.AspNetCore.DataProtection
  namespace: Microsoft.AspNetCore.DataProtection
  summary: "\nCryptographically unprotects a piece of data, optionally ignoring failures due to\nrevocation of the cryptographic keys used to protect the payload.\n"
  remarks: "\nImplementations should throw CryptographicException if the protected data is\ninvalid or malformed.\n"
  example: []
  syntax:
    content: byte[] DangerousUnprotect(byte[] protectedData, bool ignoreRevocationErrors, out bool requiresMigration, out bool wasRevoked)
    parameters:
    - id: protectedData
      type: System.Byte[]
      description: The protected data to unprotect.
    - id: ignoreRevocationErrors
      type: System.Boolean
      description: >-
        &apos;true&apos; if the payload should be unprotected even

        if the cryptographic key used to protect it has been revoked (due to potential compromise),

        &apos;false&apos; if revocation should fail the unprotect operation.
    - id: requiresMigration
      type: System.Boolean
      description: >-
        &apos;true&apos; if the data should be reprotected before being

        persisted back to long-term storage, &apos;false&apos; otherwise. Migration might be requested

        when the default protection key has changed, for instance.
    - id: wasRevoked
      type: System.Boolean
      description: >-
        &apos;true&apos; if the cryptographic key used to protect this payload

        has been revoked, &apos;false&apos; otherwise. Payloads whose keys have been revoked should be

        treated as suspect unless the application has separate assurance that the payload

        has not been tampered with.
    return:
      type: System.Byte[]
      description: The plaintext form of the protected data.
    content.vb: Function DangerousUnprotect(protectedData As Byte(), ignoreRevocationErrors As Boolean, ByRef requiresMigration As Boolean, ByRef wasRevoked As Boolean) As Byte()
  overload: Microsoft.AspNetCore.DataProtection.IPersistedDataProtector.DangerousUnprotect*
  nameWithType.vb: IPersistedDataProtector.DangerousUnprotect(Byte(), Boolean, ByRef Boolean, ByRef Boolean)
  fullName.vb: Microsoft.AspNetCore.DataProtection.IPersistedDataProtector.DangerousUnprotect(System.Byte(), System.Boolean, ByRef System.Boolean, ByRef System.Boolean)
  name.vb: DangerousUnprotect(Byte(), Boolean, ByRef Boolean, ByRef Boolean)
references:
- uid: Microsoft.AspNetCore.DataProtection
  commentId: N:Microsoft.AspNetCore.DataProtection
  isExternal: false
  name: Microsoft.AspNetCore.DataProtection
  nameWithType: Microsoft.AspNetCore.DataProtection
  fullName: Microsoft.AspNetCore.DataProtection
- uid: Microsoft.AspNetCore.DataProtection.IPersistedDataProtector.DangerousUnprotect*
  commentId: Overload:Microsoft.AspNetCore.DataProtection.IPersistedDataProtector.DangerousUnprotect
  isExternal: false
  name: DangerousUnprotect
  nameWithType: IPersistedDataProtector.DangerousUnprotect
  fullName: Microsoft.AspNetCore.DataProtection.IPersistedDataProtector.DangerousUnprotect
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
shouldSkipMarkup: true
