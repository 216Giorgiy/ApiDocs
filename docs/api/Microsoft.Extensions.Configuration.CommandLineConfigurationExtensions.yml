### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions
  commentId: T:Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions
  id: CommandLineConfigurationExtensions
  parent: Microsoft.Extensions.Configuration
  children:
  - Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions.AddCommandLine(IConfigurationBuilder,System.String[])
  - Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions.AddCommandLine(IConfigurationBuilder,System.String[],IDictionary{System.String,System.String})
  langs:
  - csharp
  - vb
  name: CommandLineConfigurationExtensions
  nameWithType: CommandLineConfigurationExtensions
  fullName: Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration.CommandLine/CommandLineConfigurationExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: CommandLineConfigurationExtensions
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration.CommandLine/CommandLineConfigurationExtensions.cs
    startLine: 11
  assemblies:
  - Microsoft.Extensions.Configuration.CommandLine
  namespace: Microsoft.Extensions.Configuration
  summary: "\nExtension methods for registering <xref href=\"Microsoft.Extensions.Configuration.CommandLine.CommandLineConfigurationProvider\" data-throw-if-not-resolved=\"false\"></xref> with <see cref=\"!:IConfigurationBuilder\"></see>.\n"
  example: []
  syntax:
    content: 'public static class CommandLineConfigurationExtensions : object'
    content.vb: >-
      Public Module CommandLineConfigurationExtensions
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions.AddCommandLine(IConfigurationBuilder,System.String[])
  commentId: M:Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions.AddCommandLine(IConfigurationBuilder,System.String[])
  id: AddCommandLine(IConfigurationBuilder,System.String[])
  isExtensionMethod: true
  parent: Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions
  langs:
  - csharp
  - vb
  name: AddCommandLine(IConfigurationBuilder, String[])
  nameWithType: CommandLineConfigurationExtensions.AddCommandLine(IConfigurationBuilder, String[])
  fullName: Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions.AddCommandLine(IConfigurationBuilder, System.String[])
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration.CommandLine/CommandLineConfigurationExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: AddCommandLine
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration.CommandLine/CommandLineConfigurationExtensions.cs
    startLine: 19
  assemblies:
  - Microsoft.Extensions.Configuration.CommandLine
  namespace: Microsoft.Extensions.Configuration
  summary: "\nAdds an <see cref=\"!:IConfigurationProvider\"></see> that reads configuration values from the command line.\n"
  example: []
  syntax:
    content: public static IConfigurationBuilder AddCommandLine(this IConfigurationBuilder configurationBuilder, string[] args)
    parameters:
    - id: configurationBuilder
      type: IConfigurationBuilder
      description: The <see cref="!:IConfigurationBuilder"></see> to add to.
    - id: args
      type: System.String[]
      description: The command line args.
    return:
      type: IConfigurationBuilder
      description: The <see cref="!:IConfigurationBuilder"></see>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddCommandLine(configurationBuilder As IConfigurationBuilder, args As String()) As IConfigurationBuilder
  overload: Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions.AddCommandLine*
  nameWithType.vb: CommandLineConfigurationExtensions.AddCommandLine(IConfigurationBuilder, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions.AddCommandLine(IConfigurationBuilder, System.String())
  name.vb: AddCommandLine(IConfigurationBuilder, String())
- uid: Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions.AddCommandLine(IConfigurationBuilder,System.String[],IDictionary{System.String,System.String})
  commentId: M:Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions.AddCommandLine(IConfigurationBuilder,System.String[],IDictionary{System.String,System.String})
  id: AddCommandLine(IConfigurationBuilder,System.String[],IDictionary{System.String,System.String})
  isExtensionMethod: true
  parent: Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions
  langs:
  - csharp
  - vb
  name: AddCommandLine(IConfigurationBuilder, String[], IDictionary<String, String>)
  nameWithType: CommandLineConfigurationExtensions.AddCommandLine(IConfigurationBuilder, String[], IDictionary<String, String>)
  fullName: Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions.AddCommandLine(IConfigurationBuilder, System.String[], IDictionary<System.String, System.String>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration.CommandLine/CommandLineConfigurationExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: AddCommandLine
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration.CommandLine/CommandLineConfigurationExtensions.cs
    startLine: 31
  assemblies:
  - Microsoft.Extensions.Configuration.CommandLine
  namespace: Microsoft.Extensions.Configuration
  summary: "\nAdds an <see cref=\"!:IConfigurationProvider\"></see> that reads configuration values from the command line using the specified switch mappings.\n"
  example: []
  syntax:
    content: public static IConfigurationBuilder AddCommandLine(this IConfigurationBuilder configurationBuilder, string[] args, IDictionary<string, string> switchMappings)
    parameters:
    - id: configurationBuilder
      type: IConfigurationBuilder
      description: The <see cref="!:IConfigurationBuilder"></see> to add to.
    - id: args
      type: System.String[]
      description: The command line args.
    - id: switchMappings
      type: IDictionary{System.String,System.String}
      description: The switch mappings.
    return:
      type: IConfigurationBuilder
      description: The <see cref="!:IConfigurationBuilder"></see>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddCommandLine(configurationBuilder As IConfigurationBuilder, args As String(), switchMappings As IDictionary(Of String, String)) As IConfigurationBuilder
  overload: Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions.AddCommandLine*
  nameWithType.vb: CommandLineConfigurationExtensions.AddCommandLine(IConfigurationBuilder, String(), IDictionary(Of String, String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions.AddCommandLine(IConfigurationBuilder, System.String(), IDictionary(Of System.String, System.String))
  name.vb: AddCommandLine(IConfigurationBuilder, String(), IDictionary(Of String, String))
references:
- uid: Microsoft.Extensions.Configuration.CommandLine.CommandLineConfigurationProvider
  commentId: T:Microsoft.Extensions.Configuration.CommandLine.CommandLineConfigurationProvider
  isExternal: false
  name: CommandLineConfigurationProvider
  nameWithType: CommandLineConfigurationProvider
  fullName: Microsoft.Extensions.Configuration.CommandLine.CommandLineConfigurationProvider
- uid: Microsoft.Extensions.Configuration
  commentId: N:Microsoft.Extensions.Configuration
  isExternal: false
  name: Microsoft.Extensions.Configuration
  nameWithType: Microsoft.Extensions.Configuration
  fullName: Microsoft.Extensions.Configuration
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions.AddCommandLine*
  commentId: Overload:Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions.AddCommandLine
  isExternal: false
  name: AddCommandLine
  nameWithType: CommandLineConfigurationExtensions.AddCommandLine
  fullName: Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions.AddCommandLine
- uid: IConfigurationBuilder
  isExternal: true
  name: IConfigurationBuilder
  nameWithType: IConfigurationBuilder
  fullName: IConfigurationBuilder
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: IDictionary{System.String,System.String}
  commentId: '!:IDictionary{System.String,System.String}'
  definition: IDictionary`2
  name: IDictionary<String, String>
  nameWithType: IDictionary<String, String>
  fullName: IDictionary<System.String, System.String>
  nameWithType.vb: IDictionary(Of String, String)
  fullName.vb: IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IDictionary`2
  isExternal: true
  name: IDictionary<, >
  nameWithType: IDictionary<, >
  fullName: IDictionary<, >
  nameWithType.vb: IDictionary(Of , )
  fullName.vb: IDictionary(Of , )
  name.vb: IDictionary(Of , )
  spec.csharp:
  - uid: IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
