### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch
  commentId: T:Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch
  id: FilePatternMatch
  parent: Microsoft.Extensions.FileSystemGlobbing
  children:
  - Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.#ctor(System.String,System.String)
  - Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.Equals(Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch)
  - Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.Equals(System.Object)
  - Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.GetHashCode
  - Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.Path
  - Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.Stem
  langs:
  - csharp
  - vb
  name: FilePatternMatch
  nameWithType: FilePatternMatch
  fullName: Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch
  type: Struct
  source:
    remote:
      path: src/Microsoft.Extensions.FileSystemGlobbing/FilePatternMatch.cs
      branch: dev
      repo: https://github.com/aspnet/filesystem
    id: FilePatternMatch
    path: src/Microsoft.Extensions.FileSystemGlobbing/FilePatternMatch.cs
    startLine: 11
  assemblies:
  - Microsoft.Extensions.FileSystemGlobbing
  namespace: Microsoft.Extensions.FileSystemGlobbing
  summary: "\nRepresents a file that was matched by searching using a globbing pattern\n"
  example: []
  syntax:
    content: 'public struct FilePatternMatch : IEquatable<FilePatternMatch>'
    content.vb: >-
      Public Structure FilePatternMatch
          Implements IEquatable(Of FilePatternMatch)
  implements:
  - System.IEquatable{Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch}
  inheritedMembers:
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.Path
  commentId: P:Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.Path
  id: Path
  parent: Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch
  langs:
  - csharp
  - vb
  name: Path
  nameWithType: FilePatternMatch.Path
  fullName: Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.Path
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.FileSystemGlobbing/FilePatternMatch.cs
      branch: dev
      repo: https://github.com/aspnet/filesystem
    id: Path
    path: src/Microsoft.Extensions.FileSystemGlobbing/FilePatternMatch.cs
    startLine: 20
  assemblies:
  - Microsoft.Extensions.FileSystemGlobbing
  namespace: Microsoft.Extensions.FileSystemGlobbing
  summary: "\nThe path to the file matched\n"
  remarks: "\nIf the matcher searched for \"**/*.cs\" using \"src/Project\" as the directory base and the pattern matcher found\n\"src/Project/Interfaces/IFile.cs\", then Stem = \"Interfaces/IFile.cs\" and Path = \"src/Project/Interfaces/IFile.cs\".\n"
  example: []
  syntax:
    content: public string Path { get; }
    content.vb: Public ReadOnly Property Path As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.Stem
  commentId: P:Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.Stem
  id: Stem
  parent: Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch
  langs:
  - csharp
  - vb
  name: Stem
  nameWithType: FilePatternMatch.Stem
  fullName: Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.Stem
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.FileSystemGlobbing/FilePatternMatch.cs
      branch: dev
      repo: https://github.com/aspnet/filesystem
    id: Stem
    path: src/Microsoft.Extensions.FileSystemGlobbing/FilePatternMatch.cs
    startLine: 30
  assemblies:
  - Microsoft.Extensions.FileSystemGlobbing
  namespace: Microsoft.Extensions.FileSystemGlobbing
  summary: "\nThe subpath to the matched file under the base directory searched\n"
  remarks: "\nIf the matcher searched for \"**/*.cs\" using \"src/Project\" as the directory base and the pattern matcher found\n\"src/Project/Interfaces/IFile.cs\",\nthen Stem = \"Interfaces/IFile.cs\" and Path = \"src/Project/Interfaces/IFile.cs\".\n"
  example: []
  syntax:
    content: public string Stem { get; }
    content.vb: Public ReadOnly Property Stem As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.#ctor(System.String,System.String)
  commentId: M:Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch
  langs:
  - csharp
  - vb
  name: FilePatternMatch(String, String)
  nameWithType: FilePatternMatch.FilePatternMatch(String, String)
  fullName: Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.FilePatternMatch(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.FileSystemGlobbing/FilePatternMatch.cs
      branch: dev
      repo: https://github.com/aspnet/filesystem
    id: .ctor
    path: src/Microsoft.Extensions.FileSystemGlobbing/FilePatternMatch.cs
    startLine: 37
  assemblies:
  - Microsoft.Extensions.FileSystemGlobbing
  namespace: Microsoft.Extensions.FileSystemGlobbing
  summary: "\nInitializes new instance of <see cref=\"T:Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch\"></see>\n"
  example: []
  syntax:
    content: public FilePatternMatch(string path, string stem)
    content.vb: Public Sub New(path As String, stem As String)
    parameters:
    - id: path
      type: System.String
      description: The path to the matched file
    - id: stem
      type: System.String
      description: The stem
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.Equals(Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch)
  commentId: M:Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.Equals(Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch)
  id: Equals(Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch)
  parent: Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch
  langs:
  - csharp
  - vb
  name: Equals(FilePatternMatch)
  nameWithType: FilePatternMatch.Equals(FilePatternMatch)
  fullName: Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.Equals(Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.FileSystemGlobbing/FilePatternMatch.cs
      branch: dev
      repo: https://github.com/aspnet/filesystem
    id: Equals
    path: src/Microsoft.Extensions.FileSystemGlobbing/FilePatternMatch.cs
    startLine: 48
  assemblies:
  - Microsoft.Extensions.FileSystemGlobbing
  namespace: Microsoft.Extensions.FileSystemGlobbing
  summary: "\nDetermines if the specified match is equivalent to the current match using a case-insensitive comparison.\n"
  example: []
  syntax:
    content: public bool Equals(FilePatternMatch other)
    content.vb: Public Function Equals(other As FilePatternMatch) As Boolean
    parameters:
    - id: other
      type: Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch
      description: The other match to be compared
    return:
      type: System.Boolean
      description: True if <see cref="P:Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.Path"></see> and <see cref="P:Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.Stem"></see> are equal using case-insensitive comparison
  implements:
  - System.IEquatable{Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch}.Equals(Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.Equals(System.Object)
  commentId: M:Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.Equals(System.Object)
  id: Equals(System.Object)
  parent: Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: FilePatternMatch.Equals(Object)
  fullName: Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.FileSystemGlobbing/FilePatternMatch.cs
      branch: dev
      repo: https://github.com/aspnet/filesystem
    id: Equals
    path: src/Microsoft.Extensions.FileSystemGlobbing/FilePatternMatch.cs
    startLine: 59
  assemblies:
  - Microsoft.Extensions.FileSystemGlobbing
  namespace: Microsoft.Extensions.FileSystemGlobbing
  summary: "\nDetermines if the specified object is equivalent to the current match using a case-insensitive comparison.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: The object to be compared
    return:
      type: System.Boolean
      description: True when <see cref="M:Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.Equals(Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch)"></see>
  overridden: System.ValueType.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.GetHashCode
  commentId: M:Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.GetHashCode
  id: GetHashCode
  parent: Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: FilePatternMatch.GetHashCode()
  fullName: Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.FileSystemGlobbing/FilePatternMatch.cs
      branch: dev
      repo: https://github.com/aspnet/filesystem
    id: GetHashCode
    path: src/Microsoft.Extensions.FileSystemGlobbing/FilePatternMatch.cs
    startLine: 68
  assemblies:
  - Microsoft.Extensions.FileSystemGlobbing
  namespace: Microsoft.Extensions.FileSystemGlobbing
  summary: "\nGets a hash for the file pattern match.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: Some number
  overridden: System.ValueType.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.Extensions.FileSystemGlobbing
  commentId: N:Microsoft.Extensions.FileSystemGlobbing
  isExternal: false
  name: Microsoft.Extensions.FileSystemGlobbing
  nameWithType: Microsoft.Extensions.FileSystemGlobbing
  fullName: Microsoft.Extensions.FileSystemGlobbing
- uid: System.IEquatable{Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch}
  commentId: T:System.IEquatable{Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<FilePatternMatch>
  nameWithType: IEquatable<FilePatternMatch>
  fullName: System.IEquatable<Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch>
  nameWithType.vb: IEquatable(Of FilePatternMatch)
  fullname.vb: System.IEquatable(Of Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch)
  name.vb: IEquatable(Of FilePatternMatch)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch
    name: FilePatternMatch
    nameWithType: FilePatternMatch
    fullName: Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch
    name: FilePatternMatch
    nameWithType: FilePatternMatch
    fullName: Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullname.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IEquatable{Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch}.Equals(Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch)
  commentId: M:System.IEquatable{Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch}.Equals(Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch)
  parent: System.IEquatable{Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(FilePatternMatch)
  nameWithType: IEquatable<FilePatternMatch>.Equals(FilePatternMatch)
  fullName: System.IEquatable<Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch>.Equals(Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch)
  nameWithType.vb: IEquatable(Of FilePatternMatch).Equals(FilePatternMatch)
  fullname.vb: System.IEquatable(Of Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch).Equals(Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<FilePatternMatch>.Equals
    fullName: System.IEquatable<Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch
    name: FilePatternMatch
    nameWithType: FilePatternMatch
    fullName: Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of FilePatternMatch).Equals
    fullName: System.IEquatable(Of Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch
    name: FilePatternMatch
    nameWithType: FilePatternMatch
    fullName: Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch
  commentId: T:Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch
  parent: Microsoft.Extensions.FileSystemGlobbing
  isExternal: false
  name: FilePatternMatch
  nameWithType: FilePatternMatch
  fullName: Microsoft.Extensions.FileSystemGlobbing.FilePatternMatch
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
