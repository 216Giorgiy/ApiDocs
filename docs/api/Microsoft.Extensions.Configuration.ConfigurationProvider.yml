### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Configuration.ConfigurationProvider
  commentId: T:Microsoft.Extensions.Configuration.ConfigurationProvider
  id: ConfigurationProvider
  parent: Microsoft.Extensions.Configuration
  children:
  - Microsoft.Extensions.Configuration.ConfigurationProvider.#ctor
  - Microsoft.Extensions.Configuration.ConfigurationProvider.Data
  - Microsoft.Extensions.Configuration.ConfigurationProvider.GetChildKeys(IEnumerable{System.String},System.String)
  - Microsoft.Extensions.Configuration.ConfigurationProvider.GetReloadToken
  - Microsoft.Extensions.Configuration.ConfigurationProvider.Load
  - Microsoft.Extensions.Configuration.ConfigurationProvider.OnReload
  - Microsoft.Extensions.Configuration.ConfigurationProvider.Set(System.String,System.String)
  - Microsoft.Extensions.Configuration.ConfigurationProvider.TryGet(System.String,System.String@)
  langs:
  - csharp
  - vb
  name: ConfigurationProvider
  nameWithType: ConfigurationProvider
  fullName: Microsoft.Extensions.Configuration.ConfigurationProvider
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration/ConfigurationProvider.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: ConfigurationProvider
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration/ConfigurationProvider.cs
    startLine: 14
  assemblies:
  - Microsoft.Extensions.Configuration
  namespace: Microsoft.Extensions.Configuration
  summary: "\nBase helper class for implementing an <see cref=\"!:IConfigurationProvider\"></see>\n"
  example: []
  syntax:
    content: 'public abstract class ConfigurationProvider : IConfigurationProvider'
    content.vb: >-
      Public MustInherit Class ConfigurationProvider
          Inherits IConfigurationProvider
  inheritance:
  - System.Object
  derivedClasses:
  - Microsoft.Extensions.Configuration.Memory.MemoryConfigurationProvider
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.Extensions.Configuration.ConfigurationProvider.#ctor
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationProvider.#ctor
  id: '#ctor'
  parent: Microsoft.Extensions.Configuration.ConfigurationProvider
  langs:
  - csharp
  - vb
  name: ConfigurationProvider()
  nameWithType: ConfigurationProvider.ConfigurationProvider()
  fullName: Microsoft.Extensions.Configuration.ConfigurationProvider.ConfigurationProvider()
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration/ConfigurationProvider.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: .ctor
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration/ConfigurationProvider.cs
    startLine: 21
  assemblies:
  - Microsoft.Extensions.Configuration
  namespace: Microsoft.Extensions.Configuration
  summary: "\nInitializes a new <see cref=\"!:IConfigurationProvider\"></see>\n"
  example: []
  syntax:
    content: protected ConfigurationProvider()
    content.vb: Protected Sub New
  overload: Microsoft.Extensions.Configuration.ConfigurationProvider.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.Extensions.Configuration.ConfigurationProvider.Data
  commentId: P:Microsoft.Extensions.Configuration.ConfigurationProvider.Data
  id: Data
  parent: Microsoft.Extensions.Configuration.ConfigurationProvider
  langs:
  - csharp
  - vb
  name: Data
  nameWithType: ConfigurationProvider.Data
  fullName: Microsoft.Extensions.Configuration.ConfigurationProvider.Data
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration/ConfigurationProvider.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: Data
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration/ConfigurationProvider.cs
    startLine: 29
  assemblies:
  - Microsoft.Extensions.Configuration
  namespace: Microsoft.Extensions.Configuration
  summary: "\nThe configuration key value pairs for this provider.\n"
  example: []
  syntax:
    content: protected IDictionary<string, string> Data { get; set; }
    parameters: []
    return:
      type: IDictionary{System.String,System.String}
    content.vb: Protected Property Data As IDictionary(Of String, String)
  overload: Microsoft.Extensions.Configuration.ConfigurationProvider.Data*
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
- uid: Microsoft.Extensions.Configuration.ConfigurationProvider.TryGet(System.String,System.String@)
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationProvider.TryGet(System.String,System.String@)
  id: TryGet(System.String,System.String@)
  parent: Microsoft.Extensions.Configuration.ConfigurationProvider
  langs:
  - csharp
  - vb
  name: TryGet(String, out String)
  nameWithType: ConfigurationProvider.TryGet(String, out String)
  fullName: Microsoft.Extensions.Configuration.ConfigurationProvider.TryGet(System.String, out System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration/ConfigurationProvider.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: TryGet
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration/ConfigurationProvider.cs
    startLine: 37
  assemblies:
  - Microsoft.Extensions.Configuration
  namespace: Microsoft.Extensions.Configuration
  summary: "\nAttempts to find a value with the given key, returns true if one is found, false otherwise.\n"
  example: []
  syntax:
    content: public virtual bool TryGet(string key, out string value)
    parameters:
    - id: key
      type: System.String
      description: The key to lookup.
    - id: value
      type: System.String
      description: The value found at key if one is found.
    return:
      type: System.Boolean
      description: True if key has a value, false otherwise.
    content.vb: Public Overridable Function TryGet(key As String, ByRef value As String) As Boolean
  overload: Microsoft.Extensions.Configuration.ConfigurationProvider.TryGet*
  nameWithType.vb: ConfigurationProvider.TryGet(String, ByRef String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.Extensions.Configuration.ConfigurationProvider.TryGet(System.String, ByRef System.String)
  name.vb: TryGet(String, ByRef String)
- uid: Microsoft.Extensions.Configuration.ConfigurationProvider.Set(System.String,System.String)
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationProvider.Set(System.String,System.String)
  id: Set(System.String,System.String)
  parent: Microsoft.Extensions.Configuration.ConfigurationProvider
  langs:
  - csharp
  - vb
  name: Set(String, String)
  nameWithType: ConfigurationProvider.Set(String, String)
  fullName: Microsoft.Extensions.Configuration.ConfigurationProvider.Set(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration/ConfigurationProvider.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: Set
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration/ConfigurationProvider.cs
    startLine: 47
  assemblies:
  - Microsoft.Extensions.Configuration
  namespace: Microsoft.Extensions.Configuration
  summary: "\nSets a value for a given key.\n"
  example: []
  syntax:
    content: public virtual void Set(string key, string value)
    parameters:
    - id: key
      type: System.String
      description: The configuration key to set.
    - id: value
      type: System.String
      description: The value to set.
    content.vb: Public Overridable Sub Set(key As String, value As String)
  overload: Microsoft.Extensions.Configuration.ConfigurationProvider.Set*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.Extensions.Configuration.ConfigurationProvider.Load
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationProvider.Load
  id: Load
  parent: Microsoft.Extensions.Configuration.ConfigurationProvider
  langs:
  - csharp
  - vb
  name: Load()
  nameWithType: ConfigurationProvider.Load()
  fullName: Microsoft.Extensions.Configuration.ConfigurationProvider.Load()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration/ConfigurationProvider.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: Load
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration/ConfigurationProvider.cs
    startLine: 55
  assemblies:
  - Microsoft.Extensions.Configuration
  namespace: Microsoft.Extensions.Configuration
  summary: "\nLoads (or reloads) the data for this provider.\n"
  example: []
  syntax:
    content: public virtual void Load()
    content.vb: Public Overridable Sub Load
  overload: Microsoft.Extensions.Configuration.ConfigurationProvider.Load*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.Extensions.Configuration.ConfigurationProvider.GetChildKeys(IEnumerable{System.String},System.String)
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationProvider.GetChildKeys(IEnumerable{System.String},System.String)
  id: GetChildKeys(IEnumerable{System.String},System.String)
  parent: Microsoft.Extensions.Configuration.ConfigurationProvider
  langs:
  - csharp
  - vb
  name: GetChildKeys(IEnumerable<String>, String)
  nameWithType: ConfigurationProvider.GetChildKeys(IEnumerable<String>, String)
  fullName: Microsoft.Extensions.Configuration.ConfigurationProvider.GetChildKeys(IEnumerable<System.String>, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration/ConfigurationProvider.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: GetChildKeys
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration/ConfigurationProvider.cs
    startLine: 65
  assemblies:
  - Microsoft.Extensions.Configuration
  namespace: Microsoft.Extensions.Configuration
  summary: "\nReturns the list of keys that this provider has.\n"
  example: []
  syntax:
    content: public virtual IEnumerable<string> GetChildKeys(IEnumerable<string> earlierKeys, string parentPath)
    parameters:
    - id: earlierKeys
      type: IEnumerable{System.String}
      description: The earlier keys that other providers contain.
    - id: parentPath
      type: System.String
      description: The path for the parent IConfiguration.
    return:
      type: IEnumerable{System.String}
      description: The list of keys for this provider.
    content.vb: Public Overridable Function GetChildKeys(earlierKeys As IEnumerable(Of String), parentPath As String) As IEnumerable(Of String)
  overload: Microsoft.Extensions.Configuration.ConfigurationProvider.GetChildKeys*
  nameWithType.vb: ConfigurationProvider.GetChildKeys(IEnumerable(Of String), String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.Extensions.Configuration.ConfigurationProvider.GetChildKeys(IEnumerable(Of System.String), System.String)
  name.vb: GetChildKeys(IEnumerable(Of String), String)
- uid: Microsoft.Extensions.Configuration.ConfigurationProvider.GetReloadToken
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationProvider.GetReloadToken
  id: GetReloadToken
  parent: Microsoft.Extensions.Configuration.ConfigurationProvider
  langs:
  - csharp
  - vb
  name: GetReloadToken()
  nameWithType: ConfigurationProvider.GetReloadToken()
  fullName: Microsoft.Extensions.Configuration.ConfigurationProvider.GetReloadToken()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration/ConfigurationProvider.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: GetReloadToken
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration/ConfigurationProvider.cs
    startLine: 88
  assemblies:
  - Microsoft.Extensions.Configuration
  namespace: Microsoft.Extensions.Configuration
  summary: "\nReturns a <see cref=\"!:IChangeToken\"></see> that can be used to listen when this provider is reloaded.\n"
  example: []
  syntax:
    content: public IChangeToken GetReloadToken()
    return:
      type: IChangeToken
      description: ''
    content.vb: Public Function GetReloadToken As IChangeToken
  overload: Microsoft.Extensions.Configuration.ConfigurationProvider.GetReloadToken*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Configuration.ConfigurationProvider.OnReload
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationProvider.OnReload
  id: OnReload
  parent: Microsoft.Extensions.Configuration.ConfigurationProvider
  langs:
  - csharp
  - vb
  name: OnReload()
  nameWithType: ConfigurationProvider.OnReload()
  fullName: Microsoft.Extensions.Configuration.ConfigurationProvider.OnReload()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration/ConfigurationProvider.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: OnReload
    path: ../aspnet/Configuration/src/Microsoft.Extensions.Configuration/ConfigurationProvider.cs
    startLine: 96
  assemblies:
  - Microsoft.Extensions.Configuration
  namespace: Microsoft.Extensions.Configuration
  summary: "\nTriggers the reload change token and creates a new one.\n"
  example: []
  syntax:
    content: protected void OnReload()
    content.vb: Protected Sub OnReload
  overload: Microsoft.Extensions.Configuration.ConfigurationProvider.OnReload*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: Microsoft.Extensions.Configuration
  commentId: N:Microsoft.Extensions.Configuration
  isExternal: false
  name: Microsoft.Extensions.Configuration
  nameWithType: Microsoft.Extensions.Configuration
  fullName: Microsoft.Extensions.Configuration
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Configuration.ConfigurationProvider.#ctor*
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationProvider.#ctor
  isExternal: false
  name: ConfigurationProvider
  nameWithType: ConfigurationProvider.ConfigurationProvider
  fullName: Microsoft.Extensions.Configuration.ConfigurationProvider.ConfigurationProvider
- uid: Microsoft.Extensions.Configuration.ConfigurationProvider.Data*
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationProvider.Data
  isExternal: false
  name: Data
  nameWithType: ConfigurationProvider.Data
  fullName: Microsoft.Extensions.Configuration.ConfigurationProvider.Data
- uid: IDictionary{System.String,System.String}
  commentId: '!:IDictionary{System.String,System.String}'
  definition: IDictionary`2
  name: IDictionary<String, String>
  nameWithType: IDictionary<String, String>
  fullName: IDictionary<System.String, System.String>
  nameWithType.vb: IDictionary(Of String, String)
  fullName.vb: IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IDictionary`2
  isExternal: true
  name: IDictionary<, >
  nameWithType: IDictionary<, >
  fullName: IDictionary<, >
  nameWithType.vb: IDictionary(Of , )
  fullName.vb: IDictionary(Of , )
  name.vb: IDictionary(Of , )
  spec.csharp:
  - uid: IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Configuration.ConfigurationProvider.TryGet*
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationProvider.TryGet
  isExternal: false
  name: TryGet
  nameWithType: ConfigurationProvider.TryGet
  fullName: Microsoft.Extensions.Configuration.ConfigurationProvider.TryGet
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Extensions.Configuration.ConfigurationProvider.Set*
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationProvider.Set
  isExternal: false
  name: Set
  nameWithType: ConfigurationProvider.Set
  fullName: Microsoft.Extensions.Configuration.ConfigurationProvider.Set
- uid: Microsoft.Extensions.Configuration.ConfigurationProvider.Load*
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationProvider.Load
  isExternal: false
  name: Load
  nameWithType: ConfigurationProvider.Load
  fullName: Microsoft.Extensions.Configuration.ConfigurationProvider.Load
- uid: Microsoft.Extensions.Configuration.ConfigurationProvider.GetChildKeys*
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationProvider.GetChildKeys
  isExternal: false
  name: GetChildKeys
  nameWithType: ConfigurationProvider.GetChildKeys
  fullName: Microsoft.Extensions.Configuration.ConfigurationProvider.GetChildKeys
- uid: IEnumerable{System.String}
  commentId: '!:IEnumerable{System.String}'
  definition: IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Configuration.ConfigurationProvider.GetReloadToken*
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationProvider.GetReloadToken
  isExternal: false
  name: GetReloadToken
  nameWithType: ConfigurationProvider.GetReloadToken
  fullName: Microsoft.Extensions.Configuration.ConfigurationProvider.GetReloadToken
- uid: IChangeToken
  isExternal: true
  name: IChangeToken
  nameWithType: IChangeToken
  fullName: IChangeToken
- uid: Microsoft.Extensions.Configuration.ConfigurationProvider.OnReload*
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationProvider.OnReload
  isExternal: false
  name: OnReload
  nameWithType: ConfigurationProvider.OnReload
  fullName: Microsoft.Extensions.Configuration.ConfigurationProvider.OnReload
shouldSkipMarkup: true
