### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Logging.EventId
  commentId: T:Microsoft.Extensions.Logging.EventId
  id: EventId
  parent: Microsoft.Extensions.Logging
  children:
  - Microsoft.Extensions.Logging.EventId.#ctor(System.Int32,System.String)
  - Microsoft.Extensions.Logging.EventId.Id
  - Microsoft.Extensions.Logging.EventId.Name
  - Microsoft.Extensions.Logging.EventId.op_Implicit(System.Int32)~Microsoft.Extensions.Logging.EventId
  langs:
  - csharp
  - vb
  name: EventId
  nameWithType: EventId
  fullName: Microsoft.Extensions.Logging.EventId
  type: Struct
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Abstractions/EventId.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: EventId
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Abstractions/EventId.cs
    startLine: 5
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging
  syntax:
    content: public struct EventId
    content.vb: Public Structure EventId
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Microsoft.Extensions.Logging.EventId.#ctor(System.Int32,System.String)
  commentId: M:Microsoft.Extensions.Logging.EventId.#ctor(System.Int32,System.String)
  id: '#ctor(System.Int32,System.String)'
  parent: Microsoft.Extensions.Logging.EventId
  langs:
  - csharp
  - vb
  name: EventId(Int32, String)
  nameWithType: EventId.EventId(Int32, String)
  fullName: Microsoft.Extensions.Logging.EventId.EventId(System.Int32, System.String)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Abstractions/EventId.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: .ctor
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Abstractions/EventId.cs
    startLine: 10
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging
  syntax:
    content: public EventId(int id, string name = null)
    parameters:
    - id: id
      type: System.Int32
    - id: name
      type: System.String
    content.vb: Public Sub New(id As Integer, name As String = Nothing)
  overload: Microsoft.Extensions.Logging.EventId.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Logging.EventId.Id
  commentId: P:Microsoft.Extensions.Logging.EventId.Id
  id: Id
  parent: Microsoft.Extensions.Logging.EventId
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: EventId.Id
  fullName: Microsoft.Extensions.Logging.EventId.Id
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Abstractions/EventId.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: Id
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Abstractions/EventId.cs
    startLine: 16
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging
  syntax:
    content: public int Id { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Id As Integer
  overload: Microsoft.Extensions.Logging.EventId.Id*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.Logging.EventId.Name
  commentId: P:Microsoft.Extensions.Logging.EventId.Name
  id: Name
  parent: Microsoft.Extensions.Logging.EventId
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: EventId.Name
  fullName: Microsoft.Extensions.Logging.EventId.Name
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Abstractions/EventId.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: Name
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Abstractions/EventId.cs
    startLine: 24
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: Microsoft.Extensions.Logging.EventId.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.Logging.EventId.op_Implicit(System.Int32)~Microsoft.Extensions.Logging.EventId
  commentId: M:Microsoft.Extensions.Logging.EventId.op_Implicit(System.Int32)~Microsoft.Extensions.Logging.EventId
  id: op_Implicit(System.Int32)~Microsoft.Extensions.Logging.EventId
  parent: Microsoft.Extensions.Logging.EventId
  langs:
  - csharp
  - vb
  name: Implicit(Int32 to EventId)
  nameWithType: EventId.Implicit(Int32 to EventId)
  fullName: Microsoft.Extensions.Logging.EventId.Implicit(System.Int32 to Microsoft.Extensions.Logging.EventId)
  type: Operator
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Abstractions/EventId.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: op_Implicit
    path: ../aspnet/Logging/src/Microsoft.Extensions.Logging.Abstractions/EventId.cs
    startLine: 32
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging
  syntax:
    content: public static implicit operator EventId(int i)
    parameters:
    - id: i
      type: System.Int32
    return:
      type: Microsoft.Extensions.Logging.EventId
    content.vb: Public Shared Widening Operator CType(i As Integer) As EventId
  overload: Microsoft.Extensions.Logging.EventId.op_Implicit*
  nameWithType.vb: EventId.Widening(Int32 to EventId)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Logging.EventId.Widening(System.Int32 to Microsoft.Extensions.Logging.EventId)
  name.vb: Widening(Int32 to EventId)
references:
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: false
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: Microsoft.Extensions.Logging.EventId.#ctor*
  commentId: Overload:Microsoft.Extensions.Logging.EventId.#ctor
  isExternal: false
  name: EventId
  nameWithType: EventId.EventId
  fullName: Microsoft.Extensions.Logging.EventId.EventId
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Logging.EventId.Id*
  commentId: Overload:Microsoft.Extensions.Logging.EventId.Id
  isExternal: false
  name: Id
  nameWithType: EventId.Id
  fullName: Microsoft.Extensions.Logging.EventId.Id
- uid: Microsoft.Extensions.Logging.EventId.Name*
  commentId: Overload:Microsoft.Extensions.Logging.EventId.Name
  isExternal: false
  name: Name
  nameWithType: EventId.Name
  fullName: Microsoft.Extensions.Logging.EventId.Name
- uid: Microsoft.Extensions.Logging.EventId.op_Implicit*
  commentId: Overload:Microsoft.Extensions.Logging.EventId.op_Implicit
  isExternal: false
  name: Implicit
  nameWithType: EventId.Implicit
  fullName: Microsoft.Extensions.Logging.EventId.Implicit
  nameWithType.vb: EventId.Widening
  fullName.vb: Microsoft.Extensions.Logging.EventId.Widening
  name.vb: Widening
- uid: Microsoft.Extensions.Logging.EventId
  commentId: T:Microsoft.Extensions.Logging.EventId
  parent: Microsoft.Extensions.Logging
  isExternal: false
  name: EventId
  nameWithType: EventId
  fullName: Microsoft.Extensions.Logging.EventId
shouldSkipMarkup: true
