### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions
  commentId: T:Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions
  id: ServiceProviderServiceExtensions
  parent: Microsoft.Extensions.DependencyInjection
  children:
  - Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider,Type)
  - Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService``1(IServiceProvider)
  - Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetService``1(IServiceProvider)
  - Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetServices(IServiceProvider,Type)
  - Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetServices``1(IServiceProvider)
  langs:
  - csharp
  - vb
  name: ServiceProviderServiceExtensions
  nameWithType: ServiceProviderServiceExtensions
  fullName: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceProviderServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: ServiceProviderServiceExtensions
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceProviderServiceExtensions.cs
    startLine: 12
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nExtension methods for getting services from an <see cref=\"!:IServiceProvider\"></see>.\n"
  example: []
  syntax:
    content: 'public static class ServiceProviderServiceExtensions : object'
    content.vb: >-
      Public Module ServiceProviderServiceExtensions
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetService``1(IServiceProvider)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetService``1(IServiceProvider)
  id: GetService``1(IServiceProvider)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions
  langs:
  - csharp
  - vb
  name: GetService<T>(IServiceProvider)
  nameWithType: ServiceProviderServiceExtensions.GetService<T>(IServiceProvider)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetService<T>(IServiceProvider)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceProviderServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: GetService
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceProviderServiceExtensions.cs
    startLine: 20
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nGet service of type <span class=\"typeparamref\">T</span> from the <see cref=\"!:IServiceProvider\"></see>.\n"
  example: []
  syntax:
    content: public static T GetService<T>(this IServiceProvider provider)
    parameters:
    - id: provider
      type: IServiceProvider
      description: The <see cref="!:IServiceProvider"></see> to retrieve the service object from.
    typeParameters:
    - id: T
      description: The type of service object to get.
    return:
      type: '{T}'
      description: A service object of type <span class="typeparamref">T</span> or null if there is no such service.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetService(Of T)(provider As IServiceProvider) As T
  overload: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetService*
  nameWithType.vb: ServiceProviderServiceExtensions.GetService(Of T)(IServiceProvider)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetService(Of T)(IServiceProvider)
  name.vb: GetService(Of T)(IServiceProvider)
- uid: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider,Type)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider,Type)
  id: GetRequiredService(IServiceProvider,Type)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions
  langs:
  - csharp
  - vb
  name: GetRequiredService(IServiceProvider, Type)
  nameWithType: ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider, Type)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider, Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceProviderServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: GetRequiredService
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceProviderServiceExtensions.cs
    startLine: 37
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nGet service of type <span class=\"paramref\">serviceType</span> from the <see cref=\"!:IServiceProvider\"></see>.\n"
  example: []
  syntax:
    content: public static object GetRequiredService(this IServiceProvider provider, Type serviceType)
    parameters:
    - id: provider
      type: IServiceProvider
      description: The <see cref="!:IServiceProvider"></see> to retrieve the service object from.
    - id: serviceType
      type: Type
      description: An object that specifies the type of service object to get.
    return:
      type: System.Object
      description: A service object of type <span class="paramref">serviceType</span>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRequiredService(provider As IServiceProvider, serviceType As Type) As Object
  overload: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService``1(IServiceProvider)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService``1(IServiceProvider)
  id: GetRequiredService``1(IServiceProvider)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions
  langs:
  - csharp
  - vb
  name: GetRequiredService<T>(IServiceProvider)
  nameWithType: ServiceProviderServiceExtensions.GetRequiredService<T>(IServiceProvider)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<T>(IServiceProvider)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceProviderServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: GetRequiredService
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceProviderServiceExtensions.cs
    startLine: 71
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nGet service of type <span class=\"typeparamref\">T</span> from the <see cref=\"!:IServiceProvider\"></see>.\n"
  example: []
  syntax:
    content: public static T GetRequiredService<T>(this IServiceProvider provider)
    parameters:
    - id: provider
      type: IServiceProvider
      description: The <see cref="!:IServiceProvider"></see> to retrieve the service object from.
    typeParameters:
    - id: T
      description: The type of service object to get.
    return:
      type: '{T}'
      description: A service object of type <span class="typeparamref">T</span>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRequiredService(Of T)(provider As IServiceProvider) As T
  overload: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService*
  nameWithType.vb: ServiceProviderServiceExtensions.GetRequiredService(Of T)(IServiceProvider)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(Of T)(IServiceProvider)
  name.vb: GetRequiredService(Of T)(IServiceProvider)
- uid: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetServices``1(IServiceProvider)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetServices``1(IServiceProvider)
  id: GetServices``1(IServiceProvider)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions
  langs:
  - csharp
  - vb
  name: GetServices<T>(IServiceProvider)
  nameWithType: ServiceProviderServiceExtensions.GetServices<T>(IServiceProvider)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetServices<T>(IServiceProvider)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceProviderServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: GetServices
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceProviderServiceExtensions.cs
    startLine: 87
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nGet an enumeration of services of type <span class=\"typeparamref\">T</span> from the <see cref=\"!:IServiceProvider\"></see>.\n"
  example: []
  syntax:
    content: public static IEnumerable<T> GetServices<T>(this IServiceProvider provider)
    parameters:
    - id: provider
      type: IServiceProvider
      description: The <see cref="!:IServiceProvider"></see> to retrieve the services from.
    typeParameters:
    - id: T
      description: The type of service object to get.
    return:
      type: IEnumerable{{T}}
      description: An enumeration of services of type <span class="typeparamref">T</span>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetServices(Of T)(provider As IServiceProvider) As IEnumerable(Of T)
  overload: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetServices*
  nameWithType.vb: ServiceProviderServiceExtensions.GetServices(Of T)(IServiceProvider)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetServices(Of T)(IServiceProvider)
  name.vb: GetServices(Of T)(IServiceProvider)
- uid: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetServices(IServiceProvider,Type)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetServices(IServiceProvider,Type)
  id: GetServices(IServiceProvider,Type)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions
  langs:
  - csharp
  - vb
  name: GetServices(IServiceProvider, Type)
  nameWithType: ServiceProviderServiceExtensions.GetServices(IServiceProvider, Type)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetServices(IServiceProvider, Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceProviderServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: GetServices
    path: ../aspnet/DependencyInjection/src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceProviderServiceExtensions.cs
    startLine: 103
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nGet an enumeration of services of type <span class=\"paramref\">serviceType</span> from the <see cref=\"!:IServiceProvider\"></see>.\n"
  example: []
  syntax:
    content: public static IEnumerable<object> GetServices(this IServiceProvider provider, Type serviceType)
    parameters:
    - id: provider
      type: IServiceProvider
      description: The <see cref="!:IServiceProvider"></see> to retrieve the services from.
    - id: serviceType
      type: Type
      description: An object that specifies the type of service object to get.
    return:
      type: IEnumerable{System.Object}
      description: An enumeration of services of type <span class="paramref">serviceType</span>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetServices(provider As IServiceProvider, serviceType As Type) As IEnumerable(Of Object)
  overload: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetServices*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Extensions.DependencyInjection
  commentId: N:Microsoft.Extensions.DependencyInjection
  isExternal: false
  name: Microsoft.Extensions.DependencyInjection
  nameWithType: Microsoft.Extensions.DependencyInjection
  fullName: Microsoft.Extensions.DependencyInjection
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetService*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetService
  isExternal: false
  name: GetService
  nameWithType: ServiceProviderServiceExtensions.GetService
  fullName: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetService
- uid: IServiceProvider
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: IServiceProvider
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService
  isExternal: false
  name: GetRequiredService
  nameWithType: ServiceProviderServiceExtensions.GetRequiredService
  fullName: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService
- uid: Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: Type
- uid: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetServices*
  commentId: Overload:Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetServices
  isExternal: false
  name: GetServices
  nameWithType: ServiceProviderServiceExtensions.GetServices
  fullName: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetServices
- uid: IEnumerable{{T}}
  commentId: '!:IEnumerable{``0}'
  definition: IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable{System.Object}
  commentId: '!:IEnumerable{System.Object}'
  definition: IEnumerable`1
  name: IEnumerable<Object>
  nameWithType: IEnumerable<Object>
  fullName: IEnumerable<System.Object>
  nameWithType.vb: IEnumerable(Of Object)
  fullName.vb: IEnumerable(Of System.Object)
  name.vb: IEnumerable(Of Object)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
