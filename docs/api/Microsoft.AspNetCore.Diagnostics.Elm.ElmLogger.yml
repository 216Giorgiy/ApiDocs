### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger
  commentId: T:Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger
  id: ElmLogger
  parent: Microsoft.AspNetCore.Diagnostics.Elm
  children:
  - Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger.#ctor(System.String,Microsoft.AspNetCore.Diagnostics.Elm.ElmOptions,Microsoft.AspNetCore.Diagnostics.Elm.ElmStore)
  - Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger.BeginScope``1(``0)
  - Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger.IsEnabled(System.LogLevel)
  - Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger.Log``1(System.LogLevel,EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})
  langs:
  - csharp
  - vb
  name: ElmLogger
  nameWithType: ElmLogger
  fullName: Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Diagnostics.Elm/ElmLogger.cs
      branch: master
      repo: https://github.com/aspnet/Diagnostics.git
    id: ElmLogger
    path: ../aspnet/Diagnostics/src/Microsoft.AspNetCore.Diagnostics.Elm/ElmLogger.cs
    startLine: 8
  assemblies:
  - Microsoft.AspNetCore.Diagnostics.Elm
  namespace: Microsoft.AspNetCore.Diagnostics.Elm
  syntax:
    content: 'public class ElmLogger : ILogger'
    content.vb: >-
      Public Class ElmLogger
          Inherits ILogger
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger.#ctor(System.String,Microsoft.AspNetCore.Diagnostics.Elm.ElmOptions,Microsoft.AspNetCore.Diagnostics.Elm.ElmStore)
  commentId: M:Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger.#ctor(System.String,Microsoft.AspNetCore.Diagnostics.Elm.ElmOptions,Microsoft.AspNetCore.Diagnostics.Elm.ElmStore)
  id: '#ctor(System.String,Microsoft.AspNetCore.Diagnostics.Elm.ElmOptions,Microsoft.AspNetCore.Diagnostics.Elm.ElmStore)'
  parent: Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger
  langs:
  - csharp
  - vb
  name: ElmLogger(String, ElmOptions, ElmStore)
  nameWithType: ElmLogger.ElmLogger(String, ElmOptions, ElmStore)
  fullName: Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger.ElmLogger(System.String, Microsoft.AspNetCore.Diagnostics.Elm.ElmOptions, Microsoft.AspNetCore.Diagnostics.Elm.ElmStore)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Diagnostics.Elm/ElmLogger.cs
      branch: master
      repo: https://github.com/aspnet/Diagnostics.git
    id: .ctor
    path: ../aspnet/Diagnostics/src/Microsoft.AspNetCore.Diagnostics.Elm/ElmLogger.cs
    startLine: 14
  assemblies:
  - Microsoft.AspNetCore.Diagnostics.Elm
  namespace: Microsoft.AspNetCore.Diagnostics.Elm
  syntax:
    content: public ElmLogger(string name, ElmOptions options, ElmStore store)
    parameters:
    - id: name
      type: System.String
    - id: options
      type: Microsoft.AspNetCore.Diagnostics.Elm.ElmOptions
    - id: store
      type: Microsoft.AspNetCore.Diagnostics.Elm.ElmStore
    content.vb: Public Sub New(name As String, options As ElmOptions, store As ElmStore)
  overload: Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger.Log``1(System.LogLevel,EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})
  commentId: M:Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger.Log``1(System.LogLevel,EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})
  id: Log``1(System.LogLevel,EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})
  parent: Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger
  langs:
  - csharp
  - vb
  name: Log<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, String>)
  nameWithType: ElmLogger.Log<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, String>)
  fullName: Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger.Log<TState>(System.LogLevel, EventId, TState, System.Exception, System.Func<TState, System.Exception, System.String>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Diagnostics.Elm/ElmLogger.cs
      branch: master
      repo: https://github.com/aspnet/Diagnostics.git
    id: Log
    path: ../aspnet/Diagnostics/src/Microsoft.AspNetCore.Diagnostics.Elm/ElmLogger.cs
    startLine: 21
  assemblies:
  - Microsoft.AspNetCore.Diagnostics.Elm
  namespace: Microsoft.AspNetCore.Diagnostics.Elm
  syntax:
    content: public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter)
    parameters:
    - id: logLevel
      type: System.LogLevel
    - id: eventId
      type: EventId
    - id: state
      type: '{TState}'
    - id: exception
      type: System.Exception
    - id: formatter
      type: System.Func{{TState},System.Exception,System.String}
    typeParameters:
    - id: TState
    content.vb: Public Sub Log(Of TState)(logLevel As LogLevel, eventId As EventId, state As TState, exception As Exception, formatter As Func(Of TState, Exception, String))
  overload: Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger.Log*
  nameWithType.vb: ElmLogger.Log(Of TState)(LogLevel, EventId, TState, Exception, Func(Of TState, Exception, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger.Log(Of TState)(System.LogLevel, EventId, TState, System.Exception, System.Func(Of TState, System.Exception, System.String))
  name.vb: Log(Of TState)(LogLevel, EventId, TState, Exception, Func(Of TState, Exception, String))
- uid: Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger.IsEnabled(System.LogLevel)
  commentId: M:Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger.IsEnabled(System.LogLevel)
  id: IsEnabled(System.LogLevel)
  parent: Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger
  langs:
  - csharp
  - vb
  name: IsEnabled(LogLevel)
  nameWithType: ElmLogger.IsEnabled(LogLevel)
  fullName: Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger.IsEnabled(System.LogLevel)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Diagnostics.Elm/ElmLogger.cs
      branch: master
      repo: https://github.com/aspnet/Diagnostics.git
    id: IsEnabled
    path: ../aspnet/Diagnostics/src/Microsoft.AspNetCore.Diagnostics.Elm/ElmLogger.cs
    startLine: 54
  assemblies:
  - Microsoft.AspNetCore.Diagnostics.Elm
  namespace: Microsoft.AspNetCore.Diagnostics.Elm
  syntax:
    content: public bool IsEnabled(LogLevel logLevel)
    parameters:
    - id: logLevel
      type: System.LogLevel
    return:
      type: System.Boolean
    content.vb: Public Function IsEnabled(logLevel As LogLevel) As Boolean
  overload: Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger.IsEnabled*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger.BeginScope``1(``0)
  commentId: M:Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger.BeginScope``1(``0)
  id: BeginScope``1(``0)
  parent: Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger
  langs:
  - csharp
  - vb
  name: BeginScope<TState>(TState)
  nameWithType: ElmLogger.BeginScope<TState>(TState)
  fullName: Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger.BeginScope<TState>(TState)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Diagnostics.Elm/ElmLogger.cs
      branch: master
      repo: https://github.com/aspnet/Diagnostics.git
    id: BeginScope
    path: ../aspnet/Diagnostics/src/Microsoft.AspNetCore.Diagnostics.Elm/ElmLogger.cs
    startLine: 59
  assemblies:
  - Microsoft.AspNetCore.Diagnostics.Elm
  namespace: Microsoft.AspNetCore.Diagnostics.Elm
  syntax:
    content: public IDisposable BeginScope<TState>(TState state)
    parameters:
    - id: state
      type: '{TState}'
    typeParameters:
    - id: TState
    return:
      type: System.IDisposable
    content.vb: Public Function BeginScope(Of TState)(state As TState) As IDisposable
  overload: Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger.BeginScope*
  nameWithType.vb: ElmLogger.BeginScope(Of TState)(TState)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger.BeginScope(Of TState)(TState)
  name.vb: BeginScope(Of TState)(TState)
references:
- uid: Microsoft.AspNetCore.Diagnostics.Elm
  commentId: N:Microsoft.AspNetCore.Diagnostics.Elm
  isExternal: false
  name: Microsoft.AspNetCore.Diagnostics.Elm
  nameWithType: Microsoft.AspNetCore.Diagnostics.Elm
  fullName: Microsoft.AspNetCore.Diagnostics.Elm
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger.#ctor*
  commentId: Overload:Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger.#ctor
  isExternal: false
  name: ElmLogger
  nameWithType: ElmLogger.ElmLogger
  fullName: Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger.ElmLogger
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.AspNetCore.Diagnostics.Elm.ElmOptions
  commentId: T:Microsoft.AspNetCore.Diagnostics.Elm.ElmOptions
  parent: Microsoft.AspNetCore.Diagnostics.Elm
  isExternal: false
  name: ElmOptions
  nameWithType: ElmOptions
  fullName: Microsoft.AspNetCore.Diagnostics.Elm.ElmOptions
- uid: Microsoft.AspNetCore.Diagnostics.Elm.ElmStore
  commentId: T:Microsoft.AspNetCore.Diagnostics.Elm.ElmStore
  parent: Microsoft.AspNetCore.Diagnostics.Elm
  isExternal: false
  name: ElmStore
  nameWithType: ElmStore
  fullName: Microsoft.AspNetCore.Diagnostics.Elm.ElmStore
- uid: Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger.Log*
  commentId: Overload:Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger.Log
  isExternal: false
  name: Log
  nameWithType: ElmLogger.Log
  fullName: Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger.Log
- uid: System.LogLevel
  commentId: T:System.LogLevel
  isExternal: true
  name: LogLevel
  nameWithType: LogLevel
  fullName: System.LogLevel
- uid: EventId
  isExternal: true
  name: EventId
  nameWithType: EventId
  fullName: EventId
- uid: '{TState}'
  commentId: '!:TState'
  definition: TState
  name: TState
  nameWithType: TState
  fullName: TState
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Func{{TState},System.Exception,System.String}
  commentId: T:System.Func{``0,System.Exception,System.String}
  parent: System
  definition: System.Func`3
  name: Func<TState, Exception, String>
  nameWithType: Func<TState, Exception, String>
  fullName: System.Func<TState, System.Exception, System.String>
  nameWithType.vb: Func(Of TState, Exception, String)
  fullName.vb: System.Func(Of TState, System.Exception, System.String)
  name.vb: Func(Of TState, Exception, String)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TState
  isExternal: false
  name: TState
  nameWithType: TState
  fullName: TState
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger.IsEnabled*
  commentId: Overload:Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger.IsEnabled
  isExternal: false
  name: IsEnabled
  nameWithType: ElmLogger.IsEnabled
  fullName: Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger.IsEnabled
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger.BeginScope*
  commentId: Overload:Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger.BeginScope
  isExternal: false
  name: BeginScope
  nameWithType: ElmLogger.BeginScope
  fullName: Microsoft.AspNetCore.Diagnostics.Elm.ElmLogger.BeginScope
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
shouldSkipMarkup: true
