### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime
  commentId: T:Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime
  id: ApplicationLifetime
  parent: Microsoft.AspNetCore.Hosting.Internal
  children:
  - Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.ApplicationStarted
  - Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.ApplicationStopped
  - Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.ApplicationStopping
  - Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.NotifyStarted
  - Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.NotifyStopped
  - Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.StopApplication
  langs:
  - csharp
  - vb
  name: ApplicationLifetime
  nameWithType: ApplicationLifetime
  fullName: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Hosting/Internal/ApplicationLifetime.cs
      branch: master
      repo: https://github.com/aspnet/Hosting.git
    id: ApplicationLifetime
    path: ../aspnet/Hosting/src/Microsoft.AspNetCore.Hosting/Internal/ApplicationLifetime.cs
    startLine: 11
  assemblies:
  - Microsoft.AspNetCore.Hosting
  namespace: Microsoft.AspNetCore.Hosting.Internal
  summary: "\nAllows consumers to perform cleanup during a graceful shutdown.\n"
  example: []
  syntax:
    content: 'public class ApplicationLifetime : IApplicationLifetime'
    content.vb: >-
      Public Class ApplicationLifetime
          Inherits IApplicationLifetime
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.ApplicationStarted
  commentId: P:Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.ApplicationStarted
  id: ApplicationStarted
  parent: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime
  langs:
  - csharp
  - vb
  name: ApplicationStarted
  nameWithType: ApplicationLifetime.ApplicationStarted
  fullName: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.ApplicationStarted
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Hosting/Internal/ApplicationLifetime.cs
      branch: master
      repo: https://github.com/aspnet/Hosting.git
    id: ApplicationStarted
    path: ../aspnet/Hosting/src/Microsoft.AspNetCore.Hosting/Internal/ApplicationLifetime.cs
    startLine: 21
  assemblies:
  - Microsoft.AspNetCore.Hosting
  namespace: Microsoft.AspNetCore.Hosting.Internal
  summary: "\nTriggered when the application host has fully started and is about to wait\nfor a graceful shutdown.\n"
  example: []
  syntax:
    content: public CancellationToken ApplicationStarted { get; }
    parameters: []
    return:
      type: System.Threading.CancellationToken
    content.vb: Public ReadOnly Property ApplicationStarted As CancellationToken
  overload: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.ApplicationStarted*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.ApplicationStopping
  commentId: P:Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.ApplicationStopping
  id: ApplicationStopping
  parent: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime
  langs:
  - csharp
  - vb
  name: ApplicationStopping
  nameWithType: ApplicationLifetime.ApplicationStopping
  fullName: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.ApplicationStopping
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Hosting/Internal/ApplicationLifetime.cs
      branch: master
      repo: https://github.com/aspnet/Hosting.git
    id: ApplicationStopping
    path: ../aspnet/Hosting/src/Microsoft.AspNetCore.Hosting/Internal/ApplicationLifetime.cs
    startLine: 27
  assemblies:
  - Microsoft.AspNetCore.Hosting
  namespace: Microsoft.AspNetCore.Hosting.Internal
  summary: "\nTriggered when the application host is performing a graceful shutdown.\nRequest may still be in flight. Shutdown will block until this event completes.\n"
  example: []
  syntax:
    content: public CancellationToken ApplicationStopping { get; }
    parameters: []
    return:
      type: System.Threading.CancellationToken
    content.vb: Public ReadOnly Property ApplicationStopping As CancellationToken
  overload: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.ApplicationStopping*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.ApplicationStopped
  commentId: P:Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.ApplicationStopped
  id: ApplicationStopped
  parent: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime
  langs:
  - csharp
  - vb
  name: ApplicationStopped
  nameWithType: ApplicationLifetime.ApplicationStopped
  fullName: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.ApplicationStopped
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Hosting/Internal/ApplicationLifetime.cs
      branch: master
      repo: https://github.com/aspnet/Hosting.git
    id: ApplicationStopped
    path: ../aspnet/Hosting/src/Microsoft.AspNetCore.Hosting/Internal/ApplicationLifetime.cs
    startLine: 34
  assemblies:
  - Microsoft.AspNetCore.Hosting
  namespace: Microsoft.AspNetCore.Hosting.Internal
  summary: "\nTriggered when the application host is performing a graceful shutdown.\nAll requests should be complete at this point. Shutdown will block\nuntil this event completes.\n"
  example: []
  syntax:
    content: public CancellationToken ApplicationStopped { get; }
    parameters: []
    return:
      type: System.Threading.CancellationToken
    content.vb: Public ReadOnly Property ApplicationStopped As CancellationToken
  overload: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.ApplicationStopped*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.StopApplication
  commentId: M:Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.StopApplication
  id: StopApplication
  parent: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime
  langs:
  - csharp
  - vb
  name: StopApplication()
  nameWithType: ApplicationLifetime.StopApplication()
  fullName: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.StopApplication()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Hosting/Internal/ApplicationLifetime.cs
      branch: master
      repo: https://github.com/aspnet/Hosting.git
    id: StopApplication
    path: ../aspnet/Hosting/src/Microsoft.AspNetCore.Hosting/Internal/ApplicationLifetime.cs
    startLine: 39
  assemblies:
  - Microsoft.AspNetCore.Hosting
  namespace: Microsoft.AspNetCore.Hosting.Internal
  summary: "\nSignals the ApplicationStopping event and blocks until it completes.\n"
  example: []
  syntax:
    content: public void StopApplication()
    content.vb: Public Sub StopApplication
  overload: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.StopApplication*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.NotifyStarted
  commentId: M:Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.NotifyStarted
  id: NotifyStarted
  parent: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime
  langs:
  - csharp
  - vb
  name: NotifyStarted()
  nameWithType: ApplicationLifetime.NotifyStarted()
  fullName: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.NotifyStarted()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Hosting/Internal/ApplicationLifetime.cs
      branch: master
      repo: https://github.com/aspnet/Hosting.git
    id: NotifyStarted
    path: ../aspnet/Hosting/src/Microsoft.AspNetCore.Hosting/Internal/ApplicationLifetime.cs
    startLine: 54
  assemblies:
  - Microsoft.AspNetCore.Hosting
  namespace: Microsoft.AspNetCore.Hosting.Internal
  summary: "\nSignals the ApplicationStarted event and blocks until it completes.\n"
  example: []
  syntax:
    content: public void NotifyStarted()
    content.vb: Public Sub NotifyStarted
  overload: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.NotifyStarted*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.NotifyStopped
  commentId: M:Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.NotifyStopped
  id: NotifyStopped
  parent: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime
  langs:
  - csharp
  - vb
  name: NotifyStopped()
  nameWithType: ApplicationLifetime.NotifyStopped()
  fullName: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.NotifyStopped()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Hosting/Internal/ApplicationLifetime.cs
      branch: master
      repo: https://github.com/aspnet/Hosting.git
    id: NotifyStopped
    path: ../aspnet/Hosting/src/Microsoft.AspNetCore.Hosting/Internal/ApplicationLifetime.cs
    startLine: 69
  assemblies:
  - Microsoft.AspNetCore.Hosting
  namespace: Microsoft.AspNetCore.Hosting.Internal
  summary: "\nSignals the ApplicationStopped event and blocks until it completes.\n"
  example: []
  syntax:
    content: public void NotifyStopped()
    content.vb: Public Sub NotifyStopped
  overload: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.NotifyStopped*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.AspNetCore.Hosting.Internal
  commentId: N:Microsoft.AspNetCore.Hosting.Internal
  isExternal: false
  name: Microsoft.AspNetCore.Hosting.Internal
  nameWithType: Microsoft.AspNetCore.Hosting.Internal
  fullName: Microsoft.AspNetCore.Hosting.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.ApplicationStarted*
  commentId: Overload:Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.ApplicationStarted
  isExternal: false
  name: ApplicationStarted
  nameWithType: ApplicationLifetime.ApplicationStarted
  fullName: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.ApplicationStarted
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.ApplicationStopping*
  commentId: Overload:Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.ApplicationStopping
  isExternal: false
  name: ApplicationStopping
  nameWithType: ApplicationLifetime.ApplicationStopping
  fullName: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.ApplicationStopping
- uid: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.ApplicationStopped*
  commentId: Overload:Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.ApplicationStopped
  isExternal: false
  name: ApplicationStopped
  nameWithType: ApplicationLifetime.ApplicationStopped
  fullName: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.ApplicationStopped
- uid: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.StopApplication*
  commentId: Overload:Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.StopApplication
  isExternal: false
  name: StopApplication
  nameWithType: ApplicationLifetime.StopApplication
  fullName: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.StopApplication
- uid: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.NotifyStarted*
  commentId: Overload:Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.NotifyStarted
  isExternal: false
  name: NotifyStarted
  nameWithType: ApplicationLifetime.NotifyStarted
  fullName: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.NotifyStarted
- uid: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.NotifyStopped*
  commentId: Overload:Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.NotifyStopped
  isExternal: false
  name: NotifyStopped
  nameWithType: ApplicationLifetime.NotifyStopped
  fullName: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.NotifyStopped
shouldSkipMarkup: true
