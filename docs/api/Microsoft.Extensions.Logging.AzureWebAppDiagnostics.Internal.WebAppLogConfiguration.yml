### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration
  commentId: T:Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration
  id: WebAppLogConfiguration
  parent: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  children:
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration.BlobContainerUrl
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration.BlobLoggingEnabled
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration.BlobLoggingLevel
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration.Disabled
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration.FileLoggingEnabled
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration.FileLoggingFolder
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration.FileLoggingLevel
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration.IsRunningInWebApp
  langs:
  - csharp
  - vb
  name: WebAppLogConfiguration
  nameWithType: WebAppLogConfiguration
  fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/WebAppLogConfiguration.cs
      branch: dev
      repo: https://github.com/aspnet/logging
    id: WebAppLogConfiguration
    path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/WebAppLogConfiguration.cs
    startLine: 8
  assemblies:
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics
  namespace: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  summary: "\nRepresents the configuration of the logger from Azure WebApp.\n"
  example: []
  syntax:
    content: public class WebAppLogConfiguration
    content.vb: Public Class WebAppLogConfiguration
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration.Disabled
  commentId: P:Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration.Disabled
  id: Disabled
  parent: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration
  langs:
  - csharp
  - vb
  name: Disabled
  nameWithType: WebAppLogConfiguration.Disabled
  fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration.Disabled
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/WebAppLogConfiguration.cs
      branch: dev
      repo: https://github.com/aspnet/logging
    id: Disabled
    path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/WebAppLogConfiguration.cs
    startLine: 13
  assemblies:
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics
  namespace: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  summary: "\nThe configuration that has all loggers disabled.\n"
  example: []
  syntax:
    content: public static WebAppLogConfiguration Disabled { get; }
    content.vb: Public Shared ReadOnly Property Disabled As WebAppLogConfiguration
    parameters: []
    return:
      type: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration.IsRunningInWebApp
  commentId: P:Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration.IsRunningInWebApp
  id: IsRunningInWebApp
  parent: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration
  langs:
  - csharp
  - vb
  name: IsRunningInWebApp
  nameWithType: WebAppLogConfiguration.IsRunningInWebApp
  fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration.IsRunningInWebApp
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/WebAppLogConfiguration.cs
      branch: dev
      repo: https://github.com/aspnet/logging
    id: IsRunningInWebApp
    path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/WebAppLogConfiguration.cs
    startLine: 38
  assemblies:
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics
  namespace: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  summary: "\nGets a value indicating whether we're running in WebApp or not.\n"
  example: []
  syntax:
    content: public bool IsRunningInWebApp { get; }
    content.vb: Public ReadOnly Property IsRunningInWebApp As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration.FileLoggingEnabled
  commentId: P:Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration.FileLoggingEnabled
  id: FileLoggingEnabled
  parent: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration
  langs:
  - csharp
  - vb
  name: FileLoggingEnabled
  nameWithType: WebAppLogConfiguration.FileLoggingEnabled
  fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration.FileLoggingEnabled
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/WebAppLogConfiguration.cs
      branch: dev
      repo: https://github.com/aspnet/logging
    id: FileLoggingEnabled
    path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/WebAppLogConfiguration.cs
    startLine: 43
  assemblies:
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics
  namespace: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  summary: "\nGets a value indicating whether the file logger is enabled or not.\n"
  example: []
  syntax:
    content: public bool FileLoggingEnabled { get; }
    content.vb: Public ReadOnly Property FileLoggingEnabled As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration.FileLoggingLevel
  commentId: P:Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration.FileLoggingLevel
  id: FileLoggingLevel
  parent: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration
  langs:
  - csharp
  - vb
  name: FileLoggingLevel
  nameWithType: WebAppLogConfiguration.FileLoggingLevel
  fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration.FileLoggingLevel
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/WebAppLogConfiguration.cs
      branch: dev
      repo: https://github.com/aspnet/logging
    id: FileLoggingLevel
    path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/WebAppLogConfiguration.cs
    startLine: 47
  assemblies:
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics
  namespace: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  summary: "\nGets a value indicating the file logger logging level.\n"
  example: []
  syntax:
    content: public LogLevel FileLoggingLevel { get; }
    content.vb: Public ReadOnly Property FileLoggingLevel As LogLevel
    parameters: []
    return:
      type: Microsoft.Extensions.Logging.LogLevel
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration.FileLoggingFolder
  commentId: P:Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration.FileLoggingFolder
  id: FileLoggingFolder
  parent: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration
  langs:
  - csharp
  - vb
  name: FileLoggingFolder
  nameWithType: WebAppLogConfiguration.FileLoggingFolder
  fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration.FileLoggingFolder
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/WebAppLogConfiguration.cs
      branch: dev
      repo: https://github.com/aspnet/logging
    id: FileLoggingFolder
    path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/WebAppLogConfiguration.cs
    startLine: 51
  assemblies:
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics
  namespace: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  summary: "\nGets a value indicating the folder where the file logger stores the logs.\n"
  example: []
  syntax:
    content: public string FileLoggingFolder { get; }
    content.vb: Public ReadOnly Property FileLoggingFolder As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration.BlobLoggingEnabled
  commentId: P:Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration.BlobLoggingEnabled
  id: BlobLoggingEnabled
  parent: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration
  langs:
  - csharp
  - vb
  name: BlobLoggingEnabled
  nameWithType: WebAppLogConfiguration.BlobLoggingEnabled
  fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration.BlobLoggingEnabled
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/WebAppLogConfiguration.cs
      branch: dev
      repo: https://github.com/aspnet/logging
    id: BlobLoggingEnabled
    path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/WebAppLogConfiguration.cs
    startLine: 56
  assemblies:
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics
  namespace: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  summary: "\nGets a value indicating whether the blob logger is enabled or not.\n"
  example: []
  syntax:
    content: public bool BlobLoggingEnabled { get; }
    content.vb: Public ReadOnly Property BlobLoggingEnabled As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration.BlobLoggingLevel
  commentId: P:Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration.BlobLoggingLevel
  id: BlobLoggingLevel
  parent: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration
  langs:
  - csharp
  - vb
  name: BlobLoggingLevel
  nameWithType: WebAppLogConfiguration.BlobLoggingLevel
  fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration.BlobLoggingLevel
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/WebAppLogConfiguration.cs
      branch: dev
      repo: https://github.com/aspnet/logging
    id: BlobLoggingLevel
    path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/WebAppLogConfiguration.cs
    startLine: 60
  assemblies:
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics
  namespace: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  summary: "\nGets a value indicating the blob logger logging level.\n"
  example: []
  syntax:
    content: public LogLevel BlobLoggingLevel { get; }
    content.vb: Public ReadOnly Property BlobLoggingLevel As LogLevel
    parameters: []
    return:
      type: Microsoft.Extensions.Logging.LogLevel
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration.BlobContainerUrl
  commentId: P:Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration.BlobContainerUrl
  id: BlobContainerUrl
  parent: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration
  langs:
  - csharp
  - vb
  name: BlobContainerUrl
  nameWithType: WebAppLogConfiguration.BlobContainerUrl
  fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration.BlobContainerUrl
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/WebAppLogConfiguration.cs
      branch: dev
      repo: https://github.com/aspnet/logging
    id: BlobContainerUrl
    path: src/Microsoft.Extensions.Logging.AzureWebAppDiagnostics/Internal/WebAppLogConfiguration.cs
    startLine: 64
  assemblies:
  - Microsoft.Extensions.Logging.AzureWebAppDiagnostics
  namespace: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  summary: "\nGets the SAS endpoint where blob logs are stored.\n"
  example: []
  syntax:
    content: public string BlobContainerUrl { get; }
    content.vb: Public ReadOnly Property BlobContainerUrl As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  commentId: N:Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  isExternal: false
  name: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  nameWithType: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration
  commentId: T:Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration
  parent: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal
  isExternal: false
  name: WebAppLogConfiguration
  nameWithType: WebAppLogConfiguration
  fullName: Microsoft.Extensions.Logging.AzureWebAppDiagnostics.Internal.WebAppLogConfiguration
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Extensions.Logging.LogLevel
  commentId: T:Microsoft.Extensions.Logging.LogLevel
  parent: Microsoft.Extensions.Logging
  isExternal: false
  name: LogLevel
  nameWithType: LogLevel
  fullName: Microsoft.Extensions.Logging.LogLevel
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: false
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
