### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Caching.Memory.CacheExtensions
  commentId: T:Microsoft.Extensions.Caching.Memory.CacheExtensions
  id: CacheExtensions
  parent: Microsoft.Extensions.Caching.Memory
  children:
  - Microsoft.Extensions.Caching.Memory.CacheExtensions.Get(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object)
  - Microsoft.Extensions.Caching.Memory.CacheExtensions.Get``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object)
  - Microsoft.Extensions.Caching.Memory.CacheExtensions.GetOrCreate``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,Func{Microsoft.Extensions.Caching.Memory.ICacheEntry,``0})
  - Microsoft.Extensions.Caching.Memory.CacheExtensions.GetOrCreateAsync``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,Func{Microsoft.Extensions.Caching.Memory.ICacheEntry,Task{``0}})
  - Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0)
  - Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,DateTimeOffset)
  - Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,IChangeToken)
  - Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions)
  - Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,TimeSpan)
  - Microsoft.Extensions.Caching.Memory.CacheExtensions.TryGetValue``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0@)
  langs:
  - csharp
  - vb
  name: CacheExtensions
  nameWithType: CacheExtensions
  fullName: Microsoft.Extensions.Caching.Memory.CacheExtensions
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: CacheExtensions
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
    startLine: 9
  assemblies:
  - Microsoft.Extensions.Caching.Abstractions
  namespace: Microsoft.Extensions.Caching.Memory
  syntax:
    content: 'public static class CacheExtensions : object'
    content.vb: >-
      Public Module CacheExtensions
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Extensions.Caching.Memory.CacheExtensions.Get(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object)
  commentId: M:Microsoft.Extensions.Caching.Memory.CacheExtensions.Get(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object)
  id: Get(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Caching.Memory.CacheExtensions
  langs:
  - csharp
  - vb
  name: Get(IMemoryCache, Object)
  nameWithType: CacheExtensions.Get(IMemoryCache, Object)
  fullName: Microsoft.Extensions.Caching.Memory.CacheExtensions.Get(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: Get
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
    startLine: 12
  assemblies:
  - Microsoft.Extensions.Caching.Abstractions
  namespace: Microsoft.Extensions.Caching.Memory
  syntax:
    content: public static object Get(this IMemoryCache cache, object key)
    parameters:
    - id: cache
      type: Microsoft.Extensions.Caching.Memory.IMemoryCache
    - id: key
      type: System.Object
    return:
      type: System.Object
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Get(cache As IMemoryCache, key As Object) As Object
  overload: Microsoft.Extensions.Caching.Memory.CacheExtensions.Get*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Caching.Memory.CacheExtensions.Get``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object)
  commentId: M:Microsoft.Extensions.Caching.Memory.CacheExtensions.Get``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object)
  id: Get``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Caching.Memory.CacheExtensions
  langs:
  - csharp
  - vb
  name: Get<TItem>(IMemoryCache, Object)
  nameWithType: CacheExtensions.Get<TItem>(IMemoryCache, Object)
  fullName: Microsoft.Extensions.Caching.Memory.CacheExtensions.Get<TItem>(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: Get
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
    startLine: 19
  assemblies:
  - Microsoft.Extensions.Caching.Abstractions
  namespace: Microsoft.Extensions.Caching.Memory
  syntax:
    content: public static TItem Get<TItem>(this IMemoryCache cache, object key)
    parameters:
    - id: cache
      type: Microsoft.Extensions.Caching.Memory.IMemoryCache
    - id: key
      type: System.Object
    typeParameters:
    - id: TItem
    return:
      type: '{TItem}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Get(Of TItem)(cache As IMemoryCache, key As Object) As TItem
  overload: Microsoft.Extensions.Caching.Memory.CacheExtensions.Get*
  nameWithType.vb: CacheExtensions.Get(Of TItem)(IMemoryCache, Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Caching.Memory.CacheExtensions.Get(Of TItem)(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Object)
  name.vb: Get(Of TItem)(IMemoryCache, Object)
- uid: Microsoft.Extensions.Caching.Memory.CacheExtensions.TryGetValue``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0@)
  commentId: M:Microsoft.Extensions.Caching.Memory.CacheExtensions.TryGetValue``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0@)
  id: TryGetValue``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0@)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Caching.Memory.CacheExtensions
  langs:
  - csharp
  - vb
  name: TryGetValue<TItem>(IMemoryCache, Object, out TItem)
  nameWithType: CacheExtensions.TryGetValue<TItem>(IMemoryCache, Object, out TItem)
  fullName: Microsoft.Extensions.Caching.Memory.CacheExtensions.TryGetValue<TItem>(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Object, out TItem)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: TryGetValue
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
    startLine: 26
  assemblies:
  - Microsoft.Extensions.Caching.Abstractions
  namespace: Microsoft.Extensions.Caching.Memory
  syntax:
    content: public static bool TryGetValue<TItem>(this IMemoryCache cache, object key, out TItem value)
    parameters:
    - id: cache
      type: Microsoft.Extensions.Caching.Memory.IMemoryCache
    - id: key
      type: System.Object
    - id: value
      type: '{TItem}'
    typeParameters:
    - id: TItem
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TryGetValue(Of TItem)(cache As IMemoryCache, key As Object, ByRef value As TItem) As Boolean
  overload: Microsoft.Extensions.Caching.Memory.CacheExtensions.TryGetValue*
  nameWithType.vb: CacheExtensions.TryGetValue(Of TItem)(IMemoryCache, Object, ByRef TItem)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Caching.Memory.CacheExtensions.TryGetValue(Of TItem)(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Object, ByRef TItem)
  name.vb: TryGetValue(Of TItem)(IMemoryCache, Object, ByRef TItem)
- uid: Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0)
  commentId: M:Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0)
  id: Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Caching.Memory.CacheExtensions
  langs:
  - csharp
  - vb
  name: Set<TItem>(IMemoryCache, Object, TItem)
  nameWithType: CacheExtensions.Set<TItem>(IMemoryCache, Object, TItem)
  fullName: Microsoft.Extensions.Caching.Memory.CacheExtensions.Set<TItem>(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Object, TItem)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: Set
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
    startLine: 39
  assemblies:
  - Microsoft.Extensions.Caching.Abstractions
  namespace: Microsoft.Extensions.Caching.Memory
  syntax:
    content: public static TItem Set<TItem>(this IMemoryCache cache, object key, TItem value)
    parameters:
    - id: cache
      type: Microsoft.Extensions.Caching.Memory.IMemoryCache
    - id: key
      type: System.Object
    - id: value
      type: '{TItem}'
    typeParameters:
    - id: TItem
    return:
      type: '{TItem}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Set(Of TItem)(cache As IMemoryCache, key As Object, value As TItem) As TItem
  overload: Microsoft.Extensions.Caching.Memory.CacheExtensions.Set*
  nameWithType.vb: CacheExtensions.Set(Of TItem)(IMemoryCache, Object, TItem)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Caching.Memory.CacheExtensions.Set(Of TItem)(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Object, TItem)
  name.vb: Set(Of TItem)(IMemoryCache, Object, TItem)
- uid: Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,DateTimeOffset)
  commentId: M:Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,DateTimeOffset)
  id: Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,DateTimeOffset)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Caching.Memory.CacheExtensions
  langs:
  - csharp
  - vb
  name: Set<TItem>(IMemoryCache, Object, TItem, DateTimeOffset)
  nameWithType: CacheExtensions.Set<TItem>(IMemoryCache, Object, TItem, DateTimeOffset)
  fullName: Microsoft.Extensions.Caching.Memory.CacheExtensions.Set<TItem>(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Object, TItem, DateTimeOffset)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: Set
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
    startLine: 49
  assemblies:
  - Microsoft.Extensions.Caching.Abstractions
  namespace: Microsoft.Extensions.Caching.Memory
  syntax:
    content: public static TItem Set<TItem>(this IMemoryCache cache, object key, TItem value, DateTimeOffset absoluteExpiration)
    parameters:
    - id: cache
      type: Microsoft.Extensions.Caching.Memory.IMemoryCache
    - id: key
      type: System.Object
    - id: value
      type: '{TItem}'
    - id: absoluteExpiration
      type: DateTimeOffset
    typeParameters:
    - id: TItem
    return:
      type: '{TItem}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Set(Of TItem)(cache As IMemoryCache, key As Object, value As TItem, absoluteExpiration As DateTimeOffset) As TItem
  overload: Microsoft.Extensions.Caching.Memory.CacheExtensions.Set*
  nameWithType.vb: CacheExtensions.Set(Of TItem)(IMemoryCache, Object, TItem, DateTimeOffset)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Caching.Memory.CacheExtensions.Set(Of TItem)(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Object, TItem, DateTimeOffset)
  name.vb: Set(Of TItem)(IMemoryCache, Object, TItem, DateTimeOffset)
- uid: Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,TimeSpan)
  commentId: M:Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,TimeSpan)
  id: Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,TimeSpan)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Caching.Memory.CacheExtensions
  langs:
  - csharp
  - vb
  name: Set<TItem>(IMemoryCache, Object, TItem, TimeSpan)
  nameWithType: CacheExtensions.Set<TItem>(IMemoryCache, Object, TItem, TimeSpan)
  fullName: Microsoft.Extensions.Caching.Memory.CacheExtensions.Set<TItem>(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Object, TItem, TimeSpan)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: Set
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
    startLine: 60
  assemblies:
  - Microsoft.Extensions.Caching.Abstractions
  namespace: Microsoft.Extensions.Caching.Memory
  syntax:
    content: public static TItem Set<TItem>(this IMemoryCache cache, object key, TItem value, TimeSpan absoluteExpirationRelativeToNow)
    parameters:
    - id: cache
      type: Microsoft.Extensions.Caching.Memory.IMemoryCache
    - id: key
      type: System.Object
    - id: value
      type: '{TItem}'
    - id: absoluteExpirationRelativeToNow
      type: TimeSpan
    typeParameters:
    - id: TItem
    return:
      type: '{TItem}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Set(Of TItem)(cache As IMemoryCache, key As Object, value As TItem, absoluteExpirationRelativeToNow As TimeSpan) As TItem
  overload: Microsoft.Extensions.Caching.Memory.CacheExtensions.Set*
  nameWithType.vb: CacheExtensions.Set(Of TItem)(IMemoryCache, Object, TItem, TimeSpan)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Caching.Memory.CacheExtensions.Set(Of TItem)(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Object, TItem, TimeSpan)
  name.vb: Set(Of TItem)(IMemoryCache, Object, TItem, TimeSpan)
- uid: Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,IChangeToken)
  commentId: M:Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,IChangeToken)
  id: Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,IChangeToken)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Caching.Memory.CacheExtensions
  langs:
  - csharp
  - vb
  name: Set<TItem>(IMemoryCache, Object, TItem, IChangeToken)
  nameWithType: CacheExtensions.Set<TItem>(IMemoryCache, Object, TItem, IChangeToken)
  fullName: Microsoft.Extensions.Caching.Memory.CacheExtensions.Set<TItem>(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Object, TItem, IChangeToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: Set
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
    startLine: 71
  assemblies:
  - Microsoft.Extensions.Caching.Abstractions
  namespace: Microsoft.Extensions.Caching.Memory
  syntax:
    content: public static TItem Set<TItem>(this IMemoryCache cache, object key, TItem value, IChangeToken expirationToken)
    parameters:
    - id: cache
      type: Microsoft.Extensions.Caching.Memory.IMemoryCache
    - id: key
      type: System.Object
    - id: value
      type: '{TItem}'
    - id: expirationToken
      type: IChangeToken
    typeParameters:
    - id: TItem
    return:
      type: '{TItem}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Set(Of TItem)(cache As IMemoryCache, key As Object, value As TItem, expirationToken As IChangeToken) As TItem
  overload: Microsoft.Extensions.Caching.Memory.CacheExtensions.Set*
  nameWithType.vb: CacheExtensions.Set(Of TItem)(IMemoryCache, Object, TItem, IChangeToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Caching.Memory.CacheExtensions.Set(Of TItem)(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Object, TItem, IChangeToken)
  name.vb: Set(Of TItem)(IMemoryCache, Object, TItem, IChangeToken)
- uid: Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions)
  commentId: M:Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions)
  id: Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Caching.Memory.CacheExtensions
  langs:
  - csharp
  - vb
  name: Set<TItem>(IMemoryCache, Object, TItem, MemoryCacheEntryOptions)
  nameWithType: CacheExtensions.Set<TItem>(IMemoryCache, Object, TItem, MemoryCacheEntryOptions)
  fullName: Microsoft.Extensions.Caching.Memory.CacheExtensions.Set<TItem>(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Object, TItem, Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: Set
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
    startLine: 82
  assemblies:
  - Microsoft.Extensions.Caching.Abstractions
  namespace: Microsoft.Extensions.Caching.Memory
  syntax:
    content: public static TItem Set<TItem>(this IMemoryCache cache, object key, TItem value, MemoryCacheEntryOptions options)
    parameters:
    - id: cache
      type: Microsoft.Extensions.Caching.Memory.IMemoryCache
    - id: key
      type: System.Object
    - id: value
      type: '{TItem}'
    - id: options
      type: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
    typeParameters:
    - id: TItem
    return:
      type: '{TItem}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Set(Of TItem)(cache As IMemoryCache, key As Object, value As TItem, options As MemoryCacheEntryOptions) As TItem
  overload: Microsoft.Extensions.Caching.Memory.CacheExtensions.Set*
  nameWithType.vb: CacheExtensions.Set(Of TItem)(IMemoryCache, Object, TItem, MemoryCacheEntryOptions)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Caching.Memory.CacheExtensions.Set(Of TItem)(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Object, TItem, Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions)
  name.vb: Set(Of TItem)(IMemoryCache, Object, TItem, MemoryCacheEntryOptions)
- uid: Microsoft.Extensions.Caching.Memory.CacheExtensions.GetOrCreate``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,Func{Microsoft.Extensions.Caching.Memory.ICacheEntry,``0})
  commentId: M:Microsoft.Extensions.Caching.Memory.CacheExtensions.GetOrCreate``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,Func{Microsoft.Extensions.Caching.Memory.ICacheEntry,``0})
  id: GetOrCreate``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,Func{Microsoft.Extensions.Caching.Memory.ICacheEntry,``0})
  isExtensionMethod: true
  parent: Microsoft.Extensions.Caching.Memory.CacheExtensions
  langs:
  - csharp
  - vb
  name: GetOrCreate<TItem>(IMemoryCache, Object, Func<ICacheEntry, TItem>)
  nameWithType: CacheExtensions.GetOrCreate<TItem>(IMemoryCache, Object, Func<ICacheEntry, TItem>)
  fullName: Microsoft.Extensions.Caching.Memory.CacheExtensions.GetOrCreate<TItem>(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Object, Func<Microsoft.Extensions.Caching.Memory.ICacheEntry, TItem>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: GetOrCreate
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
    startLine: 97
  assemblies:
  - Microsoft.Extensions.Caching.Abstractions
  namespace: Microsoft.Extensions.Caching.Memory
  syntax:
    content: public static TItem GetOrCreate<TItem>(this IMemoryCache cache, object key, Func<ICacheEntry, TItem> factory)
    parameters:
    - id: cache
      type: Microsoft.Extensions.Caching.Memory.IMemoryCache
    - id: key
      type: System.Object
    - id: factory
      type: Func{Microsoft.Extensions.Caching.Memory.ICacheEntry,{TItem}}
    typeParameters:
    - id: TItem
    return:
      type: '{TItem}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetOrCreate(Of TItem)(cache As IMemoryCache, key As Object, factory As Func(Of ICacheEntry, TItem)) As TItem
  overload: Microsoft.Extensions.Caching.Memory.CacheExtensions.GetOrCreate*
  nameWithType.vb: CacheExtensions.GetOrCreate(Of TItem)(IMemoryCache, Object, Func(Of ICacheEntry, TItem))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Caching.Memory.CacheExtensions.GetOrCreate(Of TItem)(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Object, Func(Of Microsoft.Extensions.Caching.Memory.ICacheEntry, TItem))
  name.vb: GetOrCreate(Of TItem)(IMemoryCache, Object, Func(Of ICacheEntry, TItem))
- uid: Microsoft.Extensions.Caching.Memory.CacheExtensions.GetOrCreateAsync``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,Func{Microsoft.Extensions.Caching.Memory.ICacheEntry,Task{``0}})
  commentId: M:Microsoft.Extensions.Caching.Memory.CacheExtensions.GetOrCreateAsync``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,Func{Microsoft.Extensions.Caching.Memory.ICacheEntry,Task{``0}})
  id: GetOrCreateAsync``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,Func{Microsoft.Extensions.Caching.Memory.ICacheEntry,Task{``0}})
  isExtensionMethod: true
  parent: Microsoft.Extensions.Caching.Memory.CacheExtensions
  langs:
  - csharp
  - vb
  name: GetOrCreateAsync<TItem>(IMemoryCache, Object, Func<ICacheEntry, Task<TItem>>)
  nameWithType: CacheExtensions.GetOrCreateAsync<TItem>(IMemoryCache, Object, Func<ICacheEntry, Task<TItem>>)
  fullName: Microsoft.Extensions.Caching.Memory.CacheExtensions.GetOrCreateAsync<TItem>(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Object, Func<Microsoft.Extensions.Caching.Memory.ICacheEntry, Task<TItem>>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: GetOrCreateAsync
    path: ../aspnet/Caching/src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
    startLine: 112
  assemblies:
  - Microsoft.Extensions.Caching.Abstractions
  namespace: Microsoft.Extensions.Caching.Memory
  syntax:
    content: public static Task<TItem> GetOrCreateAsync<TItem>(this IMemoryCache cache, object key, Func<ICacheEntry, Task<TItem>> factory)
    parameters:
    - id: cache
      type: Microsoft.Extensions.Caching.Memory.IMemoryCache
    - id: key
      type: System.Object
    - id: factory
      type: Func{Microsoft.Extensions.Caching.Memory.ICacheEntry,Task{{TItem}}}
    typeParameters:
    - id: TItem
    return:
      type: Task{{TItem}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetOrCreateAsync(Of TItem)(cache As IMemoryCache, key As Object, factory As Func(Of ICacheEntry, Task(Of TItem))) As Task(Of TItem)
  overload: Microsoft.Extensions.Caching.Memory.CacheExtensions.GetOrCreateAsync*
  nameWithType.vb: CacheExtensions.GetOrCreateAsync(Of TItem)(IMemoryCache, Object, Func(Of ICacheEntry, Task(Of TItem)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Caching.Memory.CacheExtensions.GetOrCreateAsync(Of TItem)(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Object, Func(Of Microsoft.Extensions.Caching.Memory.ICacheEntry, Task(Of TItem)))
  name.vb: GetOrCreateAsync(Of TItem)(IMemoryCache, Object, Func(Of ICacheEntry, Task(Of TItem)))
references:
- uid: Microsoft.Extensions.Caching.Memory
  commentId: N:Microsoft.Extensions.Caching.Memory
  isExternal: false
  name: Microsoft.Extensions.Caching.Memory
  nameWithType: Microsoft.Extensions.Caching.Memory
  fullName: Microsoft.Extensions.Caching.Memory
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Caching.Memory.CacheExtensions.Get*
  commentId: Overload:Microsoft.Extensions.Caching.Memory.CacheExtensions.Get
  isExternal: false
  name: Get
  nameWithType: CacheExtensions.Get
  fullName: Microsoft.Extensions.Caching.Memory.CacheExtensions.Get
- uid: Microsoft.Extensions.Caching.Memory.IMemoryCache
  commentId: T:Microsoft.Extensions.Caching.Memory.IMemoryCache
  parent: Microsoft.Extensions.Caching.Memory
  isExternal: false
  name: IMemoryCache
  nameWithType: IMemoryCache
  fullName: Microsoft.Extensions.Caching.Memory.IMemoryCache
- uid: '{TItem}'
  commentId: '!:TItem'
  definition: TItem
  name: TItem
  nameWithType: TItem
  fullName: TItem
- uid: TItem
  isExternal: false
  name: TItem
  nameWithType: TItem
  fullName: TItem
- uid: Microsoft.Extensions.Caching.Memory.CacheExtensions.TryGetValue*
  commentId: Overload:Microsoft.Extensions.Caching.Memory.CacheExtensions.TryGetValue
  isExternal: false
  name: TryGetValue
  nameWithType: CacheExtensions.TryGetValue
  fullName: Microsoft.Extensions.Caching.Memory.CacheExtensions.TryGetValue
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Extensions.Caching.Memory.CacheExtensions.Set*
  commentId: Overload:Microsoft.Extensions.Caching.Memory.CacheExtensions.Set
  isExternal: false
  name: Set
  nameWithType: CacheExtensions.Set
  fullName: Microsoft.Extensions.Caching.Memory.CacheExtensions.Set
- uid: DateTimeOffset
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: DateTimeOffset
- uid: TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: TimeSpan
- uid: IChangeToken
  isExternal: true
  name: IChangeToken
  nameWithType: IChangeToken
  fullName: IChangeToken
- uid: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
  commentId: T:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
  parent: Microsoft.Extensions.Caching.Memory
  isExternal: false
  name: MemoryCacheEntryOptions
  nameWithType: MemoryCacheEntryOptions
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
- uid: Microsoft.Extensions.Caching.Memory.CacheExtensions.GetOrCreate*
  commentId: Overload:Microsoft.Extensions.Caching.Memory.CacheExtensions.GetOrCreate
  isExternal: false
  name: GetOrCreate
  nameWithType: CacheExtensions.GetOrCreate
  fullName: Microsoft.Extensions.Caching.Memory.CacheExtensions.GetOrCreate
- uid: Func{Microsoft.Extensions.Caching.Memory.ICacheEntry,{TItem}}
  commentId: '!:Func{Microsoft.Extensions.Caching.Memory.ICacheEntry,``0}'
  definition: Func`2
  name: Func<ICacheEntry, TItem>
  nameWithType: Func<ICacheEntry, TItem>
  fullName: Func<Microsoft.Extensions.Caching.Memory.ICacheEntry, TItem>
  nameWithType.vb: Func(Of ICacheEntry, TItem)
  fullName.vb: Func(Of Microsoft.Extensions.Caching.Memory.ICacheEntry, TItem)
  name.vb: Func(Of ICacheEntry, TItem)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.Caching.Memory.ICacheEntry
    name: ICacheEntry
    nameWithType: ICacheEntry
    fullName: Microsoft.Extensions.Caching.Memory.ICacheEntry
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.Caching.Memory.ICacheEntry
    name: ICacheEntry
    nameWithType: ICacheEntry
    fullName: Microsoft.Extensions.Caching.Memory.ICacheEntry
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Caching.Memory.CacheExtensions.GetOrCreateAsync*
  commentId: Overload:Microsoft.Extensions.Caching.Memory.CacheExtensions.GetOrCreateAsync
  isExternal: false
  name: GetOrCreateAsync
  nameWithType: CacheExtensions.GetOrCreateAsync
  fullName: Microsoft.Extensions.Caching.Memory.CacheExtensions.GetOrCreateAsync
- uid: Func{Microsoft.Extensions.Caching.Memory.ICacheEntry,Task{{TItem}}}
  commentId: '!:Func{Microsoft.Extensions.Caching.Memory.ICacheEntry,Task{``0}}'
  definition: Func`2
  name: Func<ICacheEntry, Task<TItem>>
  nameWithType: Func<ICacheEntry, Task<TItem>>
  fullName: Func<Microsoft.Extensions.Caching.Memory.ICacheEntry, Task<TItem>>
  nameWithType.vb: Func(Of ICacheEntry, Task(Of TItem))
  fullName.vb: Func(Of Microsoft.Extensions.Caching.Memory.ICacheEntry, Task(Of TItem))
  name.vb: Func(Of ICacheEntry, Task(Of TItem))
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.Caching.Memory.ICacheEntry
    name: ICacheEntry
    nameWithType: ICacheEntry
    fullName: Microsoft.Extensions.Caching.Memory.ICacheEntry
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.Caching.Memory.ICacheEntry
    name: ICacheEntry
    nameWithType: ICacheEntry
    fullName: Microsoft.Extensions.Caching.Memory.ICacheEntry
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Task{{TItem}}
  commentId: '!:Task{``0}'
  definition: Task`1
  name: Task<TItem>
  nameWithType: Task<TItem>
  fullName: Task<TItem>
  nameWithType.vb: Task(Of TItem)
  fullName.vb: Task(Of TItem)
  name.vb: Task(Of TItem)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
