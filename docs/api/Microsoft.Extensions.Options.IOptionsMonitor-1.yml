### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Options.IOptionsMonitor`1
  commentId: T:Microsoft.Extensions.Options.IOptionsMonitor`1
  id: IOptionsMonitor`1
  parent: Microsoft.Extensions.Options
  children:
  - Microsoft.Extensions.Options.IOptionsMonitor`1.CurrentValue
  - Microsoft.Extensions.Options.IOptionsMonitor`1.OnChange(Action{`0})
  langs:
  - csharp
  - vb
  name: IOptionsMonitor<TOptions>
  nameWithType: IOptionsMonitor<TOptions>
  fullName: Microsoft.Extensions.Options.IOptionsMonitor<TOptions>
  type: Interface
  source:
    remote:
      path: src/Microsoft.Extensions.Options/IOptionsMonitor.cs
      branch: master
      repo: https://github.com/aspnet/Options.git
    id: IOptionsMonitor
    path: ../aspnet/Options/src/Microsoft.Extensions.Options/IOptionsMonitor.cs
    startLine: 11
  assemblies:
  - Microsoft.Extensions.Options
  namespace: Microsoft.Extensions.Options
  summary: "\nUsed for notifications when TOptions instances change.\n"
  example: []
  syntax:
    content: public interface IOptionsMonitor<out TOptions>
    typeParameters:
    - id: TOptions
      description: The options type.
    content.vb: Public Interface IOptionsMonitor(Of Out TOptions)
  nameWithType.vb: IOptionsMonitor(Of TOptions)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Microsoft.Extensions.Options.IOptionsMonitor(Of TOptions)
  name.vb: IOptionsMonitor(Of TOptions)
- uid: Microsoft.Extensions.Options.IOptionsMonitor`1.CurrentValue
  commentId: P:Microsoft.Extensions.Options.IOptionsMonitor`1.CurrentValue
  id: CurrentValue
  parent: Microsoft.Extensions.Options.IOptionsMonitor`1
  langs:
  - csharp
  - vb
  name: CurrentValue
  nameWithType: IOptionsMonitor<TOptions>.CurrentValue
  fullName: Microsoft.Extensions.Options.IOptionsMonitor<TOptions>.CurrentValue
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Options/IOptionsMonitor.cs
      branch: master
      repo: https://github.com/aspnet/Options.git
    id: CurrentValue
    path: ../aspnet/Options/src/Microsoft.Extensions.Options/IOptionsMonitor.cs
    startLine: 16
  assemblies:
  - Microsoft.Extensions.Options
  namespace: Microsoft.Extensions.Options
  summary: "\nReturns the current TOptions instance.\n"
  example: []
  syntax:
    content: TOptions CurrentValue { get; }
    parameters: []
    return:
      type: '{TOptions}'
    content.vb: ReadOnly Property CurrentValue As TOptions
  overload: Microsoft.Extensions.Options.IOptionsMonitor`1.CurrentValue*
  nameWithType.vb: IOptionsMonitor(Of TOptions).CurrentValue
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: Microsoft.Extensions.Options.IOptionsMonitor(Of TOptions).CurrentValue
- uid: Microsoft.Extensions.Options.IOptionsMonitor`1.OnChange(Action{`0})
  commentId: M:Microsoft.Extensions.Options.IOptionsMonitor`1.OnChange(Action{`0})
  id: OnChange(Action{`0})
  parent: Microsoft.Extensions.Options.IOptionsMonitor`1
  langs:
  - csharp
  - vb
  name: OnChange(Action<TOptions>)
  nameWithType: IOptionsMonitor<TOptions>.OnChange(Action<TOptions>)
  fullName: Microsoft.Extensions.Options.IOptionsMonitor<TOptions>.OnChange(Action<TOptions>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Options/IOptionsMonitor.cs
      branch: master
      repo: https://github.com/aspnet/Options.git
    id: OnChange
    path: ../aspnet/Options/src/Microsoft.Extensions.Options/IOptionsMonitor.cs
    startLine: 23
  assemblies:
  - Microsoft.Extensions.Options
  namespace: Microsoft.Extensions.Options
  summary: "\nRegisters the listener to be called whenever TOptions changes.\n"
  example: []
  syntax:
    content: IDisposable OnChange(Action<TOptions> listener)
    parameters:
    - id: listener
      type: Action{{TOptions}}
      description: The action to be invoked when TOptions has changed.
    return:
      type: IDisposable
      description: An IDisposable which should be disposed to stop listening for changes.
    content.vb: Function OnChange(listener As Action(Of TOptions)) As IDisposable
  overload: Microsoft.Extensions.Options.IOptionsMonitor`1.OnChange*
  nameWithType.vb: IOptionsMonitor(Of TOptions).OnChange(Action(Of TOptions))
  fullName.vb: Microsoft.Extensions.Options.IOptionsMonitor(Of TOptions).OnChange(Action(Of TOptions))
  name.vb: OnChange(Action(Of TOptions))
references:
- uid: Microsoft.Extensions.Options
  commentId: N:Microsoft.Extensions.Options
  isExternal: false
  name: Microsoft.Extensions.Options
  nameWithType: Microsoft.Extensions.Options
  fullName: Microsoft.Extensions.Options
- uid: Microsoft.Extensions.Options.IOptionsMonitor`1.CurrentValue*
  commentId: Overload:Microsoft.Extensions.Options.IOptionsMonitor`1.CurrentValue
  isExternal: false
  name: CurrentValue
  nameWithType: IOptionsMonitor<TOptions>.CurrentValue
  fullName: Microsoft.Extensions.Options.IOptionsMonitor<TOptions>.CurrentValue
  nameWithType.vb: IOptionsMonitor(Of TOptions).CurrentValue
  fullName.vb: Microsoft.Extensions.Options.IOptionsMonitor(Of TOptions).CurrentValue
- uid: '{TOptions}'
  commentId: '!:TOptions'
  definition: TOptions
  name: TOptions
  nameWithType: TOptions
  fullName: TOptions
- uid: TOptions
  isExternal: false
  name: TOptions
  nameWithType: TOptions
  fullName: TOptions
- uid: Microsoft.Extensions.Options.IOptionsMonitor`1.OnChange*
  commentId: Overload:Microsoft.Extensions.Options.IOptionsMonitor`1.OnChange
  isExternal: false
  name: OnChange
  nameWithType: IOptionsMonitor<TOptions>.OnChange
  fullName: Microsoft.Extensions.Options.IOptionsMonitor<TOptions>.OnChange
  nameWithType.vb: IOptionsMonitor(Of TOptions).OnChange
  fullName.vb: Microsoft.Extensions.Options.IOptionsMonitor(Of TOptions).OnChange
- uid: Action{{TOptions}}
  commentId: '!:Action{`0}'
  definition: Action`1
  name: Action<TOptions>
  nameWithType: Action<TOptions>
  fullName: Action<TOptions>
  nameWithType.vb: Action(Of TOptions)
  fullName.vb: Action(Of TOptions)
  name.vb: Action(Of TOptions)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: IDisposable
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: IDisposable
- uid: Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
