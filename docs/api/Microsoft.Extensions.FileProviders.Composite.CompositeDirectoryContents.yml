### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents
  commentId: T:Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents
  id: CompositeDirectoryContents
  parent: Microsoft.Extensions.FileProviders.Composite
  children:
  - Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents.#ctor(IList{IFileProvider},System.String)
  - Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents.Exists
  - Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents.GetEnumerator
  langs:
  - csharp
  - vb
  name: CompositeDirectoryContents
  nameWithType: CompositeDirectoryContents
  fullName: Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Composite/CompositeDirectoryContents.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: CompositeDirectoryContents
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Composite/CompositeDirectoryContents.cs
    startLine: 13
  assemblies:
  - Microsoft.Extensions.FileProviders.Composite
  namespace: Microsoft.Extensions.FileProviders.Composite
  summary: "\nRepresents the result of a call composition of <see cref=\"!:IFileProvider.GetDirectoryContents(string)\"></see>\nfor a list of <see cref=\"!:IFileProvider\"></see> and a path.\n"
  example: []
  syntax:
    content: 'public class CompositeDirectoryContents : IDirectoryContents'
    content.vb: >-
      Public Class CompositeDirectoryContents
          Inherits IDirectoryContents
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents.#ctor(IList{IFileProvider},System.String)
  commentId: M:Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents.#ctor(IList{IFileProvider},System.String)
  id: '#ctor(IList{IFileProvider},System.String)'
  parent: Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents
  langs:
  - csharp
  - vb
  name: CompositeDirectoryContents(IList<IFileProvider>, String)
  nameWithType: CompositeDirectoryContents.CompositeDirectoryContents(IList<IFileProvider>, String)
  fullName: Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents.CompositeDirectoryContents(IList<IFileProvider>, System.String)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Composite/CompositeDirectoryContents.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: .ctor
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Composite/CompositeDirectoryContents.cs
    startLine: 27
  assemblies:
  - Microsoft.Extensions.FileProviders.Composite
  namespace: Microsoft.Extensions.FileProviders.Composite
  summary: "\nCreates a new instance of <xref href=\"Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents\" data-throw-if-not-resolved=\"false\"></xref> to represents the result of a call composition of\n<see cref=\"!:IFileProvider.GetDirectoryContents(string)\"></see>.\n"
  example: []
  syntax:
    content: public CompositeDirectoryContents(IList<IFileProvider> fileProviders, string subpath)
    parameters:
    - id: fileProviders
      type: IList{IFileProvider}
      description: The list of <see cref="!:IFileProvider"></see> for which the results have to be composed.
    - id: subpath
      type: System.String
      description: The path.
    content.vb: Public Sub New(fileProviders As IList(Of IFileProvider), subpath As String)
  overload: Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents.#ctor*
  nameWithType.vb: CompositeDirectoryContents.CompositeDirectoryContents(IList(Of IFileProvider), String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents.CompositeDirectoryContents(IList(Of IFileProvider), System.String)
  name.vb: CompositeDirectoryContents(IList(Of IFileProvider), String)
- uid: Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents.GetEnumerator
  commentId: M:Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents.GetEnumerator
  id: GetEnumerator
  parent: Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: CompositeDirectoryContents.GetEnumerator()
  fullName: Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Composite/CompositeDirectoryContents.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: GetEnumerator
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Composite/CompositeDirectoryContents.cs
    startLine: 75
  assemblies:
  - Microsoft.Extensions.FileProviders.Composite
  namespace: Microsoft.Extensions.FileProviders.Composite
  syntax:
    content: public IEnumerator<IFileInfo> GetEnumerator()
    return:
      type: IEnumerator{IFileInfo}
    content.vb: Public Function GetEnumerator As IEnumerator(Of IFileInfo)
  overload: Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents.GetEnumerator*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents.Exists
  commentId: P:Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents.Exists
  id: Exists
  parent: Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents
  langs:
  - csharp
  - vb
  name: Exists
  nameWithType: CompositeDirectoryContents.Exists
  fullName: Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents.Exists
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Composite/CompositeDirectoryContents.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: Exists
    path: ../aspnet/FileSystem/src/Microsoft.Extensions.FileProviders.Composite/CompositeDirectoryContents.cs
    startLine: 87
  assemblies:
  - Microsoft.Extensions.FileProviders.Composite
  namespace: Microsoft.Extensions.FileProviders.Composite
  syntax:
    content: public bool Exists { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property Exists As Boolean
  overload: Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents.Exists*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Microsoft.Extensions.FileProviders.Composite
  commentId: N:Microsoft.Extensions.FileProviders.Composite
  isExternal: false
  name: Microsoft.Extensions.FileProviders.Composite
  nameWithType: Microsoft.Extensions.FileProviders.Composite
  fullName: Microsoft.Extensions.FileProviders.Composite
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents
  commentId: T:Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents
  isExternal: false
  name: CompositeDirectoryContents
  nameWithType: CompositeDirectoryContents
  fullName: Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents
- uid: Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents.#ctor*
  commentId: Overload:Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents.#ctor
  isExternal: false
  name: CompositeDirectoryContents
  nameWithType: CompositeDirectoryContents.CompositeDirectoryContents
  fullName: Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents.CompositeDirectoryContents
- uid: IList{IFileProvider}
  commentId: '!:IList{IFileProvider}'
  definition: IList`1
  name: IList<IFileProvider>
  nameWithType: IList<IFileProvider>
  fullName: IList<IFileProvider>
  nameWithType.vb: IList(Of IFileProvider)
  fullName.vb: IList(Of IFileProvider)
  name.vb: IList(Of IFileProvider)
  spec.csharp:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IFileProvider
    name: IFileProvider
    nameWithType: IFileProvider
    fullName: IFileProvider
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IFileProvider
    name: IFileProvider
    nameWithType: IFileProvider
    fullName: IFileProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: IList`1
  isExternal: true
  name: IList<>
  nameWithType: IList<>
  fullName: IList<>
  nameWithType.vb: IList(Of )
  fullName.vb: IList(Of )
  name.vb: IList(Of )
  spec.csharp:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents.GetEnumerator*
  commentId: Overload:Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents.GetEnumerator
  isExternal: false
  name: GetEnumerator
  nameWithType: CompositeDirectoryContents.GetEnumerator
  fullName: Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents.GetEnumerator
- uid: IEnumerator{IFileInfo}
  commentId: '!:IEnumerator{IFileInfo}'
  definition: IEnumerator`1
  name: IEnumerator<IFileInfo>
  nameWithType: IEnumerator<IFileInfo>
  fullName: IEnumerator<IFileInfo>
  nameWithType.vb: IEnumerator(Of IFileInfo)
  fullName.vb: IEnumerator(Of IFileInfo)
  name.vb: IEnumerator(Of IFileInfo)
  spec.csharp:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IFileInfo
    name: IFileInfo
    nameWithType: IFileInfo
    fullName: IFileInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IFileInfo
    name: IFileInfo
    nameWithType: IFileInfo
    fullName: IFileInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerator`1
  isExternal: true
  name: IEnumerator<>
  nameWithType: IEnumerator<>
  fullName: IEnumerator<>
  nameWithType.vb: IEnumerator(Of )
  fullName.vb: IEnumerator(Of )
  name.vb: IEnumerator(Of )
  spec.csharp:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents.Exists*
  commentId: Overload:Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents.Exists
  isExternal: false
  name: Exists
  nameWithType: CompositeDirectoryContents.Exists
  fullName: Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents.Exists
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
shouldSkipMarkup: true
