<Type Name="NodeServicesOptions" FullName="Microsoft.AspNetCore.NodeServices.NodeServicesOptions">
  <TypeSignature Language="C#" Value="public class NodeServicesOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NodeServicesOptions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.NodeServices.NodeServicesOptions" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.NodeServices</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Describes options used to configure an <see cref="T:Microsoft.AspNetCore.NodeServices.INodeServices" /> instance.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NodeServicesOptions (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.NodeServices.NodeServicesOptions.#ctor(System.IServiceProvider)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.NodeServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">The <see cref="T:System.IServiceProvider" />.</param>
        <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNetCore.NodeServices.NodeServicesOptions" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationStoppingToken">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationToken ApplicationStoppingToken { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.CancellationToken ApplicationStoppingToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.NodeServices.NodeServicesOptions.ApplicationStoppingToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.NodeServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            A token that indicates when the host application is stopping.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DebuggingPort">
      <MemberSignature Language="C#" Value="public int DebuggingPort { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DebuggingPort" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.NodeServices.NodeServicesOptions.DebuggingPort" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.NodeServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            If <see cref="P:Microsoft.AspNetCore.NodeServices.NodeServicesOptions.LaunchWithDebugging" /> is true, the Node.js instance will listen for V8 debugger connections on this port.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnvironmentVariables">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,string&gt; EnvironmentVariables { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; EnvironmentVariables" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.NodeServices.NodeServicesOptions.EnvironmentVariables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.NodeServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            If set, starts the Node.js instance with the specified environment variables.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvocationTimeoutMilliseconds">
      <MemberSignature Language="C#" Value="public int InvocationTimeoutMilliseconds { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 InvocationTimeoutMilliseconds" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.NodeServices.NodeServicesOptions.InvocationTimeoutMilliseconds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.NodeServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Specifies the maximum duration, in milliseconds, that your .NET code should wait for Node.js RPC calls to return.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LaunchWithDebugging">
      <MemberSignature Language="C#" Value="public bool LaunchWithDebugging { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LaunchWithDebugging" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.NodeServices.NodeServicesOptions.LaunchWithDebugging" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.NodeServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            If true, the Node.js instance will accept incoming V8 debugger connections (e.g., from node-inspector).
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeInstanceFactory">
      <MemberSignature Language="C#" Value="public Func&lt;Microsoft.AspNetCore.NodeServices.HostingModels.INodeInstance&gt; NodeInstanceFactory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Func`1&lt;class Microsoft.AspNetCore.NodeServices.HostingModels.INodeInstance&gt; NodeInstanceFactory" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.NodeServices.NodeServicesOptions.NodeInstanceFactory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.NodeServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;Microsoft.AspNetCore.NodeServices.HostingModels.INodeInstance&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Specifies how to construct Node.js instances. An <see cref="T:Microsoft.AspNetCore.NodeServices.HostingModels.INodeInstance" /> encapsulates all details about
            how Node.js instances are launched and communicated with. A new <see cref="T:Microsoft.AspNetCore.NodeServices.HostingModels.INodeInstance" /> will be created
            automatically if the previous instance has terminated (e.g., because a source file changed).
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeInstanceOutputLogger">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.Logging.ILogger NodeInstanceOutputLogger { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Extensions.Logging.ILogger NodeInstanceOutputLogger" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.NodeServices.NodeServicesOptions.NodeInstanceOutputLogger" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.NodeServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILogger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The Node.js instance's stdout/stderr will be redirected to this <see cref="T:Microsoft.Extensions.Logging.ILogger" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProjectPath">
      <MemberSignature Language="C#" Value="public string ProjectPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProjectPath" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.NodeServices.NodeServicesOptions.ProjectPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.NodeServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            If set, overrides the path to the root of your application. This path is used when locating Node.js modules relative to your project.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WatchFileExtensions">
      <MemberSignature Language="C#" Value="public string[] WatchFileExtensions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] WatchFileExtensions" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.NodeServices.NodeServicesOptions.WatchFileExtensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.NodeServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            If set, the Node.js instance should restart when any matching file on disk within your project changes.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>