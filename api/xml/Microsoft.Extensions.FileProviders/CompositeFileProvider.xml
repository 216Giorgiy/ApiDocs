<Type Name="CompositeFileProvider" FullName="Microsoft.Extensions.FileProviders.CompositeFileProvider">
  <TypeSignature Language="C#" Value="public class CompositeFileProvider : Microsoft.Extensions.FileProviders.IFileProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CompositeFileProvider extends System.Object implements class Microsoft.Extensions.FileProviders.IFileProvider" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.FileProviders.CompositeFileProvider" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.FileProviders.Composite</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Extensions.FileProviders.IFileProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Looks up files using a collection of <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompositeFileProvider (Microsoft.Extensions.FileProviders.IFileProvider[] fileProviders);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Extensions.FileProviders.IFileProvider[] fileProviders) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.FileProviders.CompositeFileProvider.#ctor(Microsoft.Extensions.FileProviders.IFileProvider[])" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.FileProviders.Composite</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileProviders" Type="Microsoft.Extensions.FileProviders.IFileProvider[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="fileProviders">The collection of <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider" /></param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.FileProviders.CompositeFileProvider" /> class using a collection of file provider.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompositeFileProvider (System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.FileProviders.IFileProvider&gt; fileProviders);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Extensions.FileProviders.IFileProvider&gt; fileProviders) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.FileProviders.CompositeFileProvider.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Extensions.FileProviders.IFileProvider})" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.FileProviders.Composite</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileProviders" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.FileProviders.IFileProvider&gt;" />
      </Parameters>
      <Docs>
        <param name="fileProviders">The collection of <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider" /></param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.FileProviders.CompositeFileProvider" /> class using a collection of file provider.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FileProviders">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.FileProviders.IFileProvider&gt; FileProviders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Extensions.FileProviders.IFileProvider&gt; FileProviders" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.FileProviders.CompositeFileProvider.FileProviders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.FileProviders.Composite</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.FileProviders.IFileProvider&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the list of configured <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider" /> instances.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDirectoryContents">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.FileProviders.IDirectoryContents GetDirectoryContents (string subpath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Extensions.FileProviders.IDirectoryContents GetDirectoryContents(string subpath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.FileProviders.CompositeFileProvider.GetDirectoryContents(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.FileProviders.Composite</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.FileProviders.IDirectoryContents</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subpath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="subpath">The path that identifies the directory</param>
        <summary>
            Enumerate a directory at the given path, if any.
            </summary>
        <returns>Contents of the directory. Caller must check Exists property.
            The content is a merge of the contents of the provided <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider" />.
            When there is multiple <see cref="T:Microsoft.Extensions.FileProviders.IFileInfo" /> with the same Name property, only the first one is included on the results.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFileInfo">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.FileProviders.IFileInfo GetFileInfo (string subpath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Extensions.FileProviders.IFileInfo GetFileInfo(string subpath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.FileProviders.CompositeFileProvider.GetFileInfo(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.FileProviders.Composite</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.FileProviders.IFileInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subpath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="subpath">The path that identifies the file. </param>
        <summary>
            Locates a file at the given path.
            </summary>
        <returns>The file information. Caller must check Exists property. This will be the first existing <see cref="T:Microsoft.Extensions.FileProviders.IFileInfo" /> returned by the provided <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider" /> or a not found <see cref="T:Microsoft.Extensions.FileProviders.IFileInfo" /> if no existing files is found.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Watch">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.Primitives.IChangeToken Watch (string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Extensions.Primitives.IChangeToken Watch(string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.FileProviders.CompositeFileProvider.Watch(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.FileProviders.Composite</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Primitives.IChangeToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pattern">Filter string used to determine what files or folders to monitor. Example: **/*.cs, *.*, subFolder/**/*.cshtml.</param>
        <summary>
            Creates a <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> for the specified <paramref name="pattern" />.
            </summary>
        <returns>An <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> that is notified when a file matching <paramref name="pattern" /> is added, modified or deleted.
            The change token will be notified when one of the change token returned by the provided <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider" /> will be notified.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>