<Type Name="AuthorizationCodeReceivedContext" FullName="Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext">
  <TypeSignature Language="C#" Value="public class AuthorizationCodeReceivedContext : Microsoft.AspNetCore.Authentication.RemoteAuthenticationContext&lt;Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectOptions&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AuthorizationCodeReceivedContext extends Microsoft.AspNetCore.Authentication.RemoteAuthenticationContext`1&lt;class Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectOptions&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Authentication.OpenIdConnect</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.AspNetCore.Authentication.OpenIdConnect.BaseOpenIdConnectContext</BaseTypeName>
    <BaseTypeName FrameworkAlternate="aspnetcore-2.0">Microsoft.AspNetCore.Authentication.RemoteAuthenticationContext&lt;Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectOptions&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="!0">Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectOptions</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            This Context can be used to be informed when an 'AuthorizationCode' is received over the OpenIdConnect protocol.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AuthorizationCodeReceivedContext (Microsoft.AspNetCore.Http.HttpContext context, Microsoft.AspNetCore.Builder.OpenIdConnectOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.AspNetCore.Http.HttpContext context, class Microsoft.AspNetCore.Builder.OpenIdConnectOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext.#ctor(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Builder.OpenIdConnectOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Authentication.OpenIdConnect</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.AspNetCore.Http.HttpContext" />
        <Parameter Name="options" Type="Microsoft.AspNetCore.Builder.OpenIdConnectOptions" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="options">To be added.</param>
        <summary>
            Creates a <see cref="T:Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext" /></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AuthorizationCodeReceivedContext (Microsoft.AspNetCore.Http.HttpContext context, Microsoft.AspNetCore.Authentication.AuthenticationScheme scheme, Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectOptions options, Microsoft.AspNetCore.Authentication.AuthenticationProperties properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.AspNetCore.Http.HttpContext context, class Microsoft.AspNetCore.Authentication.AuthenticationScheme scheme, class Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectOptions options, class Microsoft.AspNetCore.Authentication.AuthenticationProperties properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext.#ctor(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Authentication.AuthenticationScheme,Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectOptions,Microsoft.AspNetCore.Authentication.AuthenticationProperties)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Authentication.OpenIdConnect</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.AspNetCore.Http.HttpContext" />
        <Parameter Name="scheme" Type="Microsoft.AspNetCore.Authentication.AuthenticationScheme" />
        <Parameter Name="options" Type="Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectOptions" />
        <Parameter Name="properties" Type="Microsoft.AspNetCore.Authentication.AuthenticationProperties" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="scheme">To be added.</param>
        <param name="options">To be added.</param>
        <param name="properties">To be added.</param>
        <summary>
            Creates a <see cref="T:Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext" /></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Backchannel">
      <MemberSignature Language="C#" Value="public System.Net.Http.HttpClient Backchannel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Http.HttpClient Backchannel" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext.Backchannel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Authentication.OpenIdConnect</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Http.HttpClient</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The configured communication channel to the identity provider for use when making custom requests to the token endpoint.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleCodeRedemption">
      <MemberSignature Language="C#" Value="public void HandleCodeRedemption ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void HandleCodeRedemption() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext.HandleCodeRedemption" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Authentication.OpenIdConnect</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Tells the handler to skip the code redemption process. The developer may have redeemed the code themselves, or
            decided that the redemption was not required. If tokens were retrieved that are needed for further processing then
            call one of the overloads that allows providing tokens. An IdToken is required if one had not been previously received
            in the authorization response. An access token can optionally be provided for the handler to contact the
            user-info endpoint. Calling this is the same as setting TokenEndpointResponse.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleCodeRedemption">
      <MemberSignature Language="C#" Value="public void HandleCodeRedemption (Microsoft.IdentityModel.Protocols.OpenIdConnect.OpenIdConnectMessage tokenEndpointResponse);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void HandleCodeRedemption(class Microsoft.IdentityModel.Protocols.OpenIdConnect.OpenIdConnectMessage tokenEndpointResponse) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext.HandleCodeRedemption(Microsoft.IdentityModel.Protocols.OpenIdConnect.OpenIdConnectMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Authentication.OpenIdConnect</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenEndpointResponse" Type="Microsoft.IdentityModel.Protocols.OpenIdConnect.OpenIdConnectMessage" />
      </Parameters>
      <Docs>
        <param name="tokenEndpointResponse">To be added.</param>
        <summary>
            Tells the handler to skip the code redemption process. The developer may have redeemed the code themselves, or
            decided that the redemption was not required. If tokens were retrieved that are needed for further processing then
            call one of the overloads that allows providing tokens. An IdToken is required if one had not been previously received
            in the authorization response. An access token can optionally be provided for the handler to contact the
            user-info endpoint. Calling this is the same as setting TokenEndpointResponse.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleCodeRedemption">
      <MemberSignature Language="C#" Value="public void HandleCodeRedemption (string accessToken, string idToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void HandleCodeRedemption(string accessToken, string idToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext.HandleCodeRedemption(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Authentication.OpenIdConnect</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessToken" Type="System.String" />
        <Parameter Name="idToken" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="accessToken">To be added.</param>
        <param name="idToken">To be added.</param>
        <summary>
            Tells the handler to skip the code redemption process. The developer may have redeemed the code themselves, or
            decided that the redemption was not required. If tokens were retrieved that are needed for further processing then
            call one of the overloads that allows providing tokens. An IdToken is required if one had not been previously received
            in the authorization response. An access token can optionally be provided for the handler to contact the
            user-info endpoint. Calling this is the same as setting TokenEndpointResponse.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandledCodeRedemption">
      <MemberSignature Language="C#" Value="public bool HandledCodeRedemption { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HandledCodeRedemption" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext.HandledCodeRedemption" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Authentication.OpenIdConnect</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Indicates if the developer choose to handle (or skip) the code redemption. If true then the handler will not attempt
            to redeem the code. See HandleCodeRedemption and TokenEndpointResponse.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="JwtSecurityToken">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Tokens.Jwt.JwtSecurityToken JwtSecurityToken { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Tokens.Jwt.JwtSecurityToken JwtSecurityToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext.JwtSecurityToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Authentication.OpenIdConnect</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.Jwt.JwtSecurityToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the <see cref="P:Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext.JwtSecurityToken" /> that was received in the authentication response, if any.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties Properties { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties Properties" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext.Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Authentication.OpenIdConnect</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtocolMessage">
      <MemberSignature Language="C#" Value="public Microsoft.IdentityModel.Protocols.OpenIdConnect.OpenIdConnectMessage ProtocolMessage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.IdentityModel.Protocols.OpenIdConnect.OpenIdConnectMessage ProtocolMessage" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext.ProtocolMessage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Authentication.OpenIdConnect</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.IdentityModel.Protocols.OpenIdConnect.OpenIdConnectMessage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenEndpointRequest">
      <MemberSignature Language="C#" Value="public Microsoft.IdentityModel.Protocols.OpenIdConnect.OpenIdConnectMessage TokenEndpointRequest { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.IdentityModel.Protocols.OpenIdConnect.OpenIdConnectMessage TokenEndpointRequest" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext.TokenEndpointRequest" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Authentication.OpenIdConnect</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.IdentityModel.Protocols.OpenIdConnect.OpenIdConnectMessage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The request that will be sent to the token endpoint and is available for customization.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenEndpointResponse">
      <MemberSignature Language="C#" Value="public Microsoft.IdentityModel.Protocols.OpenIdConnect.OpenIdConnectMessage TokenEndpointResponse { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.IdentityModel.Protocols.OpenIdConnect.OpenIdConnectMessage TokenEndpointResponse" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext.TokenEndpointResponse" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Authentication.OpenIdConnect</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.IdentityModel.Protocols.OpenIdConnect.OpenIdConnectMessage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            If the developer chooses to redeem the code themselves then they can provide the resulting tokens here. This is the
            same as calling HandleCodeRedemption. If set then the handler will not attempt to redeem the code. An IdToken
            is required if one had not been previously received in the authorization response. An access token is optional
            if the handler is to contact the user-info endpoint.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>