<Type Name="UserManager&lt;TUser&gt;" FullName="Microsoft.AspNetCore.Identity.UserManager&lt;TUser&gt;">
  <TypeSignature Language="C#" Value="public class UserManager&lt;TUser&gt; : IDisposable where TUser : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UserManager`1&lt;class TUser&gt; extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Identity.UserManager`1" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TUser">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TUser">The type encapsulating a user.</typeparam>
    <summary>
            Provides the APIs for managing user in a persistence store.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UserManager (Microsoft.AspNetCore.Identity.IUserStore&lt;TUser&gt; store, Microsoft.Extensions.Options.IOptions&lt;Microsoft.AspNetCore.Builder.IdentityOptions&gt; optionsAccessor, Microsoft.AspNetCore.Identity.IPasswordHasher&lt;TUser&gt; passwordHasher, System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Identity.IUserValidator&lt;TUser&gt;&gt; userValidators, System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Identity.IPasswordValidator&lt;TUser&gt;&gt; passwordValidators, Microsoft.AspNetCore.Identity.ILookupNormalizer keyNormalizer, Microsoft.AspNetCore.Identity.IdentityErrorDescriber errors, IServiceProvider services, Microsoft.Extensions.Logging.ILogger&lt;Microsoft.AspNetCore.Identity.UserManager&lt;TUser&gt;&gt; logger);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.AspNetCore.Identity.IUserStore`1&lt;!TUser&gt; store, class Microsoft.Extensions.Options.IOptions`1&lt;class Microsoft.AspNetCore.Builder.IdentityOptions&gt; optionsAccessor, class Microsoft.AspNetCore.Identity.IPasswordHasher`1&lt;!TUser&gt; passwordHasher, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.AspNetCore.Identity.IUserValidator`1&lt;!TUser&gt;&gt; userValidators, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.AspNetCore.Identity.IPasswordValidator`1&lt;!TUser&gt;&gt; passwordValidators, class Microsoft.AspNetCore.Identity.ILookupNormalizer keyNormalizer, class Microsoft.AspNetCore.Identity.IdentityErrorDescriber errors, class System.IServiceProvider services, class Microsoft.Extensions.Logging.ILogger`1&lt;class Microsoft.AspNetCore.Identity.UserManager`1&lt;!TUser&gt;&gt; logger) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.#ctor(Microsoft.AspNetCore.Identity.IUserStore{`0},Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.IdentityOptions},Microsoft.AspNetCore.Identity.IPasswordHasher{`0},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Identity.IUserValidator{`0}},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Identity.IPasswordValidator{`0}},Microsoft.AspNetCore.Identity.ILookupNormalizer,Microsoft.AspNetCore.Identity.IdentityErrorDescriber,System.IServiceProvider,Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Identity.UserManager{`0}})" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="store" Type="Microsoft.AspNetCore.Identity.IUserStore&lt;TUser&gt;" />
        <Parameter Name="optionsAccessor" Type="Microsoft.Extensions.Options.IOptions&lt;Microsoft.AspNetCore.Builder.IdentityOptions&gt;" />
        <Parameter Name="passwordHasher" Type="Microsoft.AspNetCore.Identity.IPasswordHasher&lt;TUser&gt;" />
        <Parameter Name="userValidators" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Identity.IUserValidator&lt;TUser&gt;&gt;" />
        <Parameter Name="passwordValidators" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Identity.IPasswordValidator&lt;TUser&gt;&gt;" />
        <Parameter Name="keyNormalizer" Type="Microsoft.AspNetCore.Identity.ILookupNormalizer" />
        <Parameter Name="errors" Type="Microsoft.AspNetCore.Identity.IdentityErrorDescriber" />
        <Parameter Name="services" Type="System.IServiceProvider" />
        <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger&lt;Microsoft.AspNetCore.Identity.UserManager&lt;TUser&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="store">The persistence store the manager will operate over.</param>
        <param name="optionsAccessor">The accessor used to access the <see cref="T:Microsoft.AspNetCore.Builder.IdentityOptions" />.</param>
        <param name="passwordHasher">The password hashing implementation to use when saving passwords.</param>
        <param name="userValidators">A collection of <see cref="T:Microsoft.AspNetCore.Identity.IUserValidator`1" /> to validate users against.</param>
        <param name="passwordValidators">A collection of <see cref="T:Microsoft.AspNetCore.Identity.IPasswordValidator`1" /> to validate passwords against.</param>
        <param name="keyNormalizer">The <see cref="T:Microsoft.AspNetCore.Identity.ILookupNormalizer" /> to use when generating index keys for users.</param>
        <param name="errors">The <see cref="T:Microsoft.AspNetCore.Identity.IdentityErrorDescriber" /> used to provider error messages.</param>
        <param name="services">The <see cref="T:System.IServiceProvider" /> used to resolve services.</param>
        <param name="logger">The logger used to log messages, warnings and errors.</param>
        <summary>
            Constructs a new instance of <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UserManager (Microsoft.AspNetCore.Identity.IUserStore&lt;TUser&gt; store, Microsoft.Extensions.Options.IOptions&lt;Microsoft.AspNetCore.Identity.IdentityOptions&gt; optionsAccessor, Microsoft.AspNetCore.Identity.IPasswordHasher&lt;TUser&gt; passwordHasher, System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Identity.IUserValidator&lt;TUser&gt;&gt; userValidators, System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Identity.IPasswordValidator&lt;TUser&gt;&gt; passwordValidators, Microsoft.AspNetCore.Identity.ILookupNormalizer keyNormalizer, Microsoft.AspNetCore.Identity.IdentityErrorDescriber errors, IServiceProvider services, Microsoft.Extensions.Logging.ILogger&lt;Microsoft.AspNetCore.Identity.UserManager&lt;TUser&gt;&gt; logger);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.AspNetCore.Identity.IUserStore`1&lt;!TUser&gt; store, class Microsoft.Extensions.Options.IOptions`1&lt;class Microsoft.AspNetCore.Identity.IdentityOptions&gt; optionsAccessor, class Microsoft.AspNetCore.Identity.IPasswordHasher`1&lt;!TUser&gt; passwordHasher, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.AspNetCore.Identity.IUserValidator`1&lt;!TUser&gt;&gt; userValidators, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.AspNetCore.Identity.IPasswordValidator`1&lt;!TUser&gt;&gt; passwordValidators, class Microsoft.AspNetCore.Identity.ILookupNormalizer keyNormalizer, class Microsoft.AspNetCore.Identity.IdentityErrorDescriber errors, class System.IServiceProvider services, class Microsoft.Extensions.Logging.ILogger`1&lt;class Microsoft.AspNetCore.Identity.UserManager`1&lt;!TUser&gt;&gt; logger) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.#ctor(Microsoft.AspNetCore.Identity.IUserStore{`0},Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Identity.IdentityOptions},Microsoft.AspNetCore.Identity.IPasswordHasher{`0},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Identity.IUserValidator{`0}},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Identity.IPasswordValidator{`0}},Microsoft.AspNetCore.Identity.ILookupNormalizer,Microsoft.AspNetCore.Identity.IdentityErrorDescriber,System.IServiceProvider,Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Identity.UserManager{`0}})" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="store" Type="Microsoft.AspNetCore.Identity.IUserStore&lt;TUser&gt;" />
        <Parameter Name="optionsAccessor" Type="Microsoft.Extensions.Options.IOptions&lt;Microsoft.AspNetCore.Identity.IdentityOptions&gt;" />
        <Parameter Name="passwordHasher" Type="Microsoft.AspNetCore.Identity.IPasswordHasher&lt;TUser&gt;" />
        <Parameter Name="userValidators" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Identity.IUserValidator&lt;TUser&gt;&gt;" />
        <Parameter Name="passwordValidators" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Identity.IPasswordValidator&lt;TUser&gt;&gt;" />
        <Parameter Name="keyNormalizer" Type="Microsoft.AspNetCore.Identity.ILookupNormalizer" />
        <Parameter Name="errors" Type="Microsoft.AspNetCore.Identity.IdentityErrorDescriber" />
        <Parameter Name="services" Type="System.IServiceProvider" />
        <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger&lt;Microsoft.AspNetCore.Identity.UserManager&lt;TUser&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="store">The persistence store the manager will operate over.</param>
        <param name="optionsAccessor">The accessor used to access the <see cref="T:Microsoft.AspNetCore.Identity.IdentityOptions" />.</param>
        <param name="passwordHasher">The password hashing implementation to use when saving passwords.</param>
        <param name="userValidators">A collection of <see cref="T:Microsoft.AspNetCore.Identity.IUserValidator`1" /> to validate users against.</param>
        <param name="passwordValidators">A collection of <see cref="T:Microsoft.AspNetCore.Identity.IPasswordValidator`1" /> to validate passwords against.</param>
        <param name="keyNormalizer">The <see cref="T:Microsoft.AspNetCore.Identity.ILookupNormalizer" /> to use when generating index keys for users.</param>
        <param name="errors">The <see cref="T:Microsoft.AspNetCore.Identity.IdentityErrorDescriber" /> used to provider error messages.</param>
        <param name="services">The <see cref="T:System.IServiceProvider" /> used to resolve services.</param>
        <param name="logger">The logger used to log messages, warnings and errors.</param>
        <summary>
            Constructs a new instance of <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessFailedAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; AccessFailedAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; AccessFailedAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.AccessFailedAsync(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;AccessFailedAsync&gt;d__140))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
      </Parameters>
      <Docs>
        <param name="user">The user whose failed access count to increment.</param>
        <summary>
            Increments the access failed count for the user as an asynchronous operation.
            If the failed access account is greater than or equal to the configured maximum number of attempts,
            the user will be locked out for the configured lockout time span.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" /> of the operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddClaimAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; AddClaimAsync (TUser user, System.Security.Claims.Claim claim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; AddClaimAsync(!TUser user, class System.Security.Claims.Claim claim) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.AddClaimAsync(`0,System.Security.Claims.Claim)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="claim" Type="System.Security.Claims.Claim" />
      </Parameters>
      <Docs>
        <param name="user">The user to add the claim to.</param>
        <param name="claim">The claim to add.</param>
        <summary>
            Adds the specified <paramref name="claim" /> to the <paramref name="user" />.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" />
            of the operation.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddClaimsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; AddClaimsAsync (TUser user, System.Collections.Generic.IEnumerable&lt;System.Security.Claims.Claim&gt; claims);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; AddClaimsAsync(!TUser user, class System.Collections.Generic.IEnumerable`1&lt;class System.Security.Claims.Claim&gt; claims) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;AddClaimsAsync&gt;d__99))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="claims" Type="System.Collections.Generic.IEnumerable&lt;System.Security.Claims.Claim&gt;" />
      </Parameters>
      <Docs>
        <param name="user">The user to add the claim to.</param>
        <param name="claims">The claims to add.</param>
        <summary>
            Adds the specified <paramref name="claims" /> to the <paramref name="user" />.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" />
            of the operation.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLoginAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; AddLoginAsync (TUser user, Microsoft.AspNetCore.Identity.UserLoginInfo login);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; AddLoginAsync(!TUser user, class Microsoft.AspNetCore.Identity.UserLoginInfo login) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;AddLoginAsync&gt;d__96))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="login" Type="Microsoft.AspNetCore.Identity.UserLoginInfo" />
      </Parameters>
      <Docs>
        <param name="user">The user to add the login to.</param>
        <param name="login">The external <see cref="T:Microsoft.AspNetCore.Identity.UserLoginInfo" /> to add to the specified <paramref name="user" />.</param>
        <summary>
            Adds an external <see cref="T:Microsoft.AspNetCore.Identity.UserLoginInfo" /> to the specified <paramref name="user" />.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" />
            of the operation.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPasswordAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; AddPasswordAsync (TUser user, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; AddPasswordAsync(!TUser user, string password) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.AddPasswordAsync(`0,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;AddPasswordAsync&gt;d__86))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="user">The user whose password should be set.</param>
        <param name="password">The password to set.</param>
        <summary>
            Adds the <paramref name="password" /> to the specified <paramref name="user" /> only if the user
            does not already have a password.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" />
            of the operation.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToRoleAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; AddToRoleAsync (TUser user, string role);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; AddToRoleAsync(!TUser user, string role) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.AddToRoleAsync(`0,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;AddToRoleAsync&gt;d__104))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="role" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="user">The user to add to the named role.</param>
        <param name="role">The name of the role to add the user to.</param>
        <summary>
            Add the specified <paramref name="user" /> to the named role.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" />
            of the operation.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToRolesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; AddToRolesAsync (TUser user, System.Collections.Generic.IEnumerable&lt;string&gt; roles);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; AddToRolesAsync(!TUser user, class System.Collections.Generic.IEnumerable`1&lt;string&gt; roles) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.AddToRolesAsync(`0,System.Collections.Generic.IEnumerable{System.String})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;AddToRolesAsync&gt;d__105))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="roles" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="user">The user to add to the named roles.</param>
        <param name="roles">The name of the roles to add the user to.</param>
        <summary>
            Add the specified <paramref name="user" /> to the named roles.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" />
            of the operation.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancellationToken">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.CancellationToken CancellationToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.CancellationToken CancellationToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.UserManager`1.CancellationToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The cancellation token used to cancel operations.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeEmailAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; ChangeEmailAsync (TUser user, string newEmail, string token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; ChangeEmailAsync(!TUser user, string newEmail, string token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.ChangeEmailAsync(`0,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;ChangeEmailAsync&gt;d__120))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="newEmail" Type="System.String" />
        <Parameter Name="token" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="user">The user whose email should be updated.</param>
        <param name="newEmail">The new email address.</param>
        <param name="token">The change email token to be verified.</param>
        <summary>
            Updates a users emails if the specified email change <paramref name="token" /> is valid for the user.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" />
            of the operation.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangePasswordAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; ChangePasswordAsync (TUser user, string currentPassword, string newPassword);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; ChangePasswordAsync(!TUser user, string currentPassword, string newPassword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.ChangePasswordAsync(`0,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;ChangePasswordAsync&gt;d__87))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="currentPassword" Type="System.String" />
        <Parameter Name="newPassword" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="user">The user whose password should be set.</param>
        <param name="currentPassword">The current password to validate before changing.</param>
        <param name="newPassword">The new password to set for the specified <paramref name="user" />.</param>
        <summary>
            Changes a user's password after confirming the specified <paramref name="currentPassword" /> is correct,
            as an asynchronous operation.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" />
            of the operation.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangePhoneNumberAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; ChangePhoneNumberAsync (TUser user, string phoneNumber, string token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; ChangePhoneNumberAsync(!TUser user, string phoneNumber, string token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.ChangePhoneNumberAsync(`0,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;ChangePhoneNumberAsync&gt;d__123))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="phoneNumber" Type="System.String" />
        <Parameter Name="token" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="user">The user whose phone number to set.</param>
        <param name="phoneNumber">The phone number to set.</param>
        <param name="token">The phone number confirmation token to validate.</param>
        <summary>
            Sets the phone number for the specified <paramref name="user" /> if the specified
            change <paramref name="token" /> is valid.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" />
            of the operation.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangePhoneNumberTokenPurpose">
      <MemberSignature Language="C#" Value="protected const string ChangePhoneNumberTokenPurpose;" />
      <MemberSignature Language="ILAsm" Value=".field family static literal string ChangePhoneNumberTokenPurpose" />
      <MemberSignature Language="DocId" Value="F:Microsoft.AspNetCore.Identity.UserManager`1.ChangePhoneNumberTokenPurpose" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The data protection purpose used for the change phone number methods.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckPasswordAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; CheckPasswordAsync (TUser user, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; CheckPasswordAsync(!TUser user, string password) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.CheckPasswordAsync(`0,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;CheckPasswordAsync&gt;d__84))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="user">The user whose password should be validated.</param>
        <param name="password">The password to validate</param>
        <summary>
            Returns a flag indicating whether the given <paramref name="password" /> is valid for the
            specified <paramref name="user" />.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing true if
            the specified <paramref name="password" /> matches the one store for the <paramref name="user" />,
            otherwise false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfirmEmailAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; ConfirmEmailAsync (TUser user, string token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; ConfirmEmailAsync(!TUser user, string token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.ConfirmEmailAsync(`0,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;ConfirmEmailAsync&gt;d__117))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="token" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="user">The user to validate the token against.</param>
        <param name="token">The email confirmation token to validate.</param>
        <summary>
            Validates that an email confirmation token matches the specified <paramref name="user" />.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" />
            of the operation.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfirmEmailTokenPurpose">
      <MemberSignature Language="C#" Value="protected const string ConfirmEmailTokenPurpose;" />
      <MemberSignature Language="ILAsm" Value=".field family static literal string ConfirmEmailTokenPurpose" />
      <MemberSignature Language="DocId" Value="F:Microsoft.AspNetCore.Identity.UserManager`1.ConfirmEmailTokenPurpose" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The data protection purpose used for the email confirmation related methods.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CountRecoveryCodesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;int&gt; CountRecoveryCodesAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; CountRecoveryCodesAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.CountRecoveryCodesAsync(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
      </Parameters>
      <Docs>
        <param name="user">The user.</param>
        <summary>
            Returns how many recovery code are still valid for a user.
            </summary>
        <returns>How many recovery code are still valid for a user.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; CreateAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; CreateAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.CreateAsync(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;CreateAsync&gt;d__73))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
      </Parameters>
      <Docs>
        <param name="user">The user to create.</param>
        <summary>
            Creates the specified <paramref name="user" /> in the backing store with no password,
            as an asynchronous operation.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" />
            of the operation.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; CreateAsync (TUser user, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; CreateAsync(!TUser user, string password) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.CreateAsync(`0,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;CreateAsync&gt;d__78))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="user">The user to create.</param>
        <param name="password">The password for the user to hash and store.</param>
        <summary>
            Creates the specified <paramref name="user" /> in the backing store with given password,
            as an asynchronous operation.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" />
            of the operation.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSecurityTokenAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;byte[]&gt; CreateSecurityTokenAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; CreateSecurityTokenAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.CreateSecurityTokenAsync(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;CreateSecurityTokenAsync&gt;d__160))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
      </Parameters>
      <Docs>
        <param name="user">The user.</param>
        <summary>
            Creates bytes to use as a security token from the user's security stamp.
            </summary>
        <returns>The security token bytes.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTwoFactorRecoveryCode">
      <MemberSignature Language="C#" Value="protected virtual string CreateTwoFactorRecoveryCode ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string CreateTwoFactorRecoveryCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.CreateTwoFactorRecoveryCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Generate a new recovery code.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; DeleteAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; DeleteAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.DeleteAsync(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
      </Parameters>
      <Docs>
        <param name="user">The user to delete.</param>
        <summary>
            Deletes the specified <paramref name="user" /> from the backing store.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" />
            of the operation.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Releases all resources used by the user manager.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        <summary>
            Releases the unmanaged resources used by the role manager and optionally releases the managed resources.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorDescriber">
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Identity.IdentityErrorDescriber ErrorDescriber { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.AspNetCore.Identity.IdentityErrorDescriber ErrorDescriber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.UserManager`1.ErrorDescriber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Identity.IdentityErrorDescriber</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The <see cref="T:Microsoft.AspNetCore.Identity.IdentityErrorDescriber" /> used to generate error messages.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindByEmailAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;TUser&gt; FindByEmailAsync (string email);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!TUser&gt; FindByEmailAsync(string email) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.FindByEmailAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TUser&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="email" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="email">The email address to return the user for.</param>
        <summary>
            Gets the user, if any, associated with the normalized value of the specified email address.
            </summary>
        <returns>
            The task object containing the results of the asynchronous lookup operation, the user, if any, associated with a normalized value of the specified email address.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindByIdAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;TUser&gt; FindByIdAsync (string userId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!TUser&gt; FindByIdAsync(string userId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.FindByIdAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TUser&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="userId">The user ID to search for.</param>
        <summary>
            Finds and returns a user, if any, who has the specified <paramref name="userId" />.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the user matching the specified <paramref name="userId" /> if it exists.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindByLoginAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;TUser&gt; FindByLoginAsync (string loginProvider, string providerKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!TUser&gt; FindByLoginAsync(string loginProvider, string providerKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.FindByLoginAsync(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TUser&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="loginProvider" Type="System.String" />
        <Parameter Name="providerKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="loginProvider">The login provider who provided the <paramref name="providerKey" />.</param>
        <param name="providerKey">The key provided by the <paramref name="loginProvider" /> to identify a user.</param>
        <summary>
            Retrieves the user associated with the specified external login provider and login provider key.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> for the asynchronous operation, containing the user, if any which matched the specified login provider and key.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindByNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;TUser&gt; FindByNameAsync (string userName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!TUser&gt; FindByNameAsync(string userName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.FindByNameAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TUser&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="userName">The user name to search for.</param>
        <summary>
            Finds and returns a user, if any, who has the specified user name.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the user matching the specified <paramref name="userName" /> if it exists.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateChangeEmailTokenAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; GenerateChangeEmailTokenAsync (TUser user, string newEmail);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; GenerateChangeEmailTokenAsync(!TUser user, string newEmail) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.GenerateChangeEmailTokenAsync(`0,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="newEmail" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="user">The user to generate an email change token for.</param>
        <param name="newEmail">The new email address.</param>
        <summary>
            Generates an email change token for the specified user.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, an email change token.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateChangePhoneNumberTokenAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; GenerateChangePhoneNumberTokenAsync (TUser user, string phoneNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; GenerateChangePhoneNumberTokenAsync(!TUser user, string phoneNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.GenerateChangePhoneNumberTokenAsync(`0,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="phoneNumber" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="user">The user to generate a telephone number token for.</param>
        <param name="phoneNumber">The new phone number the validation token should be sent to.</param>
        <summary>
            Generates a telephone number change token for the specified user.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the telephone change number token.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateConcurrencyStampAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; GenerateConcurrencyStampAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; GenerateConcurrencyStampAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.GenerateConcurrencyStampAsync(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
      </Parameters>
      <Docs>
        <param name="user">The user to generate the stamp for.</param>
        <summary>
            Generates a value suitable for use in concurrency tracking.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the security
            stamp for the specified <paramref name="user" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateEmailConfirmationTokenAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; GenerateEmailConfirmationTokenAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; GenerateEmailConfirmationTokenAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.GenerateEmailConfirmationTokenAsync(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
      </Parameters>
      <Docs>
        <param name="user">The user to generate an email confirmation token for.</param>
        <summary>
            Generates an email confirmation token for the specified user.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, an email confirmation token.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateNewAuthenticatorKey">
      <MemberSignature Language="C#" Value="public virtual string GenerateNewAuthenticatorKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GenerateNewAuthenticatorKey() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.GenerateNewAuthenticatorKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Generates a new base32 encoded 160-bit security secret (size of SHA1 hash).
            </summary>
        <returns>The new security secret.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateNewTwoFactorRecoveryCodesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;string&gt;&gt; GenerateNewTwoFactorRecoveryCodesAsync (TUser user, int number);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;string&gt;&gt; GenerateNewTwoFactorRecoveryCodesAsync(!TUser user, int32 number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.GenerateNewTwoFactorRecoveryCodesAsync(`0,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;GenerateNewTwoFactorRecoveryCodesAsync&gt;d__151))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;System.String&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="user">The user to generate recovery codes for.</param>
        <param name="number">The number of codes to generate.</param>
        <summary>
            Generates recovery codes for the user, this invalidates any previous recovery codes for the user.
            </summary>
        <returns>The new recovery codes for the user.  Note: there may be less than number returned, as duplicates will be removed.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GeneratePasswordResetTokenAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; GeneratePasswordResetTokenAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; GeneratePasswordResetTokenAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.GeneratePasswordResetTokenAsync(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
      </Parameters>
      <Docs>
        <param name="user">The user to generate a password reset token for.</param>
        <summary>
            Generates a password reset token for the specified <paramref name="user" />, using
            the configured password reset token provider.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation,
            containing a password reset token for the specified <paramref name="user" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateTwoFactorTokenAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; GenerateTwoFactorTokenAsync (TUser user, string tokenProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; GenerateTwoFactorTokenAsync(!TUser user, string tokenProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.GenerateTwoFactorTokenAsync(`0,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="tokenProvider" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="user">The user the token is for.</param>
        <param name="tokenProvider">The provider which will generate the token.</param>
        <summary>
            Gets a two factor authentication token for the specified <paramref name="user" />.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents result of the asynchronous operation, a two factor authentication token
            for the user.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateUserTokenAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; GenerateUserTokenAsync (TUser user, string tokenProvider, string purpose);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; GenerateUserTokenAsync(!TUser user, string tokenProvider, string purpose) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.GenerateUserTokenAsync(`0,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="tokenProvider" Type="System.String" />
        <Parameter Name="purpose" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="user">The user the token will be for.</param>
        <param name="tokenProvider">The provider which will generate the token.</param>
        <param name="purpose">The purpose the token will be for.</param>
        <summary>
            Generates a token for the given <paramref name="user" /> and <paramref name="purpose" />.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents result of the asynchronous operation, a token for
            the given user and purpose.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccessFailedCountAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;int&gt; GetAccessFailedCountAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; GetAccessFailedCountAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.GetAccessFailedCountAsync(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;GetAccessFailedCountAsync&gt;d__142))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
      </Parameters>
      <Docs>
        <param name="user">The user whose access failed count should be retrieved for.</param>
        <summary>
            Retrieves the current number of failed accesses for the given <paramref name="user" />.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that contains the result the asynchronous operation, the current failed access count
            for the user.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAuthenticationTokenAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; GetAuthenticationTokenAsync (TUser user, string loginProvider, string tokenName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; GetAuthenticationTokenAsync(!TUser user, string loginProvider, string tokenName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.GetAuthenticationTokenAsync(`0,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="loginProvider" Type="System.String" />
        <Parameter Name="tokenName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="user"></param>
        <param name="loginProvider">The authentication scheme for the provider the token is associated with.</param>
        <param name="tokenName">The name of the token.</param>
        <summary>
            Returns an authentication token for a user.
            </summary>
        <returns>The authentication token for a user</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAuthenticatorKeyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; GetAuthenticatorKeyAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; GetAuthenticatorKeyAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.GetAuthenticatorKeyAsync(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
      </Parameters>
      <Docs>
        <param name="user">The user.</param>
        <summary>
            Returns the authenticator key for the user.
            </summary>
        <returns>The authenticator key</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChangeEmailTokenPurpose">
      <MemberSignature Language="C#" Value="protected static string GetChangeEmailTokenPurpose (string newEmail);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig string GetChangeEmailTokenPurpose(string newEmail) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.GetChangeEmailTokenPurpose(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newEmail" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="newEmail"></param>
        <summary>
            Generates the token purpose used to change email
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetClaimsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;System.Security.Claims.Claim&gt;&gt; GetClaimsAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IList`1&lt;class System.Security.Claims.Claim&gt;&gt; GetClaimsAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.GetClaimsAsync(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;GetClaimsAsync&gt;d__103))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;System.Security.Claims.Claim&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
      </Parameters>
      <Docs>
        <param name="user">The user whose claims to retrieve.</param>
        <summary>
            Gets a list of <see cref="T:System.Security.Claims.Claim" />s to be belonging to the specified <paramref name="user" /> as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the result of the asynchronous query, a list of <see cref="T:System.Security.Claims.Claim" />s.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEmailAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; GetEmailAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; GetEmailAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.GetEmailAsync(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;GetEmailAsync&gt;d__112))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
      </Parameters>
      <Docs>
        <param name="user">The user whose email should be returned.</param>
        <summary>
            Gets the email address for the specified <paramref name="user" />.
            </summary>
        <returns>The task object containing the results of the asynchronous operation, the email address for the specified <paramref name="user" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLockoutEnabledAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; GetLockoutEnabledAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; GetLockoutEnabledAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.GetLockoutEnabledAsync(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;GetLockoutEnabledAsync&gt;d__137))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
      </Parameters>
      <Docs>
        <param name="user">The user whose ability to be locked out should be returned.</param>
        <summary>
            Retrieves a flag indicating whether user lockout can enabled for the specified user.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, true if a user can be locked out, otherwise false.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLockoutEndDateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Nullable&lt;DateTimeOffset&gt;&gt; GetLockoutEndDateAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt;&gt; GetLockoutEndDateAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.GetLockoutEndDateAsync(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;GetLockoutEndDateAsync&gt;d__138))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.DateTimeOffset&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
      </Parameters>
      <Docs>
        <param name="user">The user whose lockout date should be retrieved.</param>
        <summary>
            Gets the last <see cref="T:System.DateTimeOffset" /> a user's last lockout expired, if any.
            Any time in the past should be indicates a user is not locked out.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the lookup, a <see cref="T:System.DateTimeOffset" /> containing the last time a user's lockout expired, if any.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLoginsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Identity.UserLoginInfo&gt;&gt; GetLoginsAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IList`1&lt;class Microsoft.AspNetCore.Identity.UserLoginInfo&gt;&gt; GetLoginsAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.GetLoginsAsync(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;GetLoginsAsync&gt;d__97))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Identity.UserLoginInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
      </Parameters>
      <Docs>
        <param name="user">The user whose associated logins to retrieve.</param>
        <summary>
            Retrieves the associated logins for the specified <param ref="user" />.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> for the asynchronous operation, containing a list of <see cref="T:Microsoft.AspNetCore.Identity.UserLoginInfo" /> for the specified <paramref name="user" />, if any.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPhoneNumberAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; GetPhoneNumberAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; GetPhoneNumberAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.GetPhoneNumberAsync(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;GetPhoneNumberAsync&gt;d__121))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
      </Parameters>
      <Docs>
        <param name="user">The user whose telephone number should be retrieved.</param>
        <summary>
            Gets the telephone number, if any, for the specified <paramref name="user" />.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the user's telephone number, if any.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRolesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;string&gt;&gt; GetRolesAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IList`1&lt;string&gt;&gt; GetRolesAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.GetRolesAsync(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;GetRolesAsync&gt;d__110))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;System.String&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
      </Parameters>
      <Docs>
        <param name="user">The user whose role names to retrieve.</param>
        <summary>
            Gets a list of role names the specified <paramref name="user" /> belongs to.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing a list of role names.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSecurityStampAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; GetSecurityStampAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; GetSecurityStampAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.GetSecurityStampAsync(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;GetSecurityStampAsync&gt;d__90))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
      </Parameters>
      <Docs>
        <param name="user">The user whose security stamp should be set.</param>
        <summary>
            Get the security stamp for the specified <paramref name="user" />.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the security stamp for the specified <paramref name="user" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTwoFactorEnabledAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; GetTwoFactorEnabledAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; GetTwoFactorEnabledAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.GetTwoFactorEnabledAsync(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;GetTwoFactorEnabledAsync&gt;d__133))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
      </Parameters>
      <Docs>
        <param name="user">The user whose two factor authentication enabled status should be retrieved.</param>
        <summary>
            Returns a flag indicating whether the specified <paramref name="user" /> has two factor authentication enabled or not,
            as an asynchronous operation.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, true if the specified <paramref name="user " />
            has two factor authentication enabled, otherwise false.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUserAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;TUser&gt; GetUserAsync (System.Security.Claims.ClaimsPrincipal principal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!TUser&gt; GetUserAsync(class System.Security.Claims.ClaimsPrincipal principal) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.GetUserAsync(System.Security.Claims.ClaimsPrincipal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TUser&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" />
      </Parameters>
      <Docs>
        <param name="principal">The principal which contains the user id claim.</param>
        <summary>
            Returns the user corresponding to the IdentityOptions.ClaimsIdentity.UserIdClaimType claim in
            the principal or null.
            </summary>
        <returns>The user corresponding to the IdentityOptions.ClaimsIdentity.UserIdClaimType claim in
            the principal or null</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUserId">
      <MemberSignature Language="C#" Value="public virtual string GetUserId (System.Security.Claims.ClaimsPrincipal principal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetUserId(class System.Security.Claims.ClaimsPrincipal principal) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.GetUserId(System.Security.Claims.ClaimsPrincipal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" />
      </Parameters>
      <Docs>
        <param name="principal">The <see cref="T:System.Security.Claims.ClaimsPrincipal" /> instance.</param>
        <summary>
            Returns the User ID claim value if present otherwise returns null.
            </summary>
        <returns>The User ID claim value, or null if the claim is not present.</returns>
        <remarks>The User ID claim is identified by <see cref="F:System.Security.Claims.ClaimTypes.NameIdentifier" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUserIdAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; GetUserIdAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; GetUserIdAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.GetUserIdAsync(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;GetUserIdAsync&gt;d__83))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
      </Parameters>
      <Docs>
        <param name="user">The user whose identifier should be retrieved.</param>
        <summary>
            Gets the user identifier for the specified <paramref name="user" />.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the identifier for the specified <paramref name="user" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUserName">
      <MemberSignature Language="C#" Value="public virtual string GetUserName (System.Security.Claims.ClaimsPrincipal principal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetUserName(class System.Security.Claims.ClaimsPrincipal principal) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.GetUserName(System.Security.Claims.ClaimsPrincipal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" />
      </Parameters>
      <Docs>
        <param name="principal">The <see cref="T:System.Security.Claims.ClaimsPrincipal" /> instance.</param>
        <summary>
            Returns the Name claim value if present otherwise returns null.
            </summary>
        <returns>The Name claim value, or null if the claim is not present.</returns>
        <remarks>The Name claim is identified by <see cref="F:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUserNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; GetUserNameAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; GetUserNameAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.GetUserNameAsync(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;GetUserNameAsync&gt;d__81))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
      </Parameters>
      <Docs>
        <param name="user">The user whose name should be retrieved.</param>
        <summary>
            Gets the user name for the specified <paramref name="user" />.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the name for the specified <paramref name="user" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUsersForClaimAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;TUser&gt;&gt; GetUsersForClaimAsync (System.Security.Claims.Claim claim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IList`1&lt;!TUser&gt;&gt; GetUsersForClaimAsync(class System.Security.Claims.Claim claim) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.GetUsersForClaimAsync(System.Security.Claims.Claim)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;TUser&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="claim" Type="System.Security.Claims.Claim" />
      </Parameters>
      <Docs>
        <param name="claim">The claim to look for.</param>
        <summary>
            Returns a list of users from the user store who have the specified <paramref name="claim" />.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the result of the asynchronous query, a list of <typeparamref name="TUser" />s who
            have the specified claim.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUsersInRoleAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;TUser&gt;&gt; GetUsersInRoleAsync (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IList`1&lt;!TUser&gt;&gt; GetUsersInRoleAsync(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.GetUsersInRoleAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;TUser&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">The name of the role whose users should be returned.</param>
        <summary>
            Returns a list of users from the user store who are members of the specified <paramref name="roleName" />.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the result of the asynchronous query, a list of <typeparamref name="TUser" />s who
            are members of the specified role.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValidTwoFactorProvidersAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;string&gt;&gt; GetValidTwoFactorProvidersAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IList`1&lt;string&gt;&gt; GetValidTwoFactorProvidersAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.GetValidTwoFactorProvidersAsync(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;GetValidTwoFactorProvidersAsync&gt;d__130))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;System.String&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
      </Parameters>
      <Docs>
        <param name="user">The user the whose two factor authentication providers will be returned.</param>
        <summary>
            Gets a list of valid two factor token providers for the specified <paramref name="user" />,
            as an asynchronous operation.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents result of the asynchronous operation, a list of two
            factor authentication providers for the specified user.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPasswordAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; HasPasswordAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; HasPasswordAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.HasPasswordAsync(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
      </Parameters>
      <Docs>
        <param name="user">The user to return a flag for, indicating whether they have a password or not.</param>
        <summary>
            Gets a flag indicating whether the specified <paramref name="user" /> has a password.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, returning true if the specified <paramref name="user" /> has a password
            otherwise false.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmailConfirmedAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; IsEmailConfirmedAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; IsEmailConfirmedAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.IsEmailConfirmedAsync(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;IsEmailConfirmedAsync&gt;d__118))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
      </Parameters>
      <Docs>
        <param name="user">The user whose email confirmation status should be returned.</param>
        <summary>
            Gets a flag indicating whether the email address for the specified <paramref name="user" /> has been verified, true if the email address is verified otherwise
            false.
            </summary>
        <returns>
            The task object containing the results of the asynchronous operation, a flag indicating whether the email address for the specified <paramref name="user" />
            has been confirmed or not.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInRoleAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; IsInRoleAsync (TUser user, string role);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; IsInRoleAsync(!TUser user, string role) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.IsInRoleAsync(`0,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;IsInRoleAsync&gt;d__111))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="role" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="user">The user whose role membership should be checked.</param>
        <param name="role">The name of the role to be checked.</param>
        <summary>
            Returns a flag indicating whether the specified <paramref name="user" /> is a member of the give named role.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing a flag indicating whether the specified <paramref name="user" /> is
            a member of the named role.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLockedOutAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; IsLockedOutAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; IsLockedOutAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.IsLockedOutAsync(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;IsLockedOutAsync&gt;d__135))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
      </Parameters>
      <Docs>
        <param name="user">The user whose locked out status should be retrieved.</param>
        <summary>
            Returns a flag indicating whether the specified <paramref name="user" /> his locked out,
            as an asynchronous operation.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, true if the specified <paramref name="user " />
            is locked out, otherwise false.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPhoneNumberConfirmedAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; IsPhoneNumberConfirmedAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; IsPhoneNumberConfirmedAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.IsPhoneNumberConfirmedAsync(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
      </Parameters>
      <Docs>
        <param name="user">The user to return a flag for, indicating whether their telephone number is confirmed.</param>
        <summary>
            Gets a flag indicating whether the specified <paramref name="user" />'s telephone number has been confirmed.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, returning true if the specified <paramref name="user" /> has a confirmed
            telephone number otherwise false.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyNormalizer">
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Identity.ILookupNormalizer KeyNormalizer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.AspNetCore.Identity.ILookupNormalizer KeyNormalizer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.UserManager`1.KeyNormalizer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Identity.ILookupNormalizer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The <see cref="T:Microsoft.AspNetCore.Identity.ILookupNormalizer" /> used to normalize things like user and role names.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Logger">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Extensions.Logging.ILogger Logger { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Extensions.Logging.ILogger Logger" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.UserManager`1.Logger" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILogger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger" /> used to log messages from the manager.
            </summary>
        <value>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger" /> used to log messages from the manager.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NormalizeKey">
      <MemberSignature Language="C#" Value="public virtual string NormalizeKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string NormalizeKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.NormalizeKey(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The key to normalize.</param>
        <summary>
            Normalize a key (user name, email) for consistent comparisons.
            </summary>
        <returns>A normalized value representing the specified <paramref name="key" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Identity.IdentityOptions Options { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.AspNetCore.Identity.IdentityOptions Options" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.UserManager`1.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Identity.IdentityOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The <see cref="T:Microsoft.AspNetCore.Identity.IdentityOptions" /> used to configure Identity.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PasswordHasher">
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Identity.IPasswordHasher&lt;TUser&gt; PasswordHasher { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.AspNetCore.Identity.IPasswordHasher`1&lt;!TUser&gt; PasswordHasher" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.UserManager`1.PasswordHasher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Identity.IPasswordHasher&lt;TUser&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The <see cref="T:Microsoft.AspNetCore.Identity.IPasswordHasher`1" /> used to hash passwords.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PasswordValidators">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Identity.IPasswordValidator&lt;TUser&gt;&gt; PasswordValidators { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class Microsoft.AspNetCore.Identity.IPasswordValidator`1&lt;!TUser&gt;&gt; PasswordValidators" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.UserManager`1.PasswordValidators" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Identity.IPasswordValidator&lt;TUser&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The <see cref="T:Microsoft.AspNetCore.Identity.IPasswordValidator`1" /> used to validate passwords.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RedeemTwoFactorRecoveryCodeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; RedeemTwoFactorRecoveryCodeAsync (TUser user, string code);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; RedeemTwoFactorRecoveryCodeAsync(!TUser user, string code) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.RedeemTwoFactorRecoveryCodeAsync(`0,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;RedeemTwoFactorRecoveryCodeAsync&gt;d__153))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="code" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="user">The user who owns the recovery code.</param>
        <param name="code">The recovery code to use.</param>
        <summary>
            Returns whether a recovery code is valid for a user. Note: recovery codes are only valid
            once, and will be invalid after use.
            </summary>
        <returns>True if the recovery code was found for the user.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterTokenProvider">
      <MemberSignature Language="C#" Value="public virtual void RegisterTokenProvider (string providerName, Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider&lt;TUser&gt; provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterTokenProvider(string providerName, class Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1&lt;!TUser&gt; provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.RegisterTokenProvider(System.String,Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider{`0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="providerName" Type="System.String" />
        <Parameter Name="provider" Type="Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider&lt;TUser&gt;" />
      </Parameters>
      <Docs>
        <param name="providerName">The name of the provider to register.</param>
        <param name="provider">The provider to register.</param>
        <summary>
            Registers a token provider.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuthenticationTokenAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; RemoveAuthenticationTokenAsync (TUser user, string loginProvider, string tokenName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; RemoveAuthenticationTokenAsync(!TUser user, string loginProvider, string tokenName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.RemoveAuthenticationTokenAsync(`0,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;RemoveAuthenticationTokenAsync&gt;d__147))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="loginProvider" Type="System.String" />
        <Parameter Name="tokenName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="user"></param>
        <param name="loginProvider">The authentication scheme for the provider the token is associated with.</param>
        <param name="tokenName">The name of the token.</param>
        <summary>
            Remove an authentication token for a user.
            </summary>
        <returns>Whether a token was removed.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveClaimAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; RemoveClaimAsync (TUser user, System.Security.Claims.Claim claim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; RemoveClaimAsync(!TUser user, class System.Security.Claims.Claim claim) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.RemoveClaimAsync(`0,System.Security.Claims.Claim)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="claim" Type="System.Security.Claims.Claim" />
      </Parameters>
      <Docs>
        <param name="user">The user to remove the specified <paramref name="claim" /> from.</param>
        <param name="claim">The <see cref="T:System.Security.Claims.Claim" /> to remove.</param>
        <summary>
            Removes the specified <paramref name="claim" /> from the given <paramref name="user" />.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" />
            of the operation.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveClaimsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; RemoveClaimsAsync (TUser user, System.Collections.Generic.IEnumerable&lt;System.Security.Claims.Claim&gt; claims);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; RemoveClaimsAsync(!TUser user, class System.Collections.Generic.IEnumerable`1&lt;class System.Security.Claims.Claim&gt; claims) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;RemoveClaimsAsync&gt;d__102))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="claims" Type="System.Collections.Generic.IEnumerable&lt;System.Security.Claims.Claim&gt;" />
      </Parameters>
      <Docs>
        <param name="user">The user to remove the specified <paramref name="claims" /> from.</param>
        <param name="claims">A collection of <see cref="T:System.Security.Claims.Claim" />s to remove.</param>
        <summary>
            Removes the specified <paramref name="claims" /> from the given <paramref name="user" />.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" />
            of the operation.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFromRoleAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; RemoveFromRoleAsync (TUser user, string role);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; RemoveFromRoleAsync(!TUser user, string role) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.RemoveFromRoleAsync(`0,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;RemoveFromRoleAsync&gt;d__106))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="role" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="user">The user to remove from the named role.</param>
        <param name="role">The name of the role to remove the user from.</param>
        <summary>
            Removes the specified <paramref name="user" /> from the named role.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" />
            of the operation.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFromRolesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; RemoveFromRolesAsync (TUser user, System.Collections.Generic.IEnumerable&lt;string&gt; roles);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; RemoveFromRolesAsync(!TUser user, class System.Collections.Generic.IEnumerable`1&lt;string&gt; roles) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.RemoveFromRolesAsync(`0,System.Collections.Generic.IEnumerable{System.String})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;RemoveFromRolesAsync&gt;d__109))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="roles" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="user">The user to remove from the named roles.</param>
        <param name="roles">The name of the roles to remove the user from.</param>
        <summary>
            Removes the specified <paramref name="user" /> from the named roles.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" />
            of the operation.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveLoginAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; RemoveLoginAsync (TUser user, string loginProvider, string providerKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; RemoveLoginAsync(!TUser user, string loginProvider, string providerKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.RemoveLoginAsync(`0,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;RemoveLoginAsync&gt;d__95))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="loginProvider" Type="System.String" />
        <Parameter Name="providerKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="user">The user to remove the login information from.</param>
        <param name="loginProvider">The login provide whose information should be removed.</param>
        <param name="providerKey">The key given by the external login provider for the specified user.</param>
        <summary>
            Attempts to remove the provided external login information from the specified <paramref name="user" />.
            and returns a flag indicating whether the removal succeed or not.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" />
            of the operation.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePasswordAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; RemovePasswordAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; RemovePasswordAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.RemovePasswordAsync(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;RemovePasswordAsync&gt;d__88))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
      </Parameters>
      <Docs>
        <param name="user">The user whose password should be removed.</param>
        <summary>
            Removes a user's password.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" />
            of the operation.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePasswordAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; RemovePasswordAsync (TUser user, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; RemovePasswordAsync(!TUser user, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.RemovePasswordAsync(`0,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;RemovePasswordAsync&gt;d__83))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="user">The user whose password should be removed.</param>
        <param name="cancellationToken">The <see cref="P:Microsoft.AspNetCore.Identity.UserManager`1.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Removes a user's password.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" />
            of the operation.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceClaimAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; ReplaceClaimAsync (TUser user, System.Security.Claims.Claim claim, System.Security.Claims.Claim newClaim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; ReplaceClaimAsync(!TUser user, class System.Security.Claims.Claim claim, class System.Security.Claims.Claim newClaim) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;ReplaceClaimAsync&gt;d__100))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="claim" Type="System.Security.Claims.Claim" />
        <Parameter Name="newClaim" Type="System.Security.Claims.Claim" />
      </Parameters>
      <Docs>
        <param name="user">The user to replace the claim on.</param>
        <param name="claim">The claim to replace.</param>
        <param name="newClaim">The new claim to replace the existing <paramref name="claim" /> with.</param>
        <summary>
            Replaces the given <paramref name="claim" /> on the specified <paramref name="user" /> with the <paramref name="newClaim" /></summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" />
            of the operation.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetAccessFailedCountAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; ResetAccessFailedCountAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; ResetAccessFailedCountAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.ResetAccessFailedCountAsync(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;ResetAccessFailedCountAsync&gt;d__141))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
      </Parameters>
      <Docs>
        <param name="user">The user whose failed access count should be reset.</param>
        <summary>
            Resets the access failed count for the specified <paramref name="user" />.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" /> of the operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetAuthenticatorKeyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; ResetAuthenticatorKeyAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; ResetAuthenticatorKeyAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.ResetAuthenticatorKeyAsync(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;ResetAuthenticatorKeyAsync&gt;d__149))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
      </Parameters>
      <Docs>
        <param name="user">The user.</param>
        <summary>
            Resets the authenticator key for the user.
            </summary>
        <returns>Whether the user was successfully updated.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetPasswordAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; ResetPasswordAsync (TUser user, string token, string newPassword);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; ResetPasswordAsync(!TUser user, string token, string newPassword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.ResetPasswordAsync(`0,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;ResetPasswordAsync&gt;d__93))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="token" Type="System.String" />
        <Parameter Name="newPassword" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="user">The user whose password should be reset.</param>
        <param name="token">The password reset token to verify.</param>
        <param name="newPassword">The new password to set if reset token verification fails.</param>
        <summary>
            Resets the <paramref name="user" />'s password to the specified <paramref name="newPassword" /> after
            validating the given password reset <paramref name="token" />.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" />
            of the operation.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetPasswordTokenPurpose">
      <MemberSignature Language="C#" Value="protected const string ResetPasswordTokenPurpose;" />
      <MemberSignature Language="ILAsm" Value=".field family static literal string ResetPasswordTokenPurpose" />
      <MemberSignature Language="DocId" Value="F:Microsoft.AspNetCore.Identity.UserManager`1.ResetPasswordTokenPurpose" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The data protection purpose used for the reset password related methods.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAuthenticationTokenAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; SetAuthenticationTokenAsync (TUser user, string loginProvider, string tokenName, string tokenValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; SetAuthenticationTokenAsync(!TUser user, string loginProvider, string tokenName, string tokenValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.SetAuthenticationTokenAsync(`0,System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;SetAuthenticationTokenAsync&gt;d__146))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="loginProvider" Type="System.String" />
        <Parameter Name="tokenName" Type="System.String" />
        <Parameter Name="tokenValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="user"></param>
        <param name="loginProvider">The authentication scheme for the provider the token is associated with.</param>
        <param name="tokenName">The name of the token.</param>
        <param name="tokenValue">The value of the token.</param>
        <summary>
            Sets an authentication token for a user.
            </summary>
        <returns>Whether the user was successfully updated.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetEmailAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; SetEmailAsync (TUser user, string email);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; SetEmailAsync(!TUser user, string email) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.SetEmailAsync(`0,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;SetEmailAsync&gt;d__113))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="email" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="user">The user whose email should be set.</param>
        <param name="email">The email to set.</param>
        <summary>
            Sets the <paramref name="email" /> address for a <paramref name="user" />.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" />
            of the operation.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLockoutEnabledAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; SetLockoutEnabledAsync (TUser user, bool enabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; SetLockoutEnabledAsync(!TUser user, bool enabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.SetLockoutEnabledAsync(`0,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;SetLockoutEnabledAsync&gt;d__136))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="enabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="user">The user whose locked out status should be set.</param>
        <param name="enabled">Flag indicating whether the user is locked out or not.</param>
        <summary>
            Sets a flag indicating whether the specified <paramref name="user" /> is locked out,
            as an asynchronous operation.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" /> of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLockoutEndDateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; SetLockoutEndDateAsync (TUser user, Nullable&lt;DateTimeOffset&gt; lockoutEnd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; SetLockoutEndDateAsync(!TUser user, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; lockoutEnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;SetLockoutEndDateAsync&gt;d__139))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="lockoutEnd" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
      </Parameters>
      <Docs>
        <param name="user">The user whose lockout date should be set.</param>
        <param name="lockoutEnd">The <see cref="T:System.DateTimeOffset" /> after which the <paramref name="user" />'s lockout should end.</param>
        <summary>
            Locks out a user until the specified end date has passed. Setting a end date in the past immediately unlocks a user.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" /> of the operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPhoneNumberAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; SetPhoneNumberAsync (TUser user, string phoneNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; SetPhoneNumberAsync(!TUser user, string phoneNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.SetPhoneNumberAsync(`0,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;SetPhoneNumberAsync&gt;d__122))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="phoneNumber" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="user">The user whose phone number to set.</param>
        <param name="phoneNumber">The phone number to set.</param>
        <summary>
            Sets the phone number for the specified <paramref name="user" />.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" />
            of the operation.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTwoFactorEnabledAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; SetTwoFactorEnabledAsync (TUser user, bool enabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; SetTwoFactorEnabledAsync(!TUser user, bool enabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.SetTwoFactorEnabledAsync(`0,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;SetTwoFactorEnabledAsync&gt;d__134))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="enabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="user">The user whose two factor authentication enabled status should be set.</param>
        <param name="enabled">A flag indicating whether the specified <paramref name="user" /> has two factor authentication enabled.</param>
        <summary>
            Sets a flag indicating whether the specified <paramref name="user" /> has two factor authentication enabled or not,
            as an asynchronous operation.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" /> of the operation
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetUserNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; SetUserNameAsync (TUser user, string userName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; SetUserNameAsync(!TUser user, string userName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.SetUserNameAsync(`0,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;SetUserNameAsync&gt;d__82))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="userName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="user">The user whose name should be set.</param>
        <param name="userName">The user name to set.</param>
        <summary>
            Sets the given <paramref name="userName" /> for the specified <paramref name="user" />.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Store">
      <MemberSignature Language="C#" Value="protected Microsoft.AspNetCore.Identity.IUserStore&lt;TUser&gt; Store { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.AspNetCore.Identity.IUserStore`1&lt;!TUser&gt; Store" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.UserManager`1.Store" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Identity.IUserStore&lt;TUser&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the persistence store the manager operates over.
            </summary>
        <value>The persistence store the manager operates over.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsQueryableUsers">
      <MemberSignature Language="C#" Value="public virtual bool SupportsQueryableUsers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsQueryableUsers" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.UserManager`1.SupportsQueryableUsers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a flag indicating whether the backing user store supports returning
            <see cref="T:System.Linq.IQueryable" /> collections of information.
            </summary>
        <value>
            true if the backing user store supports returning <see cref="T:System.Linq.IQueryable" /> collections of
            information, otherwise false.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsUserAuthenticationTokens">
      <MemberSignature Language="C#" Value="public virtual bool SupportsUserAuthenticationTokens { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsUserAuthenticationTokens" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserAuthenticationTokens" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a flag indicating whether the backing user store supports authentication tokens.
            </summary>
        <value>
            true if the backing user store supports authentication tokens, otherwise false.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsUserAuthenticatorKey">
      <MemberSignature Language="C#" Value="public virtual bool SupportsUserAuthenticatorKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsUserAuthenticatorKey" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserAuthenticatorKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a flag indicating whether the backing user store supports a user authenticator.
            </summary>
        <value>
            true if the backing user store supports a user authenticatior, otherwise false.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsUserClaim">
      <MemberSignature Language="C#" Value="public virtual bool SupportsUserClaim { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsUserClaim" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserClaim" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a flag indicating whether the backing user store supports user claims.
            </summary>
        <value>
            true if the backing user store supports user claims, otherwise false.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsUserEmail">
      <MemberSignature Language="C#" Value="public virtual bool SupportsUserEmail { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsUserEmail" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserEmail" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a flag indicating whether the backing user store supports user emails.
            </summary>
        <value>
            true if the backing user store supports user emails, otherwise false.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsUserLockout">
      <MemberSignature Language="C#" Value="public virtual bool SupportsUserLockout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsUserLockout" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserLockout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a flag indicating whether the backing user store supports user lock-outs.
            </summary>
        <value>
            true if the backing user store supports user lock-outs, otherwise false.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsUserLogin">
      <MemberSignature Language="C#" Value="public virtual bool SupportsUserLogin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsUserLogin" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserLogin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a flag indicating whether the backing user store supports external logins.
            </summary>
        <value>
            true if the backing user store supports external logins, otherwise false.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsUserPassword">
      <MemberSignature Language="C#" Value="public virtual bool SupportsUserPassword { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsUserPassword" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserPassword" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a flag indicating whether the backing user store supports user passwords.
            </summary>
        <value>
            true if the backing user store supports user passwords, otherwise false.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsUserPhoneNumber">
      <MemberSignature Language="C#" Value="public virtual bool SupportsUserPhoneNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsUserPhoneNumber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserPhoneNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a flag indicating whether the backing user store supports user telephone numbers.
            </summary>
        <value>
            true if the backing user store supports user telephone numbers, otherwise false.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsUserRole">
      <MemberSignature Language="C#" Value="public virtual bool SupportsUserRole { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsUserRole" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserRole" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a flag indicating whether the backing user store supports user roles.
            </summary>
        <value>
            true if the backing user store supports user roles, otherwise false.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsUserSecurityStamp">
      <MemberSignature Language="C#" Value="public virtual bool SupportsUserSecurityStamp { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsUserSecurityStamp" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserSecurityStamp" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a flag indicating whether the backing user store supports security stamps.
            </summary>
        <value>
            true if the backing user store supports user security stamps, otherwise false.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsUserTwoFactor">
      <MemberSignature Language="C#" Value="public virtual bool SupportsUserTwoFactor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsUserTwoFactor" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserTwoFactor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a flag indicating whether the backing user store supports two factor authentication.
            </summary>
        <value>
            true if the backing user store supports user two factor authentication, otherwise false.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsUserTwoFactorRecoveryCodes">
      <MemberSignature Language="C#" Value="public virtual bool SupportsUserTwoFactorRecoveryCodes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsUserTwoFactorRecoveryCodes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserTwoFactorRecoveryCodes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a flag indicating whether the backing user store supports recovery codes.
            </summary>
        <value>
            true if the backing user store supports a user authenticatior, otherwise false.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThrowIfDisposed">
      <MemberSignature Language="C#" Value="protected void ThrowIfDisposed ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ThrowIfDisposed() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.ThrowIfDisposed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Throws if this class has been disposed.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; UpdateAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; UpdateAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.UpdateAsync(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
      </Parameters>
      <Docs>
        <param name="user">The user to update.</param>
        <summary>
            Updates the specified <paramref name="user" /> in the backing store.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" />
            of the operation.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateNormalizedEmailAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UpdateNormalizedEmailAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UpdateNormalizedEmailAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.UpdateNormalizedEmailAsync(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;UpdateNormalizedEmailAsync&gt;d__115))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
      </Parameters>
      <Docs>
        <param name="user">The user whose email address should be normalized and updated.</param>
        <summary>
            Updates the normalized email for the specified <paramref name="user" />.
            </summary>
        <returns>The task object representing the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateNormalizedUserNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UpdateNormalizedUserNameAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UpdateNormalizedUserNameAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.UpdateNormalizedUserNameAsync(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;UpdateNormalizedUserNameAsync&gt;d__80))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
      </Parameters>
      <Docs>
        <param name="user">The user whose user name should be normalized and updated.</param>
        <summary>
            Updates the normalized user name for the specified <paramref name="user" />.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateSecurityStampAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; UpdateSecurityStampAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; UpdateSecurityStampAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.UpdateSecurityStampAsync(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;UpdateSecurityStampAsync&gt;d__91))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
      </Parameters>
      <Docs>
        <param name="user">The user whose security stamp should be regenerated.</param>
        <summary>
            Regenerates the security stamp for the specified <paramref name="user" />.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" />
            of the operation.
            </returns>
        <remarks>
            Regenerating a security stamp will sign out any saved login for the user.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Users">
      <MemberSignature Language="C#" Value="public virtual System.Linq.IQueryable&lt;TUser&gt; Users { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.IQueryable`1&lt;!TUser&gt; Users" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.UserManager`1.Users" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TUser&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Returns an IQueryable of users if the store is an IQueryableUserStore
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserValidators">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Identity.IUserValidator&lt;TUser&gt;&gt; UserValidators { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class Microsoft.AspNetCore.Identity.IUserValidator`1&lt;!TUser&gt;&gt; UserValidators" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.UserManager`1.UserValidators" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Identity.IUserValidator&lt;TUser&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The <see cref="T:Microsoft.AspNetCore.Identity.IUserValidator`1" /> used to validate users.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyChangePhoneNumberTokenAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; VerifyChangePhoneNumberTokenAsync (TUser user, string token, string phoneNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; VerifyChangePhoneNumberTokenAsync(!TUser user, string token, string phoneNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.VerifyChangePhoneNumberTokenAsync(`0,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="token" Type="System.String" />
        <Parameter Name="phoneNumber" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="user">The user to validate the token against.</param>
        <param name="token">The telephone number change token to validate.</param>
        <param name="phoneNumber">The telephone number the token was generated for.</param>
        <summary>
            Returns a flag indicating whether the specified <paramref name="user" />'s phone number change verification
            token is valid for the given <paramref name="phoneNumber" />.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, returning true if the <paramref name="token" />
            is valid, otherwise false.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyPasswordAsync">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.PasswordVerificationResult&gt; VerifyPasswordAsync (Microsoft.AspNetCore.Identity.IUserPasswordStore&lt;TUser&gt; store, TUser user, string password);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Microsoft.AspNetCore.Identity.PasswordVerificationResult&gt; VerifyPasswordAsync(class Microsoft.AspNetCore.Identity.IUserPasswordStore`1&lt;!TUser&gt; store, !TUser user, string password) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.VerifyPasswordAsync(Microsoft.AspNetCore.Identity.IUserPasswordStore{`0},`0,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;VerifyPasswordAsync&gt;d__89))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.PasswordVerificationResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="store" Type="Microsoft.AspNetCore.Identity.IUserPasswordStore&lt;TUser&gt;" />
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="store">The store containing a user's password.</param>
        <param name="user">The user whose password should be verified.</param>
        <param name="password">The password to verify.</param>
        <summary>
            Returns a <see cref="T:Microsoft.AspNetCore.Identity.PasswordVerificationResult" /> indicating the result of a password hash comparison.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.PasswordVerificationResult" />
            of the operation.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyTwoFactorTokenAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; VerifyTwoFactorTokenAsync (TUser user, string tokenProvider, string token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; VerifyTwoFactorTokenAsync(!TUser user, string tokenProvider, string token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.VerifyTwoFactorTokenAsync(`0,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;VerifyTwoFactorTokenAsync&gt;d__131))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="tokenProvider" Type="System.String" />
        <Parameter Name="token" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="user">The user the token is supposed to be for.</param>
        <param name="tokenProvider">The provider which will verify the token.</param>
        <param name="token">The token to verify.</param>
        <summary>
            Verifies the specified two factor authentication <paramref name="token" /> against the <paramref name="user" />.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents result of the asynchronous operation, true if the token is valid,
            otherwise false.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyUserTokenAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; VerifyUserTokenAsync (TUser user, string tokenProvider, string purpose, string token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; VerifyUserTokenAsync(!TUser user, string tokenProvider, string purpose, string token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.UserManager`1.VerifyUserTokenAsync(`0,System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Identity.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.AspNetCore.Identity.UserManager`1/&lt;VerifyUserTokenAsync&gt;d__127))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="tokenProvider" Type="System.String" />
        <Parameter Name="purpose" Type="System.String" />
        <Parameter Name="token" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="user">The user to validate the token against.</param>
        <param name="tokenProvider">The token provider used to generate the token.</param>
        <param name="purpose">The purpose the token should be generated for.</param>
        <param name="token">The token to validate</param>
        <summary>
            Returns a flag indicating whether the specified <paramref name="token" /> is valid for
            the given <paramref name="user" /> and <paramref name="purpose" />.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, returning true if the <paramref name="token" />
            is valid, otherwise false.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>