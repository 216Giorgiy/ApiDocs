<Overview>
  <Assemblies>
    <Assembly Name="Microsoft.AspNetCore.WebSockets.Protocol" Version="0.1.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Managed web socket protocol parser.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("0.1.0.20622")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("0.1.0-rtm-21431")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "fc2f0e480ea9e1451e1dd57824b187a5c840ae17")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Net.WebSockets")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-us")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.Guid("9a9e41ae-1494-4d87-a66f-a4019ff68ce5")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v1.3")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.WebSockets.Server" Version="0.1.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET 5 web socket middleware for use on top of opaque servers.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("0.1.0.20622")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("0.1.0-rtm-21431")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "fc2f0e480ea9e1451e1dd57824b187a5c840ae17")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-us")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v1.3")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Net.WebSockets.Server" Version="0.1.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Implementation of WebSocket abstract base class. Used by WebListener.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("0.1.0.20622")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("0.1.0-rtm-21431")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "3e80775179fe59b6f6a8410beb0dcc6616d8c1d6")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-us")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v1.3")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Buffering" Version="0.2.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core middleware for buffering response bodies.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("0.2.0.21115")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("0.2.0-rtm-22752")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "4a422dba9b5be58137f099a7f10040795a4034cf")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-us")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v1.3")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Diagnostics.Elm" Version="0.2.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core Error Logging Middleware (ELM) to capture and display request logs.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("0.2.0.21115")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("0.2.0-rtm-22752")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "3a319f41476ac8df206bf5f69f58144973e551e7")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v1.3")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Mvc.Razor.Host" Version="1.1.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core MVC design time hosting infrastructure for the Razor view engine.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("1.1.0.21115")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("1.1.0-rtm-22752")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "66859fa10758a512a61bdbd151daa0cf1828a013")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-us")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Mvc.Razor.Host.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v1.6")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Proxy" Version="0.2.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Proxy Library")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("0.2.0.21115")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("0.2.0-rtm-22752")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "c95f82660c251d24b5fa2a79238133ecdd8a8135")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v1.3")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Server.WebListener" Version="1.1.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core HTTP server for Windows.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("1.1.0.21115")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("1.1.0-rtm-22752")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "8414a65f6bafcbe896852b59d6dd485919902d37")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-us")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Server.WebListener.FunctionalTests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v1.3")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.CommandLineUtils" Version="1.1.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Command-line parsing API. Commonly used types:\r\nMicrosoft.Extensions.CommandLineUtils.CommandLineApplication\r\nMicrosoft.Extensions.CommandLineUtils.CommandOption")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("1.1.0.21115")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("1.1.0-rtm-22752")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "5e17a9bf56a7a5a6032df277b350d7736662e903")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-us")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v1.3")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.Globalization.CultureInfoCache" Version="1.1.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Provides cached instances of CultureInfo using a generated list of known culture names for use in scenarios where unbounded CultureInfo creation is undesirable.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("1.1.0.21115")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("1.1.0-rtm-22752")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "4e6dc0c3fe6a597882d4971c924b5f682faac548")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-us")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v1.1")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.Logging.Filter" Version="1.1.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Provides a common way to filter log messages across all registered logger providers.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("1.1.0.21115")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("1.1.0-rtm-22752")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "7922a1add1c00d5cbbf6cda9da09750448ffe05e")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-us")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v1.1")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.PlatformAbstractions" Version="1.1.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Abstractions that unify behavior and API across .NET Framework, .NET Core and Mono")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("1.1.0.21115")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("1.1.0-rtm-22752")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "42fb58ff42c87a0ff4341fe67dc331e85c122af7")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v1.3")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Net.Http.Server" Version="1.1.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription(".NET HTTP server that uses the Windows HTTP Server API.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("1.1.0.21115")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("1.1.0-rtm-22752")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "8414a65f6bafcbe896852b59d6dd485919902d37")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-us")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v1.3")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Antiforgery" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("An antiforgery system for ASP.NET Core designed to generate and validate tokens to prevent Cross-Site Request Forgery attacks.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "e2a4591384cdb8a9cd10f26b6f0f7046c4a78842")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Antiforgery")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("DynamicProxyGenAssembly2, PublicKey=0024000004800000940000000602000000240000525341310004000001000100c547cac37abd99c8db225ef2f6c8a3602f3b3606cc9891605d02baa56104f4cfc0734aa39b93bf7852f7d9266654753cc297e7d2edfe0bac1cdcf9f717241550e0a7b191195b7667bb4f64bcb8e2121380fd1d9d46ad2d92d2d15605093924cceaf74c4861eff62abf69b9291ed0a340e113be11e6a7d3113e92484cf7045cc7")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Antiforgery.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.ApplicationInsights.HostingStartup" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.AspNetCore.Hosting.HostingStartup(typeof(Microsoft.AspNetCore.ApplicationInsights.HostingStartup.ApplicationInsightsHostingStartup))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core lightup integration with Application Insights.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "bf0e2bca5e7e80e105539c65fcca6b3255bd22dd")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.ApplicationInsights.HostingStartup")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.6.1", FrameworkDisplayName=".NET Framework 4.6.1")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Authentication.Abstractions" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core common types used by the various authentication components.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "ab2a16f0a6b646a94086ca1178ef55d9780ce5af")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Authentication.Abstractions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Authentication.Cookies" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core middleware that enables an application to use cookie based authentication.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "869d98e28d60b49063af8bdcb7a16742b983994b")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Authentication.Cookies")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Authentication.Core" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core common types used by the various authentication middleware components.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "ab2a16f0a6b646a94086ca1178ef55d9780ce5af")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Authentication.Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Authentication" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core common types used by the various authentication middleware components.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "869d98e28d60b49063af8bdcb7a16742b983994b")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Authentication")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Authentication.Facebook" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core middleware that enables an application to support Facebook's OAuth 2.0 authentication workflow.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "869d98e28d60b49063af8bdcb7a16742b983994b")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Authentication.Facebook")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Authentication.Google" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core contains middleware to support Google's OpenId and OAuth 2.0 authentication workflows.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "869d98e28d60b49063af8bdcb7a16742b983994b")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Authentication.Google")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Authentication.JwtBearer" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core middleware that enables an application to receive an OpenID Connect bearer token.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "869d98e28d60b49063af8bdcb7a16742b983994b")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Authentication.JwtBearer")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Authentication.MicrosoftAccount" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core middleware that enables an application to support the Microsoft Account authentication workflow.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "869d98e28d60b49063af8bdcb7a16742b983994b")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Authentication.MicrosoftAccount")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Authentication.OAuth" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core middleware that enables an application to support any standard OAuth 2.0 authentication workflow.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "869d98e28d60b49063af8bdcb7a16742b983994b")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Authentication.OAuth")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Authentication.OpenIdConnect" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core middleware that enables an application to support the OpenID Connect authentication workflow.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "869d98e28d60b49063af8bdcb7a16742b983994b")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Authentication.OpenIdConnect")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Authentication.Twitter" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core middleware that enables an application to support Twitter's OAuth 1.0 authentication workflow.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "869d98e28d60b49063af8bdcb7a16742b983994b")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Authentication.Twitter")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Authorization" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core authorization classes.\nCommonly used types:\nMicrosoft.AspNetCore.Authorization.AllowAnonymousAttribute\nMicrosoft.AspNetCore.Authorization.AuthorizeAttribute")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "869d98e28d60b49063af8bdcb7a16742b983994b")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Authorization")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Authorization.Policy" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core authorization policy helper classes.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "869d98e28d60b49063af8bdcb7a16742b983994b")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Authorization.Policy")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.AzureAppServices.HostingStartup" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.AspNetCore.Hosting.HostingStartup(typeof(Microsoft.AspNetCore.AzureAppServices.HostingStartup.AzureAppServicesHostingStartup))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core lightup integration with Azure AppServices.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "bf0e2bca5e7e80e105539c65fcca6b3255bd22dd")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.AzureAppServices.HostingStartup")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.6.1", FrameworkDisplayName=".NET Framework 4.6.1")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.AzureAppServicesIntegration" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core integration with Azure AppServices.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "bf0e2bca5e7e80e105539c65fcca6b3255bd22dd")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.AzureAppServicesIntegration")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Hosting.Azure.AppServices.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.CookiePolicy" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core cookie policy classes to control the behavior of cookies.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "869d98e28d60b49063af8bdcb7a16742b983994b")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.CookiePolicy")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Cors" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("CORS middleware and policy for ASP.NET Core to enable cross-origin resource sharing.\nCommonly used types:\nMicrosoft.AspNetCore.Cors.DisableCorsAttribute\nMicrosoft.AspNetCore.Cors.EnableCorsAttribute")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "e6d73c4fafa73e78db0234d32e2bb0e197791e13")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Cors")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Cors.Test,PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Cryptography.Internal" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Infrastructure for ASP.NET Core cryptographic packages. Applications and libraries should not reference this package directly.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "806ba70a6af7b53f228c6db2796a33205978adc0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Cryptography.Internal")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Cryptography.Internal.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Cryptography.KeyDerivation, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Cryptography.KeyDerivation.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.DataProtection, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.DataProtection.Abstractions.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.DataProtection.Extensions.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.DataProtection.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Cryptography.KeyDerivation" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core utilities for key derivation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "806ba70a6af7b53f228c6db2796a33205978adc0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Cryptography.KeyDerivation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Cryptography.KeyDerivation.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.DataProtection.Abstractions" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core data protection abstractions.\nCommonly used types:\nMicrosoft.AspNetCore.DataProtection.IDataProtectionProvider\nMicrosoft.AspNetCore.DataProtection.IDataProtector")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "806ba70a6af7b53f228c6db2796a33205978adc0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.DataProtection.Abstractions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.DataProtection.Abstractions.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.DataProtection.AzureStorage" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Microsoft Azure Blob storrage support as key store.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "806ba70a6af7b53f228c6db2796a33205978adc0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.DataProtection.AzureStorage")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.DataProtection" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core logic to protect and unprotect data, similar to DPAPI.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "806ba70a6af7b53f228c6db2796a33205978adc0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.DataProtection")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.DataProtection.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("DynamicProxyGenAssembly2, PublicKey=0024000004800000940000000602000000240000525341310004000001000100c547cac37abd99c8db225ef2f6c8a3602f3b3606cc9891605d02baa56104f4cfc0734aa39b93bf7852f7d9266654753cc297e7d2edfe0bac1cdcf9f717241550e0a7b191195b7667bb4f64bcb8e2121380fd1d9d46ad2d92d2d15605093924cceaf74c4861eff62abf69b9291ed0a340e113be11e6a7d3113e92484cf7045cc7")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.DataProtection.Extensions" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Additional APIs for ASP.NET Core data protection.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "806ba70a6af7b53f228c6db2796a33205978adc0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.DataProtection.Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.DataProtection.Extensions.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.DataProtection.Redis" Version="0.3.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Redis storage support as key store.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("0.3.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("0.3.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "806ba70a6af7b53f228c6db2796a33205978adc0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.DataProtection.Redis")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.DataProtection.SystemWeb" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("A component to allow the ASP.NET Core data protection stack to work with the ASP.NET 4.x &lt;machineKey&gt; element.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "806ba70a6af7b53f228c6db2796a33205978adc0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.DataProtection.SystemWeb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.6.1", FrameworkDisplayName=".NET Framework 4.6.1")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Diagnostics.Abstractions" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core diagnostics middleware abstractions and feature interface definitions.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "33982b308f4c4c26a057cca07f5bd1dccdaf5426")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Diagnostics.Abstractions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Diagnostics" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core middleware for exception handling, exception display pages, and diagnostics information. Includes developer exception page middleware, exception handler middleware, runtime info middleware, status code page middleware, and welcome page middleware")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "33982b308f4c4c26a057cca07f5bd1dccdaf5426")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Diagnostics")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Diagnostics.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("DynamicProxyGenAssembly2, PublicKey=0024000004800000940000000602000000240000525341310004000001000100c547cac37abd99c8db225ef2f6c8a3602f3b3606cc9891605d02baa56104f4cfc0734aa39b93bf7852f7d9266654753cc297e7d2edfe0bac1cdcf9f717241550e0a7b191195b7667bb4f64bcb8e2121380fd1d9d46ad2d92d2d15605093924cceaf74c4861eff62abf69b9291ed0a340e113be11e6a7d3113e92484cf7045cc7")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Microsoft.AspNetCore")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "819ee5faafc5c6c258d683bbb9bed6aebcfb717a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Hosting.Abstractions" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core hosting and startup abstractions for web applications.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "ff547c46a0276419ec7b29c056252f70a078fbaf")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Hosting.Abstractions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Hosting" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core hosting infrastructure and startup logic for web applications.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "ff547c46a0276419ec7b29c056252f70a078fbaf")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Hosting")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Hosting.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Hosting.Server.Abstractions" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core hosting server abstractions for web applications.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "ff547c46a0276419ec7b29c056252f70a078fbaf")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Hosting.Server.Abstractions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Hosting.WindowsServices" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core hosting infrastructure and startup logic for web applications running within a Windows service.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "ff547c46a0276419ec7b29c056252f70a078fbaf")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Hosting.WindowsServices")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.6.1", FrameworkDisplayName=".NET Framework 4.6.1")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Html.Abstractions" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core HTML abstractions used for building HTML content.\nCommonly used types:\nMicrosoft.AspNetCore.Html.HtmlString\nMicrosoft.AspNetCore.Html.IHtmlContent")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "1fbbf5e72ff21df8418224b2d4ecd07ff3fcbefd")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Html.Abstractions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Html.Abstractions.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Http.Abstractions" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core HTTP object model for HTTP requests and responses and also common extension methods for registering middleware in an IApplicationBuilder.\nCommonly used types:\nMicrosoft.AspNetCore.Builder.IApplicationBuilder\nMicrosoft.AspNetCore.Http.HttpContext\nMicrosoft.AspNetCore.Http.HttpRequest\nMicrosoft.AspNetCore.Http.HttpResponse")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "ab2a16f0a6b646a94086ca1178ef55d9780ce5af")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Http.Abstractions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Http.Abstractions.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Http" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core default HTTP feature implementations.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "ab2a16f0a6b646a94086ca1178ef55d9780ce5af")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Http")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Http.Extensions" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core common extension methods for HTTP abstractions, HTTP headers, HTTP request/response, and session state.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "ab2a16f0a6b646a94086ca1178ef55d9780ce5af")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Http.Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Http.Features" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core HTTP feature interface definitions.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "ab2a16f0a6b646a94086ca1178ef55d9780ce5af")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Http.Features")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.HttpOverrides" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core basic middleware for supporting HTTP method overrides. Includes:\n* X-Forwarded-* headers to forward headers from a proxy.\n* HTTP method override header.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "34eec6c9488ab4c6d3ac55d69fdd65c83d500706")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.HttpOverrides")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Identity" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core Identity is the membership system for building ASP.NET Core web applications, including membership, login, and user data. ASP.NET Core Identity allows you to add login features to your application and makes it easy to customize data about the logged in user.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "3f756adac375b6e9ff9b4c570a560725bb47c136")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Identity")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Identity.Specification.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Identity.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Identity.EntityFrameworkCore.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Identity.EntityFrameworkCore.InMemory.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Identity.InMemory.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Identity.EntityFrameworkCore" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core Identity provider that uses Entity Framework Core.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "3f756adac375b6e9ff9b4c570a560725bb47c136")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Identity.EntityFrameworkCore")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Identity.Specification.Tests" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Shared test suite for Asp.Net Identity Core store implementations.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "3f756adac375b6e9ff9b4c570a560725bb47c136")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Identity.Specification.Tests")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.JsonPatch" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core support for JSON PATCH.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "1481037d6ec436fd6d290bef5deeb115099d96e1")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.JsonPatch")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Localization" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core middleware for automatically applying culture information to HTTP requests. Culture information can be specified in the HTTP header, query string, cookie, or custom source.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "8d667c61dd08eca4d4bfbd191eb6fddbcc9c99a0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Localization")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Localization.Routing" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Provides a request culture provider which gets culture and ui-culture from request's route data.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "8d667c61dd08eca4d4bfbd191eb6fddbcc9c99a0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Localization.Routing")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.MiddlewareAnalysis" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core middleware for analyzing middleware in the request pipeline with System.Diagnostics.DiagnosticSource.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "33982b308f4c4c26a057cca07f5bd1dccdaf5426")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.MiddlewareAnalysis")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Mvc.Abstractions" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core MVC abstractions and interfaces for action invocation and dispatching, authorization, action filters, formatters, model binding, routing, validation, and more.\nCommonly used types:\nMicrosoft.AspNetCore.Mvc.IActionResult")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "dea8a87589b14a60e56acc892130115f87567807")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core MVC")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Mvc.Abstractions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Mvc.Abstractions.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("DynamicProxyGenAssembly2, PublicKey=0024000004800000940000000602000000240000525341310004000001000100c547cac37abd99c8db225ef2f6c8a3602f3b3606cc9891605d02baa56104f4cfc0734aa39b93bf7852f7d9266654753cc297e7d2edfe0bac1cdcf9f717241550e0a7b191195b7667bb4f64bcb8e2121380fd1d9d46ad2d92d2d15605093924cceaf74c4861eff62abf69b9291ed0a340e113be11e6a7d3113e92484cf7045cc7")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Mvc.ApiExplorer" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core MVC API explorer functionality for discovering metadata such as the list of controllers and actions, and their URLs and allowed HTTP methods.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "dea8a87589b14a60e56acc892130115f87567807")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core MVC")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Mvc.ApiExplorer")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Mvc.Core" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core MVC core components. Contains common action result types, attribute routing, application model conventions, API explorer, application parts, filters, formatters, model binding, and more.\nCommonly used types:\nMicrosoft.AspNetCore.Mvc.AreaAttribute\nMicrosoft.AspNetCore.Mvc.BindAttribute\nMicrosoft.AspNetCore.Mvc.ControllerBase\nMicrosoft.AspNetCore.Mvc.FromBodyAttribute\nMicrosoft.AspNetCore.Mvc.FromFormAttribute\nMicrosoft.AspNetCore.Mvc.RequireHttpsAttribute\nMicrosoft.AspNetCore.Mvc.RouteAttribute")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "dea8a87589b14a60e56acc892130115f87567807")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core MVC")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Mvc.Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Mvc.Core.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("DynamicProxyGenAssembly2, PublicKey=0024000004800000940000000602000000240000525341310004000001000100c547cac37abd99c8db225ef2f6c8a3602f3b3606cc9891605d02baa56104f4cfc0734aa39b93bf7852f7d9266654753cc297e7d2edfe0bac1cdcf9f717241550e0a7b191195b7667bb4f64bcb8e2121380fd1d9d46ad2d92d2d15605093924cceaf74c4861eff62abf69b9291ed0a340e113be11e6a7d3113e92484cf7045cc7")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Mvc.Cors" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core MVC cross-origin resource sharing (CORS) features.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "dea8a87589b14a60e56acc892130115f87567807")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core MVC")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Mvc.Cors")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Mvc.Cors.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Mvc.DataAnnotations" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core MVC metadata and validation system using System.ComponentModel.DataAnnotations.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "dea8a87589b14a60e56acc892130115f87567807")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core MVC")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Mvc.DataAnnotations")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Mvc.DataAnnotations.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Mvc" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core MVC is a web framework that gives you a powerful, patterns-based way to build dynamic websites and web APIs. ASP.NET Core MVC enables a clean separation of concerns and gives you full control over markup.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "dea8a87589b14a60e56acc892130115f87567807")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core MVC")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Mvc")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Mvc.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Mvc.Formatters.Json" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core MVC formatters for JSON input and output and for JSON PATCH input using Json.NET.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "dea8a87589b14a60e56acc892130115f87567807")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core MVC")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Mvc.Formatters.Json")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Mvc.Formatters.Xml" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core MVC formatters for XML input and output using DataContractSerializer and XmlSerializer.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "dea8a87589b14a60e56acc892130115f87567807")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core MVC")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Mvc.Formatters.Xml")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Mvc.Localization" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core MVC features that enable globalization and localization of applications.\nCommonly used types:\nMicrosoft.AspNetCore.Mvc.Localization.IHtmlLocalizer&lt;TResource&gt;\nMicrosoft.AspNetCore.Mvc.Localization.IViewLocalizer")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "dea8a87589b14a60e56acc892130115f87567807")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core MVC")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Mvc.Localization")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Mvc.Razor" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core MVC Razor view engine for CSHTML files.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "dea8a87589b14a60e56acc892130115f87567807")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core MVC")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Mvc.Razor")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Mvc.Razor.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Mvc.Razor.Extensions" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core design time hosting infrastructure for the Razor view engine.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "3f26451bc7e4bf1478f148179b2e4b12f4982a5c")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Mvc.Razor.Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Mvc.Razor.Extensions.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Mvc.RazorPages" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core MVC Razor Pages.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "dea8a87589b14a60e56acc892130115f87567807")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core MVC")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Mvc.RazorPages")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Mvc.RazorPages.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Mvc.TagHelpers" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core MVC default tag helpers. Contains tag helpers for anchor tags, HTML input elements, caching, scripts, links (for CSS), and more.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "dea8a87589b14a60e56acc892130115f87567807")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core MVC")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Mvc.TagHelpers")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Mvc.TagHelpers.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("DynamicProxyGenAssembly2, PublicKey=0024000004800000940000000602000000240000525341310004000001000100c547cac37abd99c8db225ef2f6c8a3602f3b3606cc9891605d02baa56104f4cfc0734aa39b93bf7852f7d9266654753cc297e7d2edfe0bac1cdcf9f717241550e0a7b191195b7667bb4f64bcb8e2121380fd1d9d46ad2d92d2d15605093924cceaf74c4861eff62abf69b9291ed0a340e113be11e6a7d3113e92484cf7045cc7")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Mvc.ViewFeatures" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core MVC view rendering features. Contains common types used in most MVC applications as well as view rendering features such as view engines, views, view components, and HTML helpers.\nCommonly used types:\nMicrosoft.AspNetCore.Mvc.Controller\nMicrosoft.AspNetCore.Mvc.ValidateAntiForgeryTokenAttribute\nMicrosoft.AspNetCore.Mvc.ViewComponent")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "dea8a87589b14a60e56acc892130115f87567807")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core MVC")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Mvc.ViewFeatures")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Mvc.ViewFeatures.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("DynamicProxyGenAssembly2, PublicKey=0024000004800000940000000602000000240000525341310004000001000100c547cac37abd99c8db225ef2f6c8a3602f3b3606cc9891605d02baa56104f4cfc0734aa39b93bf7852f7d9266654753cc297e7d2edfe0bac1cdcf9f717241550e0a7b191195b7667bb4f64bcb8e2121380fd1d9d46ad2d92d2d15605093924cceaf74c4861eff62abf69b9291ed0a340e113be11e6a7d3113e92484cf7045cc7")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Mvc.WebApiCompatShim" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Provides compatibility in ASP.NET Core MVC with ASP.NET Web API 2 to simplify migration of existing Web API implementations.\nCommonly used types:\nSystem.Web.Http.ApiController")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "dea8a87589b14a60e56acc892130115f87567807")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core MVC")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Mvc.WebApiCompatShim")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.NodeServices" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Invoke Node.js modules at runtime in ASP.NET Core applications.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "576e3debf1476e84f0ba685ea239ed65fac90dc7")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.NodeServices")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Owin" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core component for running OWIN middleware in an ASP.NET Core application, and to run ASP.NET Core middleware in an OWIN application.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "ab2a16f0a6b646a94086ca1178ef55d9780ce5af")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Owin")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Razor" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Razor is a markup syntax for adding server-side logic to web pages. This package contains the Razor parser and code generation infrastructure.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "3f26451bc7e4bf1478f148179b2e4b12f4982a5c")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Razor")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Razor.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Razor.Language" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Razor is a markup syntax for adding server-side logic to web pages. This package contains the Razor parser and code generation infrastructure.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "3f26451bc7e4bf1478f148179b2e4b12f4982a5c")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Razor.Language")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Mvc.Razor.Extensions.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Razor.Language.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Razor.Test.Common, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.CodeAnalysis.Razor, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.CodeAnalysis.Razor.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.CodeAnalysis.Razor.Workspaces.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.CodeAnalysis.Razor.Workspaces, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.CodeAnalysis.Remote.Razor, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.VisualStudio.LanguageServices.Razor, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.VisualStudio.LanguageServices.Razor.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.VisualStudio.RazorExtension, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("DynamicProxyGenAssembly2, PublicKey=0024000004800000940000000602000000240000525341310004000001000100c547cac37abd99c8db225ef2f6c8a3602f3b3606cc9891605d02baa56104f4cfc0734aa39b93bf7852f7d9266654753cc297e7d2edfe0bac1cdcf9f717241550e0a7b191195b7667bb4f64bcb8e2121380fd1d9d46ad2d92d2d15605093924cceaf74c4861eff62abf69b9291ed0a340e113be11e6a7d3113e92484cf7045cc7")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Razor.Runtime" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Runtime components for rendering Razor pages and implementing tag helpers.\n\nCommonly used types:\nMicrosoft.AspNetCore.Razor.TagHelpers.HtmlAttributeNameAttribute\nMicrosoft.AspNetCore.Razor.TagHelpers.HtmlTargetElementAttribute\nMicrosoft.AspNetCore.Razor.TagHelpers.ITagHelper")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "3f26451bc7e4bf1478f148179b2e4b12f4982a5c")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Razor.Runtime")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Razor.Runtime.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.ResponseCaching.Abstractions" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core response caching middleware abstractions and feature interface definitions.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "f125329ed70a5aeaa28d5ecfaf433aed8e318a59")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.ResponseCaching.Abstractions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.ResponseCaching" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core middleware for caching HTTP responses on the server.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "f125329ed70a5aeaa28d5ecfaf433aed8e318a59")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.ResponseCaching")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.ResponseCaching.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.ResponseCompression" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core middleware for HTTP Response compression.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "34eec6c9488ab4c6d3ac55d69fdd65c83d500706")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.ResponseCompression")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.ResponseCompression.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Rewrite" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core basic middleware for rewriting URLs. Includes:\n* Support for custom URL rewrite rules\n* Support for running IIS URL Rewrite module rules\n* Support for running Apache mod_rewrite rules.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "34eec6c9488ab4c6d3ac55d69fdd65c83d500706")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Rewrite")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Rewrite.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Routing.Abstractions" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core abstractions for routing requests to application logic and for generating links.\nCommonly used types:\nMicrosoft.AspNetCore.Routing.IRouter\nMicrosoft.AspNetCore.Routing.RouteData")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "5966f7158d935887cef858b8aa9246a5c4e8294f")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Routing.Abstractions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Mvc.Routing.Abstractions.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Routing" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core middleware for routing requests to application logic and for generating links.\nCommonly used types:\nMicrosoft.AspNetCore.Routing.Route\nMicrosoft.AspNetCore.Routing.RouteCollection")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "5966f7158d935887cef858b8aa9246a5c4e8294f")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Routing")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Routing.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Server.HttpSys" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core HTTP server that uses the Windows HTTP Server API.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "e9153fd174f3758231c08774e26915b4e3ab5a6e")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Server.HttpSys")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Server.HttpSys.FunctionalTests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Server.IISIntegration" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.AspNetCore.Hosting.HostingStartup(typeof(Microsoft.AspNetCore.Server.IISIntegration.IISHostingStartup))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core components for working with the IIS AspNetCoreModule.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "5753784ac4321385636c63afb9ff4dc127c10e3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Server.IISIntegration")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Server.IISIntegration.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Server.Kestrel.Core" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Core components of ASP.NET Core Kestrel cross-platform web server.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "f0e572075bec9d4866ed27c8b524c62eaa9470c8")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Server.Kestrel.Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Server.Kestrel.FunctionalTests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Server.Kestrel.Core.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Server.Kestrel.Performance, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Server.Kestrel" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core Kestrel cross-platform web server.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "f0e572075bec9d4866ed27c8b524c62eaa9470c8")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Server.Kestrel")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Server.Kestrel.Https" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("HTTPS support for the ASP.NET Core Kestrel cross-platform web server.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "f0e572075bec9d4866ed27c8b524c62eaa9470c8")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Server.Kestrel.Https")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Server.Kestrel.FunctionalTests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Transport abstractions for the ASP.NET Core Kestrel cross-platform web server.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "f0e572075bec9d4866ed27c8b524c62eaa9470c8")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Libuv transport for the ASP.NET Core Kestrel cross-platform web server.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "f0e572075bec9d4866ed27c8b524c62eaa9470c8")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.Session" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core session state middleware.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "7e25d2bd98e891ed01eebd29a66dfdde5ba1486e")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.Session")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.SpaServices" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Helpers for building single-page applications on ASP.NET MVC Core.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "576e3debf1476e84f0ba685ea239ed65fac90dc7")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.SpaServices")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.StaticFiles" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core static files middleware. Includes middleware for serving static files, directory browsing, and default files.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "b3c0040aeb5a062a215c3ef666b6d523c1e220c1")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.StaticFiles")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.StaticFiles.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.TestHost" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core web server for writing and running tests.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "ff547c46a0276419ec7b29c056252f70a078fbaf")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.TestHost")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.TestHost.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.Guid("12A3EDBB-65B6-4D47-98FC-2B80CEC71E51")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.WebSockets" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core web socket middleware for use on top of opaque servers.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "78e303f23482a74f7f07fee8b7d095354b500e5f")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.WebSockets")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.AspNetCore.WebUtilities" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core utilities, such as for working with forms, multipart messages, and query strings.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "ab2a16f0a6b646a94086ca1178ef55d9780ce5af")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.AspNetCore.WebUtilities")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.WebUtilities.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.Caching.Abstractions" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Caching abstractions for in-memory cache and distributed cache.\nCommonly used types:\nMicrosoft.Extensions.Caching.Distributed.IDistributedCache\nMicrosoft.Extensions.Caching.Memory.IMemoryCache")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "d6a2292a8912b9de70911f021cb940b3e7315cdf")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.Caching.Abstractions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.Caching.Memory" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("In-memory cache implementation of Microsoft.Extensions.Caching.Memory.IMemoryCache.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "d6a2292a8912b9de70911f021cb940b3e7315cdf")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.Caching.Memory")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Extensions.Caching.Memory.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.Caching.Redis" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Distributed cache implementation of Microsoft.Extensions.Caching.Distributed.IDistributedCache using Redis.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "d6a2292a8912b9de70911f021cb940b3e7315cdf")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.Caching.Redis")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.Caching.SqlServer" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Distributed cache implementation of Microsoft.Extensions.Caching.Distributed.IDistributedCache using Microsoft SQL Server.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "d6a2292a8912b9de70911f021cb940b3e7315cdf")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.Caching.SqlServer")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Extensions.Caching.SqlServer.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.Configuration.Abstractions" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Abstractions of key-value pair based configuration.\nCommonly used types:\nMicrosoft.Extensions.Configuration.IConfiguration\nMicrosoft.Extensions.Configuration.IConfigurationBuilder\nMicrosoft.Extensions.Configuration.IConfigurationProvider\nMicrosoft.Extensions.Configuration.IConfigurationRoot\nMicrosoft.Extensions.Configuration.IConfigurationSection")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "543577e338d88dcdfeffc6ebd6945aee40374a64")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.Configuration.Abstractions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.Configuration.AzureKeyVault" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Azure KeyVault configuration provider implementation for Microsoft.Extensions.Configuration.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "543577e338d88dcdfeffc6ebd6945aee40374a64")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.Configuration.AzureKeyVault")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Extensions.Configuration.AzureKeyVault.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("DynamicProxyGenAssembly2, PublicKey=0024000004800000940000000602000000240000525341310004000001000100c547cac37abd99c8db225ef2f6c8a3602f3b3606cc9891605d02baa56104f4cfc0734aa39b93bf7852f7d9266654753cc297e7d2edfe0bac1cdcf9f717241550e0a7b191195b7667bb4f64bcb8e2121380fd1d9d46ad2d92d2d15605093924cceaf74c4861eff62abf69b9291ed0a340e113be11e6a7d3113e92484cf7045cc7")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.Configuration.Binder" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Functionality to bind an object to data in configuration providers for Microsoft.Extensions.Configuration.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "543577e338d88dcdfeffc6ebd6945aee40374a64")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.Configuration.Binder")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Extensions.Configuration.Binder.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.Configuration.CommandLine" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Command line configuration provider implementation for Microsoft.Extensions.Configuration.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "543577e338d88dcdfeffc6ebd6945aee40374a64")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.Configuration.CommandLine")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Extensions.Configuration.CommandLine.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.Configuration" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Implementation of key-value pair based configuration for Microsoft.Extensions.Configuration. Includes the memory configuration provider.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "543577e338d88dcdfeffc6ebd6945aee40374a64")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.Configuration")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Extensions.Configuration.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.Configuration.EnvironmentVariables" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Environment variables configuration provider implementation for Microsoft.Extensions.Configuration.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "543577e338d88dcdfeffc6ebd6945aee40374a64")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.Configuration.EnvironmentVariables")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Extensions.Configuration.EnvironmentVariables.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.Configuration.FileExtensions" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Extension methods for configuring file-based configuration providers for Microsoft.Extensions.Configuration.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "543577e338d88dcdfeffc6ebd6945aee40374a64")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.Configuration.FileExtensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Extensions.Configuration.FileExtensions.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.Configuration.Ini" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("INI configuration provider implementation for Microsoft.Extensions.Configuration.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "543577e338d88dcdfeffc6ebd6945aee40374a64")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.Configuration.Ini")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Extensions.Configuration.Ini.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.Configuration.Json" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("JSON configuration provider implementation for Microsoft.Extensions.Configuration.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "543577e338d88dcdfeffc6ebd6945aee40374a64")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.Configuration.Json")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Extensions.Configuration.Json.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.Configuration.UserSecrets" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("User secrets configuration provider implementation for Microsoft.Extensions.Configuration.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "543577e338d88dcdfeffc6ebd6945aee40374a64")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.Configuration.UserSecrets")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Extensions.Configuration.UserSecrets.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.Configuration.Xml" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("XML configuration provider implementation for Microsoft.Extensions.Configuration.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "543577e338d88dcdfeffc6ebd6945aee40374a64")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.Configuration.Xml")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Extensions.Configuration.Xml.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.DependencyInjection.Abstractions" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Abstractions for dependency injection.\nCommonly used types:\nMicrosoft.Extensions.DependencyInjection.IServiceCollection")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "445e2020f272607bbd4811742fa5b8ff45fc031e")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.DependencyInjection.Abstractions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Extensions.DependencyInjection.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.DependencyInjection" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Default implementation of dependency injection for Microsoft.Extensions.DependencyInjection.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "445e2020f272607bbd4811742fa5b8ff45fc031e")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.DependencyInjection")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Extensions.DependencyInjection.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.DependencyInjection.Specification.Tests" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Suite of xUnit.net tests to check for container compatibility with Microsoft.Extensions.DependencyInjection.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "445e2020f272607bbd4811742fa5b8ff45fc031e")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.DependencyInjection.Specification.Tests")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.DiagnosticAdapter" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Microsoft extension adapter feature to extend DiagnosticListener. Contains extension methods that extend System.Diagnostics.DiagnosticListener, and enables duck-typing based event handling by using dynamically generated proxy types.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "a15d26f788483617dc2e1e0f32b345424c392ed7")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.DiagnosticAdapter")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Extensions.DiagnosticAdapter.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("DynamicProxyGenAssembly2, PublicKey=0024000004800000940000000602000000240000525341310004000001000100c547cac37abd99c8db225ef2f6c8a3602f3b3606cc9891605d02baa56104f4cfc0734aa39b93bf7852f7d9266654753cc297e7d2edfe0bac1cdcf9f717241550e0a7b191195b7667bb4f64bcb8e2121380fd1d9d46ad2d92d2d15605093924cceaf74c4861eff62abf69b9291ed0a340e113be11e6a7d3113e92484cf7045cc7")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.6.1", FrameworkDisplayName=".NET Framework 4.6.1")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.FileProviders.Abstractions" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Abstractions of files and directories.\nCommonly used types:\nMicrosoft.Extensions.FileProviders.IDirectoryContents\nMicrosoft.Extensions.FileProviders.IFileInfo\nMicrosoft.Extensions.FileProviders.IFileProvider")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "3f1bcbc8c3b9426c980fe9e7976ded419b100314")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.FileProviders.Abstractions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.FileProviders.Composite" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Composite file and directory providers for Microsoft.Extensions.FileProviders.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "3f1bcbc8c3b9426c980fe9e7976ded419b100314")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.FileProviders.Composite")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.FileProviders.Embedded" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("File provider for files in embedded resources for Microsoft.Extensions.FileProviders.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "3f1bcbc8c3b9426c980fe9e7976ded419b100314")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.FileProviders.Embedded")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.FileProviders.Physical" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("File provider for physical files for Microsoft.Extensions.FileProviders.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "3f1bcbc8c3b9426c980fe9e7976ded419b100314")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.FileProviders.Physical")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Extensions.FileProviders.Physical.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.FileSystemGlobbing" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("File system globbing to find files matching a specified pattern.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "3f1bcbc8c3b9426c980fe9e7976ded419b100314")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.FileSystemGlobbing")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Extensions.FileSystemGlobbing.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.Hosting.Abstractions" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription(".NET Core hosting and startup abstractions for applications.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "ff547c46a0276419ec7b29c056252f70a078fbaf")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.Hosting.Abstractions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.Identity.Core" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core Identity is the membership system for building ASP.NET Core web applications, including membership, login, and user data. ASP.NET Core Identity allows you to add login features to your application and makes it easy to customize data about the logged in user.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "3f756adac375b6e9ff9b4c570a560725bb47c136")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.Identity.Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Identity.Specification.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Identity.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Identity.EntityFrameworkCore.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Identity.EntityFrameworkCore.InMemory.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.AspNetCore.Identity.InMemory.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.Identity.Stores" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ASP.NET Core Identity is the membership system for building ASP.NET Core web applications, including membership, login, and user data. ASP.NET Core Identity allows you to add login features to your application and makes it easy to customize data about the logged in user.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "3f756adac375b6e9ff9b4c570a560725bb47c136")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.Identity.Stores")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.Localization.Abstractions" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Abstractions of application localization services.\nCommonly used types:\nMicrosoft.Extensions.Localization.IStringLocalizer\nMicrosoft.Extensions.Localization.IStringLocalizer&lt;T&gt;")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "8d667c61dd08eca4d4bfbd191eb6fddbcc9c99a0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.Localization.Abstractions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.Localization" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Application localization services and default implementation based on ResourceManager to load localized assembly resources.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "8d667c61dd08eca4d4bfbd191eb6fddbcc9c99a0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.Localization")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Extensions.Localization.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.Logging.Abstractions" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Logging abstractions for Microsoft.Extensions.Logging.\nCommonly used types:\nMicrosoft.Extensions.Logging.ILogger\nMicrosoft.Extensions.Logging.ILoggerFactory\nMicrosoft.Extensions.Logging.ILogger&lt;TCategoryName&gt;\nMicrosoft.Extensions.Logging.LogLevel\nMicrosoft.Extensions.Logging.Logger&lt;T&gt;\nMicrosoft.Extensions.Logging.LoggerMessage\nMicrosoft.Extensions.Logging.Abstractions.NullLogger")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "dfb008281832300d9018d05ce34be886dad49507")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.Logging.Abstractions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Extensions.Logging.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.Logging.AzureAppServices" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Logger implementation to support Azure App Services 'Diagnostics logs' and 'Log stream' features.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "dfb008281832300d9018d05ce34be886dad49507")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.Logging.AzureAppServices")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Extensions.Logging.AzureAppServices.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.Logging.Configuration" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Configuration support for Microsoft.Extensions.Logging.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "dfb008281832300d9018d05ce34be886dad49507")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.Logging.Configuration")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.Logging.Console" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Console logger provider implementation for Microsoft.Extensions.Logging.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "dfb008281832300d9018d05ce34be886dad49507")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.Logging.Console")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Extensions.Logging.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.Logging.Debug" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Debug output logger provider implementation for Microsoft.Extensions.Logging. This logger logs messages to a debugger monitor by writing messages with System.Diagnostics.Debug.WriteLine().")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "dfb008281832300d9018d05ce34be886dad49507")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.Logging.Debug")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.Logging" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Logging infrastructure default implementation for Microsoft.Extensions.Logging.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "dfb008281832300d9018d05ce34be886dad49507")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.Logging")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.Logging.EventLog" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Windows Event Log logger provider implementation for Microsoft.Extensions.Logging.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "dfb008281832300d9018d05ce34be886dad49507")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.Logging.EventLog")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.6.1", FrameworkDisplayName=".NET Framework 4.6.1")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.Logging.EventSource" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("EventSource/EventListener logger provider implementation for Microsoft.Extensions.Logging.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "dfb008281832300d9018d05ce34be886dad49507")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.Logging.EventSource")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Extensions.Logging.EventSource.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.Logging.TraceSource" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("TraceSource logger provider implementation for Microsoft.Extensions.Logging.  This logger logs messages to a trace listener by writing messages with System.Diagnostics.TraceSource.TraceEvent().")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "dfb008281832300d9018d05ce34be886dad49507")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.Logging.TraceSource")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.ObjectPool" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("A simple object pool implementation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "d5ae49cadae0eb5034440a553415ec5b741ac0c4")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.ObjectPool")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.Options.ConfigurationExtensions" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Provides additional configuration specific functionality related to Options.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "2787cd4deb779e65aa52696486df7f892b1685c8")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.Options.ConfigurationExtensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.Options" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Provides a strongly typed way of specifying and accessing settings using dependency injection.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "2787cd4deb779e65aa52696486df7f892b1685c8")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.Options")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Extensions.Options.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.Primitives" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Primitives shared by framework extensions. Commonly used types include:\nMicrosoft.Extensions.Primitives.IChangeToken\nMicrosoft.Extensions.Primitives.StringValues\nMicrosoft.Extensions.Primitives.StringSegment")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "d5ae49cadae0eb5034440a553415ec5b741ac0c4")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.Primitives")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Extensions.WebEncoders" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Contains registration and configuration APIs to add the core framework encoders to a dependency injection container.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "1fbbf5e72ff21df8418224b2d4ecd07ff3fcbefd")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft .NET Extensions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Extensions.WebEncoders")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Net.Http.Headers" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("HTTP header parser implementations.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "ab2a16f0a6b646a94086ca1178ef55d9780ce5af")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Net.Http.Headers")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Net.Http.Headers.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Owin.Security.Interop" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("A compatibility layer for sharing authentication tickets between Microsoft.Owin.Security and Microsoft.AspNetCore.Authentication.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "869d98e28d60b49063af8bdcb7a16742b983994b")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Owin.Security.Interop")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.Guid("a7922dd8-09f1-43e4-938b-cc523ea08898")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.6.1", FrameworkDisplayName=".NET Framework 4.6.1")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.VisualStudio.Web.BrowserLink" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright © Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("A middleware that supports creating a communication channel between the development environment and one or more web browsers.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.0.17205")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.0.0-rtm-26452")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("CommitHash", "333725bccf5493c0c5aa8d508122f3c0b29d62c3")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft Visual Studio")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.VisualStudio.Web.BrowserLink")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.VisualStudio.Web.BrowserLink.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 f3 3a 29 04 4f a9 d7 40 c9 b3 21 3a 93 e5 7c 84 b4 72 c8 4e 0b 8a 0e 1a e4 8e 67 a9 f8 f6 de 9d 5f 7f 3d 52 ac 23 e4 8a c5 18 01 f1 dc 95 0a be 90 1d a3 4d 2a 9e 3b aa db 14 1a 17 c7 7e f3 c5 65 dd 5e e5 05 4b 91 cf 63 bb 3c 6a b8 3f 72 ab 3a af e9 3d 0f c3 c2 34 8b 76 4f af b0 b1 c0 73 3d e5 14 59 ae ab 46 58 03 84 bf 9d 74 c4 e2 81 64 b7 cd e2 47 f8 91 ba 07 89 1c 9d 87 2a d2 bb ]</AssemblyPublicKey>
    </Assembly>
  </Assemblies>
  <Remarks>To be added.</Remarks>
  <Copyright>To be added.</Copyright>
  <Types>
    <Namespace Name="Microsoft.AspNetCore">
      <Type Name="WebHost" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Antiforgery">
      <Type Name="AntiforgeryOptions" Kind="Class" />
      <Type Name="AntiforgeryTokenSet" Kind="Class" />
      <Type Name="AntiforgeryValidationException" Kind="Class" />
      <Type Name="IAntiforgery" Kind="Interface" />
      <Type Name="IAntiforgeryAdditionalDataProvider" Kind="Interface" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Antiforgery.Internal">
      <Type Name="AntiforgeryFeature" Kind="Class" />
      <Type Name="AntiforgeryOptionsSetup" Kind="Class" />
      <Type Name="AntiforgerySerializationContext" Kind="Class" />
      <Type Name="AntiforgerySerializationContextPooledObjectPolicy" Kind="Class" />
      <Type Name="AntiforgeryToken" Kind="Class" />
      <Type Name="BinaryBlob" Kind="Class" />
      <Type Name="CryptographyAlgorithms" Kind="Class" />
      <Type Name="DefaultAntiforgery" Kind="Class" />
      <Type Name="DefaultAntiforgeryAdditionalDataProvider" Kind="Class" />
      <Type Name="DefaultAntiforgeryTokenGenerator" Kind="Class" />
      <Type Name="DefaultAntiforgeryTokenSerializer" Kind="Class" />
      <Type Name="DefaultAntiforgeryTokenStore" Kind="Class" />
      <Type Name="DefaultClaimUidExtractor" Kind="Class" />
      <Type Name="IAntiforgeryFeature" Kind="Interface" />
      <Type Name="IAntiforgeryTokenGenerator" Kind="Interface" />
      <Type Name="IAntiforgeryTokenSerializer" Kind="Interface" />
      <Type Name="IAntiforgeryTokenStore" Kind="Interface" />
      <Type Name="IClaimUidExtractor" Kind="Interface" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.ApplicationInsights.HostingStartup">
      <Type Name="ApplicationInsightsHostingStartup" Kind="Class" />
      <Type Name="JavaScriptSnippetTagHelperComponent" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Authentication">
      <Type Name="AuthenticateResult" Kind="Class" />
      <Type Name="AuthenticationBuilder" Kind="Class" />
      <Type Name="AuthenticationFeature" Kind="Class" />
      <Type Name="AuthenticationHandler`1" DisplayName="AuthenticationHandler&lt;TOptions&gt;" Kind="Class" />
      <Type Name="AuthenticationHandlerProvider" Kind="Class" />
      <Type Name="AuthenticationHttpContextExtensions" Kind="Class" />
      <Type Name="AuthenticationMiddleware" Kind="Class" />
      <Type Name="AuthenticationMiddleware`1" DisplayName="AuthenticationMiddleware&lt;TOptions&gt;" Kind="Class" />
      <Type Name="AuthenticationOptions" Kind="Class" />
      <Type Name="AuthenticationProperties" Kind="Class" />
      <Type Name="AuthenticationScheme" Kind="Class" />
      <Type Name="AuthenticationSchemeBuilder" Kind="Class" />
      <Type Name="AuthenticationSchemeOptions" Kind="Class" />
      <Type Name="AuthenticationSchemeProvider" Kind="Class" />
      <Type Name="AuthenticationService" Kind="Class" />
      <Type Name="AuthenticationTicket" Kind="Class" />
      <Type Name="AuthenticationToken" Kind="Class" />
      <Type Name="AuthenticationTokenExtensions" Kind="Class" />
      <Type Name="Base64UrlTextEncoder" Kind="Class" />
      <Type Name="BaseContext" Kind="Class" />
      <Type Name="BaseContext`1" DisplayName="BaseContext&lt;TOptions&gt;" Kind="Class" />
      <Type Name="BaseControlContext" Kind="Class" />
      <Type Name="ClaimActionCollectionMapExtensions" Kind="Class" />
      <Type Name="ClaimActionCollectionUniqueExtensions" Kind="Class" />
      <Type Name="ClaimsTransformationContext" Kind="Class" />
      <Type Name="ClaimsTransformationHandler" Kind="Class" />
      <Type Name="ClaimsTransformationMiddleware" Kind="Class" />
      <Type Name="ClaimsTransformer" Kind="Class" />
      <Type Name="EventResultState" Kind="Enumeration" />
      <Type Name="FailureContext" Kind="Class" />
      <Type Name="HandleRequestContext`1" DisplayName="HandleRequestContext&lt;TOptions&gt;" Kind="Class" />
      <Type Name="HandleRequestResult" Kind="Class" />
      <Type Name="IAuthenticationFeature" Kind="Interface" />
      <Type Name="IAuthenticationHandler" Kind="Interface" />
      <Type Name="IAuthenticationHandlerProvider" Kind="Interface" />
      <Type Name="IAuthenticationRequestHandler" Kind="Interface" />
      <Type Name="IAuthenticationSchemeProvider" Kind="Interface" />
      <Type Name="IAuthenticationService" Kind="Interface" />
      <Type Name="IAuthenticationSignInHandler" Kind="Interface" />
      <Type Name="IAuthenticationSignOutHandler" Kind="Interface" />
      <Type Name="IClaimsTransformation" Kind="Interface" />
      <Type Name="IClaimsTransformer" Kind="Interface" />
      <Type Name="IDataSerializer`1" DisplayName="IDataSerializer&lt;TModel&gt;" Kind="Interface" />
      <Type Name="IRemoteAuthenticationEvents" Kind="Interface" />
      <Type Name="ISecureDataFormat`1" DisplayName="ISecureDataFormat&lt;TData&gt;" Kind="Interface" />
      <Type Name="ISystemClock" Kind="Interface" />
      <Type Name="NoopClaimsTransformation" Kind="Class" />
      <Type Name="PrincipalContext`1" DisplayName="PrincipalContext&lt;TOptions&gt;" Kind="Class" />
      <Type Name="PropertiesContext`1" DisplayName="PropertiesContext&lt;TOptions&gt;" Kind="Class" />
      <Type Name="PropertiesDataFormat" Kind="Class" />
      <Type Name="PropertiesSerializer" Kind="Class" />
      <Type Name="RedirectContext`1" DisplayName="RedirectContext&lt;TOptions&gt;" Kind="Class" />
      <Type Name="RemoteAuthenticationContext`1" DisplayName="RemoteAuthenticationContext&lt;TOptions&gt;" Kind="Class" />
      <Type Name="RemoteAuthenticationEvents" Kind="Class" />
      <Type Name="RemoteAuthenticationHandler`1" DisplayName="RemoteAuthenticationHandler&lt;TOptions&gt;" Kind="Class" />
      <Type Name="RemoteAuthenticationOptions" Kind="Class" />
      <Type Name="RemoteFailureContext" Kind="Class" />
      <Type Name="ResultContext`1" DisplayName="ResultContext&lt;TOptions&gt;" Kind="Class" />
      <Type Name="SecureDataFormat`1" DisplayName="SecureDataFormat&lt;TData&gt;" Kind="Class" />
      <Type Name="SharedAuthenticationOptions" Kind="Class" />
      <Type Name="SystemClock" Kind="Class" />
      <Type Name="TicketDataFormat" Kind="Class" />
      <Type Name="TicketReceivedContext" Kind="Class" />
      <Type Name="TicketSerializer" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Authentication.Cookies">
      <Type Name="BaseCookieContext" Kind="Class" />
      <Type Name="ChunkingCookieManager" Kind="Class" />
      <Type Name="CookieAuthenticationDefaults" Kind="Class" />
      <Type Name="CookieAuthenticationEvents" Kind="Class" />
      <Type Name="CookieAuthenticationHandler" Kind="Class" />
      <Type Name="CookieAuthenticationMiddleware" Kind="Class" />
      <Type Name="CookieAuthenticationOptions" Kind="Class" />
      <Type Name="CookieRedirectContext" Kind="Class" />
      <Type Name="CookieSignedInContext" Kind="Class" />
      <Type Name="CookieSigningInContext" Kind="Class" />
      <Type Name="CookieSigningOutContext" Kind="Class" />
      <Type Name="CookieValidatePrincipalContext" Kind="Class" />
      <Type Name="ICookieAuthenticationEvents" Kind="Interface" />
      <Type Name="ICookieManager" Kind="Interface" />
      <Type Name="ITicketStore" Kind="Interface" />
      <Type Name="PostConfigureCookieAuthenticationOptions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Authentication.Facebook">
      <Type Name="FacebookDefaults" Kind="Class" />
      <Type Name="FacebookHelper" Kind="Class" />
      <Type Name="FacebookMiddleware" Kind="Class" />
      <Type Name="FacebookOptions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Authentication.Google">
      <Type Name="GoogleDefaults" Kind="Class" />
      <Type Name="GoogleHelper" Kind="Class" />
      <Type Name="GoogleMiddleware" Kind="Class" />
      <Type Name="GoogleOptions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Authentication.Internal">
      <Type Name="RequestPathBaseCookieBuilder" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Authentication.JwtBearer">
      <Type Name="AuthenticationFailedContext" Kind="Class" />
      <Type Name="BaseJwtBearerContext" Kind="Class" />
      <Type Name="IJwtBearerEvents" Kind="Interface" />
      <Type Name="JwtBearerChallengeContext" Kind="Class" />
      <Type Name="JwtBearerDefaults" Kind="Class" />
      <Type Name="JwtBearerEvents" Kind="Class" />
      <Type Name="JwtBearerMiddleware" Kind="Class" />
      <Type Name="JwtBearerOptions" Kind="Class" />
      <Type Name="JwtBearerPostConfigureOptions" Kind="Class" />
      <Type Name="MessageReceivedContext" Kind="Class" />
      <Type Name="TokenValidatedContext" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Authentication.MicrosoftAccount">
      <Type Name="MicrosoftAccountDefaults" Kind="Class" />
      <Type Name="MicrosoftAccountHelper" Kind="Class" />
      <Type Name="MicrosoftAccountMiddleware" Kind="Class" />
      <Type Name="MicrosoftAccountOptions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Authentication.OAuth">
      <Type Name="IOAuthEvents" Kind="Interface" />
      <Type Name="OAuthCreatingTicketContext" Kind="Class" />
      <Type Name="OAuthDefaults" Kind="Class" />
      <Type Name="OAuthEvents" Kind="Class" />
      <Type Name="OAuthHandler`1" DisplayName="OAuthHandler&lt;TOptions&gt;" Kind="Class" />
      <Type Name="OAuthMiddleware`1" DisplayName="OAuthMiddleware&lt;TOptions&gt;" Kind="Class" />
      <Type Name="OAuthOptions" Kind="Class" />
      <Type Name="OAuthRedirectToAuthorizationContext" Kind="Class" />
      <Type Name="OAuthTokenResponse" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Authentication.OAuth.Claims">
      <Type Name="ClaimAction" Kind="Class" />
      <Type Name="ClaimActionCollection" Kind="Class" />
      <Type Name="CustomJsonClaimAction" Kind="Class" />
      <Type Name="DeleteClaimAction" Kind="Class" />
      <Type Name="JsonKeyClaimAction" Kind="Class" />
      <Type Name="JsonSubKeyClaimAction" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Authentication.OpenIdConnect">
      <Type Name="AuthenticationFailedContext" Kind="Class" />
      <Type Name="AuthorizationCodeReceivedContext" Kind="Class" />
      <Type Name="BaseOpenIdConnectContext" Kind="Class" />
      <Type Name="IOpenIdConnectEvents" Kind="Interface" />
      <Type Name="MessageReceivedContext" Kind="Class" />
      <Type Name="OpenIdConnectDefaults" Kind="Class" />
      <Type Name="OpenIdConnectEvents" Kind="Class" />
      <Type Name="OpenIdConnectHandler" Kind="Class" />
      <Type Name="OpenIdConnectMiddleware" Kind="Class" />
      <Type Name="OpenIdConnectOptions" Kind="Class" />
      <Type Name="OpenIdConnectPostConfigureOptions" Kind="Class" />
      <Type Name="OpenIdConnectRedirectBehavior" Kind="Enumeration" />
      <Type Name="RedirectContext" Kind="Class" />
      <Type Name="RemoteSignOutContext" Kind="Class" />
      <Type Name="TokenResponseReceivedContext" Kind="Class" />
      <Type Name="TokenValidatedContext" Kind="Class" />
      <Type Name="UserInformationReceivedContext" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Authentication.OpenIdConnect.Claims">
      <Type Name="UniqueJsonKeyClaimAction" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Authentication.Twitter">
      <Type Name="AccessToken" Kind="Class" />
      <Type Name="BaseTwitterContext" Kind="Class" />
      <Type Name="ITwitterEvents" Kind="Interface" />
      <Type Name="RequestToken" Kind="Class" />
      <Type Name="RequestTokenSerializer" Kind="Class" />
      <Type Name="TwitterCreatingTicketContext" Kind="Class" />
      <Type Name="TwitterDefaults" Kind="Class" />
      <Type Name="TwitterEvents" Kind="Class" />
      <Type Name="TwitterMiddleware" Kind="Class" />
      <Type Name="TwitterOptions" Kind="Class" />
      <Type Name="TwitterPostConfigureOptions" Kind="Class" />
      <Type Name="TwitterRedirectToAuthorizationEndpointContext" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Authorization">
      <Type Name="AllowAnonymousAttribute" Kind="Class" />
      <Type Name="AuthorizationFailure" Kind="Class" />
      <Type Name="AuthorizationHandler`1" DisplayName="AuthorizationHandler&lt;TRequirement&gt;" Kind="Class" />
      <Type Name="AuthorizationHandler`2" DisplayName="AuthorizationHandler&lt;TRequirement,TResource&gt;" Kind="Class" />
      <Type Name="AuthorizationHandlerContext" Kind="Class" />
      <Type Name="AuthorizationOptions" Kind="Class" />
      <Type Name="AuthorizationPolicy" Kind="Class" />
      <Type Name="AuthorizationPolicyBuilder" Kind="Class" />
      <Type Name="AuthorizationResult" Kind="Class" />
      <Type Name="AuthorizationServiceExtensions" Kind="Class" />
      <Type Name="AuthorizeAttribute" Kind="Class" />
      <Type Name="DefaultAuthorizationEvaluator" Kind="Class" />
      <Type Name="DefaultAuthorizationHandlerContextFactory" Kind="Class" />
      <Type Name="DefaultAuthorizationHandlerProvider" Kind="Class" />
      <Type Name="DefaultAuthorizationPolicyProvider" Kind="Class" />
      <Type Name="DefaultAuthorizationService" Kind="Class" />
      <Type Name="IAllowAnonymous" Kind="Interface" />
      <Type Name="IAuthorizationEvaluator" Kind="Interface" />
      <Type Name="IAuthorizationHandler" Kind="Interface" />
      <Type Name="IAuthorizationHandlerContextFactory" Kind="Interface" />
      <Type Name="IAuthorizationHandlerProvider" Kind="Interface" />
      <Type Name="IAuthorizationPolicyProvider" Kind="Interface" />
      <Type Name="IAuthorizationRequirement" Kind="Interface" />
      <Type Name="IAuthorizationService" Kind="Interface" />
      <Type Name="IAuthorizeData" Kind="Interface" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Authorization.Infrastructure">
      <Type Name="AssertionRequirement" Kind="Class" />
      <Type Name="ClaimsAuthorizationRequirement" Kind="Class" />
      <Type Name="DenyAnonymousAuthorizationRequirement" Kind="Class" />
      <Type Name="NameAuthorizationRequirement" Kind="Class" />
      <Type Name="OperationAuthorizationRequirement" Kind="Class" />
      <Type Name="PassThroughAuthorizationHandler" Kind="Class" />
      <Type Name="RolesAuthorizationRequirement" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Authorization.Policy">
      <Type Name="IPolicyEvaluator" Kind="Interface" />
      <Type Name="PolicyAuthorizationResult" Kind="Class" />
      <Type Name="PolicyEvaluator" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.AzureAppServices.HostingStartup">
      <Type Name="AzureAppServicesHostingStartup" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Buffering">
      <Type Name="ResponseBufferingMiddleware" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Builder">
      <Type Name="ApplicationBuilderExtensions" Kind="Class" />
      <Type Name="AuthAppBuilderExtensions" Kind="Class" />
      <Type Name="AuthenticationOptions" Kind="Class" />
      <Type Name="BrowserLinkExtensions" Kind="Class" />
      <Type Name="BuilderExtensions" Kind="Class" />
      <Type Name="ClaimsTransformationAppBuilderExtensions" Kind="Class" />
      <Type Name="ClaimsTransformationOptions" Kind="Class" />
      <Type Name="CookieAppBuilderExtensions" Kind="Class" />
      <Type Name="CookieAuthenticationOptions" Kind="Class" />
      <Type Name="CookiePolicyAppBuilderExtensions" Kind="Class" />
      <Type Name="CookiePolicyOptions" Kind="Class" />
      <Type Name="CorsMiddlewareExtensions" Kind="Class" />
      <Type Name="DefaultFilesExtensions" Kind="Class" />
      <Type Name="DefaultFilesOptions" Kind="Class" />
      <Type Name="DeveloperExceptionPageExtensions" Kind="Class" />
      <Type Name="DeveloperExceptionPageOptions" Kind="Class" />
      <Type Name="DirectoryBrowserExtensions" Kind="Class" />
      <Type Name="DirectoryBrowserOptions" Kind="Class" />
      <Type Name="ElmExtensions" Kind="Class" />
      <Type Name="ExceptionHandlerExtensions" Kind="Class" />
      <Type Name="ExceptionHandlerOptions" Kind="Class" />
      <Type Name="FacebookAppBuilderExtensions" Kind="Class" />
      <Type Name="FacebookOptions" Kind="Class" />
      <Type Name="FileServerExtensions" Kind="Class" />
      <Type Name="FileServerOptions" Kind="Class" />
      <Type Name="ForwardedHeadersExtensions" Kind="Class" />
      <Type Name="ForwardedHeadersOptions" Kind="Class" />
      <Type Name="GoogleAppBuilderExtensions" Kind="Class" />
      <Type Name="GoogleOptions" Kind="Class" />
      <Type Name="HttpMethodOverrideExtensions" Kind="Class" />
      <Type Name="HttpMethodOverrideOptions" Kind="Class" />
      <Type Name="IApplicationBuilder" Kind="Interface" />
      <Type Name="IdentityOptions" Kind="Class" />
      <Type Name="IISOptions" Kind="Class" />
      <Type Name="JwtBearerAppBuilderExtensions" Kind="Class" />
      <Type Name="JwtBearerOptions" Kind="Class" />
      <Type Name="MapExtensions" Kind="Class" />
      <Type Name="MapRouteRouteBuilderExtensions" Kind="Class" />
      <Type Name="MapWhenExtensions" Kind="Class" />
      <Type Name="MicrosoftAccountAppBuilderExtensions" Kind="Class" />
      <Type Name="MicrosoftAccountOptions" Kind="Class" />
      <Type Name="MvcApplicationBuilderExtensions" Kind="Class" />
      <Type Name="MvcAreaRouteBuilderExtensions" Kind="Class" />
      <Type Name="OAuthAppBuilderExtensions" Kind="Class" />
      <Type Name="OAuthOptions" Kind="Class" />
      <Type Name="OpenIdConnectAppBuilderExtensions" Kind="Class" />
      <Type Name="OpenIdConnectOptions" Kind="Class" />
      <Type Name="OwinExtensions" Kind="Class" />
      <Type Name="ProxyExtension" Kind="Class" />
      <Type Name="ProxyOptions" Kind="Class" />
      <Type Name="RemoteAuthenticationOptions" Kind="Class" />
      <Type Name="RequestLocalizationOptions" Kind="Class" />
      <Type Name="ResponseBufferingMiddlewareExtensions" Kind="Class" />
      <Type Name="ResponseCachingExtensions" Kind="Class" />
      <Type Name="ResponseCompressionBuilderExtensions" Kind="Class" />
      <Type Name="ResponseCompressionServicesExtensions" Kind="Class" />
      <Type Name="RewriteBuilderExtensions" Kind="Class" />
      <Type Name="RouterMiddleware" Kind="Class" />
      <Type Name="RoutingBuilderExtensions" Kind="Class" />
      <Type Name="RunExtensions" Kind="Class" />
      <Type Name="SessionMiddlewareExtensions" Kind="Class" />
      <Type Name="SessionOptions" Kind="Class" />
      <Type Name="SpaRouteExtensions" Kind="Class" />
      <Type Name="StaticFileExtensions" Kind="Class" />
      <Type Name="StaticFileOptions" Kind="Class" />
      <Type Name="StatusCodePagesExtensions" Kind="Class" />
      <Type Name="StatusCodePagesOptions" Kind="Class" />
      <Type Name="TwitterAppBuilderExtensions" Kind="Class" />
      <Type Name="TwitterOptions" Kind="Class" />
      <Type Name="UseExtensions" Kind="Class" />
      <Type Name="UseMiddlewareExtensions" Kind="Class" />
      <Type Name="UsePathBaseExtensions" Kind="Class" />
      <Type Name="UseWhenExtensions" Kind="Class" />
      <Type Name="WebApiCompatShimRouteBuilderExtensions" Kind="Class" />
      <Type Name="WebpackDevMiddleware" Kind="Class" />
      <Type Name="WebSocketMiddlewareExtensions" Kind="Class" />
      <Type Name="WebSocketOptions" Kind="Class" />
      <Type Name="WelcomePageExtensions" Kind="Class" />
      <Type Name="WelcomePageOptions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Builder.Extensions">
      <Type Name="MapMiddleware" Kind="Class" />
      <Type Name="MapOptions" Kind="Class" />
      <Type Name="MapWhenMiddleware" Kind="Class" />
      <Type Name="MapWhenOptions" Kind="Class" />
      <Type Name="UsePathBaseMiddleware" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Builder.Internal">
      <Type Name="ApplicationBuilder" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.CookiePolicy">
      <Type Name="AppendCookieContext" Kind="Class" />
      <Type Name="CookiePolicyMiddleware" Kind="Class" />
      <Type Name="DeleteCookieContext" Kind="Class" />
      <Type Name="HttpOnlyPolicy" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Cors">
      <Type Name="DisableCorsAttribute" Kind="Class" />
      <Type Name="EnableCorsAttribute" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Cors.Infrastructure">
      <Type Name="CorsConstants" Kind="Class" />
      <Type Name="CorsMiddleware" Kind="Class" />
      <Type Name="CorsOptions" Kind="Class" />
      <Type Name="CorsPolicy" Kind="Class" />
      <Type Name="CorsPolicyBuilder" Kind="Class" />
      <Type Name="CorsResult" Kind="Class" />
      <Type Name="CorsService" Kind="Class" />
      <Type Name="DefaultCorsPolicyProvider" Kind="Class" />
      <Type Name="ICorsPolicyProvider" Kind="Interface" />
      <Type Name="ICorsService" Kind="Interface" />
      <Type Name="IDisableCorsAttribute" Kind="Interface" />
      <Type Name="IEnableCorsAttribute" Kind="Interface" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Cryptography.KeyDerivation">
      <Type Name="KeyDerivation" Kind="Class" />
      <Type Name="KeyDerivationPrf" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.DataProtection">
      <Type Name="AzureDataProtectionBuilderExtensions" Kind="Class" />
      <Type Name="DataProtectionAdvancedExtensions" Kind="Class" />
      <Type Name="DataProtectionBuilderExtensions" Kind="Class" />
      <Type Name="DataProtectionCommonExtensions" Kind="Class" />
      <Type Name="DataProtectionOptions" Kind="Class" />
      <Type Name="DataProtectionProvider" Kind="Class" />
      <Type Name="DataProtectionUtilityExtensions" Kind="Class" />
      <Type Name="EphemeralDataProtectionProvider" Kind="Class" />
      <Type Name="IDataProtectionBuilder" Kind="Interface" />
      <Type Name="IDataProtectionProvider" Kind="Interface" />
      <Type Name="IDataProtector" Kind="Interface" />
      <Type Name="IPersistedDataProtector" Kind="Interface" />
      <Type Name="ISecret" Kind="Interface" />
      <Type Name="ITimeLimitedDataProtector" Kind="Interface" />
      <Type Name="RedisDataProtectionBuilderExtensions" Kind="Class" />
      <Type Name="RedisXmlRepository" Kind="Class" />
      <Type Name="Secret" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption">
      <Type Name="AuthenticatedEncryptionSettings" Kind="Class" />
      <Type Name="AuthenticatedEncryptorFactory" Kind="Class" />
      <Type Name="CngCbcAuthenticatedEncryptionSettings" Kind="Class" />
      <Type Name="CngCbcAuthenticatedEncryptorFactory" Kind="Class" />
      <Type Name="CngGcmAuthenticatedEncryptionSettings" Kind="Class" />
      <Type Name="CngGcmAuthenticatedEncryptorFactory" Kind="Class" />
      <Type Name="EncryptionAlgorithm" Kind="Enumeration" />
      <Type Name="IAuthenticatedEncryptor" Kind="Interface" />
      <Type Name="IAuthenticatedEncryptorFactory" Kind="Interface" />
      <Type Name="ManagedAuthenticatedEncryptionSettings" Kind="Class" />
      <Type Name="ManagedAuthenticatedEncryptorFactory" Kind="Class" />
      <Type Name="ValidationAlgorithm" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel">
      <Type Name="AlgorithmConfiguration" Kind="Class" />
      <Type Name="AuthenticatedEncryptorConfiguration" Kind="Class" />
      <Type Name="AuthenticatedEncryptorDescriptor" Kind="Class" />
      <Type Name="AuthenticatedEncryptorDescriptorDeserializer" Kind="Class" />
      <Type Name="CngCbcAuthenticatedEncryptorConfiguration" Kind="Class" />
      <Type Name="CngCbcAuthenticatedEncryptorDescriptor" Kind="Class" />
      <Type Name="CngCbcAuthenticatedEncryptorDescriptorDeserializer" Kind="Class" />
      <Type Name="CngGcmAuthenticatedEncryptorConfiguration" Kind="Class" />
      <Type Name="CngGcmAuthenticatedEncryptorDescriptor" Kind="Class" />
      <Type Name="CngGcmAuthenticatedEncryptorDescriptorDeserializer" Kind="Class" />
      <Type Name="IAuthenticatedEncryptorConfiguration" Kind="Interface" />
      <Type Name="IAuthenticatedEncryptorDescriptor" Kind="Interface" />
      <Type Name="IAuthenticatedEncryptorDescriptorDeserializer" Kind="Interface" />
      <Type Name="ManagedAuthenticatedEncryptorConfiguration" Kind="Class" />
      <Type Name="ManagedAuthenticatedEncryptorDescriptor" Kind="Class" />
      <Type Name="ManagedAuthenticatedEncryptorDescriptorDeserializer" Kind="Class" />
      <Type Name="XmlExtensions" Kind="Class" />
      <Type Name="XmlSerializedDescriptorInfo" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.DataProtection.AzureStorage">
      <Type Name="AzureBlobXmlRepository" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.DataProtection.Cng.Internal">
      <Type Name="CngAuthenticatedEncryptorBase" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.DataProtection.Infrastructure">
      <Type Name="IApplicationDiscriminator" Kind="Interface" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.DataProtection.Internal">
      <Type Name="DataProtectionBuilder" Kind="Class" />
      <Type Name="IActivator" Kind="Interface" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.DataProtection.KeyManagement">
      <Type Name="IKey" Kind="Interface" />
      <Type Name="IKeyEscrowSink" Kind="Interface" />
      <Type Name="IKeyManager" Kind="Interface" />
      <Type Name="KeyManagementOptions" Kind="Class" />
      <Type Name="XmlKeyManager" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.DataProtection.KeyManagement.Internal">
      <Type Name="CacheableKeyRing" Kind="Class" />
      <Type Name="DefaultKeyResolution" Kind="Structure" />
      <Type Name="ICacheableKeyRingProvider" Kind="Interface" />
      <Type Name="IDefaultKeyResolver" Kind="Interface" />
      <Type Name="IDefaultKeyServices" Kind="Interface" />
      <Type Name="IInternalXmlKeyManager" Kind="Interface" />
      <Type Name="IKeyRing" Kind="Interface" />
      <Type Name="IKeyRingProvider" Kind="Interface" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.DataProtection.Repositories">
      <Type Name="FileSystemXmlRepository" Kind="Class" />
      <Type Name="IXmlRepository" Kind="Interface" />
      <Type Name="RegistryXmlRepository" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.DataProtection.SystemWeb">
      <Type Name="CompatibilityDataProtector" Kind="Class" />
      <Type Name="DataProtectionStartup" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.DataProtection.XmlEncryption">
      <Type Name="CertificateResolver" Kind="Class" />
      <Type Name="CertificateXmlEncryptor" Kind="Class" />
      <Type Name="DpapiNGProtectionDescriptorFlags" Kind="Enumeration" />
      <Type Name="DpapiNGXmlDecryptor" Kind="Class" />
      <Type Name="DpapiNGXmlEncryptor" Kind="Class" />
      <Type Name="DpapiXmlDecryptor" Kind="Class" />
      <Type Name="DpapiXmlEncryptor" Kind="Class" />
      <Type Name="EncryptedXmlDecryptor" Kind="Class" />
      <Type Name="EncryptedXmlInfo" Kind="Class" />
      <Type Name="ICertificateResolver" Kind="Interface" />
      <Type Name="IXmlDecryptor" Kind="Interface" />
      <Type Name="IXmlEncryptor" Kind="Interface" />
      <Type Name="NullXmlDecryptor" Kind="Class" />
      <Type Name="NullXmlEncryptor" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Diagnostics">
      <Type Name="CompilationFailure" Kind="Class" />
      <Type Name="DeveloperExceptionPageMiddleware" Kind="Class" />
      <Type Name="DiagnosticMessage" Kind="Class" />
      <Type Name="ExceptionHandlerFeature" Kind="Class" />
      <Type Name="ExceptionHandlerMiddleware" Kind="Class" />
      <Type Name="ICompilationException" Kind="Interface" />
      <Type Name="IExceptionHandlerFeature" Kind="Interface" />
      <Type Name="IExceptionHandlerPathFeature" Kind="Interface" />
      <Type Name="IStatusCodePagesFeature" Kind="Interface" />
      <Type Name="IStatusCodeReExecuteFeature" Kind="Interface" />
      <Type Name="StatusCodeContext" Kind="Class" />
      <Type Name="StatusCodePagesFeature" Kind="Class" />
      <Type Name="StatusCodePagesMiddleware" Kind="Class" />
      <Type Name="StatusCodeReExecuteFeature" Kind="Class" />
      <Type Name="WelcomePageMiddleware" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Diagnostics.Elm">
      <Type Name="ActivityContext" Kind="Class" />
      <Type Name="ElmCaptureMiddleware" Kind="Class" />
      <Type Name="ElmLogger" Kind="Class" />
      <Type Name="ElmLoggerProvider" Kind="Class" />
      <Type Name="ElmOptions" Kind="Class" />
      <Type Name="ElmPageMiddleware" Kind="Class" />
      <Type Name="ElmScope" Kind="Class" />
      <Type Name="ElmStore" Kind="Class" />
      <Type Name="HttpInfo" Kind="Class" />
      <Type Name="LogInfo" Kind="Class" />
      <Type Name="ScopeNode" Kind="Class" />
      <Type Name="ViewOptions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Diagnostics.Elm.RazorViews">
      <Type Name="DetailsPageModel" Kind="Class" />
      <Type Name="LogPageModel" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Diagnostics.Elm.Views">
      <Type Name="DetailsPage" Kind="Class" />
      <Type Name="DetailsPageModel" Kind="Class" />
      <Type Name="LogPage" Kind="Class" />
      <Type Name="LogPageModel" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Diagnostics.Views">
      <Type Name="CompilationErrorPage" Kind="Class" />
      <Type Name="CompilationErrorPageModel" Kind="Class" />
      <Type Name="ErrorDetails" Kind="Class" />
      <Type Name="ErrorPage" Kind="Class" />
      <Type Name="ErrorPageModel" Kind="Class" />
      <Type Name="StackFrame" Kind="Class" />
      <Type Name="StackFrameInfo" Kind="Class" />
      <Type Name="WelcomePage" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.DiagnosticsViewPage.Views">
      <Type Name="AttributeValue" Kind="Class" />
      <Type Name="BaseView" Kind="Class" />
      <Type Name="HelperResult" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Hosting">
      <Type Name="AppServicesWebHostBuilderExtensions" Kind="Class" />
      <Type Name="ConventionBasedStartup" Kind="Class" />
      <Type Name="DelegateStartup" Kind="Class" />
      <Type Name="EnvironmentName" Kind="Class" />
      <Type Name="HostingAbstractionsWebHostBuilderExtensions" Kind="Class" />
      <Type Name="HostingEnvironmentExtensions" Kind="Class" />
      <Type Name="HostingStartupAttribute" Kind="Class" />
      <Type Name="IApplicationLifetime" Kind="Interface" />
      <Type Name="IHostingEnvironment" Kind="Interface" />
      <Type Name="IHostingStartup" Kind="Interface" />
      <Type Name="IStartup" Kind="Interface" />
      <Type Name="IStartupFilter" Kind="Interface" />
      <Type Name="IWebHost" Kind="Interface" />
      <Type Name="IWebHostBuilder" Kind="Interface" />
      <Type Name="KestrelServerOptionsConnectionLoggingExtensions" Kind="Class" />
      <Type Name="KestrelServerOptionsHttpsExtensions" Kind="Class" />
      <Type Name="KestrelServerOptionsSystemdExtensions" Kind="Class" />
      <Type Name="ListenOptionsConnectionLoggingExtensions" Kind="Class" />
      <Type Name="ListenOptionsHttpsExtensions" Kind="Class" />
      <Type Name="StartupBase" Kind="Class" />
      <Type Name="StartupBase`1" DisplayName="StartupBase&lt;TBuilder&gt;" Kind="Class" />
      <Type Name="WebHostBuilder" Kind="Class" />
      <Type Name="WebHostBuilderContext" Kind="Class" />
      <Type Name="WebHostBuilderExtensions" Kind="Class" />
      <Type Name="WebHostBuilderHttpSysExtensions" Kind="Class" />
      <Type Name="WebHostBuilderIISExtensions" Kind="Class" />
      <Type Name="WebHostBuilderKestrelExtensions" Kind="Class" />
      <Type Name="WebHostBuilderLibuvExtensions" Kind="Class" />
      <Type Name="WebHostBuilderWebListenerExtensions" Kind="Class" />
      <Type Name="WebHostDefaults" Kind="Class" />
      <Type Name="WebHostExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Hosting.Builder">
      <Type Name="ApplicationBuilderFactory" Kind="Class" />
      <Type Name="IApplicationBuilderFactory" Kind="Interface" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Hosting.Internal">
      <Type Name="ApplicationLifetime" Kind="Class" />
      <Type Name="AutoRequestServicesStartupFilter" Kind="Class" />
      <Type Name="ConfigureBuilder" Kind="Class" />
      <Type Name="ConfigureContainerBuilder" Kind="Class" />
      <Type Name="ConfigureServicesBuilder" Kind="Class" />
      <Type Name="HostedServiceExecutor" Kind="Class" />
      <Type Name="HostingApplication" Kind="Class" />
      <Type Name="HostingApplication+Context" Kind="Structure" />
      <Type Name="HostingEnvironment" Kind="Class" />
      <Type Name="HostingEnvironmentExtensions" Kind="Class" />
      <Type Name="HostingEventSource" Kind="Class" />
      <Type Name="RequestServicesContainerMiddleware" Kind="Class" />
      <Type Name="RequestServicesFeature" Kind="Class" />
      <Type Name="StartupLoader" Kind="Class" />
      <Type Name="StartupMethods" Kind="Class" />
      <Type Name="WebHost" Kind="Class" />
      <Type Name="WebHostOptions" Kind="Class" />
      <Type Name="WebHostUtilities" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Hosting.Server">
      <Type Name="IHttpApplication`1" DisplayName="IHttpApplication&lt;TContext&gt;" Kind="Interface" />
      <Type Name="IServer" Kind="Interface" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Hosting.Server.Features">
      <Type Name="IServerAddressesFeature" Kind="Interface" />
      <Type Name="ServerAddressesFeature" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Hosting.WindowsServices">
      <Type Name="WebHostService" Kind="Class" />
      <Type Name="WebHostWindowsServiceExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Html">
      <Type Name="HtmlContentBuilder" Kind="Class" />
      <Type Name="HtmlContentBuilderExtensions" Kind="Class" />
      <Type Name="HtmlFormattableString" Kind="Class" />
      <Type Name="HtmlString" Kind="Class" />
      <Type Name="IHtmlContent" Kind="Interface" />
      <Type Name="IHtmlContentBuilder" Kind="Interface" />
      <Type Name="IHtmlContentContainer" Kind="Interface" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Http">
      <Type Name="ConnectionInfo" Kind="Class" />
      <Type Name="CookieBuilder" Kind="Class" />
      <Type Name="CookieOptions" Kind="Class" />
      <Type Name="CookieSecurePolicy" Kind="Enumeration" />
      <Type Name="DefaultHttpContext" Kind="Class" />
      <Type Name="FormCollection" Kind="Class" />
      <Type Name="FormCollection+Enumerator" Kind="Structure" />
      <Type Name="FragmentString" Kind="Structure" />
      <Type Name="HeaderDictionary" Kind="Class" />
      <Type Name="HeaderDictionary+Enumerator" Kind="Structure" />
      <Type Name="HeaderDictionaryExtensions" Kind="Class" />
      <Type Name="HeaderDictionaryTypeExtensions" Kind="Class" />
      <Type Name="HostString" Kind="Structure" />
      <Type Name="HttpContext" Kind="Class" />
      <Type Name="HttpContextAccessor" Kind="Class" />
      <Type Name="HttpContextFactory" Kind="Class" />
      <Type Name="HttpMethods" Kind="Class" />
      <Type Name="HttpRequest" Kind="Class" />
      <Type Name="HttpResponse" Kind="Class" />
      <Type Name="HttpResponseWritingExtensions" Kind="Class" />
      <Type Name="IFormCollection" Kind="Interface" />
      <Type Name="IFormFile" Kind="Interface" />
      <Type Name="IFormFileCollection" Kind="Interface" />
      <Type Name="IHeaderDictionary" Kind="Interface" />
      <Type Name="IHttpContextAccessor" Kind="Interface" />
      <Type Name="IHttpContextFactory" Kind="Interface" />
      <Type Name="IMiddleware" Kind="Interface" />
      <Type Name="IMiddlewareFactory" Kind="Interface" />
      <Type Name="IQueryCollection" Kind="Interface" />
      <Type Name="IRequestCookieCollection" Kind="Interface" />
      <Type Name="IResponseCookies" Kind="Interface" />
      <Type Name="ISession" Kind="Interface" />
      <Type Name="MiddlewareFactory" Kind="Class" />
      <Type Name="PathString" Kind="Structure" />
      <Type Name="QueryString" Kind="Structure" />
      <Type Name="RequestDelegate" Kind="Delegate" />
      <Type Name="RequestFormReaderExtensions" Kind="Class" />
      <Type Name="ResponseExtensions" Kind="Class" />
      <Type Name="SameSiteMode" Kind="Enumeration" />
      <Type Name="SendFileResponseExtensions" Kind="Class" />
      <Type Name="SessionExtensions" Kind="Class" />
      <Type Name="StatusCodes" Kind="Class" />
      <Type Name="WebSocketAcceptContext" Kind="Class" />
      <Type Name="WebSocketManager" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Http.Authentication">
      <Type Name="AuthenticateInfo" Kind="Class" />
      <Type Name="AuthenticationDescription" Kind="Class" />
      <Type Name="AuthenticationManager" Kind="Class" />
      <Type Name="AuthenticationProperties" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Http.Authentication.Internal">
      <Type Name="DefaultAuthenticationManager" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Http.Extensions">
      <Type Name="HttpRequestMultipartExtensions" Kind="Class" />
      <Type Name="QueryBuilder" Kind="Class" />
      <Type Name="StreamCopyOperation" Kind="Class" />
      <Type Name="UriHelper" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Http.Features">
      <Type Name="DefaultSessionFeature" Kind="Class" />
      <Type Name="FeatureCollection" Kind="Class" />
      <Type Name="FeatureReference`1" DisplayName="FeatureReference&lt;T&gt;" Kind="Structure" />
      <Type Name="FeatureReferences`1" DisplayName="FeatureReferences&lt;TCache&gt;" Kind="Structure" />
      <Type Name="FormFeature" Kind="Class" />
      <Type Name="FormOptions" Kind="Class" />
      <Type Name="HttpConnectionFeature" Kind="Class" />
      <Type Name="HttpRequestFeature" Kind="Class" />
      <Type Name="HttpRequestIdentifierFeature" Kind="Class" />
      <Type Name="HttpRequestLifetimeFeature" Kind="Class" />
      <Type Name="HttpResponseFeature" Kind="Class" />
      <Type Name="IFeatureCollection" Kind="Interface" />
      <Type Name="IFormFeature" Kind="Interface" />
      <Type Name="IHttpBodyControlFeature" Kind="Interface" />
      <Type Name="IHttpBufferingFeature" Kind="Interface" />
      <Type Name="IHttpConnectionFeature" Kind="Interface" />
      <Type Name="IHttpMaxRequestBodySizeFeature" Kind="Interface" />
      <Type Name="IHttpRequestFeature" Kind="Interface" />
      <Type Name="IHttpRequestIdentifierFeature" Kind="Interface" />
      <Type Name="IHttpRequestLifetimeFeature" Kind="Interface" />
      <Type Name="IHttpResponseFeature" Kind="Interface" />
      <Type Name="IHttpSendFileFeature" Kind="Interface" />
      <Type Name="IHttpUpgradeFeature" Kind="Interface" />
      <Type Name="IHttpWebSocketFeature" Kind="Interface" />
      <Type Name="IItemsFeature" Kind="Interface" />
      <Type Name="IQueryFeature" Kind="Interface" />
      <Type Name="IRequestCookiesFeature" Kind="Interface" />
      <Type Name="IResponseCookiesFeature" Kind="Interface" />
      <Type Name="IServiceProvidersFeature" Kind="Interface" />
      <Type Name="ISessionFeature" Kind="Interface" />
      <Type Name="ItemsFeature" Kind="Class" />
      <Type Name="ITlsConnectionFeature" Kind="Interface" />
      <Type Name="ITlsTokenBindingFeature" Kind="Interface" />
      <Type Name="QueryFeature" Kind="Class" />
      <Type Name="RequestCookiesFeature" Kind="Class" />
      <Type Name="ResponseCookiesFeature" Kind="Class" />
      <Type Name="ServiceProvidersFeature" Kind="Class" />
      <Type Name="TlsConnectionFeature" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Http.Features.Authentication">
      <Type Name="AuthenticateContext" Kind="Class" />
      <Type Name="ChallengeBehavior" Kind="Enumeration" />
      <Type Name="ChallengeContext" Kind="Class" />
      <Type Name="DescribeSchemesContext" Kind="Class" />
      <Type Name="HttpAuthenticationFeature" Kind="Class" />
      <Type Name="IAuthenticationHandler" Kind="Interface" />
      <Type Name="IHttpAuthenticationFeature" Kind="Interface" />
      <Type Name="SignInContext" Kind="Class" />
      <Type Name="SignOutContext" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Http.Headers">
      <Type Name="RequestHeaders" Kind="Class" />
      <Type Name="ResponseHeaders" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Http.Internal">
      <Type Name="BufferingHelper" Kind="Class" />
      <Type Name="DefaultConnectionInfo" Kind="Class" />
      <Type Name="DefaultHttpRequest" Kind="Class" />
      <Type Name="DefaultHttpResponse" Kind="Class" />
      <Type Name="DefaultWebSocketManager" Kind="Class" />
      <Type Name="FormFile" Kind="Class" />
      <Type Name="FormFileCollection" Kind="Class" />
      <Type Name="HeaderSegment" Kind="Structure" />
      <Type Name="HeaderSegmentCollection" Kind="Structure" />
      <Type Name="HeaderSegmentCollection+Enumerator" Kind="Structure" />
      <Type Name="ItemsDictionary" Kind="Class" />
      <Type Name="ParsingHelpers" Kind="Class" />
      <Type Name="QueryCollection" Kind="Class" />
      <Type Name="QueryCollection+Enumerator" Kind="Structure" />
      <Type Name="RequestCookieCollection" Kind="Class" />
      <Type Name="RequestCookieCollection+Enumerator" Kind="Structure" />
      <Type Name="ResponseCookies" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.HttpOverrides">
      <Type Name="ForwardedHeaders" Kind="Enumeration" />
      <Type Name="ForwardedHeadersDefaults" Kind="Class" />
      <Type Name="ForwardedHeadersMiddleware" Kind="Class" />
      <Type Name="HttpMethodOverrideMiddleware" Kind="Class" />
      <Type Name="IPNetwork" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.HttpOverrides.Internal">
      <Type Name="IPEndPointParser" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Identity">
      <Type Name="AspNetRoleManager`1" DisplayName="AspNetRoleManager&lt;TRole&gt;" Kind="Class" />
      <Type Name="AspNetUserManager`1" DisplayName="AspNetUserManager&lt;TUser&gt;" Kind="Class" />
      <Type Name="AuthenticatorTokenProvider`1" DisplayName="AuthenticatorTokenProvider&lt;TUser&gt;" Kind="Class" />
      <Type Name="ClaimsIdentityOptions" Kind="Class" />
      <Type Name="DataProtectionTokenProviderOptions" Kind="Class" />
      <Type Name="DataProtectorTokenProvider`1" DisplayName="DataProtectorTokenProvider&lt;TUser&gt;" Kind="Class" />
      <Type Name="EmailTokenProvider`1" DisplayName="EmailTokenProvider&lt;TUser&gt;" Kind="Class" />
      <Type Name="ExternalLoginInfo" Kind="Class" />
      <Type Name="IdentityBuilder" Kind="Class" />
      <Type Name="IdentityBuilderExtensions" Kind="Class" />
      <Type Name="IdentityConstants" Kind="Class" />
      <Type Name="IdentityCookieOptions" Kind="Class" />
      <Type Name="IdentityError" Kind="Class" />
      <Type Name="IdentityErrorDescriber" Kind="Class" />
      <Type Name="IdentityMarkerService" Kind="Class" />
      <Type Name="IdentityOptions" Kind="Class" />
      <Type Name="IdentityResult" Kind="Class" />
      <Type Name="IdentityRole" Kind="Class" />
      <Type Name="IdentityRole`1" DisplayName="IdentityRole&lt;TKey&gt;" Kind="Class" />
      <Type Name="IdentityRoleClaim`1" DisplayName="IdentityRoleClaim&lt;TKey&gt;" Kind="Class" />
      <Type Name="IdentityUser" Kind="Class" />
      <Type Name="IdentityUser`1" DisplayName="IdentityUser&lt;TKey&gt;" Kind="Class" />
      <Type Name="IdentityUserClaim`1" DisplayName="IdentityUserClaim&lt;TKey&gt;" Kind="Class" />
      <Type Name="IdentityUserLogin`1" DisplayName="IdentityUserLogin&lt;TKey&gt;" Kind="Class" />
      <Type Name="IdentityUserRole`1" DisplayName="IdentityUserRole&lt;TKey&gt;" Kind="Class" />
      <Type Name="IdentityUserToken`1" DisplayName="IdentityUserToken&lt;TKey&gt;" Kind="Class" />
      <Type Name="ILookupNormalizer" Kind="Interface" />
      <Type Name="IPasswordHasher`1" DisplayName="IPasswordHasher&lt;TUser&gt;" Kind="Interface" />
      <Type Name="IPasswordValidator`1" DisplayName="IPasswordValidator&lt;TUser&gt;" Kind="Interface" />
      <Type Name="IQueryableRoleStore`1" DisplayName="IQueryableRoleStore&lt;TRole&gt;" Kind="Interface" />
      <Type Name="IQueryableUserStore`1" DisplayName="IQueryableUserStore&lt;TUser&gt;" Kind="Interface" />
      <Type Name="IRoleClaimStore`1" DisplayName="IRoleClaimStore&lt;TRole&gt;" Kind="Interface" />
      <Type Name="IRoleStore`1" DisplayName="IRoleStore&lt;TRole&gt;" Kind="Interface" />
      <Type Name="IRoleValidator`1" DisplayName="IRoleValidator&lt;TRole&gt;" Kind="Interface" />
      <Type Name="ISecurityStampValidator" Kind="Interface" />
      <Type Name="IUserAuthenticationTokenStore`1" DisplayName="IUserAuthenticationTokenStore&lt;TUser&gt;" Kind="Interface" />
      <Type Name="IUserAuthenticatorKeyStore`1" DisplayName="IUserAuthenticatorKeyStore&lt;TUser&gt;" Kind="Interface" />
      <Type Name="IUserClaimsPrincipalFactory`1" DisplayName="IUserClaimsPrincipalFactory&lt;TUser&gt;" Kind="Interface" />
      <Type Name="IUserClaimStore`1" DisplayName="IUserClaimStore&lt;TUser&gt;" Kind="Interface" />
      <Type Name="IUserEmailStore`1" DisplayName="IUserEmailStore&lt;TUser&gt;" Kind="Interface" />
      <Type Name="IUserLockoutStore`1" DisplayName="IUserLockoutStore&lt;TUser&gt;" Kind="Interface" />
      <Type Name="IUserLoginStore`1" DisplayName="IUserLoginStore&lt;TUser&gt;" Kind="Interface" />
      <Type Name="IUserPasswordStore`1" DisplayName="IUserPasswordStore&lt;TUser&gt;" Kind="Interface" />
      <Type Name="IUserPhoneNumberStore`1" DisplayName="IUserPhoneNumberStore&lt;TUser&gt;" Kind="Interface" />
      <Type Name="IUserRoleStore`1" DisplayName="IUserRoleStore&lt;TUser&gt;" Kind="Interface" />
      <Type Name="IUserSecurityStampStore`1" DisplayName="IUserSecurityStampStore&lt;TUser&gt;" Kind="Interface" />
      <Type Name="IUserStore`1" DisplayName="IUserStore&lt;TUser&gt;" Kind="Interface" />
      <Type Name="IUserTwoFactorRecoveryCodeStore`1" DisplayName="IUserTwoFactorRecoveryCodeStore&lt;TUser&gt;" Kind="Interface" />
      <Type Name="IUserTwoFactorStore`1" DisplayName="IUserTwoFactorStore&lt;TUser&gt;" Kind="Interface" />
      <Type Name="IUserTwoFactorTokenProvider`1" DisplayName="IUserTwoFactorTokenProvider&lt;TUser&gt;" Kind="Interface" />
      <Type Name="IUserValidator`1" DisplayName="IUserValidator&lt;TUser&gt;" Kind="Interface" />
      <Type Name="LockoutOptions" Kind="Class" />
      <Type Name="PasswordHasher`1" DisplayName="PasswordHasher&lt;TUser&gt;" Kind="Class" />
      <Type Name="PasswordHasherCompatibilityMode" Kind="Enumeration" />
      <Type Name="PasswordHasherOptions" Kind="Class" />
      <Type Name="PasswordOptions" Kind="Class" />
      <Type Name="PasswordValidator`1" DisplayName="PasswordValidator&lt;TUser&gt;" Kind="Class" />
      <Type Name="PasswordVerificationResult" Kind="Enumeration" />
      <Type Name="PhoneNumberTokenProvider`1" DisplayName="PhoneNumberTokenProvider&lt;TUser&gt;" Kind="Class" />
      <Type Name="RoleManager`1" DisplayName="RoleManager&lt;TRole&gt;" Kind="Class" />
      <Type Name="RoleStoreBase`4" DisplayName="RoleStoreBase&lt;TRole,TKey,TUserRole,TRoleClaim&gt;" Kind="Class" />
      <Type Name="RoleValidator`1" DisplayName="RoleValidator&lt;TRole&gt;" Kind="Class" />
      <Type Name="SecurityStampRefreshingPrincipalContext" Kind="Class" />
      <Type Name="SecurityStampValidator" Kind="Class" />
      <Type Name="SecurityStampValidator`1" DisplayName="SecurityStampValidator&lt;TUser&gt;" Kind="Class" />
      <Type Name="SecurityStampValidatorOptions" Kind="Class" />
      <Type Name="SignInManager`1" DisplayName="SignInManager&lt;TUser&gt;" Kind="Class" />
      <Type Name="SignInOptions" Kind="Class" />
      <Type Name="SignInResult" Kind="Class" />
      <Type Name="TokenOptions" Kind="Class" />
      <Type Name="TokenProviderDescriptor" Kind="Class" />
      <Type Name="TotpSecurityStampBasedTokenProvider`1" DisplayName="TotpSecurityStampBasedTokenProvider&lt;TUser&gt;" Kind="Class" />
      <Type Name="UpperInvariantLookupNormalizer" Kind="Class" />
      <Type Name="UserClaimsPrincipalFactory`1" DisplayName="UserClaimsPrincipalFactory&lt;TUser&gt;" Kind="Class" />
      <Type Name="UserClaimsPrincipalFactory`2" DisplayName="UserClaimsPrincipalFactory&lt;TUser,TRole&gt;" Kind="Class" />
      <Type Name="UserLoginInfo" Kind="Class" />
      <Type Name="UserManager`1" DisplayName="UserManager&lt;TUser&gt;" Kind="Class" />
      <Type Name="UserOptions" Kind="Class" />
      <Type Name="UserStoreBase`5" DisplayName="UserStoreBase&lt;TUser,TKey,TUserClaim,TUserLogin,TUserToken&gt;" Kind="Class" />
      <Type Name="UserStoreBase`8" DisplayName="UserStoreBase&lt;TUser,TRole,TKey,TUserClaim,TUserRole,TUserLogin,TUserToken,TRoleClaim&gt;" Kind="Class" />
      <Type Name="UserValidator`1" DisplayName="UserValidator&lt;TUser&gt;" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Identity.EntityFrameworkCore">
      <Type Name="IdentityDbContext" Kind="Class" />
      <Type Name="IdentityDbContext`1" DisplayName="IdentityDbContext&lt;TUser&gt;" Kind="Class" />
      <Type Name="IdentityDbContext`3" DisplayName="IdentityDbContext&lt;TUser,TRole,TKey&gt;" Kind="Class" />
      <Type Name="IdentityDbContext`8" DisplayName="IdentityDbContext&lt;TUser,TRole,TKey,TUserClaim,TUserRole,TUserLogin,TRoleClaim,TUserToken&gt;" Kind="Class" />
      <Type Name="IdentityRole" Kind="Class" />
      <Type Name="IdentityRole`1" DisplayName="IdentityRole&lt;TKey&gt;" Kind="Class" />
      <Type Name="IdentityRole`3" DisplayName="IdentityRole&lt;TKey,TUserRole,TRoleClaim&gt;" Kind="Class" />
      <Type Name="IdentityRoleClaim`1" DisplayName="IdentityRoleClaim&lt;TKey&gt;" Kind="Class" />
      <Type Name="IdentityUser" Kind="Class" />
      <Type Name="IdentityUser`1" DisplayName="IdentityUser&lt;TKey&gt;" Kind="Class" />
      <Type Name="IdentityUser`4" DisplayName="IdentityUser&lt;TKey,TUserClaim,TUserRole,TUserLogin&gt;" Kind="Class" />
      <Type Name="IdentityUserClaim`1" DisplayName="IdentityUserClaim&lt;TKey&gt;" Kind="Class" />
      <Type Name="IdentityUserContext`1" DisplayName="IdentityUserContext&lt;TUser&gt;" Kind="Class" />
      <Type Name="IdentityUserContext`2" DisplayName="IdentityUserContext&lt;TUser,TKey&gt;" Kind="Class" />
      <Type Name="IdentityUserContext`5" DisplayName="IdentityUserContext&lt;TUser,TKey,TUserClaim,TUserLogin,TUserToken&gt;" Kind="Class" />
      <Type Name="IdentityUserLogin`1" DisplayName="IdentityUserLogin&lt;TKey&gt;" Kind="Class" />
      <Type Name="IdentityUserRole`1" DisplayName="IdentityUserRole&lt;TKey&gt;" Kind="Class" />
      <Type Name="IdentityUserToken`1" DisplayName="IdentityUserToken&lt;TKey&gt;" Kind="Class" />
      <Type Name="RoleStore`1" DisplayName="RoleStore&lt;TRole&gt;" Kind="Class" />
      <Type Name="RoleStore`2" DisplayName="RoleStore&lt;TRole,TContext&gt;" Kind="Class" />
      <Type Name="RoleStore`3" DisplayName="RoleStore&lt;TRole,TContext,TKey&gt;" Kind="Class" />
      <Type Name="RoleStore`5" DisplayName="RoleStore&lt;TRole,TContext,TKey,TUserRole,TRoleClaim&gt;" Kind="Class" />
      <Type Name="UserOnlyStore`1" DisplayName="UserOnlyStore&lt;TUser&gt;" Kind="Class" />
      <Type Name="UserOnlyStore`2" DisplayName="UserOnlyStore&lt;TUser,TContext&gt;" Kind="Class" />
      <Type Name="UserOnlyStore`3" DisplayName="UserOnlyStore&lt;TUser,TContext,TKey&gt;" Kind="Class" />
      <Type Name="UserOnlyStore`6" DisplayName="UserOnlyStore&lt;TUser,TContext,TKey,TUserClaim,TUserLogin,TUserToken&gt;" Kind="Class" />
      <Type Name="UserStore" Kind="Class" />
      <Type Name="UserStore`1" DisplayName="UserStore&lt;TUser&gt;" Kind="Class" />
      <Type Name="UserStore`3" DisplayName="UserStore&lt;TUser,TRole,TContext&gt;" Kind="Class" />
      <Type Name="UserStore`4" DisplayName="UserStore&lt;TUser,TRole,TContext,TKey&gt;" Kind="Class" />
      <Type Name="UserStore`8" DisplayName="UserStore&lt;TUser,TRole,TContext,TKey,TUserClaim,TUserRole,TUserLogin,TUserToken&gt;" Kind="Class" />
      <Type Name="UserStore`9" DisplayName="UserStore&lt;TUser,TRole,TContext,TKey,TUserClaim,TUserRole,TUserLogin,TUserToken,TRoleClaim&gt;" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Identity.Test">
      <Type Name="IdentityResultAssert" Kind="Class" />
      <Type Name="IdentitySpecificationTestBase`2" DisplayName="IdentitySpecificationTestBase&lt;TUser,TRole&gt;" Kind="Class" />
      <Type Name="IdentitySpecificationTestBase`3" DisplayName="IdentitySpecificationTestBase&lt;TUser,TRole,TKey&gt;" Kind="Class" />
      <Type Name="ITestLogger" Kind="Interface" />
      <Type Name="TestLogger`1" DisplayName="TestLogger&lt;TName&gt;" Kind="Class" />
      <Type Name="UserManagerSpecificationTestBase`1" DisplayName="UserManagerSpecificationTestBase&lt;TUser&gt;" Kind="Class" />
      <Type Name="UserManagerSpecificationTestBase`2" DisplayName="UserManagerSpecificationTestBase&lt;TUser,TKey&gt;" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.JsonPatch">
      <Type Name="IJsonPatchDocument" Kind="Interface" />
      <Type Name="JsonPatchDocument" Kind="Class" />
      <Type Name="JsonPatchDocument`1" DisplayName="JsonPatchDocument&lt;TModel&gt;" Kind="Class" />
      <Type Name="JsonPatchError" Kind="Class" />
      <Type Name="JsonPatchProperty" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.JsonPatch.Adapters">
      <Type Name="IObjectAdapter" Kind="Interface" />
      <Type Name="ObjectAdapter" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.JsonPatch.Converters">
      <Type Name="JsonPatchDocumentConverter" Kind="Class" />
      <Type Name="TypedJsonPatchDocumentConverter" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.JsonPatch.Exceptions">
      <Type Name="JsonPatchException" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.JsonPatch.Helpers">
      <Type Name="GetValueResult" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.JsonPatch.Internal">
      <Type Name="ConversionResult" Kind="Class" />
      <Type Name="ConversionResultProvider" Kind="Class" />
      <Type Name="DictionaryAdapter" Kind="Class" />
      <Type Name="ExpandoObjectAdapter" Kind="Class" />
      <Type Name="ExpandoObjectDictionaryExtensions" Kind="Class" />
      <Type Name="ExpressionHelpers" Kind="Class" />
      <Type Name="IAdapter" Kind="Interface" />
      <Type Name="ListAdapter" Kind="Class" />
      <Type Name="ObjectVisitor" Kind="Class" />
      <Type Name="ParsedPath" Kind="Structure" />
      <Type Name="PocoAdapter" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.JsonPatch.Operations">
      <Type Name="Operation" Kind="Class" />
      <Type Name="Operation`1" DisplayName="Operation&lt;TModel&gt;" Kind="Class" />
      <Type Name="OperationBase" Kind="Class" />
      <Type Name="OperationType" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Localization">
      <Type Name="AcceptLanguageHeaderRequestCultureProvider" Kind="Class" />
      <Type Name="CookieRequestCultureProvider" Kind="Class" />
      <Type Name="CustomRequestCultureProvider" Kind="Class" />
      <Type Name="IRequestCultureFeature" Kind="Interface" />
      <Type Name="IRequestCultureProvider" Kind="Interface" />
      <Type Name="ProviderCultureResult" Kind="Class" />
      <Type Name="QueryStringRequestCultureProvider" Kind="Class" />
      <Type Name="RequestCulture" Kind="Class" />
      <Type Name="RequestCultureFeature" Kind="Class" />
      <Type Name="RequestCultureProvider" Kind="Class" />
      <Type Name="RequestLocalizationMiddleware" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Localization.Routing">
      <Type Name="RouteDataRequestCultureProvider" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.MiddlewareAnalysis">
      <Type Name="AnalysisBuilder" Kind="Class" />
      <Type Name="AnalysisMiddleware" Kind="Class" />
      <Type Name="AnalysisStartupFilter" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc">
      <Type Name="AcceptedAtActionResult" Kind="Class" />
      <Type Name="AcceptedAtRouteResult" Kind="Class" />
      <Type Name="AcceptedResult" Kind="Class" />
      <Type Name="AcceptVerbsAttribute" Kind="Class" />
      <Type Name="ActionContext" Kind="Class" />
      <Type Name="ActionContextAttribute" Kind="Class" />
      <Type Name="ActionNameAttribute" Kind="Class" />
      <Type Name="ActionResult" Kind="Class" />
      <Type Name="ApiExplorerSettingsAttribute" Kind="Class" />
      <Type Name="AreaAttribute" Kind="Class" />
      <Type Name="AutoValidateAntiforgeryTokenAttribute" Kind="Class" />
      <Type Name="BadRequestObjectResult" Kind="Class" />
      <Type Name="BadRequestResult" Kind="Class" />
      <Type Name="BindAttribute" Kind="Class" />
      <Type Name="BindPropertyAttribute" Kind="Class" />
      <Type Name="CacheProfile" Kind="Class" />
      <Type Name="ChallengeResult" Kind="Class" />
      <Type Name="ConsumesAttribute" Kind="Class" />
      <Type Name="ContentResult" Kind="Class" />
      <Type Name="Controller" Kind="Class" />
      <Type Name="ControllerAttribute" Kind="Class" />
      <Type Name="ControllerBase" Kind="Class" />
      <Type Name="ControllerContext" Kind="Class" />
      <Type Name="ControllerContextAttribute" Kind="Class" />
      <Type Name="CookieTempDataProviderOptions" Kind="Class" />
      <Type Name="CreatedAtActionResult" Kind="Class" />
      <Type Name="CreatedAtRouteResult" Kind="Class" />
      <Type Name="CreatedResult" Kind="Class" />
      <Type Name="DisableRequestSizeLimitAttribute" Kind="Class" />
      <Type Name="EmptyResult" Kind="Class" />
      <Type Name="FileContentResult" Kind="Class" />
      <Type Name="FileResult" Kind="Class" />
      <Type Name="FileStreamResult" Kind="Class" />
      <Type Name="ForbidResult" Kind="Class" />
      <Type Name="FormatFilterAttribute" Kind="Class" />
      <Type Name="FromBodyAttribute" Kind="Class" />
      <Type Name="FromFormAttribute" Kind="Class" />
      <Type Name="FromHeaderAttribute" Kind="Class" />
      <Type Name="FromQueryAttribute" Kind="Class" />
      <Type Name="FromRouteAttribute" Kind="Class" />
      <Type Name="FromServicesAttribute" Kind="Class" />
      <Type Name="HiddenInputAttribute" Kind="Class" />
      <Type Name="HttpDeleteAttribute" Kind="Class" />
      <Type Name="HttpGetAttribute" Kind="Class" />
      <Type Name="HttpHeadAttribute" Kind="Class" />
      <Type Name="HttpOptionsAttribute" Kind="Class" />
      <Type Name="HttpPatchAttribute" Kind="Class" />
      <Type Name="HttpPostAttribute" Kind="Class" />
      <Type Name="HttpPutAttribute" Kind="Class" />
      <Type Name="IActionResult" Kind="Interface" />
      <Type Name="IDesignTimeMvcBuilderConfiguration" Kind="Interface" />
      <Type Name="IgnoreAntiforgeryTokenAttribute" Kind="Class" />
      <Type Name="IRequestSizePolicy" Kind="Interface" />
      <Type Name="IUrlHelper" Kind="Interface" />
      <Type Name="IViewComponentHelper" Kind="Interface" />
      <Type Name="IViewComponentResult" Kind="Interface" />
      <Type Name="JsonPatchExtensions" Kind="Class" />
      <Type Name="JsonResult" Kind="Class" />
      <Type Name="LocalRedirectResult" Kind="Class" />
      <Type Name="MiddlewareFilterAttribute" Kind="Class" />
      <Type Name="ModelBinderAttribute" Kind="Class" />
      <Type Name="ModelMetadataTypeAttribute" Kind="Class" />
      <Type Name="MvcJsonOptions" Kind="Class" />
      <Type Name="MvcOptions" Kind="Class" />
      <Type Name="MvcViewOptions" Kind="Class" />
      <Type Name="NoContentResult" Kind="Class" />
      <Type Name="NonActionAttribute" Kind="Class" />
      <Type Name="NonControllerAttribute" Kind="Class" />
      <Type Name="NonViewComponentAttribute" Kind="Class" />
      <Type Name="NotFoundObjectResult" Kind="Class" />
      <Type Name="NotFoundResult" Kind="Class" />
      <Type Name="ObjectResult" Kind="Class" />
      <Type Name="OkObjectResult" Kind="Class" />
      <Type Name="OkResult" Kind="Class" />
      <Type Name="PartialViewResult" Kind="Class" />
      <Type Name="PhysicalFileResult" Kind="Class" />
      <Type Name="ProducesAttribute" Kind="Class" />
      <Type Name="ProducesResponseTypeAttribute" Kind="Class" />
      <Type Name="RazorViewEngineOptionsSetup" Kind="Class" />
      <Type Name="RedirectResult" Kind="Class" />
      <Type Name="RedirectToActionResult" Kind="Class" />
      <Type Name="RedirectToPageResult" Kind="Class" />
      <Type Name="RedirectToRouteResult" Kind="Class" />
      <Type Name="RemoteAttribute" Kind="Class" />
      <Type Name="RequestSizeLimitAttribute" Kind="Class" />
      <Type Name="RequireHttpsAttribute" Kind="Class" />
      <Type Name="ResponseCacheAttribute" Kind="Class" />
      <Type Name="ResponseCacheLocation" Kind="Enumeration" />
      <Type Name="RouteAttribute" Kind="Class" />
      <Type Name="SerializableError" Kind="Class" />
      <Type Name="ServiceFilterAttribute" Kind="Class" />
      <Type Name="SignInResult" Kind="Class" />
      <Type Name="SignOutResult" Kind="Class" />
      <Type Name="SkipStatusCodePagesAttribute" Kind="Class" />
      <Type Name="StatusCodeResult" Kind="Class" />
      <Type Name="TempDataAttribute" Kind="Class" />
      <Type Name="TypeFilterAttribute" Kind="Class" />
      <Type Name="UnauthorizedResult" Kind="Class" />
      <Type Name="UnsupportedMediaTypeResult" Kind="Class" />
      <Type Name="UrlHelperExtensions" Kind="Class" />
      <Type Name="ValidateAntiForgeryTokenAttribute" Kind="Class" />
      <Type Name="ViewComponent" Kind="Class" />
      <Type Name="ViewComponentAttribute" Kind="Class" />
      <Type Name="ViewComponentResult" Kind="Class" />
      <Type Name="ViewResult" Kind="Class" />
      <Type Name="VirtualFileResult" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.Abstractions">
      <Type Name="ActionDescriptor" Kind="Class" />
      <Type Name="ActionDescriptorExtensions" Kind="Class" />
      <Type Name="ActionDescriptorProviderContext" Kind="Class" />
      <Type Name="ActionInvokerProviderContext" Kind="Class" />
      <Type Name="IActionDescriptorProvider" Kind="Interface" />
      <Type Name="IActionInvoker" Kind="Interface" />
      <Type Name="IActionInvokerProvider" Kind="Interface" />
      <Type Name="ParameterDescriptor" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.ActionConstraints">
      <Type Name="ActionConstraintContext" Kind="Class" />
      <Type Name="ActionConstraintItem" Kind="Class" />
      <Type Name="ActionConstraintProviderContext" Kind="Class" />
      <Type Name="ActionMethodSelectorAttribute" Kind="Class" />
      <Type Name="ActionSelectorCandidate" Kind="Structure" />
      <Type Name="IActionConstraint" Kind="Interface" />
      <Type Name="IActionConstraintFactory" Kind="Interface" />
      <Type Name="IActionConstraintMetadata" Kind="Interface" />
      <Type Name="IActionConstraintProvider" Kind="Interface" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.ApiExplorer">
      <Type Name="ApiDescription" Kind="Class" />
      <Type Name="ApiDescriptionExtensions" Kind="Class" />
      <Type Name="ApiDescriptionGroup" Kind="Class" />
      <Type Name="ApiDescriptionGroupCollection" Kind="Class" />
      <Type Name="ApiDescriptionGroupCollectionProvider" Kind="Class" />
      <Type Name="ApiDescriptionProviderContext" Kind="Class" />
      <Type Name="ApiParameterDescription" Kind="Class" />
      <Type Name="ApiParameterRouteInfo" Kind="Class" />
      <Type Name="ApiRequestFormat" Kind="Class" />
      <Type Name="ApiResponseFormat" Kind="Class" />
      <Type Name="ApiResponseType" Kind="Class" />
      <Type Name="DefaultApiDescriptionProvider" Kind="Class" />
      <Type Name="IApiDescriptionGroupCollectionProvider" Kind="Interface" />
      <Type Name="IApiDescriptionGroupNameProvider" Kind="Interface" />
      <Type Name="IApiDescriptionProvider" Kind="Interface" />
      <Type Name="IApiDescriptionVisibilityProvider" Kind="Interface" />
      <Type Name="IApiRequestFormatMetadataProvider" Kind="Interface" />
      <Type Name="IApiRequestMetadataProvider" Kind="Interface" />
      <Type Name="IApiResponseMetadataProvider" Kind="Interface" />
      <Type Name="IApiResponseTypeMetadataProvider" Kind="Interface" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.ApplicationModels">
      <Type Name="ActionModel" Kind="Class" />
      <Type Name="ApiExplorerModel" Kind="Class" />
      <Type Name="ApplicationModel" Kind="Class" />
      <Type Name="ApplicationModelProviderContext" Kind="Class" />
      <Type Name="AttributeRouteModel" Kind="Class" />
      <Type Name="ControllerModel" Kind="Class" />
      <Type Name="IActionModelConvention" Kind="Interface" />
      <Type Name="IApiExplorerModel" Kind="Interface" />
      <Type Name="IApplicationModelConvention" Kind="Interface" />
      <Type Name="IApplicationModelProvider" Kind="Interface" />
      <Type Name="IBindingModel" Kind="Interface" />
      <Type Name="ICommonModel" Kind="Interface" />
      <Type Name="IControllerModelConvention" Kind="Interface" />
      <Type Name="IFilterModel" Kind="Interface" />
      <Type Name="IPageApplicationModelConvention" Kind="Interface" />
      <Type Name="IPageApplicationModelProvider" Kind="Interface" />
      <Type Name="IPageConvention" Kind="Interface" />
      <Type Name="IPageRouteModelConvention" Kind="Interface" />
      <Type Name="IPageRouteModelProvider" Kind="Interface" />
      <Type Name="IParameterModelConvention" Kind="Interface" />
      <Type Name="IPropertyModel" Kind="Interface" />
      <Type Name="PageApplicationModel" Kind="Class" />
      <Type Name="PageApplicationModelProviderContext" Kind="Class" />
      <Type Name="PageConventionCollection" Kind="Class" />
      <Type Name="PageHandlerModel" Kind="Class" />
      <Type Name="PageParameterModel" Kind="Class" />
      <Type Name="PagePropertyModel" Kind="Class" />
      <Type Name="PageRouteModel" Kind="Class" />
      <Type Name="PageRouteModelProviderContext" Kind="Class" />
      <Type Name="ParameterModel" Kind="Class" />
      <Type Name="PropertyModel" Kind="Class" />
      <Type Name="SelectorModel" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.ApplicationParts">
      <Type Name="ApplicationPart" Kind="Class" />
      <Type Name="ApplicationPartManager" Kind="Class" />
      <Type Name="AssemblyPart" Kind="Class" />
      <Type Name="IApplicationFeatureProvider" Kind="Interface" />
      <Type Name="IApplicationFeatureProvider`1" DisplayName="IApplicationFeatureProvider&lt;TFeature&gt;" Kind="Interface" />
      <Type Name="IApplicationPartTypeProvider" Kind="Interface" />
      <Type Name="ICompilationReferencesProvider" Kind="Interface" />
      <Type Name="ViewInfo" Kind="Class" />
      <Type Name="ViewInfoContainer" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.Authorization">
      <Type Name="AllowAnonymousFilter" Kind="Class" />
      <Type Name="AuthorizeFilter" Kind="Class" />
      <Type Name="IAllowAnonymousFilter" Kind="Interface" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.Controllers">
      <Type Name="ControllerActionDescriptor" Kind="Class" />
      <Type Name="ControllerActivatorProvider" Kind="Class" />
      <Type Name="ControllerBoundPropertyDescriptor" Kind="Class" />
      <Type Name="ControllerFactoryProvider" Kind="Class" />
      <Type Name="ControllerFeature" Kind="Class" />
      <Type Name="ControllerFeatureProvider" Kind="Class" />
      <Type Name="ControllerParameterDescriptor" Kind="Class" />
      <Type Name="DefaultControllerActivator" Kind="Class" />
      <Type Name="DefaultControllerFactory" Kind="Class" />
      <Type Name="IControllerActivator" Kind="Interface" />
      <Type Name="IControllerActivatorProvider" Kind="Interface" />
      <Type Name="IControllerFactory" Kind="Interface" />
      <Type Name="IControllerFactoryProvider" Kind="Interface" />
      <Type Name="ServiceBasedControllerActivator" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.Cors">
      <Type Name="CorsAuthorizationFilter" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.Cors.Internal">
      <Type Name="CorsApplicationModelProvider" Kind="Class" />
      <Type Name="CorsAuthorizationFilterFactory" Kind="Class" />
      <Type Name="CorsHttpMethodActionConstraint" Kind="Class" />
      <Type Name="DisableCorsAuthorizationFilter" Kind="Class" />
      <Type Name="ICorsAuthorizationFilter" Kind="Interface" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.DataAnnotations">
      <Type Name="AttributeAdapterBase`1" DisplayName="AttributeAdapterBase&lt;TAttribute&gt;" Kind="Class" />
      <Type Name="IAttributeAdapter" Kind="Interface" />
      <Type Name="IValidationAttributeAdapterProvider" Kind="Interface" />
      <Type Name="MvcDataAnnotationsLocalizationOptions" Kind="Class" />
      <Type Name="ValidationAttributeAdapter`1" DisplayName="ValidationAttributeAdapter&lt;TAttribute&gt;" Kind="Class" />
      <Type Name="ValidationAttributeAdapterProvider" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.DataAnnotations.Internal">
      <Type Name="AttributeAdapterBase`1" DisplayName="AttributeAdapterBase&lt;TAttribute&gt;" Kind="Class" />
      <Type Name="CompareAttributeAdapter" Kind="Class" />
      <Type Name="DataAnnotationsClientModelValidatorProvider" Kind="Class" />
      <Type Name="DataAnnotationsLocalizationServices" Kind="Class" />
      <Type Name="DataAnnotationsMetadataProvider" Kind="Class" />
      <Type Name="DataAnnotationsModelValidator" Kind="Class" />
      <Type Name="DataAnnotationsModelValidatorProvider" Kind="Class" />
      <Type Name="DataTypeAttributeAdapter" Kind="Class" />
      <Type Name="DefaultClientModelValidatorProvider" Kind="Class" />
      <Type Name="MaxLengthAttributeAdapter" Kind="Class" />
      <Type Name="MinLengthAttributeAdapter" Kind="Class" />
      <Type Name="MvcDataAnnotationsLocalizationOptionsSetup" Kind="Class" />
      <Type Name="MvcDataAnnotationsMvcOptionsSetup" Kind="Class" />
      <Type Name="NumericClientModelValidator" Kind="Class" />
      <Type Name="NumericClientModelValidatorProvider" Kind="Class" />
      <Type Name="RangeAttributeAdapter" Kind="Class" />
      <Type Name="RegularExpressionAttributeAdapter" Kind="Class" />
      <Type Name="RequiredAttributeAdapter" Kind="Class" />
      <Type Name="StringLengthAttributeAdapter" Kind="Class" />
      <Type Name="ValidatableObjectAdapter" Kind="Class" />
      <Type Name="ValidationAttributeAdapter`1" DisplayName="ValidationAttributeAdapter&lt;TAttribute&gt;" Kind="Class" />
      <Type Name="ValidationAttributeAdapterProvider" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.Filters">
      <Type Name="ActionExecutedContext" Kind="Class" />
      <Type Name="ActionExecutingContext" Kind="Class" />
      <Type Name="ActionExecutionDelegate" Kind="Delegate" />
      <Type Name="ActionFilterAttribute" Kind="Class" />
      <Type Name="AuthorizationFilterContext" Kind="Class" />
      <Type Name="ExceptionContext" Kind="Class" />
      <Type Name="ExceptionFilterAttribute" Kind="Class" />
      <Type Name="FilterCollection" Kind="Class" />
      <Type Name="FilterContext" Kind="Class" />
      <Type Name="FilterDescriptor" Kind="Class" />
      <Type Name="FilterItem" Kind="Class" />
      <Type Name="FilterProviderContext" Kind="Class" />
      <Type Name="FilterScope" Kind="Class" />
      <Type Name="IActionFilter" Kind="Interface" />
      <Type Name="IAsyncActionFilter" Kind="Interface" />
      <Type Name="IAsyncAuthorizationFilter" Kind="Interface" />
      <Type Name="IAsyncExceptionFilter" Kind="Interface" />
      <Type Name="IAsyncPageFilter" Kind="Interface" />
      <Type Name="IAsyncResourceFilter" Kind="Interface" />
      <Type Name="IAsyncResultFilter" Kind="Interface" />
      <Type Name="IAuthorizationFilter" Kind="Interface" />
      <Type Name="IExceptionFilter" Kind="Interface" />
      <Type Name="IFilterContainer" Kind="Interface" />
      <Type Name="IFilterFactory" Kind="Interface" />
      <Type Name="IFilterMetadata" Kind="Interface" />
      <Type Name="IFilterProvider" Kind="Interface" />
      <Type Name="IOrderedFilter" Kind="Interface" />
      <Type Name="IPageFilter" Kind="Interface" />
      <Type Name="IResourceFilter" Kind="Interface" />
      <Type Name="IResultFilter" Kind="Interface" />
      <Type Name="PageHandlerExecutedContext" Kind="Class" />
      <Type Name="PageHandlerExecutingContext" Kind="Class" />
      <Type Name="PageHandlerExecutionDelegate" Kind="Delegate" />
      <Type Name="PageHandlerSelectedContext" Kind="Class" />
      <Type Name="ResourceExecutedContext" Kind="Class" />
      <Type Name="ResourceExecutingContext" Kind="Class" />
      <Type Name="ResourceExecutionDelegate" Kind="Delegate" />
      <Type Name="ResultExecutedContext" Kind="Class" />
      <Type Name="ResultExecutingContext" Kind="Class" />
      <Type Name="ResultExecutionDelegate" Kind="Delegate" />
      <Type Name="ResultFilterAttribute" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.Formatters">
      <Type Name="FormatFilter" Kind="Class" />
      <Type Name="FormatterCollection`1" DisplayName="FormatterCollection&lt;TFormatter&gt;" Kind="Class" />
      <Type Name="FormatterMappings" Kind="Class" />
      <Type Name="HttpNoContentOutputFormatter" Kind="Class" />
      <Type Name="IInputFormatter" Kind="Interface" />
      <Type Name="InputFormatter" Kind="Class" />
      <Type Name="InputFormatterContext" Kind="Class" />
      <Type Name="InputFormatterResult" Kind="Class" />
      <Type Name="IOutputFormatter" Kind="Interface" />
      <Type Name="JsonInputFormatter" Kind="Class" />
      <Type Name="JsonOutputFormatter" Kind="Class" />
      <Type Name="JsonPatchInputFormatter" Kind="Class" />
      <Type Name="JsonSerializerSettingsProvider" Kind="Class" />
      <Type Name="MediaType" Kind="Structure" />
      <Type Name="MediaTypeCollection" Kind="Class" />
      <Type Name="OutputFormatter" Kind="Class" />
      <Type Name="OutputFormatterCanWriteContext" Kind="Class" />
      <Type Name="OutputFormatterWriteContext" Kind="Class" />
      <Type Name="StreamOutputFormatter" Kind="Class" />
      <Type Name="StringOutputFormatter" Kind="Class" />
      <Type Name="TextInputFormatter" Kind="Class" />
      <Type Name="TextOutputFormatter" Kind="Class" />
      <Type Name="XmlDataContractSerializerInputFormatter" Kind="Class" />
      <Type Name="XmlDataContractSerializerOutputFormatter" Kind="Class" />
      <Type Name="XmlSerializerInputFormatter" Kind="Class" />
      <Type Name="XmlSerializerOutputFormatter" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.Formatters.Internal">
      <Type Name="AcceptHeaderParser" Kind="Class" />
      <Type Name="HttpParseResult" Kind="Enumeration" />
      <Type Name="HttpTokenParsingRules" Kind="Class" />
      <Type Name="IFormatFilter" Kind="Interface" />
      <Type Name="MediaTypeSegmentWithQuality" Kind="Structure" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.Formatters.Json">
      <Type Name="JsonPatchOperationsArrayProvider" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.Formatters.Json.Internal">
      <Type Name="JsonArrayPool`1" DisplayName="JsonArrayPool&lt;T&gt;" Kind="Class" />
      <Type Name="JsonResultExecutor" Kind="Class" />
      <Type Name="JsonSerializerObjectPolicy" Kind="Class" />
      <Type Name="MvcJsonMvcOptionsSetup" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.Formatters.Xml">
      <Type Name="DelegatingEnumerable`2" DisplayName="DelegatingEnumerable&lt;TWrapped,TDeclared&gt;" Kind="Class" />
      <Type Name="DelegatingEnumerator`2" DisplayName="DelegatingEnumerator&lt;TWrapped,TDeclared&gt;" Kind="Class" />
      <Type Name="EnumerableWrapperProvider" Kind="Class" />
      <Type Name="EnumerableWrapperProviderFactory" Kind="Class" />
      <Type Name="IUnwrappable" Kind="Interface" />
      <Type Name="IWrapperProvider" Kind="Interface" />
      <Type Name="IWrapperProviderFactory" Kind="Interface" />
      <Type Name="SerializableErrorWrapper" Kind="Class" />
      <Type Name="SerializableErrorWrapperProvider" Kind="Class" />
      <Type Name="SerializableErrorWrapperProviderFactory" Kind="Class" />
      <Type Name="WrapperProviderContext" Kind="Class" />
      <Type Name="WrapperProviderFactoriesExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.Formatters.Xml.Internal">
      <Type Name="FormattingUtilities" Kind="Class" />
      <Type Name="MvcXmlDataContractSerializerMvcOptionsSetup" Kind="Class" />
      <Type Name="MvcXmlSerializerMvcOptionsSetup" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.Infrastructure">
      <Type Name="ActionContextAccessor" Kind="Class" />
      <Type Name="ActionDescriptorCollection" Kind="Class" />
      <Type Name="IActionContextAccessor" Kind="Interface" />
      <Type Name="IActionDescriptorChangeProvider" Kind="Interface" />
      <Type Name="IActionDescriptorCollectionProvider" Kind="Interface" />
      <Type Name="IActionInvokerFactory" Kind="Interface" />
      <Type Name="IActionSelector" Kind="Interface" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.Internal">
      <Type Name="ActionConstraintCache" Kind="Class" />
      <Type Name="ActionDescriptorCollectionProvider" Kind="Class" />
      <Type Name="ActionInvokerFactory" Kind="Class" />
      <Type Name="ActionSelectionDecisionTree" Kind="Class" />
      <Type Name="ActionSelector" Kind="Class" />
      <Type Name="ActionSelectorDecisionTreeProvider" Kind="Class" />
      <Type Name="AmbiguousActionException" Kind="Class" />
      <Type Name="ApiDescriptionActionData" Kind="Class" />
      <Type Name="ApplicationModelConventions" Kind="Class" />
      <Type Name="AttributeRoute" Kind="Class" />
      <Type Name="AttributeRouteEntries" Kind="Class" />
      <Type Name="AttributeRouting" Kind="Class" />
      <Type Name="AuthorizationApplicationModelProvider" Kind="Class" />
      <Type Name="ClientValidatorCache" Kind="Class" />
      <Type Name="ContentResultExecutor" Kind="Class" />
      <Type Name="ControllerActionDescriptorBuilder" Kind="Class" />
      <Type Name="ControllerActionDescriptorProvider" Kind="Class" />
      <Type Name="ControllerActionExecutor" Kind="Class" />
      <Type Name="ControllerActionFilter" Kind="Class" />
      <Type Name="ControllerActionInvoker" Kind="Class" />
      <Type Name="ControllerActionInvokerCache" Kind="Class" />
      <Type Name="ControllerActionInvokerCache+ControllerActionInvokerState" Kind="Structure" />
      <Type Name="ControllerActionInvokerCacheEntry" Kind="Class" />
      <Type Name="ControllerActionInvokerProvider" Kind="Class" />
      <Type Name="ControllerBinderDelegate" Kind="Delegate" />
      <Type Name="ControllerBinderDelegateProvider" Kind="Class" />
      <Type Name="ControllerResultFilter" Kind="Class" />
      <Type Name="CopyOnWriteList`1" DisplayName="CopyOnWriteList&lt;T&gt;" Kind="Class" />
      <Type Name="DefaultActionConstraintProvider" Kind="Class" />
      <Type Name="DefaultApplicationModelProvider" Kind="Class" />
      <Type Name="DefaultAssemblyPartDiscoveryProvider" Kind="Class" />
      <Type Name="DefaultBindingMetadataProvider" Kind="Class" />
      <Type Name="DefaultCollectionValidationStrategy" Kind="Class" />
      <Type Name="DefaultComplexObjectValidationStrategy" Kind="Class" />
      <Type Name="DefaultCompositeMetadataDetailsProvider" Kind="Class" />
      <Type Name="DefaultControllerArgumentBinder" Kind="Class" />
      <Type Name="DefaultControllerPropertyActivator" Kind="Class" />
      <Type Name="DefaultFilterProvider" Kind="Class" />
      <Type Name="DefaultModelValidatorProvider" Kind="Class" />
      <Type Name="DefaultObjectValidator" Kind="Class" />
      <Type Name="DefaultValidationMetadataProvider" Kind="Class" />
      <Type Name="DisableRequestSizeLimitResourceFilter" Kind="Class" />
      <Type Name="ElementalValueProvider" Kind="Class" />
      <Type Name="EmptyArray`1" DisplayName="EmptyArray&lt;TElement&gt;" Kind="Class" />
      <Type Name="ExplicitIndexCollectionValidationStrategy" Kind="Class" />
      <Type Name="FileContentResultExecutor" Kind="Class" />
      <Type Name="FileResultExecutorBase" Kind="Class" />
      <Type Name="FileStreamResultExecutor" Kind="Class" />
      <Type Name="FilterCursor" Kind="Structure" />
      <Type Name="FilterCursorItem`2" DisplayName="FilterCursorItem&lt;TFilter,TFilterAsync&gt;" Kind="Structure" />
      <Type Name="FilterDescriptorOrderComparer" Kind="Class" />
      <Type Name="FilterFactory" Kind="Class" />
      <Type Name="FilterFactoryResult" Kind="Structure" />
      <Type Name="HttpMethodActionConstraint" Kind="Class" />
      <Type Name="IActionInvokerFactory" Kind="Interface" />
      <Type Name="IActionSelectionDecisionTree" Kind="Interface" />
      <Type Name="IActionSelectorDecisionTreeProvider" Kind="Interface" />
      <Type Name="IConsumesActionConstraint" Kind="Interface" />
      <Type Name="IControllerArgumentBinder" Kind="Interface" />
      <Type Name="IControllerPropertyActivator" Kind="Interface" />
      <Type Name="IHttpRequestStreamReaderFactory" Kind="Interface" />
      <Type Name="IHttpResponseStreamWriterFactory" Kind="Interface" />
      <Type Name="IMiddlewareFilterFeature" Kind="Interface" />
      <Type Name="IResponseCacheFilter" Kind="Interface" />
      <Type Name="ITypeActivatorCache" Kind="Interface" />
      <Type Name="LocalRedirectResultExecutor" Kind="Class" />
      <Type Name="MemoryPoolHttpRequestStreamReaderFactory" Kind="Class" />
      <Type Name="MemoryPoolHttpResponseStreamWriterFactory" Kind="Class" />
      <Type Name="MiddlewareFilterBuilder" Kind="Class" />
      <Type Name="MiddlewareFilterConfigurationProvider" Kind="Class" />
      <Type Name="MiddlewareFilterFeature" Kind="Class" />
      <Type Name="MvcAttributeRouteHandler" Kind="Class" />
      <Type Name="MvcBuilder" Kind="Class" />
      <Type Name="MvcCoreBuilder" Kind="Class" />
      <Type Name="MvcCoreDiagnosticSourceExtensions" Kind="Class" />
      <Type Name="MvcCoreMvcOptionsSetup" Kind="Class" />
      <Type Name="MvcCoreRouteOptionsSetup" Kind="Class" />
      <Type Name="MvcMarkerService" Kind="Class" />
      <Type Name="MvcRazorPagesDiagnosticSourceExtensions" Kind="Class" />
      <Type Name="MvcRouteHandler" Kind="Class" />
      <Type Name="NonDisposableStream" Kind="Class" />
      <Type Name="NoOpBinder" Kind="Class" />
      <Type Name="NormalizedRouteValue" Kind="Class" />
      <Type Name="ObjectMethodExecutor" Kind="Class" />
      <Type Name="ObjectResultExecutor" Kind="Class" />
      <Type Name="ParameterDefaultValues" Kind="Class" />
      <Type Name="PhysicalFileResultExecutor" Kind="Class" />
      <Type Name="PhysicalFileResultExecutor+FileMetadata" Kind="Class" />
      <Type Name="PlaceholderBinder" Kind="Class" />
      <Type Name="PrefixContainer" Kind="Class" />
      <Type Name="PropertyValueSetter" Kind="Class" />
      <Type Name="RedirectResultExecutor" Kind="Class" />
      <Type Name="RedirectToActionResultExecutor" Kind="Class" />
      <Type Name="RedirectToPageResultExecutor" Kind="Class" />
      <Type Name="RedirectToRouteResultExecutor" Kind="Class" />
      <Type Name="RequestSizeLimitResourceFilter" Kind="Class" />
      <Type Name="ResourceInvoker" Kind="Class" />
      <Type Name="ResponseCacheFilter" Kind="Class" />
      <Type Name="ResponseContentTypeHelper" Kind="Class" />
      <Type Name="ShortFormDictionaryValidationStrategy`2" DisplayName="ShortFormDictionaryValidationStrategy&lt;TKey,TValue&gt;" Kind="Class" />
      <Type Name="TaskCache" Kind="Class" />
      <Type Name="TaskCache`1" DisplayName="TaskCache&lt;T&gt;" Kind="Class" />
      <Type Name="TypeActivatorCache" Kind="Class" />
      <Type Name="ValidatorCache" Kind="Class" />
      <Type Name="ViewEnginePath" Kind="Class" />
      <Type Name="VirtualFileResultExecutor" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.Localization">
      <Type Name="HtmlLocalizer" Kind="Class" />
      <Type Name="HtmlLocalizer`1" DisplayName="HtmlLocalizer&lt;TResource&gt;" Kind="Class" />
      <Type Name="HtmlLocalizerExtensions" Kind="Class" />
      <Type Name="HtmlLocalizerFactory" Kind="Class" />
      <Type Name="IHtmlLocalizer" Kind="Interface" />
      <Type Name="IHtmlLocalizer`1" DisplayName="IHtmlLocalizer&lt;TResource&gt;" Kind="Interface" />
      <Type Name="IHtmlLocalizerFactory" Kind="Interface" />
      <Type Name="IViewLocalizer" Kind="Interface" />
      <Type Name="LocalizedHtmlString" Kind="Class" />
      <Type Name="ViewLocalizer" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.Localization.Internal">
      <Type Name="MvcLocalizationServices" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.ModelBinding">
      <Type Name="BindingBehavior" Kind="Enumeration" />
      <Type Name="BindingBehaviorAttribute" Kind="Class" />
      <Type Name="BindingInfo" Kind="Class" />
      <Type Name="BindingSource" Kind="Class" />
      <Type Name="BindingSourceValueProvider" Kind="Class" />
      <Type Name="BindNeverAttribute" Kind="Class" />
      <Type Name="BindRequiredAttribute" Kind="Class" />
      <Type Name="CompositeBindingSource" Kind="Class" />
      <Type Name="CompositeValueProvider" Kind="Class" />
      <Type Name="DefaultModelBindingContext" Kind="Class" />
      <Type Name="DefaultPropertyFilterProvider`1" DisplayName="DefaultPropertyFilterProvider&lt;TModel&gt;" Kind="Class" />
      <Type Name="EmptyModelMetadataProvider" Kind="Class" />
      <Type Name="EnumGroupAndName" Kind="Structure" />
      <Type Name="FormValueProvider" Kind="Class" />
      <Type Name="FormValueProviderFactory" Kind="Class" />
      <Type Name="IBinderTypeProviderMetadata" Kind="Interface" />
      <Type Name="IBindingSourceMetadata" Kind="Interface" />
      <Type Name="IBindingSourceValueProvider" Kind="Interface" />
      <Type Name="ICollectionModelBinder" Kind="Interface" />
      <Type Name="IEnumerableValueProvider" Kind="Interface" />
      <Type Name="IModelBinder" Kind="Interface" />
      <Type Name="IModelBinderFactory" Kind="Interface" />
      <Type Name="IModelBinderProvider" Kind="Interface" />
      <Type Name="IModelMetadataProvider" Kind="Interface" />
      <Type Name="IModelNameProvider" Kind="Interface" />
      <Type Name="IOptionalBinderMetadata" Kind="Interface" />
      <Type Name="IPropertyFilterProvider" Kind="Interface" />
      <Type Name="IRequestPredicateProvider" Kind="Interface" />
      <Type Name="IValueProvider" Kind="Interface" />
      <Type Name="IValueProviderFactory" Kind="Interface" />
      <Type Name="JQueryFormValueProvider" Kind="Class" />
      <Type Name="JQueryFormValueProviderFactory" Kind="Class" />
      <Type Name="ModelAttributes" Kind="Class" />
      <Type Name="ModelBinderFactory" Kind="Class" />
      <Type Name="ModelBinderFactoryContext" Kind="Class" />
      <Type Name="ModelBinderProviderContext" Kind="Class" />
      <Type Name="ModelBinderProviderExtensions" Kind="Class" />
      <Type Name="ModelBindingContext" Kind="Class" />
      <Type Name="ModelBindingContext+NestedScope" Kind="Structure" />
      <Type Name="ModelBindingResult" Kind="Structure" />
      <Type Name="ModelError" Kind="Class" />
      <Type Name="ModelErrorCollection" Kind="Class" />
      <Type Name="ModelMetadata" Kind="Class" />
      <Type Name="ModelMetadataProviderExtensions" Kind="Class" />
      <Type Name="ModelNames" Kind="Class" />
      <Type Name="ModelPropertyCollection" Kind="Class" />
      <Type Name="ModelStateDictionary" Kind="Class" />
      <Type Name="ModelStateDictionary+Enumerator" Kind="Structure" />
      <Type Name="ModelStateDictionary+KeyEnumerable" Kind="Structure" />
      <Type Name="ModelStateDictionary+KeyEnumerator" Kind="Structure" />
      <Type Name="ModelStateDictionary+PrefixEnumerable" Kind="Structure" />
      <Type Name="ModelStateDictionary+ValueEnumerable" Kind="Structure" />
      <Type Name="ModelStateDictionary+ValueEnumerator" Kind="Structure" />
      <Type Name="ModelStateDictionaryExtensions" Kind="Class" />
      <Type Name="ModelStateEntry" Kind="Class" />
      <Type Name="ModelValidationState" Kind="Enumeration" />
      <Type Name="ParameterBinder" Kind="Class" />
      <Type Name="QueryStringValueProvider" Kind="Class" />
      <Type Name="QueryStringValueProviderFactory" Kind="Class" />
      <Type Name="RouteValueProvider" Kind="Class" />
      <Type Name="RouteValueProviderFactory" Kind="Class" />
      <Type Name="SuppressChildValidationMetadataProvider" Kind="Class" />
      <Type Name="TooManyModelErrorsException" Kind="Class" />
      <Type Name="UnsupportedContentTypeException" Kind="Class" />
      <Type Name="UnsupportedContentTypeFilter" Kind="Class" />
      <Type Name="ValueProviderFactoryContext" Kind="Class" />
      <Type Name="ValueProviderFactoryExtensions" Kind="Class" />
      <Type Name="ValueProviderResult" Kind="Structure" />
      <Type Name="ValueProviderResultExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.ModelBinding.Binders">
      <Type Name="ArrayModelBinder`1" DisplayName="ArrayModelBinder&lt;TElement&gt;" Kind="Class" />
      <Type Name="ArrayModelBinderProvider" Kind="Class" />
      <Type Name="BinderTypeModelBinder" Kind="Class" />
      <Type Name="BinderTypeModelBinderProvider" Kind="Class" />
      <Type Name="BodyModelBinder" Kind="Class" />
      <Type Name="BodyModelBinderProvider" Kind="Class" />
      <Type Name="ByteArrayModelBinder" Kind="Class" />
      <Type Name="ByteArrayModelBinderProvider" Kind="Class" />
      <Type Name="CancellationTokenModelBinder" Kind="Class" />
      <Type Name="CancellationTokenModelBinderProvider" Kind="Class" />
      <Type Name="CollectionModelBinder`1" DisplayName="CollectionModelBinder&lt;TElement&gt;" Kind="Class" />
      <Type Name="CollectionModelBinderProvider" Kind="Class" />
      <Type Name="ComplexTypeModelBinder" Kind="Class" />
      <Type Name="ComplexTypeModelBinderProvider" Kind="Class" />
      <Type Name="DecimalModelBinder" Kind="Class" />
      <Type Name="DictionaryModelBinder`2" DisplayName="DictionaryModelBinder&lt;TKey,TValue&gt;" Kind="Class" />
      <Type Name="DictionaryModelBinderProvider" Kind="Class" />
      <Type Name="DoubleModelBinder" Kind="Class" />
      <Type Name="FloatingPointTypeModelBinderProvider" Kind="Class" />
      <Type Name="FloatModelBinder" Kind="Class" />
      <Type Name="FormCollectionModelBinder" Kind="Class" />
      <Type Name="FormCollectionModelBinderProvider" Kind="Class" />
      <Type Name="FormFileModelBinder" Kind="Class" />
      <Type Name="FormFileModelBinderProvider" Kind="Class" />
      <Type Name="HeaderModelBinder" Kind="Class" />
      <Type Name="HeaderModelBinderProvider" Kind="Class" />
      <Type Name="KeyValuePairModelBinder`2" DisplayName="KeyValuePairModelBinder&lt;TKey,TValue&gt;" Kind="Class" />
      <Type Name="KeyValuePairModelBinderProvider" Kind="Class" />
      <Type Name="ServicesModelBinder" Kind="Class" />
      <Type Name="ServicesModelBinderProvider" Kind="Class" />
      <Type Name="SimpleTypeModelBinder" Kind="Class" />
      <Type Name="SimpleTypeModelBinderProvider" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.ModelBinding.Internal">
      <Type Name="ModelBindingHelper" Kind="Class" />
      <Type Name="ValidationStack" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.ModelBinding.Metadata">
      <Type Name="BindingMetadata" Kind="Class" />
      <Type Name="BindingMetadataProviderContext" Kind="Class" />
      <Type Name="BindingSourceMetadataProvider" Kind="Class" />
      <Type Name="DataMemberRequiredBindingMetadataProvider" Kind="Class" />
      <Type Name="DefaultMetadataDetails" Kind="Class" />
      <Type Name="DefaultModelBindingMessageProvider" Kind="Class" />
      <Type Name="DefaultModelMetadata" Kind="Class" />
      <Type Name="DefaultModelMetadataProvider" Kind="Class" />
      <Type Name="DisplayMetadata" Kind="Class" />
      <Type Name="DisplayMetadataProviderContext" Kind="Class" />
      <Type Name="ExcludeBindingMetadataProvider" Kind="Class" />
      <Type Name="IBindingMetadataProvider" Kind="Interface" />
      <Type Name="ICompositeMetadataDetailsProvider" Kind="Interface" />
      <Type Name="IDisplayMetadataProvider" Kind="Interface" />
      <Type Name="IMetadataDetailsProvider" Kind="Interface" />
      <Type Name="IModelBindingMessageProvider" Kind="Interface" />
      <Type Name="IValidationMetadataProvider" Kind="Interface" />
      <Type Name="MetadataDetailsProviderExtensions" Kind="Class" />
      <Type Name="ModelBindingMessageProvider" Kind="Class" />
      <Type Name="ModelMetadataIdentity" Kind="Structure" />
      <Type Name="ModelMetadataKind" Kind="Enumeration" />
      <Type Name="ValidationMetadata" Kind="Class" />
      <Type Name="ValidationMetadataProviderContext" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.ModelBinding.Validation">
      <Type Name="ClientModelValidationContext" Kind="Class" />
      <Type Name="ClientValidatorItem" Kind="Class" />
      <Type Name="ClientValidatorProviderContext" Kind="Class" />
      <Type Name="CompositeClientModelValidatorProvider" Kind="Class" />
      <Type Name="CompositeModelValidatorProvider" Kind="Class" />
      <Type Name="IClientModelValidator" Kind="Interface" />
      <Type Name="IClientModelValidatorProvider" Kind="Interface" />
      <Type Name="IModelValidator" Kind="Interface" />
      <Type Name="IModelValidatorProvider" Kind="Interface" />
      <Type Name="IObjectModelValidator" Kind="Interface" />
      <Type Name="IPropertyValidationFilter" Kind="Interface" />
      <Type Name="IValidationStrategy" Kind="Interface" />
      <Type Name="ModelValidationContext" Kind="Class" />
      <Type Name="ModelValidationContextBase" Kind="Class" />
      <Type Name="ModelValidationResult" Kind="Class" />
      <Type Name="ModelValidatorProviderContext" Kind="Class" />
      <Type Name="ModelValidatorProviderExtensions" Kind="Class" />
      <Type Name="ValidateNeverAttribute" Kind="Class" />
      <Type Name="ValidationEntry" Kind="Structure" />
      <Type Name="ValidationStateDictionary" Kind="Class" />
      <Type Name="ValidationStateEntry" Kind="Class" />
      <Type Name="ValidationVisitor" Kind="Class" />
      <Type Name="ValidatorItem" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.Razor">
      <Type Name="GeneratedTagHelperAttributeContext" Kind="Class" />
      <Type Name="HelperResult" Kind="Class" />
      <Type Name="IMvcRazorHost" Kind="Interface" />
      <Type Name="InjectChunk" Kind="Class" />
      <Type Name="InjectChunkVisitor" Kind="Class" />
      <Type Name="InjectParameterGenerator" Kind="Class" />
      <Type Name="IRazorPage" Kind="Interface" />
      <Type Name="IRazorPageActivator" Kind="Interface" />
      <Type Name="IRazorPageFactoryProvider" Kind="Interface" />
      <Type Name="IRazorViewEngine" Kind="Interface" />
      <Type Name="ITagHelperActivator" Kind="Interface" />
      <Type Name="ITagHelperFactory" Kind="Interface" />
      <Type Name="ITagHelperInitializer`1" DisplayName="ITagHelperInitializer&lt;TTagHelper&gt;" Kind="Interface" />
      <Type Name="IViewLocationExpander" Kind="Interface" />
      <Type Name="LanguageViewLocationExpander" Kind="Class" />
      <Type Name="LanguageViewLocationExpanderFormat" Kind="Enumeration" />
      <Type Name="ModelChunk" Kind="Class" />
      <Type Name="MvcCSharpChunkVisitor" Kind="Class" />
      <Type Name="MvcCSharpCodeGenerator" Kind="Class" />
      <Type Name="MvcCSharpCodeVisitor" Kind="Class" />
      <Type Name="MvcCSharpDesignTimeCodeVisitor" Kind="Class" />
      <Type Name="MvcRazorCodeParser" Kind="Class" />
      <Type Name="MvcRazorHost" Kind="Class" />
      <Type Name="MvcRazorParser" Kind="Class" />
      <Type Name="MvcTagHelperAttributeValueCodeRenderer" Kind="Class" />
      <Type Name="RazorPage" Kind="Class" />
      <Type Name="RazorPage`1" DisplayName="RazorPage&lt;TModel&gt;" Kind="Class" />
      <Type Name="RazorPageActivator" Kind="Class" />
      <Type Name="RazorPageBase" Kind="Class" />
      <Type Name="RazorPageFactoryResult" Kind="Structure" />
      <Type Name="RazorPageResult" Kind="Structure" />
      <Type Name="RazorView" Kind="Class" />
      <Type Name="RazorViewEngine" Kind="Class" />
      <Type Name="RazorViewEngineOptions" Kind="Class" />
      <Type Name="RenderAsyncDelegate" Kind="Delegate" />
      <Type Name="TagHelperInitializer`1" DisplayName="TagHelperInitializer&lt;TTagHelper&gt;" Kind="Class" />
      <Type Name="ViewHierarchyUtility" Kind="Class" />
      <Type Name="ViewLocationExpanderContext" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.Razor.Compilation">
      <Type Name="CompilationFailedException" Kind="Class" />
      <Type Name="CompilationResult" Kind="Structure" />
      <Type Name="CompiledViewDescriptor" Kind="Class" />
      <Type Name="ICompilationService" Kind="Interface" />
      <Type Name="IRazorCompilationService" Kind="Interface" />
      <Type Name="IViewCompiler" Kind="Interface" />
      <Type Name="IViewCompilerProvider" Kind="Interface" />
      <Type Name="MetadataReferenceFeature" Kind="Class" />
      <Type Name="MetadataReferenceFeatureProvider" Kind="Class" />
      <Type Name="RazorReferenceManager" Kind="Class" />
      <Type Name="RazorViewAttribute" Kind="Class" />
      <Type Name="RelativeFileInfo" Kind="Class" />
      <Type Name="RoslynCompilationContext" Kind="Class" />
      <Type Name="ViewsFeature" Kind="Class" />
      <Type Name="ViewsFeatureProvider" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.Razor.Directives">
      <Type Name="ChunkHelper" Kind="Class" />
      <Type Name="ChunkInheritanceUtility" Kind="Class" />
      <Type Name="ChunkTreeResult" Kind="Class" />
      <Type Name="DefaultChunkTreeCache" Kind="Class" />
      <Type Name="IChunkMerger" Kind="Interface" />
      <Type Name="IChunkTreeCache" Kind="Interface" />
      <Type Name="InjectChunkMerger" Kind="Class" />
      <Type Name="SetBaseTypeChunkMerger" Kind="Class" />
      <Type Name="UsingChunkMerger" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.Razor.Extensions">
      <Type Name="AssemblyAttributeInjectionPass" Kind="Class" />
      <Type Name="IInjectTargetExtension" Kind="Interface" />
      <Type Name="InjectDirective" Kind="Class" />
      <Type Name="InjectIntermediateNode" Kind="Class" />
      <Type Name="InjectTargetExtension" Kind="Class" />
      <Type Name="InstrumentationPass" Kind="Class" />
      <Type Name="ModelDirective" Kind="Class" />
      <Type Name="ModelExpressionPass" Kind="Class" />
      <Type Name="MvcRazorTemplateEngine" Kind="Class" />
      <Type Name="MvcViewDocumentClassifierPass" Kind="Class" />
      <Type Name="NamespaceDirective" Kind="Class" />
      <Type Name="PageDirective" Kind="Class" />
      <Type Name="PagesPropertyInjectionPass" Kind="Class" />
      <Type Name="RazorExtensions" Kind="Class" />
      <Type Name="RazorPageDocumentClassifierPass" Kind="Class" />
      <Type Name="TagHelperDescriptorExtensions" Kind="Class" />
      <Type Name="ViewComponentTagHelperConventions" Kind="Class" />
      <Type Name="ViewComponentTagHelperDescriptorProvider" Kind="Class" />
      <Type Name="ViewComponentTagHelperMetadata" Kind="Class" />
      <Type Name="ViewComponentTagHelperPass" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.Razor.Host">
      <Type Name="ViewComponentTagHelperDescriptorConventions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.Razor.Host.Internal">
      <Type Name="GeneratedViewComponentTagHelperContext" Kind="Class" />
      <Type Name="TagHelperChunkDecorator" Kind="Class" />
      <Type Name="ViewComponentTagHelperChunkVisitor" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.Razor.Internal">
      <Type Name="CompilerCache" Kind="Class" />
      <Type Name="CompilerCacheResult" Kind="Structure" />
      <Type Name="CompositeTagHelperDescriptorResolver" Kind="Class" />
      <Type Name="CSharpCompiler" Kind="Class" />
      <Type Name="DefaultCompilerCacheProvider" Kind="Class" />
      <Type Name="DefaultRazorPageFactoryProvider" Kind="Class" />
      <Type Name="DefaultRazorReferenceManager" Kind="Class" />
      <Type Name="DefaultRazorViewEngineFileProviderAccessor" Kind="Class" />
      <Type Name="DefaultRoslynCompilationService" Kind="Class" />
      <Type Name="DefaultTagHelperActivator" Kind="Class" />
      <Type Name="DefaultTagHelperFactory" Kind="Class" />
      <Type Name="DependencyContextRazorViewEngineOptionsSetup" Kind="Class" />
      <Type Name="DesignTimeRazorPathNormalizer" Kind="Class" />
      <Type Name="ExpressionRewriter" Kind="Class" />
      <Type Name="FileProviderRazorProject" Kind="Class" />
      <Type Name="FileProviderRazorProjectItem" Kind="Class" />
      <Type Name="ICompilerCache" Kind="Interface" />
      <Type Name="ICompilerCacheProvider" Kind="Interface" />
      <Type Name="IRazorViewEngineFileProviderAccessor" Kind="Interface" />
      <Type Name="LazyMetadataReferenceFeature" Kind="Class" />
      <Type Name="MvcRazorDiagnosticSourceExtensions" Kind="Class" />
      <Type Name="MvcRazorLoggerExtensions" Kind="Class" />
      <Type Name="MvcRazorMvcViewOptionsSetup" Kind="Class" />
      <Type Name="RazorCompilationService" Kind="Class" />
      <Type Name="RazorInjectAttribute" Kind="Class" />
      <Type Name="RazorPagePropertyActivator" Kind="Class" />
      <Type Name="RazorPagePropertyActivator+PropertyValueAccessors" Kind="Class" />
      <Type Name="RazorPathNormalizer" Kind="Class" />
      <Type Name="RazorReferenceManager" Kind="Class" />
      <Type Name="RazorViewCompiler" Kind="Class" />
      <Type Name="RazorViewCompilerProvider" Kind="Class" />
      <Type Name="RazorViewEngineOptionsSetup" Kind="Class" />
      <Type Name="ServiceBasedTagHelperActivator" Kind="Class" />
      <Type Name="TagHelperComponentManager" Kind="Class" />
      <Type Name="TagHelpersAsServices" Kind="Class" />
      <Type Name="ViewComponentTagHelperDescriptorFactory" Kind="Class" />
      <Type Name="ViewComponentTagHelperDescriptorResolver" Kind="Class" />
      <Type Name="ViewLocationCacheItem" Kind="Structure" />
      <Type Name="ViewLocationCacheKey" Kind="Structure" />
      <Type Name="ViewLocationCacheResult" Kind="Class" />
      <Type Name="ViewPath" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.Razor.TagHelpers">
      <Type Name="BodyTagHelper" Kind="Class" />
      <Type Name="FeatureTagHelperTypeResolver" Kind="Class" />
      <Type Name="HeadTagHelper" Kind="Class" />
      <Type Name="ITagHelperComponentManager" Kind="Interface" />
      <Type Name="TagHelperComponentTagHelper" Kind="Class" />
      <Type Name="TagHelperFeature" Kind="Class" />
      <Type Name="TagHelperFeatureProvider" Kind="Class" />
      <Type Name="UrlResolutionTagHelper" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.RazorPages">
      <Type Name="CompiledPageActionDescriptor" Kind="Class" />
      <Type Name="IPageActivatorProvider" Kind="Interface" />
      <Type Name="IPageFactoryProvider" Kind="Interface" />
      <Type Name="IPageModelActivatorProvider" Kind="Interface" />
      <Type Name="IPageModelFactoryProvider" Kind="Interface" />
      <Type Name="NonHandlerAttribute" Kind="Class" />
      <Type Name="Page" Kind="Class" />
      <Type Name="PageActionDescriptor" Kind="Class" />
      <Type Name="PageBase" Kind="Class" />
      <Type Name="PageContext" Kind="Class" />
      <Type Name="PageContextAttribute" Kind="Class" />
      <Type Name="PageModel" Kind="Class" />
      <Type Name="PageResult" Kind="Class" />
      <Type Name="RazorPagesOptions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure">
      <Type Name="DefaultPageActivatorProvider" Kind="Class" />
      <Type Name="DefaultPageFactoryProvider" Kind="Class" />
      <Type Name="DefaultPageHandlerMethodSelector" Kind="Class" />
      <Type Name="DefaultPageModelActivatorProvider" Kind="Class" />
      <Type Name="DefaultPageModelFactoryProvider" Kind="Class" />
      <Type Name="HandlerMethodDescriptor" Kind="Class" />
      <Type Name="HandlerParameterDescriptor" Kind="Class" />
      <Type Name="IPageHandlerMethodSelector" Kind="Interface" />
      <Type Name="IPageLoader" Kind="Interface" />
      <Type Name="PageActionDescriptorProvider" Kind="Class" />
      <Type Name="PageArgumentBinder" Kind="Class" />
      <Type Name="PageBoundPropertyDescriptor" Kind="Class" />
      <Type Name="PageDirectiveFeature" Kind="Class" />
      <Type Name="PageModelAttribute" Kind="Class" />
      <Type Name="PageResultExecutor" Kind="Class" />
      <Type Name="PageViewLocationExpander" Kind="Class" />
      <Type Name="RazorPageAdapter" Kind="Class" />
      <Type Name="RazorPageAttribute" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.RazorPages.Internal">
      <Type Name="AuthorizationPageApplicationModelProvider" Kind="Class" />
      <Type Name="AutoValidateAntiforgeryPageApplicationModelProvider" Kind="Class" />
      <Type Name="CompiledPageActionDescriptorBuilder" Kind="Class" />
      <Type Name="CompiledPageRouteModelProvider" Kind="Class" />
      <Type Name="DefaultPageApplicationModelProvider" Kind="Class" />
      <Type Name="DefaultPageArgumentBinder" Kind="Class" />
      <Type Name="DefaultPageLoader" Kind="Class" />
      <Type Name="ExecutorFactory" Kind="Class" />
      <Type Name="PageActionDescriptorChangeProvider" Kind="Class" />
      <Type Name="PageActionInvoker" Kind="Class" />
      <Type Name="PageActionInvokerCacheEntry" Kind="Class" />
      <Type Name="PageActionInvokerProvider" Kind="Class" />
      <Type Name="PagePropertyBinderFactory" Kind="Class" />
      <Type Name="PageSaveTempDataPropertyFilter" Kind="Class" />
      <Type Name="PageSaveTempDataPropertyFilterFactory" Kind="Class" />
      <Type Name="PageSelectorModel" Kind="Class" />
      <Type Name="RazorPagesRazorViewEngineOptionsSetup" Kind="Class" />
      <Type Name="RazorProjectPageRouteModelProvider" Kind="Class" />
      <Type Name="TempDataFilterPageApplicationModelProvider" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.Rendering">
      <Type Name="FormMethod" Kind="Enumeration" />
      <Type Name="Html5DateRenderingMode" Kind="Enumeration" />
      <Type Name="HtmlHelperDisplayExtensions" Kind="Class" />
      <Type Name="HtmlHelperDisplayNameExtensions" Kind="Class" />
      <Type Name="HtmlHelperEditorExtensions" Kind="Class" />
      <Type Name="HtmlHelperFormExtensions" Kind="Class" />
      <Type Name="HtmlHelperInputExtensions" Kind="Class" />
      <Type Name="HtmlHelperLabelExtensions" Kind="Class" />
      <Type Name="HtmlHelperLinkExtensions" Kind="Class" />
      <Type Name="HtmlHelperNameExtensions" Kind="Class" />
      <Type Name="HtmlHelperPartialExtensions" Kind="Class" />
      <Type Name="HtmlHelperSelectExtensions" Kind="Class" />
      <Type Name="HtmlHelperValidationExtensions" Kind="Class" />
      <Type Name="HtmlHelperValueExtensions" Kind="Class" />
      <Type Name="IHtmlHelper" Kind="Interface" />
      <Type Name="IHtmlHelper`1" DisplayName="IHtmlHelper&lt;TModel&gt;" Kind="Interface" />
      <Type Name="IJsonHelper" Kind="Interface" />
      <Type Name="MultiSelectList" Kind="Class" />
      <Type Name="MvcForm" Kind="Class" />
      <Type Name="SelectList" Kind="Class" />
      <Type Name="SelectListGroup" Kind="Class" />
      <Type Name="SelectListItem" Kind="Class" />
      <Type Name="TagBuilder" Kind="Class" />
      <Type Name="TagRenderMode" Kind="Enumeration" />
      <Type Name="ValidationSummary" Kind="Enumeration" />
      <Type Name="ViewComponentHelperExtensions" Kind="Class" />
      <Type Name="ViewContext" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.Routing">
      <Type Name="AttributeRouteInfo" Kind="Class" />
      <Type Name="HttpMethodAttribute" Kind="Class" />
      <Type Name="IActionHttpMethodProvider" Kind="Interface" />
      <Type Name="IRouteTemplateProvider" Kind="Interface" />
      <Type Name="IRouteValueProvider" Kind="Interface" />
      <Type Name="IUrlHelperFactory" Kind="Interface" />
      <Type Name="KnownRouteValueConstraint" Kind="Class" />
      <Type Name="RouteValueAttribute" Kind="Class" />
      <Type Name="UrlActionContext" Kind="Class" />
      <Type Name="UrlHelper" Kind="Class" />
      <Type Name="UrlHelperFactory" Kind="Class" />
      <Type Name="UrlRouteContext" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.TagHelpers">
      <Type Name="AnchorTagHelper" Kind="Class" />
      <Type Name="CacheTagHelper" Kind="Class" />
      <Type Name="CacheTagHelperBase" Kind="Class" />
      <Type Name="CacheTagHelperOptions" Kind="Class" />
      <Type Name="DistributedCacheTagHelper" Kind="Class" />
      <Type Name="EnvironmentTagHelper" Kind="Class" />
      <Type Name="FormActionTagHelper" Kind="Class" />
      <Type Name="FormTagHelper" Kind="Class" />
      <Type Name="ImageTagHelper" Kind="Class" />
      <Type Name="InputTagHelper" Kind="Class" />
      <Type Name="LabelTagHelper" Kind="Class" />
      <Type Name="LinkTagHelper" Kind="Class" />
      <Type Name="OptionTagHelper" Kind="Class" />
      <Type Name="RenderAtEndOfFormTagHelper" Kind="Class" />
      <Type Name="ScriptTagHelper" Kind="Class" />
      <Type Name="SelectTagHelper" Kind="Class" />
      <Type Name="TagHelperOutputExtensions" Kind="Class" />
      <Type Name="TextAreaTagHelper" Kind="Class" />
      <Type Name="ValidationMessageTagHelper" Kind="Class" />
      <Type Name="ValidationSummaryTagHelper" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.TagHelpers.Cache">
      <Type Name="CacheTagKey" Kind="Class" />
      <Type Name="DistributedCacheTagHelperFormatter" Kind="Class" />
      <Type Name="DistributedCacheTagHelperFormattingContext" Kind="Class" />
      <Type Name="DistributedCacheTagHelperService" Kind="Class" />
      <Type Name="DistributedCacheTagHelperStorage" Kind="Class" />
      <Type Name="IDistributedCacheTagHelperFormatter" Kind="Interface" />
      <Type Name="IDistributedCacheTagHelperService" Kind="Interface" />
      <Type Name="IDistributedCacheTagHelperStorage" Kind="Interface" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.TagHelpers.Internal">
      <Type Name="AttributeMatcher" Kind="Class" />
      <Type Name="CacheTagHelperMemoryCacheFactory" Kind="Class" />
      <Type Name="CryptographyAlgorithms" Kind="Class" />
      <Type Name="CurrentValues" Kind="Class" />
      <Type Name="FileProviderGlobbingDirectory" Kind="Class" />
      <Type Name="FileProviderGlobbingFile" Kind="Class" />
      <Type Name="FileVersionProvider" Kind="Class" />
      <Type Name="GlobbingUrlBuilder" Kind="Class" />
      <Type Name="JavaScriptResources" Kind="Class" />
      <Type Name="ModeAttributes`1" DisplayName="ModeAttributes&lt;TMode&gt;" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.ViewComponents">
      <Type Name="ContentViewComponentResult" Kind="Class" />
      <Type Name="DefaultViewComponentActivator" Kind="Class" />
      <Type Name="DefaultViewComponentDescriptorCollectionProvider" Kind="Class" />
      <Type Name="DefaultViewComponentDescriptorProvider" Kind="Class" />
      <Type Name="DefaultViewComponentFactory" Kind="Class" />
      <Type Name="DefaultViewComponentHelper" Kind="Class" />
      <Type Name="DefaultViewComponentInvoker" Kind="Class" />
      <Type Name="DefaultViewComponentInvokerFactory" Kind="Class" />
      <Type Name="DefaultViewComponentSelector" Kind="Class" />
      <Type Name="HtmlContentViewComponentResult" Kind="Class" />
      <Type Name="IViewComponentActivator" Kind="Interface" />
      <Type Name="IViewComponentDescriptorCollectionProvider" Kind="Interface" />
      <Type Name="IViewComponentDescriptorProvider" Kind="Interface" />
      <Type Name="IViewComponentFactory" Kind="Interface" />
      <Type Name="IViewComponentInvoker" Kind="Interface" />
      <Type Name="IViewComponentInvokerFactory" Kind="Interface" />
      <Type Name="IViewComponentSelector" Kind="Interface" />
      <Type Name="ServiceBasedViewComponentActivator" Kind="Class" />
      <Type Name="ViewComponentContext" Kind="Class" />
      <Type Name="ViewComponentContextAttribute" Kind="Class" />
      <Type Name="ViewComponentConventions" Kind="Class" />
      <Type Name="ViewComponentDescriptor" Kind="Class" />
      <Type Name="ViewComponentDescriptorCollection" Kind="Class" />
      <Type Name="ViewComponentFeature" Kind="Class" />
      <Type Name="ViewComponentFeatureProvider" Kind="Class" />
      <Type Name="ViewViewComponentResult" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.ViewEngines">
      <Type Name="CompositeViewEngine" Kind="Class" />
      <Type Name="ICompositeViewEngine" Kind="Interface" />
      <Type Name="IView" Kind="Interface" />
      <Type Name="IViewEngine" Kind="Interface" />
      <Type Name="ViewEngineResult" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.ViewFeatures">
      <Type Name="AntiforgeryExtensions" Kind="Class" />
      <Type Name="AttributeDictionary" Kind="Class" />
      <Type Name="AttributeDictionary+Enumerator" Kind="Structure" />
      <Type Name="CookieTempDataProvider" Kind="Class" />
      <Type Name="DefaultHtmlGenerator" Kind="Class" />
      <Type Name="DefaultHtmlGeneratorExtensions" Kind="Class" />
      <Type Name="DefaultValidationHtmlAttributeProvider" Kind="Class" />
      <Type Name="FormContext" Kind="Class" />
      <Type Name="HtmlHelper" Kind="Class" />
      <Type Name="HtmlHelper`1" DisplayName="HtmlHelper&lt;TModel&gt;" Kind="Class" />
      <Type Name="HtmlHelperOptions" Kind="Class" />
      <Type Name="IAntiforgeryPolicy" Kind="Interface" />
      <Type Name="IHtmlGenerator" Kind="Interface" />
      <Type Name="IKeepTempDataResult" Kind="Interface" />
      <Type Name="IModelExpressionProvider" Kind="Interface" />
      <Type Name="InputType" Kind="Enumeration" />
      <Type Name="ITempDataDictionary" Kind="Interface" />
      <Type Name="ITempDataDictionaryFactory" Kind="Interface" />
      <Type Name="ITempDataProvider" Kind="Interface" />
      <Type Name="IViewContextAware" Kind="Interface" />
      <Type Name="JsonHelper" Kind="Class" />
      <Type Name="ModelExplorer" Kind="Class" />
      <Type Name="ModelExplorerExtensions" Kind="Class" />
      <Type Name="ModelExpression" Kind="Class" />
      <Type Name="ModelExpressionProvider" Kind="Class" />
      <Type Name="ModelMetadataProviderExtensions" Kind="Class" />
      <Type Name="SaveTempDataAttribute" Kind="Class" />
      <Type Name="SessionStateTempDataProvider" Kind="Class" />
      <Type Name="StringHtmlContent" Kind="Class" />
      <Type Name="TempDataDictionary" Kind="Class" />
      <Type Name="TempDataDictionaryFactory" Kind="Class" />
      <Type Name="TemplateInfo" Kind="Class" />
      <Type Name="TryGetValueDelegate" Kind="Delegate" />
      <Type Name="TryGetValueProvider" Kind="Class" />
      <Type Name="ValidationHtmlAttributeProvider" Kind="Class" />
      <Type Name="ViewContextAttribute" Kind="Class" />
      <Type Name="ViewDataDictionary" Kind="Class" />
      <Type Name="ViewDataDictionary`1" DisplayName="ViewDataDictionary&lt;TModel&gt;" Kind="Class" />
      <Type Name="ViewDataDictionaryAttribute" Kind="Class" />
      <Type Name="ViewDataDictionaryControllerPropertyActivator" Kind="Class" />
      <Type Name="ViewDataEvaluator" Kind="Class" />
      <Type Name="ViewDataInfo" Kind="Class" />
      <Type Name="ViewExecutor" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.ViewFeatures.Internal">
      <Type Name="ArrayPoolBufferSource" Kind="Class" />
      <Type Name="AutoValidateAntiforgeryTokenAuthorizationFilter" Kind="Class" />
      <Type Name="CachedExpressionCompiler" Kind="Class" />
      <Type Name="CharArrayBufferSource" Kind="Class" />
      <Type Name="ControllerSaveTempDataPropertyFilter" Kind="Class" />
      <Type Name="ControllerSaveTempDataPropertyFilterFactory" Kind="Class" />
      <Type Name="DefaultDisplayTemplates" Kind="Class" />
      <Type Name="DefaultEditorTemplates" Kind="Class" />
      <Type Name="DynamicViewData" Kind="Class" />
      <Type Name="ExpressionHelper" Kind="Class" />
      <Type Name="ExpressionMetadataProvider" Kind="Class" />
      <Type Name="ExpressionTextCache" Kind="Class" />
      <Type Name="ICharBufferSource" Kind="Interface" />
      <Type Name="ISaveTempDataCallback" Kind="Interface" />
      <Type Name="IViewBufferScope" Kind="Interface" />
      <Type Name="MemoryPoolViewBufferScope" Kind="Class" />
      <Type Name="MvcViewOptionsSetup" Kind="Class" />
      <Type Name="NameAndIdProvider" Kind="Class" />
      <Type Name="NullView" Kind="Class" />
      <Type Name="PagedBufferedTextWriter" Kind="Class" />
      <Type Name="PagedCharBuffer" Kind="Class" />
      <Type Name="PartialViewResultExecutor" Kind="Class" />
      <Type Name="SaveTempDataFilter" Kind="Class" />
      <Type Name="SaveTempDataPropertyFilterBase" Kind="Class" />
      <Type Name="TempDataApplicationModelProvider" Kind="Class" />
      <Type Name="TempDataMvcOptionsSetup" Kind="Class" />
      <Type Name="TempDataProperty" Kind="Structure" />
      <Type Name="TempDataSerializer" Kind="Class" />
      <Type Name="TemplateBuilder" Kind="Class" />
      <Type Name="TemplateRenderer" Kind="Class" />
      <Type Name="ValidateAntiforgeryTokenAuthorizationFilter" Kind="Class" />
      <Type Name="ValidationHelpers" Kind="Class" />
      <Type Name="ViewBuffer" Kind="Class" />
      <Type Name="ViewBufferPage" Kind="Class" />
      <Type Name="ViewBufferTextWriter" Kind="Class" />
      <Type Name="ViewBufferValue" Kind="Structure" />
      <Type Name="ViewComponentInvokerCache" Kind="Class" />
      <Type Name="ViewComponentResultExecutor" Kind="Class" />
      <Type Name="ViewDataDictionaryFactory" Kind="Class" />
      <Type Name="ViewResultExecutor" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Mvc.WebApiCompatShim">
      <Type Name="FormDataCollectionExtensions" Kind="Class" />
      <Type Name="HttpRequestMessageFeature" Kind="Class" />
      <Type Name="HttpRequestMessageHttpContextExtensions" Kind="Class" />
      <Type Name="HttpRequestMessageModelBinder" Kind="Class" />
      <Type Name="HttpRequestMessageModelBinderProvider" Kind="Class" />
      <Type Name="HttpResponseExceptionActionFilter" Kind="Class" />
      <Type Name="HttpResponseMessageOutputFormatter" Kind="Class" />
      <Type Name="IHttpRequestMessageFeature" Kind="Interface" />
      <Type Name="IUseWebApiActionConventions" Kind="Interface" />
      <Type Name="IUseWebApiOverloading" Kind="Interface" />
      <Type Name="IUseWebApiParameterConventions" Kind="Interface" />
      <Type Name="IUseWebApiRoutes" Kind="Interface" />
      <Type Name="OverloadActionConstraint" Kind="Class" />
      <Type Name="UseWebApiActionConventionsAttribute" Kind="Class" />
      <Type Name="UseWebApiOverloadingAttribute" Kind="Class" />
      <Type Name="UseWebApiParameterConventionsAttribute" Kind="Class" />
      <Type Name="UseWebApiRoutesAttribute" Kind="Class" />
      <Type Name="WebApiActionConventionsApplicationModelConvention" Kind="Class" />
      <Type Name="WebApiCompatShimOptions" Kind="Class" />
      <Type Name="WebApiCompatShimOptionsSetup" Kind="Class" />
      <Type Name="WebApiOverloadingApplicationModelConvention" Kind="Class" />
      <Type Name="WebApiParameterConventionsApplicationModelConvention" Kind="Class" />
      <Type Name="WebApiRoutesApplicationModelConvention" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.NodeServices">
      <Type Name="EmbeddedResourceReader" Kind="Class" />
      <Type Name="INodeServices" Kind="Interface" />
      <Type Name="NodeServicesFactory" Kind="Class" />
      <Type Name="NodeServicesOptions" Kind="Class" />
      <Type Name="StringAsTempFile" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.NodeServices.HostingModels">
      <Type Name="INodeInstance" Kind="Interface" />
      <Type Name="NodeInvocationException" Kind="Class" />
      <Type Name="NodeInvocationInfo" Kind="Class" />
      <Type Name="NodeServicesOptionsExtensions" Kind="Class" />
      <Type Name="OutOfProcessNodeInstance" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Owin">
      <Type Name="IOwinEnvironmentFeature" Kind="Interface" />
      <Type Name="OwinEnvironment" Kind="Class" />
      <Type Name="OwinEnvironment+FeatureMap" Kind="Class" />
      <Type Name="OwinEnvironment+FeatureMap`1" DisplayName="OwinEnvironment+FeatureMap&lt;TFeature&gt;" Kind="Class" />
      <Type Name="OwinEnvironmentFeature" Kind="Class" />
      <Type Name="OwinFeatureCollection" Kind="Class" />
      <Type Name="OwinWebSocketAcceptAdapter" Kind="Class" />
      <Type Name="OwinWebSocketAcceptContext" Kind="Class" />
      <Type Name="OwinWebSocketAdapter" Kind="Class" />
      <Type Name="WebSocketAcceptAdapter" Kind="Class" />
      <Type Name="WebSocketAdapter" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Proxy">
      <Type Name="ProxyMiddleware" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Razor">
      <Type Name="CSharpRazorCodeLanguage" Kind="Class" />
      <Type Name="DocumentParseCompleteEventArgs" Kind="Class" />
      <Type Name="ErrorSink" Kind="Class" />
      <Type Name="ParserResults" Kind="Class" />
      <Type Name="PartialParseResult" Kind="Enumeration" />
      <Type Name="RazorCodeLanguage" Kind="Class" />
      <Type Name="RazorEditorParser" Kind="Class" />
      <Type Name="RazorEngineHost" Kind="Class" />
      <Type Name="RazorError" Kind="Class" />
      <Type Name="RazorTemplateEngine" Kind="Class" />
      <Type Name="SourceLocation" Kind="Structure" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Razor.Chunks">
      <Type Name="AddTagHelperChunk" Kind="Class" />
      <Type Name="Chunk" Kind="Class" />
      <Type Name="ChunkTree" Kind="Class" />
      <Type Name="ChunkTreeBuilder" Kind="Class" />
      <Type Name="CodeAttributeChunk" Kind="Class" />
      <Type Name="DynamicCodeAttributeChunk" Kind="Class" />
      <Type Name="ExpressionBlockChunk" Kind="Class" />
      <Type Name="ExpressionChunk" Kind="Class" />
      <Type Name="LiteralChunk" Kind="Class" />
      <Type Name="LiteralCodeAttributeChunk" Kind="Class" />
      <Type Name="ParentChunk" Kind="Class" />
      <Type Name="ParentLiteralChunk" Kind="Class" />
      <Type Name="PreallocatedTagHelperAttributeChunk" Kind="Class" />
      <Type Name="RemoveTagHelperChunk" Kind="Class" />
      <Type Name="SectionChunk" Kind="Class" />
      <Type Name="SetBaseTypeChunk" Kind="Class" />
      <Type Name="StatementChunk" Kind="Class" />
      <Type Name="TagHelperAttributeTracker" Kind="Structure" />
      <Type Name="TagHelperChunk" Kind="Class" />
      <Type Name="TagHelperPrefixDirectiveChunk" Kind="Class" />
      <Type Name="TemplateChunk" Kind="Class" />
      <Type Name="TypeMemberChunk" Kind="Class" />
      <Type Name="UsingChunk" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Razor.Chunks.Generators">
      <Type Name="AddImportChunkGenerator" Kind="Class" />
      <Type Name="AddTagHelperChunkGenerator" Kind="Class" />
      <Type Name="AttributeBlockChunkGenerator" Kind="Class" />
      <Type Name="ChunkGeneratorContext" Kind="Class" />
      <Type Name="DynamicAttributeBlockChunkGenerator" Kind="Class" />
      <Type Name="ExpressionChunkGenerator" Kind="Class" />
      <Type Name="IParentChunkGenerator" Kind="Interface" />
      <Type Name="ISpanChunkGenerator" Kind="Interface" />
      <Type Name="LiteralAttributeChunkGenerator" Kind="Class" />
      <Type Name="MarkupChunkGenerator" Kind="Class" />
      <Type Name="ParentChunkGenerator" Kind="Class" />
      <Type Name="RazorChunkGenerator" Kind="Class" />
      <Type Name="RazorCommentChunkGenerator" Kind="Class" />
      <Type Name="RemoveTagHelperChunkGenerator" Kind="Class" />
      <Type Name="SectionChunkGenerator" Kind="Class" />
      <Type Name="SetBaseTypeChunkGenerator" Kind="Class" />
      <Type Name="SpanChunkGenerator" Kind="Class" />
      <Type Name="StatementChunkGenerator" Kind="Class" />
      <Type Name="TagHelperChunkGenerator" Kind="Class" />
      <Type Name="TagHelperPrefixDirectiveChunkGenerator" Kind="Class" />
      <Type Name="TemplateBlockChunkGenerator" Kind="Class" />
      <Type Name="TypeMemberChunkGenerator" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Razor.CodeGenerators">
      <Type Name="CodeGenerator" Kind="Class" />
      <Type Name="CodeGeneratorContext" Kind="Class" />
      <Type Name="CodeGeneratorResult" Kind="Class" />
      <Type Name="CodeWriter" Kind="Class" />
      <Type Name="CSharpCodeGenerator" Kind="Class" />
      <Type Name="CSharpCodeWriter" Kind="Class" />
      <Type Name="CSharpCodeWritingScope" Kind="Structure" />
      <Type Name="CSharpDisableWarningScope" Kind="Structure" />
      <Type Name="CSharpLineMappingWriter" Kind="Class" />
      <Type Name="CSharpPaddingBuilder" Kind="Class" />
      <Type Name="CSharpTagHelperCodeRenderer" Kind="Class" />
      <Type Name="ExpressionRenderingMode" Kind="Enumeration" />
      <Type Name="GeneratedClassContext" Kind="Structure" />
      <Type Name="GeneratedTagHelperContext" Kind="Class" />
      <Type Name="GeneratorResults" Kind="Class" />
      <Type Name="LineMapping" Kind="Class" />
      <Type Name="LineMappingManager" Kind="Class" />
      <Type Name="MappingLocation" Kind="Class" />
      <Type Name="TagHelperAttributeValueCodeRenderer" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Razor.CodeGenerators.Visitors">
      <Type Name="ChunkVisitor`1" DisplayName="ChunkVisitor&lt;TWriter&gt;" Kind="Class" />
      <Type Name="CodeVisitor`1" DisplayName="CodeVisitor&lt;TWriter&gt;" Kind="Class" />
      <Type Name="CSharpBaseTypeVisitor" Kind="Class" />
      <Type Name="CSharpCodeVisitor" Kind="Class" />
      <Type Name="CSharpDesignTimeCodeVisitor" Kind="Class" />
      <Type Name="CSharpTagHelperAttributeValueVisitor" Kind="Class" />
      <Type Name="CSharpTagHelperFieldDeclarationVisitor" Kind="Class" />
      <Type Name="CSharpTagHelperPropertyInitializationVisitor" Kind="Class" />
      <Type Name="CSharpTypeMemberVisitor" Kind="Class" />
      <Type Name="CSharpUsingVisitor" Kind="Class" />
      <Type Name="IChunkVisitor" Kind="Interface" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Razor.Compilation.TagHelpers">
      <Type Name="ITagHelperDescriptorResolver" Kind="Interface" />
      <Type Name="TagHelperAttributeDescriptor" Kind="Class" />
      <Type Name="TagHelperAttributeDesignTimeDescriptor" Kind="Class" />
      <Type Name="TagHelperDescriptor" Kind="Class" />
      <Type Name="TagHelperDescriptorComparer" Kind="Class" />
      <Type Name="TagHelperDescriptorProvider" Kind="Class" />
      <Type Name="TagHelperDescriptorResolutionContext" Kind="Class" />
      <Type Name="TagHelperDesignTimeDescriptor" Kind="Class" />
      <Type Name="TagHelperDirectiveDescriptor" Kind="Class" />
      <Type Name="TagHelperDirectiveType" Kind="Enumeration" />
      <Type Name="TagHelperRequiredAttributeDescriptor" Kind="Class" />
      <Type Name="TagHelperRequiredAttributeDescriptorComparer" Kind="Class" />
      <Type Name="TagHelperRequiredAttributeNameComparison" Kind="Enumeration" />
      <Type Name="TagHelperRequiredAttributeValueComparison" Kind="Enumeration" />
      <Type Name="TypeBasedTagHelperDescriptorComparer" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Razor.Editor">
      <Type Name="AutoCompleteEditHandler" Kind="Class" />
      <Type Name="EditorHints" Kind="Enumeration" />
      <Type Name="EditResult" Kind="Class" />
      <Type Name="ImplicitExpressionEditHandler" Kind="Class" />
      <Type Name="SingleLineMarkupEditHandler" Kind="Class" />
      <Type Name="SpanEditHandler" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Razor.Generator">
      <Type Name="ModelChunkGenerator" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Razor.Internal">
      <Type Name="TaskCache" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Razor.Language">
      <Type Name="AllowedChildTagDescriptor" Kind="Class" />
      <Type Name="AllowedChildTagDescriptorBuilder" Kind="Class" />
      <Type Name="AttributeStructure" Kind="Enumeration" />
      <Type Name="BoundAttributeDescriptor" Kind="Class" />
      <Type Name="BoundAttributeDescriptorBuilder" Kind="Class" />
      <Type Name="BoundAttributeDescriptorBuilderExtensions" Kind="Class" />
      <Type Name="BoundAttributeDescriptorExtensions" Kind="Class" />
      <Type Name="DirectiveDescriptor" Kind="Class" />
      <Type Name="DirectiveDescriptorBuilderExtensions" Kind="Class" />
      <Type Name="DirectiveKind" Kind="Enumeration" />
      <Type Name="DirectiveTokenDescriptor" Kind="Class" />
      <Type Name="DirectiveTokenKind" Kind="Enumeration" />
      <Type Name="DirectiveUsage" Kind="Enumeration" />
      <Type Name="DocumentClassifierPassBase" Kind="Class" />
      <Type Name="HtmlConventions" Kind="Class" />
      <Type Name="IConfigureRazorCodeGenerationOptionsFeature" Kind="Interface" />
      <Type Name="IConfigureRazorParserOptionsFeature" Kind="Interface" />
      <Type Name="IDirectiveDescriptorBuilder" Kind="Interface" />
      <Type Name="IntermediateNodePassBase" Kind="Class" />
      <Type Name="IRazorCodeGenerationOptionsFeature" Kind="Interface" />
      <Type Name="IRazorCSharpLoweringPhase" Kind="Interface" />
      <Type Name="IRazorDirectiveClassifierPass" Kind="Interface" />
      <Type Name="IRazorDirectiveClassifierPhase" Kind="Interface" />
      <Type Name="IRazorDirectiveFeature" Kind="Interface" />
      <Type Name="IRazorDocumentClassifierPass" Kind="Interface" />
      <Type Name="IRazorDocumentClassifierPhase" Kind="Interface" />
      <Type Name="IRazorEngineBuilder" Kind="Interface" />
      <Type Name="IRazorEngineFeature" Kind="Interface" />
      <Type Name="IRazorEnginePhase" Kind="Interface" />
      <Type Name="IRazorIntermediateNodeLoweringPhase" Kind="Interface" />
      <Type Name="IRazorOptimizationPass" Kind="Interface" />
      <Type Name="IRazorOptimizationPhase" Kind="Interface" />
      <Type Name="IRazorParserOptionsFeature" Kind="Interface" />
      <Type Name="IRazorParsingPhase" Kind="Interface" />
      <Type Name="IRazorTagHelperBinderPhase" Kind="Interface" />
      <Type Name="IRazorTargetExtensionFeature" Kind="Interface" />
      <Type Name="ITagHelperDescriptorProvider" Kind="Interface" />
      <Type Name="ITagHelperFeature" Kind="Interface" />
      <Type Name="ItemCollection" Kind="Class" />
      <Type Name="RazorCodeDocument" Kind="Class" />
      <Type Name="RazorCodeDocumentExtensions" Kind="Class" />
      <Type Name="RazorCodeGenerationOptions" Kind="Class" />
      <Type Name="RazorCodeGenerationOptionsBuilder" Kind="Class" />
      <Type Name="RazorCSharpDocument" Kind="Class" />
      <Type Name="RazorDiagnostic" Kind="Class" />
      <Type Name="RazorDiagnosticCollection" Kind="Class" />
      <Type Name="RazorDiagnosticCollection+Enumerator" Kind="Structure" />
      <Type Name="RazorDiagnosticDescriptor" Kind="Class" />
      <Type Name="RazorDiagnosticSeverity" Kind="Enumeration" />
      <Type Name="RazorEngine" Kind="Class" />
      <Type Name="RazorEngineBuilderExtensions" Kind="Class" />
      <Type Name="RazorEngineFeatureBase" Kind="Class" />
      <Type Name="RazorEnginePhaseBase" Kind="Class" />
      <Type Name="RazorParserOptions" Kind="Class" />
      <Type Name="RazorParserOptionsBuilder" Kind="Class" />
      <Type Name="RazorProject" Kind="Class" />
      <Type Name="RazorProjectItem" Kind="Class" />
      <Type Name="RazorSourceDocument" Kind="Class" />
      <Type Name="RazorSourceLineCollection" Kind="Class" />
      <Type Name="RazorSyntaxTree" Kind="Class" />
      <Type Name="RazorTemplateEngine" Kind="Class" />
      <Type Name="RazorTemplateEngineOptions" Kind="Class" />
      <Type Name="RequiredAttributeDescriptor" Kind="Class" />
      <Type Name="RequiredAttributeDescriptor+NameComparisonMode" Kind="Enumeration" />
      <Type Name="RequiredAttributeDescriptor+ValueComparisonMode" Kind="Enumeration" />
      <Type Name="RequiredAttributeDescriptorBuilder" Kind="Class" />
      <Type Name="SourceChange" Kind="Class" />
      <Type Name="SourceLocation" Kind="Structure" />
      <Type Name="SourceMapping" Kind="Class" />
      <Type Name="SourceSpan" Kind="Structure" />
      <Type Name="TagHelperBinding" Kind="Class" />
      <Type Name="TagHelperConventions" Kind="Class" />
      <Type Name="TagHelperDescriptor" Kind="Class" />
      <Type Name="TagHelperDescriptorBuilder" Kind="Class" />
      <Type Name="TagHelperDescriptorBuilderExtensions" Kind="Class" />
      <Type Name="TagHelperDescriptorExtensions" Kind="Class" />
      <Type Name="TagHelperDescriptorProviderContext" Kind="Class" />
      <Type Name="TagHelperDocumentContext" Kind="Class" />
      <Type Name="TagHelperMetadata" Kind="Class" />
      <Type Name="TagHelperMetadata+Common" Kind="Class" />
      <Type Name="TagHelperMetadata+Runtime" Kind="Class" />
      <Type Name="TagMatchingRuleDescriptor" Kind="Class" />
      <Type Name="TagMatchingRuleDescriptorBuilder" Kind="Class" />
      <Type Name="TagMode" Kind="Enumeration" />
      <Type Name="TagStructure" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Razor.Language.CodeGeneration">
      <Type Name="CodeRenderingContext" Kind="Class" />
      <Type Name="CodeTarget" Kind="Class" />
      <Type Name="CodeTargetBuilder" Kind="Class" />
      <Type Name="CodeWriter" Kind="Class" />
      <Type Name="DesignTimeNodeWriter" Kind="Class" />
      <Type Name="DocumentWriter" Kind="Class" />
      <Type Name="ICodeTargetExtension" Kind="Interface" />
      <Type Name="IntermediateNodeWriter" Kind="Class" />
      <Type Name="RuntimeNodeWriter" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Razor.Language.Extensions">
      <Type Name="DefaultTagHelperBodyIntermediateNode" Kind="Class" />
      <Type Name="DefaultTagHelperCreateIntermediateNode" Kind="Class" />
      <Type Name="DefaultTagHelperExecuteIntermediateNode" Kind="Class" />
      <Type Name="DefaultTagHelperHtmlAttributeIntermediateNode" Kind="Class" />
      <Type Name="DefaultTagHelperPropertyIntermediateNode" Kind="Class" />
      <Type Name="DefaultTagHelperRuntimeIntermediateNode" Kind="Class" />
      <Type Name="FunctionsDirective" Kind="Class" />
      <Type Name="FunctionsDirectivePass" Kind="Class" />
      <Type Name="IDefaultTagHelperTargetExtension" Kind="Interface" />
      <Type Name="InheritsDirective" Kind="Class" />
      <Type Name="InheritsDirectivePass" Kind="Class" />
      <Type Name="ISectionTargetExtension" Kind="Interface" />
      <Type Name="ITemplateTargetExtension" Kind="Interface" />
      <Type Name="SectionDirective" Kind="Class" />
      <Type Name="SectionDirectivePass" Kind="Class" />
      <Type Name="SectionIntermediateNode" Kind="Class" />
      <Type Name="SectionTargetExtension" Kind="Class" />
      <Type Name="TemplateIntermediateNode" Kind="Class" />
      <Type Name="TemplateTargetExtension" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Razor.Language.Intermediate">
      <Type Name="ClassDeclarationIntermediateNode" Kind="Class" />
      <Type Name="CommonAnnotations" Kind="Class" />
      <Type Name="CommonAnnotations+DefaultTagHelperExtension" Kind="Class" />
      <Type Name="CSharpCodeAttributeValueIntermediateNode" Kind="Class" />
      <Type Name="CSharpCodeIntermediateNode" Kind="Class" />
      <Type Name="CSharpExpressionAttributeValueIntermediateNode" Kind="Class" />
      <Type Name="CSharpExpressionIntermediateNode" Kind="Class" />
      <Type Name="DirectiveIntermediateNode" Kind="Class" />
      <Type Name="DirectiveTokenIntermediateNode" Kind="Class" />
      <Type Name="DocumentIntermediateNode" Kind="Class" />
      <Type Name="DocumentIntermediateNodeExtensions" Kind="Class" />
      <Type Name="ExtensionIntermediateNode" Kind="Class" />
      <Type Name="FieldDeclarationIntermediateNode" Kind="Class" />
      <Type Name="HtmlAttributeIntermediateNode" Kind="Class" />
      <Type Name="HtmlAttributeValueIntermediateNode" Kind="Class" />
      <Type Name="HtmlContentIntermediateNode" Kind="Class" />
      <Type Name="IExtensionIntermediateNodeVisitor`1" DisplayName="IExtensionIntermediateNodeVisitor&lt;TNode&gt;" Kind="Interface" />
      <Type Name="IntermediateNode" Kind="Class" />
      <Type Name="IntermediateNodeCollection" Kind="Class" />
      <Type Name="IntermediateNodeCollection+Enumerator" Kind="Structure" />
      <Type Name="IntermediateNodeExtensions" Kind="Class" />
      <Type Name="IntermediateNodeReference" Kind="Structure" />
      <Type Name="IntermediateNodeVisitor" Kind="Class" />
      <Type Name="IntermediateNodeWalker" Kind="Class" />
      <Type Name="IntermediateToken" Kind="Class" />
      <Type Name="MalformedDirectiveIntermediateNode" Kind="Class" />
      <Type Name="MemberDeclarationIntermediateNode" Kind="Class" />
      <Type Name="MethodDeclarationIntermediateNode" Kind="Class" />
      <Type Name="NamespaceDeclarationIntermediateNode" Kind="Class" />
      <Type Name="PropertyDeclarationIntermediateNode" Kind="Class" />
      <Type Name="TagHelperBodyIntermediateNode" Kind="Class" />
      <Type Name="TagHelperHtmlAttributeIntermediateNode" Kind="Class" />
      <Type Name="TagHelperIntermediateNode" Kind="Class" />
      <Type Name="TagHelperPropertyIntermediateNode" Kind="Class" />
      <Type Name="TokenKind" Kind="Enumeration" />
      <Type Name="UsingDirectiveIntermediateNode" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Razor.Parser">
      <Type Name="BalancingModes" Kind="Enumeration" />
      <Type Name="CSharpCodeParser" Kind="Class" />
      <Type Name="CSharpCodeParser+Block" Kind="Class" />
      <Type Name="CSharpLanguageCharacteristics" Kind="Class" />
      <Type Name="ISyntaxTreeRewriter" Kind="Interface" />
      <Type Name="LanguageCharacteristics`3" DisplayName="LanguageCharacteristics&lt;TTokenizer,TSymbol,TSymbolType&gt;" Kind="Class" />
      <Type Name="ParserBase" Kind="Class" />
      <Type Name="ParserContext" Kind="Class" />
      <Type Name="ParserHelpers" Kind="Class" />
      <Type Name="ParserVisitor" Kind="Class" />
      <Type Name="ParserVisitorExtensions" Kind="Class" />
      <Type Name="RazorParser" Kind="Class" />
      <Type Name="RewritingContext" Kind="Class" />
      <Type Name="SyntaxConstants" Kind="Class" />
      <Type Name="SyntaxConstants+CSharp" Kind="Class" />
      <Type Name="TokenizerBackedParser`3" DisplayName="TokenizerBackedParser&lt;TTokenizer,TSymbol,TSymbolType&gt;" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Razor.Parser.Internal">
      <Type Name="CallbackVisitor" Kind="Class" />
      <Type Name="HtmlLanguageCharacteristics" Kind="Class" />
      <Type Name="HtmlMarkupParser" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Razor.Parser.SyntaxTree">
      <Type Name="AcceptedCharacters" Kind="Enumeration" />
      <Type Name="Block" Kind="Class" />
      <Type Name="BlockBuilder" Kind="Class" />
      <Type Name="BlockType" Kind="Enumeration" />
      <Type Name="Span" Kind="Class" />
      <Type Name="SpanBuilder" Kind="Class" />
      <Type Name="SpanKind" Kind="Enumeration" />
      <Type Name="SyntaxTreeNode" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Razor.Parser.TagHelpers">
      <Type Name="TagHelperAttributeNode" Kind="Class" />
      <Type Name="TagHelperBlock" Kind="Class" />
      <Type Name="TagHelperBlockBuilder" Kind="Class" />
      <Type Name="TagHelperDirectiveSpanVisitor" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Razor.Parser.TagHelpers.Internal">
      <Type Name="TagHelperBlockRewriter" Kind="Class" />
      <Type Name="TagHelperParseTreeRewriter" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Razor.Runtime.TagHelpers">
      <Type Name="ITagHelperDescriptorFactory" Kind="Interface" />
      <Type Name="ITagHelperTypeResolver" Kind="Interface" />
      <Type Name="TagHelperConventions" Kind="Class" />
      <Type Name="TagHelperDescriptorFactory" Kind="Class" />
      <Type Name="TagHelperDescriptorResolver" Kind="Class" />
      <Type Name="TagHelperDesignTimeDescriptorFactory" Kind="Class" />
      <Type Name="TagHelperExecutionContext" Kind="Class" />
      <Type Name="TagHelperRunner" Kind="Class" />
      <Type Name="TagHelperScopeManager" Kind="Class" />
      <Type Name="TagHelperTypeResolver" Kind="Class" />
      <Type Name="XmlDocumentationProvider" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Razor.TagHelpers">
      <Type Name="DefaultTagHelperContent" Kind="Class" />
      <Type Name="HtmlAttributeNameAttribute" Kind="Class" />
      <Type Name="HtmlAttributeNotBoundAttribute" Kind="Class" />
      <Type Name="HtmlAttributeValueStyle" Kind="Enumeration" />
      <Type Name="HtmlTargetElementAttribute" Kind="Class" />
      <Type Name="ITagHelper" Kind="Interface" />
      <Type Name="ITagHelperComponent" Kind="Interface" />
      <Type Name="NullHtmlEncoder" Kind="Class" />
      <Type Name="OutputElementHintAttribute" Kind="Class" />
      <Type Name="ReadOnlyTagHelperAttributeList" Kind="Class" />
      <Type Name="RestrictChildrenAttribute" Kind="Class" />
      <Type Name="TagHelper" Kind="Class" />
      <Type Name="TagHelperAttribute" Kind="Class" />
      <Type Name="TagHelperAttributeList" Kind="Class" />
      <Type Name="TagHelperComponent" Kind="Class" />
      <Type Name="TagHelperContent" Kind="Class" />
      <Type Name="TagHelperContext" Kind="Class" />
      <Type Name="TagHelperOutput" Kind="Class" />
      <Type Name="TagMode" Kind="Enumeration" />
      <Type Name="TagStructure" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Razor.Text">
      <Type Name="ITextBuffer" Kind="Interface" />
      <Type Name="ITextDocument" Kind="Interface" />
      <Type Name="LocationTagged`1" DisplayName="LocationTagged&lt;TValue&gt;" Kind="Class" />
      <Type Name="LookaheadTextReader" Kind="Class" />
      <Type Name="LookaheadToken" Kind="Structure" />
      <Type Name="SeekableTextReader" Kind="Class" />
      <Type Name="SourceLocationTracker" Kind="Class" />
      <Type Name="TextChange" Kind="Structure" />
      <Type Name="TextDocumentReader" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Razor.Tokenizer">
      <Type Name="ITokenizer" Kind="Interface" />
      <Type Name="Tokenizer`2" DisplayName="Tokenizer&lt;TSymbol,TSymbolType&gt;" Kind="Class" />
      <Type Name="Tokenizer`2+RazorCommentTokenizerState" DisplayName="Tokenizer&lt;TSymbol,TSymbolType&gt;+RazorCommentTokenizerState" Kind="Enumeration" />
      <Type Name="Tokenizer`2+StateResult" DisplayName="Tokenizer&lt;TSymbol,TSymbolType&gt;+StateResult" Kind="Structure" />
      <Type Name="TokenizerView`3" DisplayName="TokenizerView&lt;TTokenizer,TSymbol,TSymbolType&gt;" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Razor.Tokenizer.Internal">
      <Type Name="CSharpHelpers" Kind="Class" />
      <Type Name="CSharpTokenizer" Kind="Class" />
      <Type Name="HtmlTokenizer" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Razor.Tokenizer.Symbols">
      <Type Name="CSharpKeyword" Kind="Enumeration" />
      <Type Name="CSharpSymbol" Kind="Class" />
      <Type Name="CSharpSymbolType" Kind="Enumeration" />
      <Type Name="ISymbol" Kind="Interface" />
      <Type Name="KnownSymbolType" Kind="Enumeration" />
      <Type Name="SymbolBase`1" DisplayName="SymbolBase&lt;TType&gt;" Kind="Class" />
      <Type Name="SymbolExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Razor.Tokenizer.Symbols.Internal">
      <Type Name="HtmlSymbol" Kind="Class" />
      <Type Name="HtmlSymbolExtensions" Kind="Class" />
      <Type Name="HtmlSymbolType" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.ResponseCaching">
      <Type Name="IResponseCachingFeature" Kind="Interface" />
      <Type Name="ResponseCachingFeature" Kind="Class" />
      <Type Name="ResponseCachingMiddleware" Kind="Class" />
      <Type Name="ResponseCachingOptions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.ResponseCaching.Internal">
      <Type Name="CachedResponse" Kind="Class" />
      <Type Name="CachedVaryByRules" Kind="Class" />
      <Type Name="IResponseCache" Kind="Interface" />
      <Type Name="IResponseCacheEntry" Kind="Interface" />
      <Type Name="IResponseCachingKeyProvider" Kind="Interface" />
      <Type Name="IResponseCachingPolicyProvider" Kind="Interface" />
      <Type Name="MemoryResponseCache" Kind="Class" />
      <Type Name="ResponseCachingContext" Kind="Class" />
      <Type Name="ResponseCachingKeyProvider" Kind="Class" />
      <Type Name="ResponseCachingPolicyProvider" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.ResponseCompression">
      <Type Name="CompressionProviderCollection" Kind="Class" />
      <Type Name="GzipCompressionProvider" Kind="Class" />
      <Type Name="GzipCompressionProviderOptions" Kind="Class" />
      <Type Name="ICompressionProvider" Kind="Interface" />
      <Type Name="IResponseCompressionProvider" Kind="Interface" />
      <Type Name="ResponseCompressionDefaults" Kind="Class" />
      <Type Name="ResponseCompressionMiddleware" Kind="Class" />
      <Type Name="ResponseCompressionOptions" Kind="Class" />
      <Type Name="ResponseCompressionProvider" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Rewrite">
      <Type Name="ApacheModRewriteOptionsExtensions" Kind="Class" />
      <Type Name="IISUrlRewriteOptionsExtensions" Kind="Class" />
      <Type Name="IRule" Kind="Interface" />
      <Type Name="RewriteContext" Kind="Class" />
      <Type Name="RewriteMiddleware" Kind="Class" />
      <Type Name="RewriteOptions" Kind="Class" />
      <Type Name="RewriteOptionsExtensions" Kind="Class" />
      <Type Name="RuleResult" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Rewrite.Internal">
      <Type Name="BackReferenceCollection" Kind="Class" />
      <Type Name="Condition" Kind="Class" />
      <Type Name="ConditionHelper" Kind="Class" />
      <Type Name="DelegateRule" Kind="Class" />
      <Type Name="MatchResults" Kind="Class" />
      <Type Name="ParserContext" Kind="Class" />
      <Type Name="Pattern" Kind="Class" />
      <Type Name="PatternSegment" Kind="Class" />
      <Type Name="RedirectRule" Kind="Class" />
      <Type Name="RedirectToHttpsRule" Kind="Class" />
      <Type Name="RewriteRule" Kind="Class" />
      <Type Name="UrlAction" Kind="Class" />
      <Type Name="UrlMatch" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Rewrite.Internal.ApacheModRewrite">
      <Type Name="ApacheModRewriteRule" Kind="Class" />
      <Type Name="Condition" Kind="Class" />
      <Type Name="ConditionEvaluator" Kind="Class" />
      <Type Name="ConditionPatternParser" Kind="Class" />
      <Type Name="ConditionType" Kind="Enumeration" />
      <Type Name="CookieActionFactory" Kind="Class" />
      <Type Name="FileParser" Kind="Class" />
      <Type Name="FlagParser" Kind="Class" />
      <Type Name="Flags" Kind="Class" />
      <Type Name="FlagType" Kind="Enumeration" />
      <Type Name="OperationType" Kind="Enumeration" />
      <Type Name="ParsedModRewriteInput" Kind="Class" />
      <Type Name="RuleBuilder" Kind="Class" />
      <Type Name="RuleRegexParser" Kind="Class" />
      <Type Name="SegmentType" Kind="Enumeration" />
      <Type Name="ServerVariables" Kind="Class" />
      <Type Name="TestStringParser" Kind="Class" />
      <Type Name="Tokenizer" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Rewrite.Internal.IISUrlRewrite">
      <Type Name="ActionType" Kind="Enumeration" />
      <Type Name="Condition" Kind="Class" />
      <Type Name="ConditionCollection" Kind="Class" />
      <Type Name="ConditionEvaluator" Kind="Class" />
      <Type Name="IISRewriteMap" Kind="Class" />
      <Type Name="IISRewriteMapCollection" Kind="Class" />
      <Type Name="IISUrlRewriteRule" Kind="Class" />
      <Type Name="InputParser" Kind="Class" />
      <Type Name="InvalidUrlRewriteFormatException" Kind="Class" />
      <Type Name="LogicalGrouping" Kind="Enumeration" />
      <Type Name="MatchType" Kind="Enumeration" />
      <Type Name="PatternSyntax" Kind="Enumeration" />
      <Type Name="RedirectType" Kind="Enumeration" />
      <Type Name="RewriteMapParser" Kind="Class" />
      <Type Name="RewriteTags" Kind="Class" />
      <Type Name="ServerVariables" Kind="Class" />
      <Type Name="UriMatchCondition" Kind="Class" />
      <Type Name="UriMatchPart" Kind="Enumeration" />
      <Type Name="UrlRewriteFileParser" Kind="Class" />
      <Type Name="UrlRewriteRuleBuilder" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Rewrite.Internal.PatternSegments">
      <Type Name="ConditionMatchSegment" Kind="Class" />
      <Type Name="DateTimeSegment" Kind="Class" />
      <Type Name="HeaderSegment" Kind="Class" />
      <Type Name="IsHttpsModSegment" Kind="Class" />
      <Type Name="IsHttpsUrlSegment" Kind="Class" />
      <Type Name="IsIPV6Segment" Kind="Class" />
      <Type Name="LiteralSegment" Kind="Class" />
      <Type Name="LocalAddressSegment" Kind="Class" />
      <Type Name="LocalPortSegment" Kind="Class" />
      <Type Name="QueryStringSegment" Kind="Class" />
      <Type Name="RemoteAddressSegment" Kind="Class" />
      <Type Name="RemotePortSegment" Kind="Class" />
      <Type Name="RequestFileNameSegment" Kind="Class" />
      <Type Name="RequestMethodSegment" Kind="Class" />
      <Type Name="RewriteMapSegment" Kind="Class" />
      <Type Name="RuleMatchSegment" Kind="Class" />
      <Type Name="SchemeSegment" Kind="Class" />
      <Type Name="ServerProtocolSegment" Kind="Class" />
      <Type Name="ToLowerSegment" Kind="Class" />
      <Type Name="UrlEncodeSegment" Kind="Class" />
      <Type Name="UrlSegment" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Rewrite.Internal.UrlActions">
      <Type Name="AbortAction" Kind="Class" />
      <Type Name="ChangeCookieAction" Kind="Class" />
      <Type Name="CustomResponseAction" Kind="Class" />
      <Type Name="ForbiddenAction" Kind="Class" />
      <Type Name="GoneAction" Kind="Class" />
      <Type Name="NoneAction" Kind="Class" />
      <Type Name="RedirectAction" Kind="Class" />
      <Type Name="RewriteAction" Kind="Class" />
      <Type Name="VoidAction" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Rewrite.Internal.UrlMatches">
      <Type Name="ExactMatch" Kind="Class" />
      <Type Name="FileSizeMatch" Kind="Class" />
      <Type Name="IntegerMatch" Kind="Class" />
      <Type Name="IntegerOperationType" Kind="Enumeration" />
      <Type Name="IsDirectoryMatch" Kind="Class" />
      <Type Name="IsFileMatch" Kind="Class" />
      <Type Name="RegexMatch" Kind="Class" />
      <Type Name="StringMatch" Kind="Class" />
      <Type Name="StringOperationType" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Routing">
      <Type Name="DefaultInlineConstraintResolver" Kind="Class" />
      <Type Name="IInlineConstraintResolver" Kind="Interface" />
      <Type Name="INamedRouter" Kind="Interface" />
      <Type Name="InlineRouteParameterParser" Kind="Class" />
      <Type Name="IRouteBuilder" Kind="Interface" />
      <Type Name="IRouteCollection" Kind="Interface" />
      <Type Name="IRouteConstraint" Kind="Interface" />
      <Type Name="IRouteHandler" Kind="Interface" />
      <Type Name="IRouter" Kind="Interface" />
      <Type Name="IRoutingFeature" Kind="Interface" />
      <Type Name="RequestDelegateRouteBuilderExtensions" Kind="Class" />
      <Type Name="Route" Kind="Class" />
      <Type Name="RouteBase" Kind="Class" />
      <Type Name="RouteBuilder" Kind="Class" />
      <Type Name="RouteCollection" Kind="Class" />
      <Type Name="RouteConstraintBuilder" Kind="Class" />
      <Type Name="RouteConstraintMatcher" Kind="Class" />
      <Type Name="RouteContext" Kind="Class" />
      <Type Name="RouteCreationException" Kind="Class" />
      <Type Name="RouteData" Kind="Class" />
      <Type Name="RouteData+RouteDataSnapshot" Kind="Structure" />
      <Type Name="RouteDirection" Kind="Enumeration" />
      <Type Name="RouteHandler" Kind="Class" />
      <Type Name="RouteOptions" Kind="Class" />
      <Type Name="RouteValueDictionary" Kind="Class" />
      <Type Name="RouteValueDictionary+Enumerator" Kind="Structure" />
      <Type Name="RouteValueEqualityComparer" Kind="Class" />
      <Type Name="RoutingFeature" Kind="Class" />
      <Type Name="RoutingHttpContextExtensions" Kind="Class" />
      <Type Name="VirtualPathContext" Kind="Class" />
      <Type Name="VirtualPathData" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Routing.Constraints">
      <Type Name="AlphaRouteConstraint" Kind="Class" />
      <Type Name="BoolRouteConstraint" Kind="Class" />
      <Type Name="CompositeRouteConstraint" Kind="Class" />
      <Type Name="DateTimeRouteConstraint" Kind="Class" />
      <Type Name="DecimalRouteConstraint" Kind="Class" />
      <Type Name="DoubleRouteConstraint" Kind="Class" />
      <Type Name="FloatRouteConstraint" Kind="Class" />
      <Type Name="GuidRouteConstraint" Kind="Class" />
      <Type Name="HttpMethodRouteConstraint" Kind="Class" />
      <Type Name="IntRouteConstraint" Kind="Class" />
      <Type Name="LengthRouteConstraint" Kind="Class" />
      <Type Name="LongRouteConstraint" Kind="Class" />
      <Type Name="MaxLengthRouteConstraint" Kind="Class" />
      <Type Name="MaxRouteConstraint" Kind="Class" />
      <Type Name="MinLengthRouteConstraint" Kind="Class" />
      <Type Name="MinRouteConstraint" Kind="Class" />
      <Type Name="OptionalRouteConstraint" Kind="Class" />
      <Type Name="RangeRouteConstraint" Kind="Class" />
      <Type Name="RegexInlineRouteConstraint" Kind="Class" />
      <Type Name="RegexRouteConstraint" Kind="Class" />
      <Type Name="RequiredRouteConstraint" Kind="Class" />
      <Type Name="StringRouteConstraint" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Routing.Internal">
      <Type Name="BufferValue" Kind="Structure" />
      <Type Name="LinkGenerationDecisionTree" Kind="Class" />
      <Type Name="OutboundMatchResult" Kind="Structure" />
      <Type Name="PathTokenizer" Kind="Structure" />
      <Type Name="PathTokenizer+Enumerator" Kind="Structure" />
      <Type Name="RoutingMarkerService" Kind="Class" />
      <Type Name="SegmentState" Kind="Enumeration" />
      <Type Name="TaskCache" Kind="Class" />
      <Type Name="UriBuilderContextPooledObjectPolicy" Kind="Class" />
      <Type Name="UriBuildingContext" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Routing.Template">
      <Type Name="InlineConstraint" Kind="Class" />
      <Type Name="RoutePrecedence" Kind="Class" />
      <Type Name="RouteTemplate" Kind="Class" />
      <Type Name="TemplateBinder" Kind="Class" />
      <Type Name="TemplateMatcher" Kind="Class" />
      <Type Name="TemplateParser" Kind="Class" />
      <Type Name="TemplatePart" Kind="Class" />
      <Type Name="TemplateSegment" Kind="Class" />
      <Type Name="TemplateValuesResult" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Routing.Tree">
      <Type Name="InboundMatch" Kind="Class" />
      <Type Name="InboundRouteEntry" Kind="Class" />
      <Type Name="OutboundMatch" Kind="Class" />
      <Type Name="OutboundRouteEntry" Kind="Class" />
      <Type Name="TreeRouteBuilder" Kind="Class" />
      <Type Name="TreeRouter" Kind="Class" />
      <Type Name="UrlMatchingNode" Kind="Class" />
      <Type Name="UrlMatchingTree" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Server.HttpSys">
      <Type Name="AuthenticationManager" Kind="Class" />
      <Type Name="AuthenticationSchemes" Kind="Enumeration" />
      <Type Name="HttpSysDefaults" Kind="Class" />
      <Type Name="HttpSysException" Kind="Class" />
      <Type Name="HttpSysOptions" Kind="Class" />
      <Type Name="TimeoutManager" Kind="Class" />
      <Type Name="UrlPrefix" Kind="Class" />
      <Type Name="UrlPrefixCollection" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Server.IISIntegration">
      <Type Name="IISDefaults" Kind="Class" />
      <Type Name="IISHostingStartup" Kind="Class" />
      <Type Name="IISMiddleware" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Server.Kestrel">
      <Type Name="BadHttpRequestException" Kind="Class" />
      <Type Name="KestrelServer" Kind="Class" />
      <Type Name="KestrelServerLimits" Kind="Class" />
      <Type Name="KestrelServerOptions" Kind="Class" />
      <Type Name="ServerAddress" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Server.Kestrel.Core">
      <Type Name="BadHttpRequestException" Kind="Class" />
      <Type Name="KestrelServer" Kind="Class" />
      <Type Name="KestrelServerLimits" Kind="Class" />
      <Type Name="KestrelServerOptions" Kind="Class" />
      <Type Name="ListenOptions" Kind="Class" />
      <Type Name="MinDataRate" Kind="Class" />
      <Type Name="ServerAddress" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Server.Kestrel.Core.Adapter.Internal">
      <Type Name="AdaptedPipeline" Kind="Class" />
      <Type Name="ConnectionAdapterContext" Kind="Class" />
      <Type Name="IAdaptedConnection" Kind="Interface" />
      <Type Name="IConnectionAdapter" Kind="Interface" />
      <Type Name="LoggingConnectionAdapter" Kind="Class" />
      <Type Name="RawStream" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Server.Kestrel.Core.Features">
      <Type Name="IHttpMinRequestBodyDataRateFeature" Kind="Interface" />
      <Type Name="IHttpMinResponseDataRateFeature" Kind="Interface" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Server.Kestrel.Core.Internal">
      <Type Name="ConnectionHandler`1" DisplayName="ConnectionHandler&lt;TContext&gt;" Kind="Class" />
      <Type Name="FrameConnection" Kind="Class" />
      <Type Name="FrameConnectionContext" Kind="Class" />
      <Type Name="KestrelServerOptionsSetup" Kind="Class" />
      <Type Name="KestrelTrace" Kind="Class" />
      <Type Name="RejectionConnection" Kind="Class" />
      <Type Name="ServiceContext" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http">
      <Type Name="ChunkWriter" Kind="Class" />
      <Type Name="ConnectionOptions" Kind="Enumeration" />
      <Type Name="DateHeaderValueManager" Kind="Class" />
      <Type Name="DateHeaderValueManager+DateHeaderValues" Kind="Class" />
      <Type Name="Frame" Kind="Class" />
      <Type Name="Frame`1" DisplayName="Frame&lt;TContext&gt;" Kind="Class" />
      <Type Name="FrameAdapter" Kind="Structure" />
      <Type Name="FrameContext" Kind="Class" />
      <Type Name="FrameHeaders" Kind="Class" />
      <Type Name="FrameRequestHeaders" Kind="Class" />
      <Type Name="FrameRequestHeaders+Enumerator" Kind="Structure" />
      <Type Name="FrameResponseHeaders" Kind="Class" />
      <Type Name="FrameResponseHeaders+Enumerator" Kind="Structure" />
      <Type Name="HttpMethod" Kind="Enumeration" />
      <Type Name="HttpParser`1" DisplayName="HttpParser&lt;TRequestHandler&gt;" Kind="Class" />
      <Type Name="HttpScheme" Kind="Enumeration" />
      <Type Name="HttpVersion" Kind="Enumeration" />
      <Type Name="IFrameControl" Kind="Interface" />
      <Type Name="IHttpHeadersHandler" Kind="Interface" />
      <Type Name="IHttpParser`1" DisplayName="IHttpParser&lt;TRequestHandler&gt;" Kind="Interface" />
      <Type Name="IHttpRequestLineHandler" Kind="Interface" />
      <Type Name="MessageBody" Kind="Class" />
      <Type Name="OutputProducer" Kind="Class" />
      <Type Name="PathNormalizer" Kind="Class" />
      <Type Name="PipelineExtensions" Kind="Class" />
      <Type Name="ProduceEndType" Kind="Enumeration" />
      <Type Name="ReasonPhrases" Kind="Class" />
      <Type Name="RequestProcessingStatus" Kind="Enumeration" />
      <Type Name="RequestRejectionReason" Kind="Enumeration" />
      <Type Name="TransferCoding" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure">
      <Type Name="Disposable" Kind="Class" />
      <Type Name="FrameConnectionManager" Kind="Class" />
      <Type Name="FrameConnectionManagerShutdownExtensions" Kind="Class" />
      <Type Name="FrameConnectionReference" Kind="Class" />
      <Type Name="FrameHeartbeatManager" Kind="Class" />
      <Type Name="Heartbeat" Kind="Class" />
      <Type Name="HttpUtilities" Kind="Class" />
      <Type Name="IDebugger" Kind="Interface" />
      <Type Name="IHeartbeatHandler" Kind="Interface" />
      <Type Name="IKestrelTrace" Kind="Interface" />
      <Type Name="InlineLoggingThreadPool" Kind="Class" />
      <Type Name="ISystemClock" Kind="Interface" />
      <Type Name="IThreadPool" Kind="Interface" />
      <Type Name="ITimeoutControl" Kind="Interface" />
      <Type Name="KestrelEventSource" Kind="Class" />
      <Type Name="LoggingThreadPool" Kind="Class" />
      <Type Name="ReadOnlyStream" Kind="Class" />
      <Type Name="ResourceCounter" Kind="Class" />
      <Type Name="ThrowingWriteOnlyStream" Kind="Class" />
      <Type Name="TimeoutAction" Kind="Enumeration" />
      <Type Name="UriUtilities" Kind="Class" />
      <Type Name="WriteOnlyStream" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Server.Kestrel.Filter">
      <Type Name="ConnectionFilterContext" Kind="Class" />
      <Type Name="IConnectionFilter" Kind="Interface" />
      <Type Name="LoggingConnectionFilter" Kind="Class" />
      <Type Name="NoOpConnectionFilter" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Server.Kestrel.Filter.Internal">
      <Type Name="FilteredStreamAdapter" Kind="Class" />
      <Type Name="LibuvStream" Kind="Class" />
      <Type Name="StreamSocketOutput" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Server.Kestrel.Https">
      <Type Name="ClientCertificateMode" Kind="Enumeration" />
      <Type Name="HttpsConnectionAdapterOptions" Kind="Class" />
      <Type Name="HttpsConnectionFilter" Kind="Class" />
      <Type Name="HttpsConnectionFilterOptions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Server.Kestrel.Https.Internal">
      <Type Name="HttpsConnectionAdapter" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Server.Kestrel.Internal">
      <Type Name="Disposable" Kind="Class" />
      <Type Name="KestrelEngine" Kind="Class" />
      <Type Name="KestrelServerOptionsSetup" Kind="Class" />
      <Type Name="KestrelThread" Kind="Class" />
      <Type Name="KestrelTrace" Kind="Class" />
      <Type Name="ServiceContext" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Server.Kestrel.Internal.Http">
      <Type Name="BufferSizeControl" Kind="Class" />
      <Type Name="ChunkWriter" Kind="Class" />
      <Type Name="Connection" Kind="Class" />
      <Type Name="ConnectionContext" Kind="Class" />
      <Type Name="ConnectionManager" Kind="Class" />
      <Type Name="ConnectionOptions" Kind="Enumeration" />
      <Type Name="DateHeaderValueManager" Kind="Class" />
      <Type Name="DateHeaderValueManager+DateHeaderValues" Kind="Class" />
      <Type Name="Frame" Kind="Class" />
      <Type Name="Frame`1" DisplayName="Frame&lt;TContext&gt;" Kind="Class" />
      <Type Name="Frame+RequestLineStatus" Kind="Enumeration" />
      <Type Name="Frame+RequestProcessingStatus" Kind="Enumeration" />
      <Type Name="FrameHeaders" Kind="Class" />
      <Type Name="FrameRequestHeaders" Kind="Class" />
      <Type Name="FrameRequestHeaders+Enumerator" Kind="Structure" />
      <Type Name="FrameResponseHeaders" Kind="Class" />
      <Type Name="FrameResponseHeaders+Enumerator" Kind="Structure" />
      <Type Name="HttpVersion" Kind="Enumeration" />
      <Type Name="IBufferSizeControl" Kind="Interface" />
      <Type Name="IConnectionControl" Kind="Interface" />
      <Type Name="IFrameControl" Kind="Interface" />
      <Type Name="ISocketOutput" Kind="Interface" />
      <Type Name="Listener" Kind="Class" />
      <Type Name="ListenerContext" Kind="Class" />
      <Type Name="ListenerPrimary" Kind="Class" />
      <Type Name="ListenerSecondary" Kind="Class" />
      <Type Name="MessageBody" Kind="Class" />
      <Type Name="PathNormalizer" Kind="Class" />
      <Type Name="PipeListener" Kind="Class" />
      <Type Name="PipeListenerPrimary" Kind="Class" />
      <Type Name="PipeListenerSecondary" Kind="Class" />
      <Type Name="ProduceEndType" Kind="Enumeration" />
      <Type Name="ReasonPhrases" Kind="Class" />
      <Type Name="RequestRejectionReason" Kind="Enumeration" />
      <Type Name="SocketInput" Kind="Class" />
      <Type Name="SocketInputExtensions" Kind="Class" />
      <Type Name="SocketOutput" Kind="Class" />
      <Type Name="TcpListener" Kind="Class" />
      <Type Name="TcpListenerPrimary" Kind="Class" />
      <Type Name="TcpListenerSecondary" Kind="Class" />
      <Type Name="TimeoutAction" Kind="Enumeration" />
      <Type Name="TransferCoding" Kind="Enumeration" />
      <Type Name="UrlPathDecoder" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure">
      <Type Name="IKestrelTrace" Kind="Interface" />
      <Type Name="IThreadPool" Kind="Interface" />
      <Type Name="LoggingThreadPool" Kind="Class" />
      <Type Name="MemoryPool" Kind="Class" />
      <Type Name="MemoryPoolBlock" Kind="Class" />
      <Type Name="MemoryPoolIterator" Kind="Structure" />
      <Type Name="MemoryPoolIteratorExtensions" Kind="Class" />
      <Type Name="MemoryPoolSlab" Kind="Class" />
      <Type Name="TaskUtilities" Kind="Class" />
      <Type Name="WriteReqPool" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Server.Kestrel.Internal.Networking">
      <Type Name="Libuv" Kind="Class" />
      <Type Name="Libuv+HandleType" Kind="Enumeration" />
      <Type Name="Libuv+RequestType" Kind="Enumeration" />
      <Type Name="Libuv+uv_alloc_cb" Kind="Delegate" />
      <Type Name="Libuv+uv_async_cb" Kind="Delegate" />
      <Type Name="Libuv+uv_buf_t" Kind="Structure" />
      <Type Name="Libuv+uv_close_cb" Kind="Delegate" />
      <Type Name="Libuv+uv_connect_cb" Kind="Delegate" />
      <Type Name="Libuv+uv_connection_cb" Kind="Delegate" />
      <Type Name="Libuv+uv_fileno_func" Kind="Delegate" />
      <Type Name="Libuv+uv_ip4_addr_func" Kind="Delegate" />
      <Type Name="Libuv+uv_ip6_addr_func" Kind="Delegate" />
      <Type Name="Libuv+uv_read_cb" Kind="Delegate" />
      <Type Name="Libuv+uv_shutdown_cb" Kind="Delegate" />
      <Type Name="Libuv+uv_tcp_bind_func" Kind="Delegate" />
      <Type Name="Libuv+uv_tcp_getpeername_func" Kind="Delegate" />
      <Type Name="Libuv+uv_tcp_getsockname_func" Kind="Delegate" />
      <Type Name="Libuv+uv_timer_cb" Kind="Delegate" />
      <Type Name="Libuv+uv_walk_cb" Kind="Delegate" />
      <Type Name="Libuv+uv_write_cb" Kind="Delegate" />
      <Type Name="Libuv+uv_write_func" Kind="Delegate" />
      <Type Name="Libuv+uv_write2_func" Kind="Delegate" />
      <Type Name="PlatformApis" Kind="Class" />
      <Type Name="SockAddr" Kind="Structure" />
      <Type Name="UvAsyncHandle" Kind="Class" />
      <Type Name="UvConnectRequest" Kind="Class" />
      <Type Name="UvException" Kind="Class" />
      <Type Name="UvHandle" Kind="Class" />
      <Type Name="UvLoopHandle" Kind="Class" />
      <Type Name="UvMemory" Kind="Class" />
      <Type Name="UvPipeHandle" Kind="Class" />
      <Type Name="UvRequest" Kind="Class" />
      <Type Name="UvShutdownReq" Kind="Class" />
      <Type Name="UvStreamHandle" Kind="Class" />
      <Type Name="UvTcpHandle" Kind="Class" />
      <Type Name="UvTimerHandle" Kind="Class" />
      <Type Name="UvWriteReq" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Server.Kestrel.Internal.System">
      <Type Name="ReadOnlySpan`1" DisplayName="ReadOnlySpan&lt;T&gt;" Kind="Structure" />
      <Type Name="Span`1" DisplayName="Span&lt;T&gt;" Kind="Structure" />
      <Type Name="SpanExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Binary">
      <Type Name="BufferReader" Kind="Class" />
      <Type Name="BufferWriter" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Buffers">
      <Type Name="Buffer`1" DisplayName="Buffer&lt;T&gt;" Kind="Structure" />
      <Type Name="BufferHandle" Kind="Structure" />
      <Type Name="BufferPool" Kind="Class" />
      <Type Name="DisposableReservation`1" DisplayName="DisposableReservation&lt;T&gt;" Kind="Structure" />
      <Type Name="IOutput" Kind="Interface" />
      <Type Name="OwnedBuffer`1" DisplayName="OwnedBuffer&lt;T&gt;" Kind="Class" />
      <Type Name="ReadOnlyBuffer`1" DisplayName="ReadOnlyBuffer&lt;T&gt;" Kind="Structure" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Collections.Sequences">
      <Type Name="ArrayList`1" DisplayName="ArrayList&lt;T&gt;" Kind="Class" />
      <Type Name="ISequence`1" DisplayName="ISequence&lt;T&gt;" Kind="Interface" />
      <Type Name="Position" Kind="Structure" />
      <Type Name="ResizableArray`1" DisplayName="ResizableArray&lt;T&gt;" Kind="Structure" />
      <Type Name="SequenceEnumerator`1" DisplayName="SequenceEnumerator&lt;T&gt;" Kind="Structure" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines">
      <Type Name="BufferEnumerator" Kind="Structure" />
      <Type Name="FlushResult" Kind="Structure" />
      <Type Name="InlineScheduler" Kind="Class" />
      <Type Name="IPipe" Kind="Interface" />
      <Type Name="IPipeConnection" Kind="Interface" />
      <Type Name="IPipeReader" Kind="Interface" />
      <Type Name="IPipeWriter" Kind="Interface" />
      <Type Name="IReadableBufferAwaiter" Kind="Interface" />
      <Type Name="IScheduler" Kind="Interface" />
      <Type Name="IWritableBufferAwaiter" Kind="Interface" />
      <Type Name="MemoryPool" Kind="Class" />
      <Type Name="MemoryPoolBlock" Kind="Class" />
      <Type Name="MemoryPoolSlab" Kind="Class" />
      <Type Name="PipeFactory" Kind="Class" />
      <Type Name="PipelineReaderExtensions" Kind="Class" />
      <Type Name="PipelineWriterExtensions" Kind="Class" />
      <Type Name="PipeOptions" Kind="Class" />
      <Type Name="PreservedBuffer" Kind="Structure" />
      <Type Name="ReadableBuffer" Kind="Structure" />
      <Type Name="ReadableBufferAwaitable" Kind="Structure" />
      <Type Name="ReadableBufferReader" Kind="Structure" />
      <Type Name="ReadCursor" Kind="Structure" />
      <Type Name="ReadCursorOperations" Kind="Class" />
      <Type Name="ReadResult" Kind="Structure" />
      <Type Name="TaskRunScheduler" Kind="Class" />
      <Type Name="UnownedBuffer" Kind="Class" />
      <Type Name="WritableBuffer" Kind="Structure" />
      <Type Name="WritableBufferAwaitable" Kind="Structure" />
      <Type Name="WritableBufferExtensions" Kind="Class" />
      <Type Name="WritableBufferWriter" Kind="Structure" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.Testing">
      <Type Name="BufferUtilities" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Runtime">
      <Type Name="BufferPrimitivesThrowHelper" Kind="Class" />
      <Type Name="ExceptionArgument" Kind="Enumeration" />
      <Type Name="PrimitiveAttribute" Kind="Class" />
      <Type Name="ReferenceCounter" Kind="Structure" />
      <Type Name="ReferenceCountingMethod" Kind="Enumeration" />
      <Type Name="ReferenceCountingSettings" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Text.Encodings.Web.Utf8">
      <Type Name="UrlEncoder" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions.Internal">
      <Type Name="AddressInUseException" Kind="Class" />
      <Type Name="ConnectionAbortedException" Kind="Class" />
      <Type Name="ConnectionResetException" Kind="Class" />
      <Type Name="FileHandleType" Kind="Enumeration" />
      <Type Name="IConnectionContext" Kind="Interface" />
      <Type Name="IConnectionHandler" Kind="Interface" />
      <Type Name="IConnectionInformation" Kind="Interface" />
      <Type Name="IEndPointInformation" Kind="Interface" />
      <Type Name="ITransport" Kind="Interface" />
      <Type Name="ITransportFactory" Kind="Interface" />
      <Type Name="ListenType" Kind="Enumeration" />
      <Type Name="SchedulingMode" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv">
      <Type Name="LibuvTransport" Kind="Class" />
      <Type Name="LibuvTransportFactory" Kind="Class" />
      <Type Name="LibuvTransportOptions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal">
      <Type Name="ILibuvTrace" Kind="Interface" />
      <Type Name="LibuvAwaitable`1" DisplayName="LibuvAwaitable&lt;TRequest&gt;" Kind="Class" />
      <Type Name="LibuvConnection" Kind="Class" />
      <Type Name="LibuvConnectionContext" Kind="Class" />
      <Type Name="LibuvOutputConsumer" Kind="Class" />
      <Type Name="LibuvThread" Kind="Class" />
      <Type Name="LibuvTrace" Kind="Class" />
      <Type Name="LibuvTransportContext" Kind="Class" />
      <Type Name="Listener" Kind="Class" />
      <Type Name="ListenerContext" Kind="Class" />
      <Type Name="ListenerPrimary" Kind="Class" />
      <Type Name="ListenerSecondary" Kind="Class" />
      <Type Name="UvWriteResult" Kind="Structure" />
      <Type Name="WriteReqPool" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Networking">
      <Type Name="LibuvFunctions" Kind="Class" />
      <Type Name="LibuvFunctions+HandleType" Kind="Enumeration" />
      <Type Name="LibuvFunctions+RequestType" Kind="Enumeration" />
      <Type Name="LibuvFunctions+uv_alloc_cb" Kind="Delegate" />
      <Type Name="LibuvFunctions+uv_async_cb" Kind="Delegate" />
      <Type Name="LibuvFunctions+uv_buf_t" Kind="Structure" />
      <Type Name="LibuvFunctions+uv_close_cb" Kind="Delegate" />
      <Type Name="LibuvFunctions+uv_connect_cb" Kind="Delegate" />
      <Type Name="LibuvFunctions+uv_connection_cb" Kind="Delegate" />
      <Type Name="LibuvFunctions+uv_fileno_func" Kind="Delegate" />
      <Type Name="LibuvFunctions+uv_ip4_addr_func" Kind="Delegate" />
      <Type Name="LibuvFunctions+uv_ip6_addr_func" Kind="Delegate" />
      <Type Name="LibuvFunctions+uv_read_cb" Kind="Delegate" />
      <Type Name="LibuvFunctions+uv_tcp_bind_func" Kind="Delegate" />
      <Type Name="LibuvFunctions+uv_tcp_getpeername_func" Kind="Delegate" />
      <Type Name="LibuvFunctions+uv_tcp_getsockname_func" Kind="Delegate" />
      <Type Name="LibuvFunctions+uv_timer_cb" Kind="Delegate" />
      <Type Name="LibuvFunctions+uv_walk_cb" Kind="Delegate" />
      <Type Name="LibuvFunctions+uv_write_cb" Kind="Delegate" />
      <Type Name="LibuvFunctions+uv_write_func" Kind="Delegate" />
      <Type Name="LibuvFunctions+uv_write2_func" Kind="Delegate" />
      <Type Name="PlatformApis" Kind="Class" />
      <Type Name="SockAddr" Kind="Structure" />
      <Type Name="UvAsyncHandle" Kind="Class" />
      <Type Name="UvConnectRequest" Kind="Class" />
      <Type Name="UvException" Kind="Class" />
      <Type Name="UvHandle" Kind="Class" />
      <Type Name="UvLoopHandle" Kind="Class" />
      <Type Name="UvMemory" Kind="Class" />
      <Type Name="UvPipeHandle" Kind="Class" />
      <Type Name="UvRequest" Kind="Class" />
      <Type Name="UvStreamHandle" Kind="Class" />
      <Type Name="UvTcpHandle" Kind="Class" />
      <Type Name="UvTimerHandle" Kind="Class" />
      <Type Name="UvWriteReq" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Server.WebListener">
      <Type Name="MessagePump" Kind="Class" />
      <Type Name="WebListenerOptions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Server.WebListener.Internal">
      <Type Name="WebListenerOptionsSetup" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.Session">
      <Type Name="DistributedSession" Kind="Class" />
      <Type Name="DistributedSessionStore" Kind="Class" />
      <Type Name="ISessionStore" Kind="Interface" />
      <Type Name="SessionDefaults" Kind="Class" />
      <Type Name="SessionFeature" Kind="Class" />
      <Type Name="SessionMiddleware" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.SpaServices.Prerendering">
      <Type Name="ISpaPrerenderer" Kind="Interface" />
      <Type Name="JavaScriptModuleExport" Kind="Class" />
      <Type Name="Prerenderer" Kind="Class" />
      <Type Name="PrerenderTagHelper" Kind="Class" />
      <Type Name="RenderToStringResult" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.SpaServices.Webpack">
      <Type Name="WebpackDevMiddlewareOptions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.StaticFiles">
      <Type Name="DefaultFilesMiddleware" Kind="Class" />
      <Type Name="DirectoryBrowserMiddleware" Kind="Class" />
      <Type Name="FileExtensionContentTypeProvider" Kind="Class" />
      <Type Name="HtmlDirectoryFormatter" Kind="Class" />
      <Type Name="IContentTypeProvider" Kind="Interface" />
      <Type Name="IDirectoryFormatter" Kind="Interface" />
      <Type Name="StaticFileMiddleware" Kind="Class" />
      <Type Name="StaticFileResponseContext" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.StaticFiles.Infrastructure">
      <Type Name="SharedOptions" Kind="Class" />
      <Type Name="SharedOptionsBase" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.TestHost">
      <Type Name="ClientHandler" Kind="Class" />
      <Type Name="RequestBuilder" Kind="Class" />
      <Type Name="TestServer" Kind="Class" />
      <Type Name="WebSocketClient" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.WebSockets">
      <Type Name="ExtendedWebSocketAcceptContext" Kind="Class" />
      <Type Name="WebSocketMiddleware" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.WebSockets.Internal">
      <Type Name="Constants" Kind="Class" />
      <Type Name="Constants+Headers" Kind="Class" />
      <Type Name="WebSocketFactory" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.WebSockets.Protocol">
      <Type Name="CommonWebSocket" Kind="Class" />
      <Type Name="Constants" Kind="Class" />
      <Type Name="Constants+Headers" Kind="Class" />
      <Type Name="Constants+OpCodes" Kind="Class" />
      <Type Name="FrameHeader" Kind="Class" />
      <Type Name="HandshakeHelpers" Kind="Class" />
      <Type Name="Utilities" Kind="Class" />
      <Type Name="Utilities+Utf8MessageState" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.WebSockets.Server">
      <Type Name="ExtendedWebSocketAcceptContext" Kind="Class" />
      <Type Name="WebSocketMiddleware" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.AspNetCore.WebUtilities">
      <Type Name="Base64UrlTextEncoder" Kind="Class" />
      <Type Name="FileBufferingReadStream" Kind="Class" />
      <Type Name="FileMultipartSection" Kind="Class" />
      <Type Name="FormMultipartSection" Kind="Class" />
      <Type Name="FormReader" Kind="Class" />
      <Type Name="HttpRequestStreamReader" Kind="Class" />
      <Type Name="HttpResponseStreamWriter" Kind="Class" />
      <Type Name="KeyValueAccumulator" Kind="Structure" />
      <Type Name="MultipartReader" Kind="Class" />
      <Type Name="MultipartSection" Kind="Class" />
      <Type Name="MultipartSectionConverterExtensions" Kind="Class" />
      <Type Name="MultipartSectionStreamExtensions" Kind="Class" />
      <Type Name="QueryHelpers" Kind="Class" />
      <Type Name="ReasonPhrases" Kind="Class" />
      <Type Name="StreamHelperExtensions" Kind="Class" />
      <Type Name="WebEncoders" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.Caching.Distributed">
      <Type Name="DistributedCacheEntryExtensions" Kind="Class" />
      <Type Name="DistributedCacheEntryOptions" Kind="Class" />
      <Type Name="DistributedCacheExtensions" Kind="Class" />
      <Type Name="IDistributedCache" Kind="Interface" />
      <Type Name="MemoryDistributedCache" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.Caching.Memory">
      <Type Name="CacheEntryExtensions" Kind="Class" />
      <Type Name="CacheExtensions" Kind="Class" />
      <Type Name="CacheItemPriority" Kind="Enumeration" />
      <Type Name="EvictionReason" Kind="Enumeration" />
      <Type Name="ICacheEntry" Kind="Interface" />
      <Type Name="IMemoryCache" Kind="Interface" />
      <Type Name="MemoryCache" Kind="Class" />
      <Type Name="MemoryCacheEntryExtensions" Kind="Class" />
      <Type Name="MemoryCacheEntryOptions" Kind="Class" />
      <Type Name="MemoryCacheOptions" Kind="Class" />
      <Type Name="MemoryDistributedCacheOptions" Kind="Class" />
      <Type Name="PostEvictionCallbackRegistration" Kind="Class" />
      <Type Name="PostEvictionDelegate" Kind="Delegate" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.Caching.Redis">
      <Type Name="RedisCache" Kind="Class" />
      <Type Name="RedisCacheOptions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.Caching.SqlServer">
      <Type Name="SqlServerCache" Kind="Class" />
      <Type Name="SqlServerCacheOptions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.CommandLineUtils">
      <Type Name="AnsiConsole" Kind="Class" />
      <Type Name="CommandArgument" Kind="Class" />
      <Type Name="CommandLineApplication" Kind="Class" />
      <Type Name="CommandOption" Kind="Class" />
      <Type Name="CommandOptionType" Kind="Enumeration" />
      <Type Name="CommandParsingException" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.Configuration">
      <Type Name="AzureKeyVaultConfigurationExtensions" Kind="Class" />
      <Type Name="CommandLineConfigurationExtensions" Kind="Class" />
      <Type Name="ConfigurationBinder" Kind="Class" />
      <Type Name="ConfigurationBuilder" Kind="Class" />
      <Type Name="ConfigurationExtensions" Kind="Class" />
      <Type Name="ConfigurationKeyComparer" Kind="Class" />
      <Type Name="ConfigurationPath" Kind="Class" />
      <Type Name="ConfigurationProvider" Kind="Class" />
      <Type Name="ConfigurationReloadToken" Kind="Class" />
      <Type Name="ConfigurationRoot" Kind="Class" />
      <Type Name="ConfigurationSection" Kind="Class" />
      <Type Name="EnvironmentVariablesExtensions" Kind="Class" />
      <Type Name="FileConfigurationExtensions" Kind="Class" />
      <Type Name="FileConfigurationProvider" Kind="Class" />
      <Type Name="FileConfigurationSource" Kind="Class" />
      <Type Name="FileLoadExceptionContext" Kind="Class" />
      <Type Name="IConfiguration" Kind="Interface" />
      <Type Name="IConfigurationBuilder" Kind="Interface" />
      <Type Name="IConfigurationProvider" Kind="Interface" />
      <Type Name="IConfigurationRoot" Kind="Interface" />
      <Type Name="IConfigurationSection" Kind="Interface" />
      <Type Name="IConfigurationSource" Kind="Interface" />
      <Type Name="IniConfigurationExtensions" Kind="Class" />
      <Type Name="JsonConfigurationExtensions" Kind="Class" />
      <Type Name="MemoryConfigurationBuilderExtensions" Kind="Class" />
      <Type Name="UserSecretsConfigurationExtensions" Kind="Class" />
      <Type Name="XmlConfigurationExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.Configuration.AzureKeyVault">
      <Type Name="DefaultKeyVaultSecretManager" Kind="Class" />
      <Type Name="IKeyVaultSecretManager" Kind="Interface" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.Configuration.CommandLine">
      <Type Name="CommandLineConfigurationProvider" Kind="Class" />
      <Type Name="CommandLineConfigurationSource" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.Configuration.EnvironmentVariables">
      <Type Name="EnvironmentVariablesConfigurationProvider" Kind="Class" />
      <Type Name="EnvironmentVariablesConfigurationSource" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.Configuration.Ini">
      <Type Name="IniConfigurationProvider" Kind="Class" />
      <Type Name="IniConfigurationSource" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.Configuration.Json">
      <Type Name="JsonConfigurationProvider" Kind="Class" />
      <Type Name="JsonConfigurationSource" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.Configuration.Memory">
      <Type Name="MemoryConfigurationProvider" Kind="Class" />
      <Type Name="MemoryConfigurationSource" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.Configuration.UserSecrets">
      <Type Name="PathHelper" Kind="Class" />
      <Type Name="UserSecretsIdAttribute" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.Configuration.Xml">
      <Type Name="XmlConfigurationProvider" Kind="Class" />
      <Type Name="XmlConfigurationSource" Kind="Class" />
      <Type Name="XmlDocumentDecryptor" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.DependencyInjection">
      <Type Name="ActivatorUtilities" Kind="Class" />
      <Type Name="AnalysisServiceCollectionExtensions" Kind="Class" />
      <Type Name="AntiforgeryServiceCollectionExtensions" Kind="Class" />
      <Type Name="ApplicationModelConventionExtensions" Kind="Class" />
      <Type Name="AuthenticationCoreServiceCollectionExtensions" Kind="Class" />
      <Type Name="AuthenticationServiceCollectionExtensions" Kind="Class" />
      <Type Name="AuthorizationServiceCollectionExtensions" Kind="Class" />
      <Type Name="ClassWithInternalConstructor" Kind="Class" />
      <Type Name="CookieExtensions" Kind="Class" />
      <Type Name="CorsServiceCollectionExtensions" Kind="Class" />
      <Type Name="DataProtectionServiceCollectionExtensions" Kind="Class" />
      <Type Name="DataProtectionServices" Kind="Class" />
      <Type Name="DefaultServiceProviderFactory" Kind="Class" />
      <Type Name="DirectoryBrowserServiceExtensions" Kind="Class" />
      <Type Name="ElmServiceCollectionExtensions" Kind="Class" />
      <Type Name="EncoderServiceCollectionExtensions" Kind="Class" />
      <Type Name="FacebookAuthenticationOptionsExtensions" Kind="Class" />
      <Type Name="GoogleExtensions" Kind="Class" />
      <Type Name="IdentityEntityFrameworkBuilderExtensions" Kind="Class" />
      <Type Name="IdentityServiceCollectionExtensions" Kind="Class" />
      <Type Name="IMvcBuilder" Kind="Interface" />
      <Type Name="IMvcCoreBuilder" Kind="Interface" />
      <Type Name="IServiceCollection" Kind="Interface" />
      <Type Name="IServiceProviderFactory`1" DisplayName="IServiceProviderFactory&lt;TContainerBuilder&gt;" Kind="Interface" />
      <Type Name="IServiceScope" Kind="Interface" />
      <Type Name="IServiceScopeFactory" Kind="Interface" />
      <Type Name="ISupportRequiredService" Kind="Interface" />
      <Type Name="JwtBearerExtensions" Kind="Class" />
      <Type Name="LocalizationServiceCollectionExtensions" Kind="Class" />
      <Type Name="LoggingServiceCollectionExtensions" Kind="Class" />
      <Type Name="MemoryCacheServiceCollectionExtensions" Kind="Class" />
      <Type Name="MicrosoftAccountExtensions" Kind="Class" />
      <Type Name="MvcApiExplorerMvcCoreBuilderExtensions" Kind="Class" />
      <Type Name="MvcCoreMvcBuilderExtensions" Kind="Class" />
      <Type Name="MvcCoreMvcCoreBuilderExtensions" Kind="Class" />
      <Type Name="MvcCoreServiceCollectionExtensions" Kind="Class" />
      <Type Name="MvcCorsMvcCoreBuilderExtensions" Kind="Class" />
      <Type Name="MvcDataAnnotationsMvcBuilderExtensions" Kind="Class" />
      <Type Name="MvcDataAnnotationsMvcCoreBuilderExtensions" Kind="Class" />
      <Type Name="MvcJsonMvcBuilderExtensions" Kind="Class" />
      <Type Name="MvcJsonMvcCoreBuilderExtensions" Kind="Class" />
      <Type Name="MvcLocalizationMvcBuilderExtensions" Kind="Class" />
      <Type Name="MvcLocalizationMvcCoreBuilderExtensions" Kind="Class" />
      <Type Name="MvcRazorMvcBuilderExtensions" Kind="Class" />
      <Type Name="MvcRazorMvcCoreBuilderExtensions" Kind="Class" />
      <Type Name="MvcRazorPagesMvcBuilderExtensions" Kind="Class" />
      <Type Name="MvcRazorPagesMvcCoreBuilderExtensions" Kind="Class" />
      <Type Name="MvcServiceCollectionExtensions" Kind="Class" />
      <Type Name="MvcViewFeaturesMvcBuilderExtensions" Kind="Class" />
      <Type Name="MvcViewFeaturesMvcCoreBuilderExtensions" Kind="Class" />
      <Type Name="MvcXmlMvcBuilderExtensions" Kind="Class" />
      <Type Name="MvcXmlMvcCoreBuilderExtensions" Kind="Class" />
      <Type Name="NodeServicesServiceCollectionExtensions" Kind="Class" />
      <Type Name="OAuthExtensions" Kind="Class" />
      <Type Name="OAuthPostConfigureOptions`2" DisplayName="OAuthPostConfigureOptions&lt;TOptions,THandler&gt;" Kind="Class" />
      <Type Name="ObjectFactory" Kind="Delegate" />
      <Type Name="OpenIdConnectExtensions" Kind="Class" />
      <Type Name="OptionsConfigurationServiceCollectionExtensions" Kind="Class" />
      <Type Name="OptionsServiceCollectionExtensions" Kind="Class" />
      <Type Name="PageConventionCollectionExtensions" Kind="Class" />
      <Type Name="PolicyServiceCollectionExtensions" Kind="Class" />
      <Type Name="PrerenderingServiceCollectionExtensions" Kind="Class" />
      <Type Name="RedisCacheServiceCollectionExtensions" Kind="Class" />
      <Type Name="ResponseCachingServicesExtensions" Kind="Class" />
      <Type Name="RoutingServiceCollectionExtensions" Kind="Class" />
      <Type Name="ServiceCollection" Kind="Class" />
      <Type Name="ServiceCollectionContainerBuilderExtensions" Kind="Class" />
      <Type Name="ServiceCollectionServiceExtensions" Kind="Class" />
      <Type Name="ServiceDescriptor" Kind="Class" />
      <Type Name="ServiceLifetime" Kind="Enumeration" />
      <Type Name="ServiceProvider" Kind="Class" />
      <Type Name="ServiceProviderOptions" Kind="Class" />
      <Type Name="ServiceProviderServiceExtensions" Kind="Class" />
      <Type Name="SessionServiceCollectionExtensions" Kind="Class" />
      <Type Name="SqlServerCachingServicesExtensions" Kind="Class" />
      <Type Name="TagHelperServicesExtensions" Kind="Class" />
      <Type Name="TwitterExtensions" Kind="Class" />
      <Type Name="WebApiCompatShimMvcBuilderExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.DependencyInjection.Extensions">
      <Type Name="ServiceCollectionDescriptorExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.DependencyInjection.Specification">
      <Type Name="ClassWithOptionalArgsCtor" Kind="Class" />
      <Type Name="ClassWithOptionalArgsCtorWithStructs" Kind="Class" />
      <Type Name="ClassWithOptionalArgsCtorWithStructs+CustomStruct" Kind="Structure" />
      <Type Name="DependencyInjectionSpecificationTests" Kind="Class" />
      <Type Name="DependencyInjectionSpecificationTests+CreateInstanceFunc" Kind="Delegate" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.DependencyInjection.Specification.Fakes">
      <Type Name="AnotherClass" Kind="Class" />
      <Type Name="AnotherClassAcceptingData" Kind="Class" />
      <Type Name="ClassWithAmbiguousCtors" Kind="Class" />
      <Type Name="ClassWithNestedReferencesToProvider" Kind="Class" />
      <Type Name="ClassWithPrivateCtor" Kind="Class" />
      <Type Name="ClassWithProtectedConstructor" Kind="Class" />
      <Type Name="ClassWithStaticCtor" Kind="Class" />
      <Type Name="ClassWithThrowingCtor" Kind="Class" />
      <Type Name="ClassWithThrowingEmptyCtor" Kind="Class" />
      <Type Name="CreationCountFakeService" Kind="Class" />
      <Type Name="FakeDisposableCallbackInnerService" Kind="Class" />
      <Type Name="FakeDisposableCallbackOuterService" Kind="Class" />
      <Type Name="FakeDisposableCallbackService" Kind="Class" />
      <Type Name="FakeDisposeCallback" Kind="Class" />
      <Type Name="FakeOneMultipleService" Kind="Class" />
      <Type Name="FakeOpenGenericService`1" DisplayName="FakeOpenGenericService&lt;TVal&gt;" Kind="Class" />
      <Type Name="FakeOuterService" Kind="Class" />
      <Type Name="FakeService" Kind="Class" />
      <Type Name="FakeTwoMultipleService" Kind="Class" />
      <Type Name="IFactoryService" Kind="Interface" />
      <Type Name="IFakeEveryService" Kind="Interface" />
      <Type Name="IFakeMultipleService" Kind="Interface" />
      <Type Name="IFakeOpenGenericService`1" DisplayName="IFakeOpenGenericService&lt;TValue&gt;" Kind="Interface" />
      <Type Name="IFakeOuterService" Kind="Interface" />
      <Type Name="IFakeScopedService" Kind="Interface" />
      <Type Name="IFakeService" Kind="Interface" />
      <Type Name="IFakeServiceInstance" Kind="Interface" />
      <Type Name="IFakeSingletonService" Kind="Interface" />
      <Type Name="INonexistentService" Kind="Interface" />
      <Type Name="PocoClass" Kind="Class" />
      <Type Name="ScopedFactoryService" Kind="Class" />
      <Type Name="ServiceAcceptingFactoryService" Kind="Class" />
      <Type Name="TransientFactoryService" Kind="Class" />
      <Type Name="TypeWithSupersetConstructors" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.DiagnosticAdapter">
      <Type Name="DiagnosticNameAttribute" Kind="Class" />
      <Type Name="DiagnosticSourceAdapter" Kind="Class" />
      <Type Name="IDiagnosticSourceMethodAdapter" Kind="Interface" />
      <Type Name="ProxyDiagnosticSourceMethodAdapter" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.DiagnosticAdapter.Infrastructure">
      <Type Name="IProxy" Kind="Interface" />
      <Type Name="IProxyFactory" Kind="Interface" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.DiagnosticAdapter.Internal">
      <Type Name="InvalidProxyOperationException" Kind="Class" />
      <Type Name="ProxyAssembly" Kind="Class" />
      <Type Name="ProxyBase" Kind="Class" />
      <Type Name="ProxyBase`1" DisplayName="ProxyBase&lt;T&gt;" Kind="Class" />
      <Type Name="ProxyEnumerable`2" DisplayName="ProxyEnumerable&lt;TSourceElement,TTargetElement&gt;" Kind="Class" />
      <Type Name="ProxyEnumerable`2+ProxyEnumerator" DisplayName="ProxyEnumerable&lt;TSourceElement,TTargetElement&gt;+ProxyEnumerator" Kind="Class" />
      <Type Name="ProxyFactory" Kind="Class" />
      <Type Name="ProxyList`2" DisplayName="ProxyList&lt;TSourceElement,TTargetElement&gt;" Kind="Class" />
      <Type Name="ProxyMethodEmitter" Kind="Class" />
      <Type Name="ProxyTypeCache" Kind="Class" />
      <Type Name="ProxyTypeCacheResult" Kind="Class" />
      <Type Name="ProxyTypeEmitter" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.FileProviders">
      <Type Name="CompositeFileProvider" Kind="Class" />
      <Type Name="EmbeddedFileProvider" Kind="Class" />
      <Type Name="FileSystemInfoHelper" Kind="Class" />
      <Type Name="IDirectoryContents" Kind="Interface" />
      <Type Name="IFileInfo" Kind="Interface" />
      <Type Name="IFileProvider" Kind="Interface" />
      <Type Name="NotFoundDirectoryContents" Kind="Class" />
      <Type Name="NotFoundFileInfo" Kind="Class" />
      <Type Name="NullChangeToken" Kind="Class" />
      <Type Name="NullFileProvider" Kind="Class" />
      <Type Name="PhysicalFileProvider" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.FileProviders.Composite">
      <Type Name="CompositeDirectoryContents" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.FileProviders.Embedded">
      <Type Name="EmbeddedResourceFileInfo" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.FileProviders.Internal">
      <Type Name="PhysicalDirectoryContents" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.FileProviders.Physical">
      <Type Name="PhysicalDirectoryInfo" Kind="Class" />
      <Type Name="PhysicalFileInfo" Kind="Class" />
      <Type Name="PhysicalFilesWatcher" Kind="Class" />
      <Type Name="PollingFileChangeToken" Kind="Class" />
      <Type Name="PollingWildCardChangeToken" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.FileSystemGlobbing">
      <Type Name="FilePatternMatch" Kind="Structure" />
      <Type Name="InMemoryDirectoryInfo" Kind="Class" />
      <Type Name="Matcher" Kind="Class" />
      <Type Name="MatcherExtensions" Kind="Class" />
      <Type Name="PatternMatchingResult" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.FileSystemGlobbing.Abstractions">
      <Type Name="DirectoryInfoBase" Kind="Class" />
      <Type Name="DirectoryInfoWrapper" Kind="Class" />
      <Type Name="FileInfoBase" Kind="Class" />
      <Type Name="FileInfoWrapper" Kind="Class" />
      <Type Name="FileSystemInfoBase" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.FileSystemGlobbing.Internal">
      <Type Name="ILinearPattern" Kind="Interface" />
      <Type Name="IPathSegment" Kind="Interface" />
      <Type Name="IPattern" Kind="Interface" />
      <Type Name="IPatternContext" Kind="Interface" />
      <Type Name="IRaggedPattern" Kind="Interface" />
      <Type Name="MatcherContext" Kind="Class" />
      <Type Name="PatternTestResult" Kind="Structure" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments">
      <Type Name="CurrentPathSegment" Kind="Class" />
      <Type Name="LiteralPathSegment" Kind="Class" />
      <Type Name="ParentPathSegment" Kind="Class" />
      <Type Name="RecursiveWildcardSegment" Kind="Class" />
      <Type Name="WildcardPathSegment" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.FileSystemGlobbing.Internal.PatternContexts">
      <Type Name="PatternContext`1" DisplayName="PatternContext&lt;TFrame&gt;" Kind="Class" />
      <Type Name="PatternContextLinear" Kind="Class" />
      <Type Name="PatternContextLinear+FrameData" Kind="Structure" />
      <Type Name="PatternContextLinearExclude" Kind="Class" />
      <Type Name="PatternContextLinearInclude" Kind="Class" />
      <Type Name="PatternContextRagged" Kind="Class" />
      <Type Name="PatternContextRagged+FrameData" Kind="Structure" />
      <Type Name="PatternContextRaggedExclude" Kind="Class" />
      <Type Name="PatternContextRaggedInclude" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.FileSystemGlobbing.Internal.Patterns">
      <Type Name="PatternBuilder" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.Globalization">
      <Type Name="CultureInfoCache" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.Hosting">
      <Type Name="IHostedService" Kind="Interface" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.Internal">
      <Type Name="GcNotification" Kind="Class" />
      <Type Name="ISystemClock" Kind="Interface" />
      <Type Name="SystemClock" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.Localization">
      <Type Name="IResourceNamesCache" Kind="Interface" />
      <Type Name="IStringLocalizer" Kind="Interface" />
      <Type Name="IStringLocalizer`1" DisplayName="IStringLocalizer&lt;T&gt;" Kind="Interface" />
      <Type Name="IStringLocalizerFactory" Kind="Interface" />
      <Type Name="LocalizationOptions" Kind="Class" />
      <Type Name="LocalizedString" Kind="Class" />
      <Type Name="ResourceLocationAttribute" Kind="Class" />
      <Type Name="ResourceManagerStringLocalizer" Kind="Class" />
      <Type Name="ResourceManagerStringLocalizerFactory" Kind="Class" />
      <Type Name="ResourceManagerWithCultureStringLocalizer" Kind="Class" />
      <Type Name="ResourceNamesCache" Kind="Class" />
      <Type Name="StringLocalizer`1" DisplayName="StringLocalizer&lt;TResourceSource&gt;" Kind="Class" />
      <Type Name="StringLocalizerExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.Localization.Internal">
      <Type Name="AssemblyResourceStringProvider" Kind="Class" />
      <Type Name="AssemblyWrapper" Kind="Class" />
      <Type Name="IResourceStringProvider" Kind="Interface" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.Logging">
      <Type Name="AzureAppServicesLoggerFactoryExtensions" Kind="Class" />
      <Type Name="ConsoleLoggerExtensions" Kind="Class" />
      <Type Name="DebugLoggerFactoryExtensions" Kind="Class" />
      <Type Name="EventId" Kind="Structure" />
      <Type Name="EventLoggerFactoryExtensions" Kind="Class" />
      <Type Name="EventSourceLoggerFactoryExtensions" Kind="Class" />
      <Type Name="FilterLoggerFactoryExtensions" Kind="Class" />
      <Type Name="FilterLoggerSettings" Kind="Class" />
      <Type Name="FilterLoggingBuilderExtensions" Kind="Class" />
      <Type Name="IFilterLoggerSettings" Kind="Interface" />
      <Type Name="ILogger" Kind="Interface" />
      <Type Name="ILogger`1" DisplayName="ILogger&lt;TCategoryName&gt;" Kind="Interface" />
      <Type Name="ILoggerFactory" Kind="Interface" />
      <Type Name="ILoggerProvider" Kind="Interface" />
      <Type Name="ILoggingBuilder" Kind="Interface" />
      <Type Name="Logger`1" DisplayName="Logger&lt;T&gt;" Kind="Class" />
      <Type Name="LoggerExtensions" Kind="Class" />
      <Type Name="LoggerFactory" Kind="Class" />
      <Type Name="LoggerFactoryExtensions" Kind="Class" />
      <Type Name="LoggerFilterOptions" Kind="Class" />
      <Type Name="LoggerFilterRule" Kind="Class" />
      <Type Name="LoggerMessage" Kind="Class" />
      <Type Name="LoggingBuilderExtensions" Kind="Class" />
      <Type Name="LogLevel" Kind="Enumeration" />
      <Type Name="ProviderAliasAttribute" Kind="Class" />
      <Type Name="TraceSourceFactoryExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.Logging.Abstractions">
      <Type Name="NullLogger" Kind="Class" />
      <Type Name="NullLogger`1" DisplayName="NullLogger&lt;T&gt;" Kind="Class" />
      <Type Name="NullLoggerFactory" Kind="Class" />
      <Type Name="NullLoggerProvider" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.Logging.Abstractions.Internal">
      <Type Name="NullScope" Kind="Class" />
      <Type Name="TypeNameHelper" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.Logging.AzureAppServices">
      <Type Name="AzureAppServicesDiagnosticsSettings" Kind="Class" />
      <Type Name="AzureBlobLoggerOptions" Kind="Class" />
      <Type Name="AzureFileLoggerOptions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.Logging.AzureAppServices.Internal">
      <Type Name="AzureAppServicesDiagnosticsLoggerProvider" Kind="Class" />
      <Type Name="AzureBlobLoggerProvider" Kind="Class" />
      <Type Name="AzureBlobSink" Kind="Class" />
      <Type Name="BackgroundSink" Kind="Class" />
      <Type Name="BatchingLogger" Kind="Class" />
      <Type Name="BatchingLoggerOptions" Kind="Class" />
      <Type Name="BatchingLoggerProvider" Kind="Class" />
      <Type Name="BatchLoggerConfigureOptions" Kind="Class" />
      <Type Name="BlobAppendReferenceWrapper" Kind="Class" />
      <Type Name="BlobLoggerConfigureOptions" Kind="Class" />
      <Type Name="BlobLoggerProvider" Kind="Class" />
      <Type Name="ConfigurationBasedLevelSwitcher" Kind="Class" />
      <Type Name="FileLoggerConfigureOptions" Kind="Class" />
      <Type Name="FileLoggerProvider" Kind="Class" />
      <Type Name="ICloudAppendBlob" Kind="Interface" />
      <Type Name="IWebAppContext" Kind="Interface" />
      <Type Name="IWebAppLogConfigurationReader" Kind="Interface" />
      <Type Name="LogMessage" Kind="Structure" />
      <Type Name="SiteConfigurationProvider" Kind="Class" />
      <Type Name="WebAppContext" Kind="Class" />
      <Type Name="WebAppLogConfiguration" Kind="Class" />
      <Type Name="WebAppLogConfigurationBuilder" Kind="Class" />
      <Type Name="WebAppLogConfigurationReader" Kind="Class" />
      <Type Name="WebConfigurationReaderLevelSwitch" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.Logging.Console">
      <Type Name="ConfigurationConsoleLoggerSettings" Kind="Class" />
      <Type Name="ConsoleLogger" Kind="Class" />
      <Type Name="ConsoleLoggerOptions" Kind="Class" />
      <Type Name="ConsoleLoggerProvider" Kind="Class" />
      <Type Name="ConsoleLoggerSettings" Kind="Class" />
      <Type Name="ConsoleLogScope" Kind="Class" />
      <Type Name="IConsoleLoggerSettings" Kind="Interface" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.Logging.Console.Internal">
      <Type Name="AnsiLogConsole" Kind="Class" />
      <Type Name="ConsoleLoggerProcessor" Kind="Class" />
      <Type Name="IAnsiSystemConsole" Kind="Interface" />
      <Type Name="IConsole" Kind="Interface" />
      <Type Name="LogMessageEntry" Kind="Structure" />
      <Type Name="WindowsLogConsole" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.Logging.Debug">
      <Type Name="DebugLogger" Kind="Class" />
      <Type Name="DebugLoggerProvider" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.Logging.EventLog">
      <Type Name="EventLogLogger" Kind="Class" />
      <Type Name="EventLogLoggerProvider" Kind="Class" />
      <Type Name="EventLogSettings" Kind="Class" />
      <Type Name="WindowsEventLog" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.Logging.EventLog.Internal">
      <Type Name="IEventLog" Kind="Interface" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.Logging.Filter.Internal">
      <Type Name="FilterLogger" Kind="Class" />
      <Type Name="FilterLoggerFactory" Kind="Class" />
      <Type Name="FilterLoggerProvider" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.Logging.Internal">
      <Type Name="FormattedLogValues" Kind="Class" />
      <Type Name="LogValuesFormatter" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.Logging.TraceSource">
      <Type Name="TraceSourceLogger" Kind="Class" />
      <Type Name="TraceSourceLoggerProvider" Kind="Class" />
      <Type Name="TraceSourceScope" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.ObjectPool">
      <Type Name="DefaultObjectPool`1" DisplayName="DefaultObjectPool&lt;T&gt;" Kind="Class" />
      <Type Name="DefaultObjectPoolProvider" Kind="Class" />
      <Type Name="DefaultPooledObjectPolicy`1" DisplayName="DefaultPooledObjectPolicy&lt;T&gt;" Kind="Class" />
      <Type Name="IPooledObjectPolicy`1" DisplayName="IPooledObjectPolicy&lt;T&gt;" Kind="Interface" />
      <Type Name="LeakTrackingObjectPool`1" DisplayName="LeakTrackingObjectPool&lt;T&gt;" Kind="Class" />
      <Type Name="LeakTrackingObjectPoolProvider" Kind="Class" />
      <Type Name="ObjectPool`1" DisplayName="ObjectPool&lt;T&gt;" Kind="Class" />
      <Type Name="ObjectPoolProvider" Kind="Class" />
      <Type Name="ObjectPoolProviderExtensions" Kind="Class" />
      <Type Name="StringBuilderPooledObjectPolicy" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.Options">
      <Type Name="ConfigurationChangeTokenSource`1" DisplayName="ConfigurationChangeTokenSource&lt;TOptions&gt;" Kind="Class" />
      <Type Name="ConfigureFromConfigurationOptions`1" DisplayName="ConfigureFromConfigurationOptions&lt;TOptions&gt;" Kind="Class" />
      <Type Name="ConfigureNamedOptions`1" DisplayName="ConfigureNamedOptions&lt;TOptions&gt;" Kind="Class" />
      <Type Name="ConfigureOptions`1" DisplayName="ConfigureOptions&lt;TOptions&gt;" Kind="Class" />
      <Type Name="IConfigureNamedOptions`1" DisplayName="IConfigureNamedOptions&lt;TOptions&gt;" Kind="Interface" />
      <Type Name="IConfigureOptions`1" DisplayName="IConfigureOptions&lt;TOptions&gt;" Kind="Interface" />
      <Type Name="IOptions`1" DisplayName="IOptions&lt;TOptions&gt;" Kind="Interface" />
      <Type Name="IOptionsChangeTokenSource`1" DisplayName="IOptionsChangeTokenSource&lt;TOptions&gt;" Kind="Interface" />
      <Type Name="IOptionsFactory`1" DisplayName="IOptionsFactory&lt;TOptions&gt;" Kind="Interface" />
      <Type Name="IOptionsMonitor`1" DisplayName="IOptionsMonitor&lt;TOptions&gt;" Kind="Interface" />
      <Type Name="IOptionsMonitorCache`1" DisplayName="IOptionsMonitorCache&lt;TOptions&gt;" Kind="Interface" />
      <Type Name="IOptionsSnapshot`1" DisplayName="IOptionsSnapshot&lt;TOptions&gt;" Kind="Interface" />
      <Type Name="IPostConfigureOptions`1" DisplayName="IPostConfigureOptions&lt;TOptions&gt;" Kind="Interface" />
      <Type Name="NamedConfigureFromConfigurationOptions`1" DisplayName="NamedConfigureFromConfigurationOptions&lt;TOptions&gt;" Kind="Class" />
      <Type Name="Options" Kind="Class" />
      <Type Name="OptionsCache`1" DisplayName="OptionsCache&lt;TOptions&gt;" Kind="Class" />
      <Type Name="OptionsFactory`1" DisplayName="OptionsFactory&lt;TOptions&gt;" Kind="Class" />
      <Type Name="OptionsManager`1" DisplayName="OptionsManager&lt;TOptions&gt;" Kind="Class" />
      <Type Name="OptionsMonitor`1" DisplayName="OptionsMonitor&lt;TOptions&gt;" Kind="Class" />
      <Type Name="OptionsMonitorExtensions" Kind="Class" />
      <Type Name="OptionsSnapshot`1" DisplayName="OptionsSnapshot&lt;TOptions&gt;" Kind="Class" />
      <Type Name="OptionsWrapper`1" DisplayName="OptionsWrapper&lt;TOptions&gt;" Kind="Class" />
      <Type Name="PostConfigureOptions`1" DisplayName="PostConfigureOptions&lt;TOptions&gt;" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.PlatformAbstractions">
      <Type Name="ApplicationEnvironment" Kind="Class" />
      <Type Name="PlatformServices" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.Primitives">
      <Type Name="CancellationChangeToken" Kind="Class" />
      <Type Name="ChangeToken" Kind="Class" />
      <Type Name="CompositeChangeToken" Kind="Class" />
      <Type Name="Extensions" Kind="Class" />
      <Type Name="IChangeToken" Kind="Interface" />
      <Type Name="InplaceStringBuilder" Kind="Structure" />
      <Type Name="StringSegment" Kind="Structure" />
      <Type Name="StringSegmentComparer" Kind="Class" />
      <Type Name="StringTokenizer" Kind="Structure" />
      <Type Name="StringTokenizer+Enumerator" Kind="Structure" />
      <Type Name="StringValues" Kind="Structure" />
      <Type Name="StringValues+Enumerator" Kind="Structure" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.WebEncoders">
      <Type Name="WebEncoderOptions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Extensions.WebEncoders.Testing">
      <Type Name="HtmlTestEncoder" Kind="Class" />
      <Type Name="JavaScriptTestEncoder" Kind="Class" />
      <Type Name="UrlTestEncoder" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Net.Http.Headers">
      <Type Name="CacheControlHeaderValue" Kind="Class" />
      <Type Name="ContentDispositionHeaderValue" Kind="Class" />
      <Type Name="ContentDispositionHeaderValueIdentityExtensions" Kind="Class" />
      <Type Name="ContentRangeHeaderValue" Kind="Class" />
      <Type Name="CookieHeaderValue" Kind="Class" />
      <Type Name="EntityTagHeaderValue" Kind="Class" />
      <Type Name="HeaderNames" Kind="Class" />
      <Type Name="HeaderQuality" Kind="Class" />
      <Type Name="HeaderUtilities" Kind="Class" />
      <Type Name="MediaTypeHeaderValue" Kind="Class" />
      <Type Name="MediaTypeHeaderValueComparer" Kind="Class" />
      <Type Name="NameValueHeaderValue" Kind="Class" />
      <Type Name="RangeConditionHeaderValue" Kind="Class" />
      <Type Name="RangeHeaderValue" Kind="Class" />
      <Type Name="RangeItemHeaderValue" Kind="Class" />
      <Type Name="SameSiteMode" Kind="Enumeration" />
      <Type Name="SetCookieHeaderValue" Kind="Class" />
      <Type Name="StringWithQualityHeaderValue" Kind="Class" />
      <Type Name="StringWithQualityHeaderValueComparer" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Net.Http.Server">
      <Type Name="AuthenticationManager" Kind="Class" />
      <Type Name="AuthenticationSchemes" Kind="Enumeration" />
      <Type Name="HeaderCollection" Kind="Class" />
      <Type Name="Request" Kind="Class" />
      <Type Name="RequestContext" Kind="Class" />
      <Type Name="Response" Kind="Class" />
      <Type Name="TimeoutManager" Kind="Class" />
      <Type Name="UrlPrefix" Kind="Class" />
      <Type Name="UrlPrefixCollection" Kind="Class" />
      <Type Name="WebListener" Kind="Class" />
      <Type Name="WebListenerException" Kind="Class" />
      <Type Name="WebListenerSettings" Kind="Class" />
      <Type Name="WebSocketExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Net.WebSockets">
      <Type Name="WebSocketBuffer" Kind="Class" />
      <Type Name="WebSocketConstants" Kind="Class" />
      <Type Name="WebSocketHelpers" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Owin.Security.Interop">
      <Type Name="AspNetTicketDataFormat" Kind="Class" />
      <Type Name="AspNetTicketSerializer" Kind="Class" />
      <Type Name="ChunkingCookieManager" Kind="Class" />
      <Type Name="DataProtectorShim" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Diagnostics">
      <Type Name="DiagnosticListenerExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Net.Http">
      <Type Name="HttpRequestMessageExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Net.Http.Formatting">
      <Type Name="ContentNegotiationResult" Kind="Class" />
      <Type Name="DefaultContentNegotiator" Kind="Class" />
      <Type Name="FormDataCollection" Kind="Class" />
      <Type Name="IContentNegotiator" Kind="Interface" />
      <Type Name="MediaTypeFormatterMatch" Kind="Class" />
      <Type Name="MediaTypeFormatterMatchRanking" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System.Security.Claims">
      <Type Name="PrincipalExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Web.Http">
      <Type Name="ApiController" Kind="Class" />
      <Type Name="BadRequestErrorMessageResult" Kind="Class" />
      <Type Name="ConflictResult" Kind="Class" />
      <Type Name="ExceptionResult" Kind="Class" />
      <Type Name="FromUriAttribute" Kind="Class" />
      <Type Name="HttpError" Kind="Class" />
      <Type Name="HttpErrorKeys" Kind="Class" />
      <Type Name="HttpResponseException" Kind="Class" />
      <Type Name="InternalServerErrorResult" Kind="Class" />
      <Type Name="InvalidModelStateResult" Kind="Class" />
      <Type Name="NegotiatedContentResult`1" DisplayName="NegotiatedContentResult&lt;T&gt;" Kind="Class" />
      <Type Name="ResponseMessageResult" Kind="Class" />
    </Namespace>
  </Types>
  <Title>Untitled</Title>
  <ExtensionMethods>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.HttpContext" />
      </Targets>
      <Member MemberName="AuthenticateAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Authentication.AuthenticateResult&gt; AuthenticateAsync (this Microsoft.AspNetCore.Http.HttpContext context);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Authentication.AuthenticateResult&gt; AuthenticateAsync(class Microsoft.AspNetCore.Http.HttpContext context) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.AuthenticateAsync(Microsoft.AspNetCore.Http.HttpContext)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Authentication.AuthenticateResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.AspNetCore.Http.HttpContext" RefType="this" />
        </Parameters>
        <Docs>
          <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> context.</param>
          <summary>
            Extension method for authenticate using the <see cref="P:Microsoft.AspNetCore.Authentication.AuthenticationOptions.DefaultAuthenticateScheme" /> scheme.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions" Member="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.AuthenticateAsync(Microsoft.AspNetCore.Http.HttpContext)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.HttpContext" />
      </Targets>
      <Member MemberName="AuthenticateAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Authentication.AuthenticateResult&gt; AuthenticateAsync (this Microsoft.AspNetCore.Http.HttpContext context, string scheme);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Authentication.AuthenticateResult&gt; AuthenticateAsync(class Microsoft.AspNetCore.Http.HttpContext context, string scheme) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.AuthenticateAsync(Microsoft.AspNetCore.Http.HttpContext,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Authentication.AuthenticateResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.AspNetCore.Http.HttpContext" RefType="this" />
          <Parameter Name="scheme" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> context.</param>
          <param name="scheme">The name of the authentication scheme.</param>
          <summary>
            Extension method for authenticate.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions" Member="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.AuthenticateAsync(Microsoft.AspNetCore.Http.HttpContext,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.HttpContext" />
      </Targets>
      <Member MemberName="ChallengeAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ChallengeAsync (this Microsoft.AspNetCore.Http.HttpContext context);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ChallengeAsync(class Microsoft.AspNetCore.Http.HttpContext context) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.ChallengeAsync(Microsoft.AspNetCore.Http.HttpContext)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.AspNetCore.Http.HttpContext" RefType="this" />
        </Parameters>
        <Docs>
          <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> context.</param>
          <summary>
            Extension method for authenticate using the <see cref="P:Microsoft.AspNetCore.Authentication.AuthenticationOptions.DefaultChallengeScheme" /> scheme.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions" Member="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.ChallengeAsync(Microsoft.AspNetCore.Http.HttpContext)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.HttpContext" />
      </Targets>
      <Member MemberName="ChallengeAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ChallengeAsync (this Microsoft.AspNetCore.Http.HttpContext context, Microsoft.AspNetCore.Authentication.AuthenticationProperties properties);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ChallengeAsync(class Microsoft.AspNetCore.Http.HttpContext context, class Microsoft.AspNetCore.Authentication.AuthenticationProperties properties) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.ChallengeAsync(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Authentication.AuthenticationProperties)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.AspNetCore.Http.HttpContext" RefType="this" />
          <Parameter Name="properties" Type="Microsoft.AspNetCore.Authentication.AuthenticationProperties" />
        </Parameters>
        <Docs>
          <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> context.</param>
          <param name="properties">The <see cref="T:Microsoft.AspNetCore.Authentication.AuthenticationProperties" /> properties.</param>
          <summary>
            Extension method for authenticate using the <see cref="P:Microsoft.AspNetCore.Authentication.AuthenticationOptions.DefaultChallengeScheme" /> scheme.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions" Member="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.ChallengeAsync(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Authentication.AuthenticationProperties)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.HttpContext" />
      </Targets>
      <Member MemberName="ChallengeAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ChallengeAsync (this Microsoft.AspNetCore.Http.HttpContext context, string scheme);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ChallengeAsync(class Microsoft.AspNetCore.Http.HttpContext context, string scheme) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.ChallengeAsync(Microsoft.AspNetCore.Http.HttpContext,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.AspNetCore.Http.HttpContext" RefType="this" />
          <Parameter Name="scheme" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> context.</param>
          <param name="scheme">The name of the authentication scheme.</param>
          <summary>
            Extension method for Challenge.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions" Member="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.ChallengeAsync(Microsoft.AspNetCore.Http.HttpContext,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.HttpContext" />
      </Targets>
      <Member MemberName="ChallengeAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ChallengeAsync (this Microsoft.AspNetCore.Http.HttpContext context, string scheme, Microsoft.AspNetCore.Authentication.AuthenticationProperties properties);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ChallengeAsync(class Microsoft.AspNetCore.Http.HttpContext context, string scheme, class Microsoft.AspNetCore.Authentication.AuthenticationProperties properties) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.ChallengeAsync(Microsoft.AspNetCore.Http.HttpContext,System.String,Microsoft.AspNetCore.Authentication.AuthenticationProperties)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.AspNetCore.Http.HttpContext" RefType="this" />
          <Parameter Name="scheme" Type="System.String" />
          <Parameter Name="properties" Type="Microsoft.AspNetCore.Authentication.AuthenticationProperties" />
        </Parameters>
        <Docs>
          <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> context.</param>
          <param name="scheme">The name of the authentication scheme.</param>
          <param name="properties">The <see cref="T:Microsoft.AspNetCore.Authentication.AuthenticationProperties" /> properties.</param>
          <summary>
            Extension method for Challenge.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions" Member="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.ChallengeAsync(Microsoft.AspNetCore.Http.HttpContext,System.String,Microsoft.AspNetCore.Authentication.AuthenticationProperties)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.HttpContext" />
      </Targets>
      <Member MemberName="ForbidAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ForbidAsync (this Microsoft.AspNetCore.Http.HttpContext context);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ForbidAsync(class Microsoft.AspNetCore.Http.HttpContext context) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.ForbidAsync(Microsoft.AspNetCore.Http.HttpContext)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.AspNetCore.Http.HttpContext" RefType="this" />
        </Parameters>
        <Docs>
          <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> context.</param>
          <summary>
            Extension method for Forbid using the <see cref="P:Microsoft.AspNetCore.Authentication.AuthenticationOptions.DefaultForbidScheme" /> scheme..
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions" Member="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.ForbidAsync(Microsoft.AspNetCore.Http.HttpContext)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.HttpContext" />
      </Targets>
      <Member MemberName="ForbidAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ForbidAsync (this Microsoft.AspNetCore.Http.HttpContext context, Microsoft.AspNetCore.Authentication.AuthenticationProperties properties);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ForbidAsync(class Microsoft.AspNetCore.Http.HttpContext context, class Microsoft.AspNetCore.Authentication.AuthenticationProperties properties) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.ForbidAsync(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Authentication.AuthenticationProperties)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.AspNetCore.Http.HttpContext" RefType="this" />
          <Parameter Name="properties" Type="Microsoft.AspNetCore.Authentication.AuthenticationProperties" />
        </Parameters>
        <Docs>
          <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> context.</param>
          <param name="properties">The <see cref="T:Microsoft.AspNetCore.Authentication.AuthenticationProperties" /> properties.</param>
          <summary>
            Extension method for Forbid.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions" Member="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.ForbidAsync(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Authentication.AuthenticationProperties)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.HttpContext" />
      </Targets>
      <Member MemberName="ForbidAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ForbidAsync (this Microsoft.AspNetCore.Http.HttpContext context, string scheme);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ForbidAsync(class Microsoft.AspNetCore.Http.HttpContext context, string scheme) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.ForbidAsync(Microsoft.AspNetCore.Http.HttpContext,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.AspNetCore.Http.HttpContext" RefType="this" />
          <Parameter Name="scheme" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> context.</param>
          <param name="scheme">The name of the authentication scheme.</param>
          <summary>
            Extension method for Forbid.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions" Member="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.ForbidAsync(Microsoft.AspNetCore.Http.HttpContext,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.HttpContext" />
      </Targets>
      <Member MemberName="ForbidAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ForbidAsync (this Microsoft.AspNetCore.Http.HttpContext context, string scheme, Microsoft.AspNetCore.Authentication.AuthenticationProperties properties);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ForbidAsync(class Microsoft.AspNetCore.Http.HttpContext context, string scheme, class Microsoft.AspNetCore.Authentication.AuthenticationProperties properties) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.ForbidAsync(Microsoft.AspNetCore.Http.HttpContext,System.String,Microsoft.AspNetCore.Authentication.AuthenticationProperties)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.AspNetCore.Http.HttpContext" RefType="this" />
          <Parameter Name="scheme" Type="System.String" />
          <Parameter Name="properties" Type="Microsoft.AspNetCore.Authentication.AuthenticationProperties" />
        </Parameters>
        <Docs>
          <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> context.</param>
          <param name="scheme">The name of the authentication scheme.</param>
          <param name="properties">The <see cref="T:Microsoft.AspNetCore.Authentication.AuthenticationProperties" /> properties.</param>
          <summary>
            Extension method for Forbid.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions" Member="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.ForbidAsync(Microsoft.AspNetCore.Http.HttpContext,System.String,Microsoft.AspNetCore.Authentication.AuthenticationProperties)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.HttpContext" />
      </Targets>
      <Member MemberName="GetTokenAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;string&gt; GetTokenAsync (this Microsoft.AspNetCore.Http.HttpContext context, string tokenName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;string&gt; GetTokenAsync(class Microsoft.AspNetCore.Http.HttpContext context, string tokenName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.GetTokenAsync(Microsoft.AspNetCore.Http.HttpContext,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.AspNetCore.Http.HttpContext" RefType="this" />
          <Parameter Name="tokenName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> context.</param>
          <param name="tokenName">The name of the token.</param>
          <summary>
            Extension method for getting the value of an authentication token.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions" Member="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.GetTokenAsync(Microsoft.AspNetCore.Http.HttpContext,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.HttpContext" />
      </Targets>
      <Member MemberName="GetTokenAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;string&gt; GetTokenAsync (this Microsoft.AspNetCore.Http.HttpContext context, string scheme, string tokenName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;string&gt; GetTokenAsync(class Microsoft.AspNetCore.Http.HttpContext context, string scheme, string tokenName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.GetTokenAsync(Microsoft.AspNetCore.Http.HttpContext,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.AspNetCore.Http.HttpContext" RefType="this" />
          <Parameter Name="scheme" Type="System.String" />
          <Parameter Name="tokenName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> context.</param>
          <param name="scheme">The name of the authentication scheme.</param>
          <param name="tokenName">The name of the token.</param>
          <summary>
            Extension method for getting the value of an authentication token.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions" Member="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.GetTokenAsync(Microsoft.AspNetCore.Http.HttpContext,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.HttpContext" />
      </Targets>
      <Member MemberName="SignInAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SignInAsync (this Microsoft.AspNetCore.Http.HttpContext context, System.Security.Claims.ClaimsPrincipal principal);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SignInAsync(class Microsoft.AspNetCore.Http.HttpContext context, class System.Security.Claims.ClaimsPrincipal principal) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.SignInAsync(Microsoft.AspNetCore.Http.HttpContext,System.Security.Claims.ClaimsPrincipal)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.AspNetCore.Http.HttpContext" RefType="this" />
          <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" />
        </Parameters>
        <Docs>
          <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> context.</param>
          <param name="principal">The user.</param>
          <summary>
            Extension method for SignIn using the <see cref="P:Microsoft.AspNetCore.Authentication.AuthenticationOptions.DefaultSignInScheme" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions" Member="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.SignInAsync(Microsoft.AspNetCore.Http.HttpContext,System.Security.Claims.ClaimsPrincipal)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.HttpContext" />
      </Targets>
      <Member MemberName="SignInAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SignInAsync (this Microsoft.AspNetCore.Http.HttpContext context, System.Security.Claims.ClaimsPrincipal principal, Microsoft.AspNetCore.Authentication.AuthenticationProperties properties);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SignInAsync(class Microsoft.AspNetCore.Http.HttpContext context, class System.Security.Claims.ClaimsPrincipal principal, class Microsoft.AspNetCore.Authentication.AuthenticationProperties properties) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.SignInAsync(Microsoft.AspNetCore.Http.HttpContext,System.Security.Claims.ClaimsPrincipal,Microsoft.AspNetCore.Authentication.AuthenticationProperties)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.AspNetCore.Http.HttpContext" RefType="this" />
          <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" />
          <Parameter Name="properties" Type="Microsoft.AspNetCore.Authentication.AuthenticationProperties" />
        </Parameters>
        <Docs>
          <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> context.</param>
          <param name="principal">The user.</param>
          <param name="properties">The <see cref="T:Microsoft.AspNetCore.Authentication.AuthenticationProperties" /> properties.</param>
          <summary>
            Extension method for SignIn using the <see cref="P:Microsoft.AspNetCore.Authentication.AuthenticationOptions.DefaultSignInScheme" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions" Member="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.SignInAsync(Microsoft.AspNetCore.Http.HttpContext,System.Security.Claims.ClaimsPrincipal,Microsoft.AspNetCore.Authentication.AuthenticationProperties)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.HttpContext" />
      </Targets>
      <Member MemberName="SignInAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SignInAsync (this Microsoft.AspNetCore.Http.HttpContext context, string scheme, System.Security.Claims.ClaimsPrincipal principal);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SignInAsync(class Microsoft.AspNetCore.Http.HttpContext context, string scheme, class System.Security.Claims.ClaimsPrincipal principal) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.SignInAsync(Microsoft.AspNetCore.Http.HttpContext,System.String,System.Security.Claims.ClaimsPrincipal)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.AspNetCore.Http.HttpContext" RefType="this" />
          <Parameter Name="scheme" Type="System.String" />
          <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" />
        </Parameters>
        <Docs>
          <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> context.</param>
          <param name="scheme">The name of the authentication scheme.</param>
          <param name="principal">The user.</param>
          <summary>
            Extension method for SignIn.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions" Member="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.SignInAsync(Microsoft.AspNetCore.Http.HttpContext,System.String,System.Security.Claims.ClaimsPrincipal)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.HttpContext" />
      </Targets>
      <Member MemberName="SignInAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SignInAsync (this Microsoft.AspNetCore.Http.HttpContext context, string scheme, System.Security.Claims.ClaimsPrincipal principal, Microsoft.AspNetCore.Authentication.AuthenticationProperties properties);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SignInAsync(class Microsoft.AspNetCore.Http.HttpContext context, string scheme, class System.Security.Claims.ClaimsPrincipal principal, class Microsoft.AspNetCore.Authentication.AuthenticationProperties properties) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.SignInAsync(Microsoft.AspNetCore.Http.HttpContext,System.String,System.Security.Claims.ClaimsPrincipal,Microsoft.AspNetCore.Authentication.AuthenticationProperties)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.AspNetCore.Http.HttpContext" RefType="this" />
          <Parameter Name="scheme" Type="System.String" />
          <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" />
          <Parameter Name="properties" Type="Microsoft.AspNetCore.Authentication.AuthenticationProperties" />
        </Parameters>
        <Docs>
          <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> context.</param>
          <param name="scheme">The name of the authentication scheme.</param>
          <param name="principal">The user.</param>
          <param name="properties">The <see cref="T:Microsoft.AspNetCore.Authentication.AuthenticationProperties" /> properties.</param>
          <summary>
            Extension method for SignIn.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions" Member="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.SignInAsync(Microsoft.AspNetCore.Http.HttpContext,System.String,System.Security.Claims.ClaimsPrincipal,Microsoft.AspNetCore.Authentication.AuthenticationProperties)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.HttpContext" />
      </Targets>
      <Member MemberName="SignOutAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SignOutAsync (this Microsoft.AspNetCore.Http.HttpContext context);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SignOutAsync(class Microsoft.AspNetCore.Http.HttpContext context) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.SignOutAsync(Microsoft.AspNetCore.Http.HttpContext)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.AspNetCore.Http.HttpContext" RefType="this" />
        </Parameters>
        <Docs>
          <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> context.</param>
          <summary>
            Extension method for SignOut using the <see cref="P:Microsoft.AspNetCore.Authentication.AuthenticationOptions.DefaultSignOutScheme" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions" Member="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.SignOutAsync(Microsoft.AspNetCore.Http.HttpContext)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.HttpContext" />
      </Targets>
      <Member MemberName="SignOutAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SignOutAsync (this Microsoft.AspNetCore.Http.HttpContext context, Microsoft.AspNetCore.Authentication.AuthenticationProperties properties);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SignOutAsync(class Microsoft.AspNetCore.Http.HttpContext context, class Microsoft.AspNetCore.Authentication.AuthenticationProperties properties) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.SignOutAsync(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Authentication.AuthenticationProperties)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.AspNetCore.Http.HttpContext" RefType="this" />
          <Parameter Name="properties" Type="Microsoft.AspNetCore.Authentication.AuthenticationProperties" />
        </Parameters>
        <Docs>
          <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> context.</param>
          <param name="properties">The <see cref="T:Microsoft.AspNetCore.Authentication.AuthenticationProperties" /> properties.</param>
          <summary>
            Extension method for SignOut using the <see cref="P:Microsoft.AspNetCore.Authentication.AuthenticationOptions.DefaultSignOutScheme" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions" Member="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.SignOutAsync(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Authentication.AuthenticationProperties)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.HttpContext" />
      </Targets>
      <Member MemberName="SignOutAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SignOutAsync (this Microsoft.AspNetCore.Http.HttpContext context, string scheme);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SignOutAsync(class Microsoft.AspNetCore.Http.HttpContext context, string scheme) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.SignOutAsync(Microsoft.AspNetCore.Http.HttpContext,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.AspNetCore.Http.HttpContext" RefType="this" />
          <Parameter Name="scheme" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> context.</param>
          <param name="scheme">The name of the authentication scheme.</param>
          <summary>
            Extension method for SignOut.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions" Member="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.SignOutAsync(Microsoft.AspNetCore.Http.HttpContext,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.HttpContext" />
      </Targets>
      <Member MemberName="SignOutAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SignOutAsync (this Microsoft.AspNetCore.Http.HttpContext context, string scheme, Microsoft.AspNetCore.Authentication.AuthenticationProperties properties);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SignOutAsync(class Microsoft.AspNetCore.Http.HttpContext context, string scheme, class Microsoft.AspNetCore.Authentication.AuthenticationProperties properties) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.SignOutAsync(Microsoft.AspNetCore.Http.HttpContext,System.String,Microsoft.AspNetCore.Authentication.AuthenticationProperties)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.AspNetCore.Http.HttpContext" RefType="this" />
          <Parameter Name="scheme" Type="System.String" />
          <Parameter Name="properties" Type="Microsoft.AspNetCore.Authentication.AuthenticationProperties" />
        </Parameters>
        <Docs>
          <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> context.</param>
          <param name="scheme">The name of the authentication scheme.</param>
          <param name="properties">The <see cref="T:Microsoft.AspNetCore.Authentication.AuthenticationProperties" /> properties.</param>
          <summary>
            Extension method for SignOut.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions" Member="M:Microsoft.AspNetCore.Authentication.AuthenticationHttpContextExtensions.SignOutAsync(Microsoft.AspNetCore.Http.HttpContext,System.String,Microsoft.AspNetCore.Authentication.AuthenticationProperties)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.IAuthenticationService" />
      </Targets>
      <Member MemberName="GetTokenAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;string&gt; GetTokenAsync (this Microsoft.AspNetCore.Authentication.IAuthenticationService auth, Microsoft.AspNetCore.Http.HttpContext context, string tokenName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;string&gt; GetTokenAsync(class Microsoft.AspNetCore.Authentication.IAuthenticationService auth, class Microsoft.AspNetCore.Http.HttpContext context, string tokenName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions.GetTokenAsync(Microsoft.AspNetCore.Authentication.IAuthenticationService,Microsoft.AspNetCore.Http.HttpContext,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="auth" Type="Microsoft.AspNetCore.Authentication.IAuthenticationService" RefType="this" />
          <Parameter Name="context" Type="Microsoft.AspNetCore.Http.HttpContext" />
          <Parameter Name="tokenName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="auth">The <see cref="T:Microsoft.AspNetCore.Authentication.IAuthenticationService" />.</param>
          <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> context.</param>
          <param name="tokenName">The name of the token.</param>
          <summary>
            Extension method for getting the value of an authentication token.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions" Member="M:Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions.GetTokenAsync(Microsoft.AspNetCore.Authentication.IAuthenticationService,Microsoft.AspNetCore.Http.HttpContext,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.IAuthenticationService" />
      </Targets>
      <Member MemberName="GetTokenAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;string&gt; GetTokenAsync (this Microsoft.AspNetCore.Authentication.IAuthenticationService auth, Microsoft.AspNetCore.Http.HttpContext context, string scheme, string tokenName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;string&gt; GetTokenAsync(class Microsoft.AspNetCore.Authentication.IAuthenticationService auth, class Microsoft.AspNetCore.Http.HttpContext context, string scheme, string tokenName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions.GetTokenAsync(Microsoft.AspNetCore.Authentication.IAuthenticationService,Microsoft.AspNetCore.Http.HttpContext,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="auth" Type="Microsoft.AspNetCore.Authentication.IAuthenticationService" RefType="this" />
          <Parameter Name="context" Type="Microsoft.AspNetCore.Http.HttpContext" />
          <Parameter Name="scheme" Type="System.String" />
          <Parameter Name="tokenName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="auth">The <see cref="T:Microsoft.AspNetCore.Authentication.IAuthenticationService" />.</param>
          <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> context.</param>
          <param name="scheme">The name of the authentication scheme.</param>
          <param name="tokenName">The name of the token.</param>
          <summary>
            Extension method for getting the value of an authentication token.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions" Member="M:Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions.GetTokenAsync(Microsoft.AspNetCore.Authentication.IAuthenticationService,Microsoft.AspNetCore.Http.HttpContext,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.Authentication.AuthenticationManager" />
      </Targets>
      <Member MemberName="GetTokenAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;string&gt; GetTokenAsync (this Microsoft.AspNetCore.Http.Authentication.AuthenticationManager manager, string tokenName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;string&gt; GetTokenAsync(class Microsoft.AspNetCore.Http.Authentication.AuthenticationManager manager, string tokenName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions.GetTokenAsync(Microsoft.AspNetCore.Http.Authentication.AuthenticationManager,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="manager" Type="Microsoft.AspNetCore.Http.Authentication.AuthenticationManager" RefType="this" />
          <Parameter Name="tokenName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="manager">To be added.</param>
          <param name="tokenName">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions" Member="M:Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions.GetTokenAsync(Microsoft.AspNetCore.Http.Authentication.AuthenticationManager,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.Authentication.AuthenticationManager" />
      </Targets>
      <Member MemberName="GetTokenAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;string&gt; GetTokenAsync (this Microsoft.AspNetCore.Http.Authentication.AuthenticationManager manager, string signInScheme, string tokenName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;string&gt; GetTokenAsync(class Microsoft.AspNetCore.Http.Authentication.AuthenticationManager manager, string signInScheme, string tokenName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions.GetTokenAsync(Microsoft.AspNetCore.Http.Authentication.AuthenticationManager,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="manager" Type="Microsoft.AspNetCore.Http.Authentication.AuthenticationManager" RefType="this" />
          <Parameter Name="signInScheme" Type="System.String" />
          <Parameter Name="tokenName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="manager">To be added.</param>
          <param name="signInScheme">To be added.</param>
          <param name="tokenName">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions" Member="M:Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions.GetTokenAsync(Microsoft.AspNetCore.Http.Authentication.AuthenticationManager,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationProperties" />
      </Targets>
      <Member MemberName="GetTokens">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Authentication.AuthenticationToken&gt; GetTokens (this Microsoft.AspNetCore.Authentication.AuthenticationProperties properties);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.AspNetCore.Authentication.AuthenticationToken&gt; GetTokens(class Microsoft.AspNetCore.Authentication.AuthenticationProperties properties) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions.GetTokens(Microsoft.AspNetCore.Authentication.AuthenticationProperties)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Authentication.AuthenticationToken&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="properties" Type="Microsoft.AspNetCore.Authentication.AuthenticationProperties" RefType="this" />
        </Parameters>
        <Docs>
          <param name="properties">The <see cref="T:Microsoft.AspNetCore.Authentication.AuthenticationProperties" /> properties.</param>
          <summary>
            Returns all of the AuthenticationTokens contained in the properties.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions" Member="M:Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions.GetTokens(Microsoft.AspNetCore.Authentication.AuthenticationProperties)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties" />
      </Targets>
      <Member MemberName="GetTokens">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Authentication.AuthenticationToken&gt; GetTokens (this Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties properties);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.AspNetCore.Authentication.AuthenticationToken&gt; GetTokens(class Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties properties) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions.GetTokens(Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Authentication.AuthenticationToken&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="properties" Type="Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties" RefType="this" />
        </Parameters>
        <Docs>
          <param name="properties">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions" Member="M:Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions.GetTokens(Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationProperties" />
      </Targets>
      <Member MemberName="GetTokenValue">
        <MemberSignature Language="C#" Value="public static string GetTokenValue (this Microsoft.AspNetCore.Authentication.AuthenticationProperties properties, string tokenName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetTokenValue(class Microsoft.AspNetCore.Authentication.AuthenticationProperties properties, string tokenName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions.GetTokenValue(Microsoft.AspNetCore.Authentication.AuthenticationProperties,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="properties" Type="Microsoft.AspNetCore.Authentication.AuthenticationProperties" RefType="this" />
          <Parameter Name="tokenName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="properties">The <see cref="T:Microsoft.AspNetCore.Authentication.AuthenticationProperties" /> properties.</param>
          <param name="tokenName">The token name.</param>
          <summary>
            Returns the value of a token.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions" Member="M:Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions.GetTokenValue(Microsoft.AspNetCore.Authentication.AuthenticationProperties,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties" />
      </Targets>
      <Member MemberName="GetTokenValue">
        <MemberSignature Language="C#" Value="public static string GetTokenValue (this Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties properties, string tokenName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetTokenValue(class Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties properties, string tokenName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions.GetTokenValue(Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="properties" Type="Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties" RefType="this" />
          <Parameter Name="tokenName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="properties">To be added.</param>
          <param name="tokenName">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions" Member="M:Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions.GetTokenValue(Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationProperties" />
      </Targets>
      <Member MemberName="StoreTokens">
        <MemberSignature Language="C#" Value="public static void StoreTokens (this Microsoft.AspNetCore.Authentication.AuthenticationProperties properties, System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Authentication.AuthenticationToken&gt; tokens);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void StoreTokens(class Microsoft.AspNetCore.Authentication.AuthenticationProperties properties, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.AspNetCore.Authentication.AuthenticationToken&gt; tokens) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions.StoreTokens(Microsoft.AspNetCore.Authentication.AuthenticationProperties,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Authentication.AuthenticationToken})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="properties" Type="Microsoft.AspNetCore.Authentication.AuthenticationProperties" RefType="this" />
          <Parameter Name="tokens" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Authentication.AuthenticationToken&gt;" />
        </Parameters>
        <Docs>
          <param name="properties">The <see cref="T:Microsoft.AspNetCore.Authentication.AuthenticationProperties" /> properties.</param>
          <param name="tokens">The tokens to store.</param>
          <summary>
            Stores a set of authentication tokens, after removing any old tokens.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions" Member="M:Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions.StoreTokens(Microsoft.AspNetCore.Authentication.AuthenticationProperties,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Authentication.AuthenticationToken})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties" />
      </Targets>
      <Member MemberName="StoreTokens">
        <MemberSignature Language="C#" Value="public static void StoreTokens (this Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties properties, System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Authentication.AuthenticationToken&gt; tokens);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void StoreTokens(class Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties properties, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.AspNetCore.Authentication.AuthenticationToken&gt; tokens) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions.StoreTokens(Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Authentication.AuthenticationToken})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="properties" Type="Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties" RefType="this" />
          <Parameter Name="tokens" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Authentication.AuthenticationToken&gt;" />
        </Parameters>
        <Docs>
          <param name="properties">To be added.</param>
          <param name="tokens">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions" Member="M:Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions.StoreTokens(Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Authentication.AuthenticationToken})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationProperties" />
      </Targets>
      <Member MemberName="UpdateTokenValue">
        <MemberSignature Language="C#" Value="public static bool UpdateTokenValue (this Microsoft.AspNetCore.Authentication.AuthenticationProperties properties, string tokenName, string tokenValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool UpdateTokenValue(class Microsoft.AspNetCore.Authentication.AuthenticationProperties properties, string tokenName, string tokenValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions.UpdateTokenValue(Microsoft.AspNetCore.Authentication.AuthenticationProperties,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="properties" Type="Microsoft.AspNetCore.Authentication.AuthenticationProperties" RefType="this" />
          <Parameter Name="tokenName" Type="System.String" />
          <Parameter Name="tokenValue" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="properties">To be added.</param>
          <param name="tokenName">To be added.</param>
          <param name="tokenValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions" Member="M:Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions.UpdateTokenValue(Microsoft.AspNetCore.Authentication.AuthenticationProperties,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties" />
      </Targets>
      <Member MemberName="UpdateTokenValue">
        <MemberSignature Language="C#" Value="public static bool UpdateTokenValue (this Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties properties, string tokenName, string tokenValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool UpdateTokenValue(class Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties properties, string tokenName, string tokenValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions.UpdateTokenValue(Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="properties" Type="Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties" RefType="this" />
          <Parameter Name="tokenName" Type="System.String" />
          <Parameter Name="tokenValue" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="properties">To be added.</param>
          <param name="tokenName">To be added.</param>
          <param name="tokenValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions" Member="M:Microsoft.AspNetCore.Authentication.AuthenticationTokenExtensions.UpdateTokenValue(Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection" />
      </Targets>
      <Member MemberName="DeleteClaim">
        <MemberSignature Language="C#" Value="public static void DeleteClaim (this Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection collection, string claimType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteClaim(class Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection collection, string claimType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions.DeleteClaim(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection" RefType="this" />
          <Parameter Name="claimType" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="collection" />
          <param name="claimType" />
          <summary>
            Delete all claims from the given ClaimsIdentity with the given ClaimType.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions" Member="M:Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions.DeleteClaim(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection" />
      </Targets>
      <Member MemberName="MapCustomJson">
        <MemberSignature Language="C#" Value="public static void MapCustomJson (this Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection collection, string claimType, Func&lt;Newtonsoft.Json.Linq.JObject,string&gt; resolver);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MapCustomJson(class Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection collection, string claimType, class System.Func`2&lt;class Newtonsoft.Json.Linq.JObject, string&gt; resolver) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions.MapCustomJson(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection,System.String,System.Func{Newtonsoft.Json.Linq.JObject,System.String})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection" RefType="this" />
          <Parameter Name="claimType" Type="System.String" />
          <Parameter Name="resolver" Type="System.Func&lt;Newtonsoft.Json.Linq.JObject,System.String&gt;" />
        </Parameters>
        <Docs>
          <param name="collection" />
          <param name="claimType">The value to use for Claim.Type when creating a Claim.</param>
          <param name="resolver">The Func that will be called to select value from the given json user data.</param>
          <summary>
            Run the given resolver to select a value from the json user data to add as a claim.
            This no-ops if the returned value is empty.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions" Member="M:Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions.MapCustomJson(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection,System.String,System.Func{Newtonsoft.Json.Linq.JObject,System.String})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection" />
      </Targets>
      <Member MemberName="MapCustomJson">
        <MemberSignature Language="C#" Value="public static void MapCustomJson (this Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection collection, string claimType, string valueType, Func&lt;Newtonsoft.Json.Linq.JObject,string&gt; resolver);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MapCustomJson(class Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection collection, string claimType, string valueType, class System.Func`2&lt;class Newtonsoft.Json.Linq.JObject, string&gt; resolver) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions.MapCustomJson(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection,System.String,System.String,System.Func{Newtonsoft.Json.Linq.JObject,System.String})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection" RefType="this" />
          <Parameter Name="claimType" Type="System.String" />
          <Parameter Name="valueType" Type="System.String" />
          <Parameter Name="resolver" Type="System.Func&lt;Newtonsoft.Json.Linq.JObject,System.String&gt;" />
        </Parameters>
        <Docs>
          <param name="collection" />
          <param name="claimType">The value to use for Claim.Type when creating a Claim.</param>
          <param name="valueType">The value to use for Claim.ValueType when creating a Claim.</param>
          <param name="resolver">The Func that will be called to select value from the given json user data.</param>
          <summary>
            Run the given resolver to select a value from the json user data to add as a claim.
            This no-ops if the returned value is empty.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions" Member="M:Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions.MapCustomJson(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection,System.String,System.String,System.Func{Newtonsoft.Json.Linq.JObject,System.String})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection" />
      </Targets>
      <Member MemberName="MapJsonKey">
        <MemberSignature Language="C#" Value="public static void MapJsonKey (this Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection collection, string claimType, string jsonKey);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MapJsonKey(class Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection collection, string claimType, string jsonKey) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions.MapJsonKey(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection" RefType="this" />
          <Parameter Name="claimType" Type="System.String" />
          <Parameter Name="jsonKey" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="collection" />
          <param name="claimType">The value to use for Claim.Type when creating a Claim.</param>
          <param name="jsonKey">The top level key to look for in the json user data.</param>
          <summary>
            Select a top level value from the json user data with the given key name and add it as a Claim.
            This no-ops if the key is not found or the value is empty.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions" Member="M:Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions.MapJsonKey(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection" />
      </Targets>
      <Member MemberName="MapJsonKey">
        <MemberSignature Language="C#" Value="public static void MapJsonKey (this Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection collection, string claimType, string jsonKey, string valueType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MapJsonKey(class Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection collection, string claimType, string jsonKey, string valueType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions.MapJsonKey(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection,System.String,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection" RefType="this" />
          <Parameter Name="claimType" Type="System.String" />
          <Parameter Name="jsonKey" Type="System.String" />
          <Parameter Name="valueType" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="collection" />
          <param name="claimType">The value to use for Claim.Type when creating a Claim.</param>
          <param name="jsonKey">The top level key to look for in the json user data.</param>
          <param name="valueType">The value to use for Claim.ValueType when creating a Claim.</param>
          <summary>
            Select a top level value from the json user data with the given key name and add it as a Claim.
            This no-ops if the key is not found or the value is empty.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions" Member="M:Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions.MapJsonKey(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection,System.String,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection" />
      </Targets>
      <Member MemberName="MapJsonSubKey">
        <MemberSignature Language="C#" Value="public static void MapJsonSubKey (this Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection collection, string claimType, string jsonKey, string subKey);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MapJsonSubKey(class Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection collection, string claimType, string jsonKey, string subKey) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions.MapJsonSubKey(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection,System.String,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection" RefType="this" />
          <Parameter Name="claimType" Type="System.String" />
          <Parameter Name="jsonKey" Type="System.String" />
          <Parameter Name="subKey" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="collection" />
          <param name="claimType">The value to use for Claim.Type when creating a Claim.</param>
          <param name="jsonKey">The top level key to look for in the json user data.</param>
          <param name="subKey">The second level key to look for in the json user data.</param>
          <summary>
            Select a second level value from the json user data with the given top level key name and second level sub key name and add it as a Claim.
            This no-ops if the keys are not found or the value is empty.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions" Member="M:Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions.MapJsonSubKey(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection,System.String,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection" />
      </Targets>
      <Member MemberName="MapJsonSubKey">
        <MemberSignature Language="C#" Value="public static void MapJsonSubKey (this Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection collection, string claimType, string jsonKey, string subKey, string valueType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MapJsonSubKey(class Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection collection, string claimType, string jsonKey, string subKey, string valueType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions.MapJsonSubKey(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection,System.String,System.String,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection" RefType="this" />
          <Parameter Name="claimType" Type="System.String" />
          <Parameter Name="jsonKey" Type="System.String" />
          <Parameter Name="subKey" Type="System.String" />
          <Parameter Name="valueType" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="collection" />
          <param name="claimType">The value to use for Claim.Type when creating a Claim.</param>
          <param name="jsonKey">The top level key to look for in the json user data.</param>
          <param name="subKey">The second level key to look for in the json user data.</param>
          <param name="valueType">The value to use for Claim.ValueType when creating a Claim.</param>
          <summary>
            Select a second level value from the json user data with the given top level key name and second level sub key name and add it as a Claim.
            This no-ops if the keys are not found or the value is empty.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions" Member="M:Microsoft.AspNetCore.Authentication.ClaimActionCollectionMapExtensions.MapJsonSubKey(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection,System.String,System.String,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection" />
      </Targets>
      <Member MemberName="MapUniqueJsonKey">
        <MemberSignature Language="C#" Value="public static void MapUniqueJsonKey (this Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection collection, string claimType, string jsonKey);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MapUniqueJsonKey(class Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection collection, string claimType, string jsonKey) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.ClaimActionCollectionUniqueExtensions.MapUniqueJsonKey(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection" RefType="this" />
          <Parameter Name="claimType" Type="System.String" />
          <Parameter Name="jsonKey" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="collection" />
          <param name="claimType">The value to use for Claim.Type when creating a Claim.</param>
          <param name="jsonKey">The top level key to look for in the json user data.</param>
          <summary>
            Selects a top level value from the json user data with the given key name and adds it as a Claim.
            This no-ops if the ClaimsIdentity already contains a Claim with the given ClaimType.
            This no-ops if the key is not found or the value is empty.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.ClaimActionCollectionUniqueExtensions" Member="M:Microsoft.AspNetCore.Authentication.ClaimActionCollectionUniqueExtensions.MapUniqueJsonKey(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection" />
      </Targets>
      <Member MemberName="MapUniqueJsonKey">
        <MemberSignature Language="C#" Value="public static void MapUniqueJsonKey (this Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection collection, string claimType, string jsonKey, string valueType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MapUniqueJsonKey(class Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection collection, string claimType, string jsonKey, string valueType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authentication.ClaimActionCollectionUniqueExtensions.MapUniqueJsonKey(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection,System.String,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection" RefType="this" />
          <Parameter Name="claimType" Type="System.String" />
          <Parameter Name="jsonKey" Type="System.String" />
          <Parameter Name="valueType" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="collection" />
          <param name="claimType">The value to use for Claim.Type when creating a Claim.</param>
          <param name="jsonKey">The top level key to look for in the json user data.</param>
          <param name="valueType">The value to use for Claim.ValueType when creating a Claim.</param>
          <summary>
            Selects a top level value from the json user data with the given key name and adds it as a Claim.
            This no-ops if the ClaimsIdentity already contains a Claim with the given ClaimType.
            This no-ops if the key is not found or the value is empty.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authentication.ClaimActionCollectionUniqueExtensions" Member="M:Microsoft.AspNetCore.Authentication.ClaimActionCollectionUniqueExtensions.MapUniqueJsonKey(Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection,System.String,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authorization.IAuthorizationService" />
      </Targets>
      <Member MemberName="AuthorizeAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; AuthorizeAsync (this Microsoft.AspNetCore.Authorization.IAuthorizationService service, System.Security.Claims.ClaimsPrincipal user, Microsoft.AspNetCore.Authorization.AuthorizationPolicy policy);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; AuthorizeAsync(class Microsoft.AspNetCore.Authorization.IAuthorizationService service, class System.Security.Claims.ClaimsPrincipal user, class Microsoft.AspNetCore.Authorization.AuthorizationPolicy policy) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions.AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService,System.Security.Claims.ClaimsPrincipal,Microsoft.AspNetCore.Authorization.AuthorizationPolicy)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="service" Type="Microsoft.AspNetCore.Authorization.IAuthorizationService" RefType="this" />
          <Parameter Name="user" Type="System.Security.Claims.ClaimsPrincipal" />
          <Parameter Name="policy" Type="Microsoft.AspNetCore.Authorization.AuthorizationPolicy" />
        </Parameters>
        <Docs>
          <param name="service">The <see cref="T:Microsoft.AspNetCore.Authorization.IAuthorizationService" /> providing authorization.</param>
          <param name="user">The user to evaluate the policy against.</param>
          <param name="policy">The policy to evaluate.</param>
          <summary>
            Checks if a user meets a specific authorization policy against the specified resource.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions" Member="M:Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions.AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService,System.Security.Claims.ClaimsPrincipal,Microsoft.AspNetCore.Authorization.AuthorizationPolicy)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authorization.IAuthorizationService" />
      </Targets>
      <Member MemberName="AuthorizeAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; AuthorizeAsync (this Microsoft.AspNetCore.Authorization.IAuthorizationService service, System.Security.Claims.ClaimsPrincipal user, object resource, Microsoft.AspNetCore.Authorization.AuthorizationPolicy policy);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; AuthorizeAsync(class Microsoft.AspNetCore.Authorization.IAuthorizationService service, class System.Security.Claims.ClaimsPrincipal user, object resource, class Microsoft.AspNetCore.Authorization.AuthorizationPolicy policy) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions.AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService,System.Security.Claims.ClaimsPrincipal,System.Object,Microsoft.AspNetCore.Authorization.AuthorizationPolicy)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="service" Type="Microsoft.AspNetCore.Authorization.IAuthorizationService" RefType="this" />
          <Parameter Name="user" Type="System.Security.Claims.ClaimsPrincipal" />
          <Parameter Name="resource" Type="System.Object" />
          <Parameter Name="policy" Type="Microsoft.AspNetCore.Authorization.AuthorizationPolicy" />
        </Parameters>
        <Docs>
          <param name="service">The <see cref="T:Microsoft.AspNetCore.Authorization.IAuthorizationService" /> providing authorization.</param>
          <param name="user">The user to evaluate the policy against.</param>
          <param name="resource">The resource to evaluate the policy against.</param>
          <param name="policy">The policy to evaluate.</param>
          <summary>
            Checks if a user meets a specific authorization policy against the specified resource.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions" Member="M:Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions.AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService,System.Security.Claims.ClaimsPrincipal,System.Object,Microsoft.AspNetCore.Authorization.AuthorizationPolicy)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authorization.IAuthorizationService" />
      </Targets>
      <Member MemberName="AuthorizeAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; AuthorizeAsync (this Microsoft.AspNetCore.Authorization.IAuthorizationService service, System.Security.Claims.ClaimsPrincipal user, object resource, Microsoft.AspNetCore.Authorization.IAuthorizationRequirement requirement);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; AuthorizeAsync(class Microsoft.AspNetCore.Authorization.IAuthorizationService service, class System.Security.Claims.ClaimsPrincipal user, object resource, class Microsoft.AspNetCore.Authorization.IAuthorizationRequirement requirement) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions.AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService,System.Security.Claims.ClaimsPrincipal,System.Object,Microsoft.AspNetCore.Authorization.IAuthorizationRequirement)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="service" Type="Microsoft.AspNetCore.Authorization.IAuthorizationService" RefType="this" />
          <Parameter Name="user" Type="System.Security.Claims.ClaimsPrincipal" />
          <Parameter Name="resource" Type="System.Object" />
          <Parameter Name="requirement" Type="Microsoft.AspNetCore.Authorization.IAuthorizationRequirement" />
        </Parameters>
        <Docs>
          <param name="service">The <see cref="T:Microsoft.AspNetCore.Authorization.IAuthorizationService" /> providing authorization.</param>
          <param name="user">The user to evaluate the policy against.</param>
          <param name="resource">The resource to evaluate the policy against.</param>
          <param name="requirement">The requirement to evaluate the policy against.</param>
          <summary>
            Checks if a user meets a specific requirement for the specified resource
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions" Member="M:Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions.AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService,System.Security.Claims.ClaimsPrincipal,System.Object,Microsoft.AspNetCore.Authorization.IAuthorizationRequirement)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authorization.IAuthorizationService" />
      </Targets>
      <Member MemberName="AuthorizeAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; AuthorizeAsync (this Microsoft.AspNetCore.Authorization.IAuthorizationService service, System.Security.Claims.ClaimsPrincipal user, string policyName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; AuthorizeAsync(class Microsoft.AspNetCore.Authorization.IAuthorizationService service, class System.Security.Claims.ClaimsPrincipal user, string policyName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions.AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService,System.Security.Claims.ClaimsPrincipal,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="service" Type="Microsoft.AspNetCore.Authorization.IAuthorizationService" RefType="this" />
          <Parameter Name="user" Type="System.Security.Claims.ClaimsPrincipal" />
          <Parameter Name="policyName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="service">The <see cref="T:Microsoft.AspNetCore.Authorization.IAuthorizationService" /> providing authorization.</param>
          <param name="user">The user to evaluate the policy against.</param>
          <param name="policyName">The name of the policy to evaluate.</param>
          <summary>
            Checks if a user meets a specific authorization policy against the specified resource.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions" Member="M:Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions.AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService,System.Security.Claims.ClaimsPrincipal,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseRequestLocalization">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseRequestLocalization (this Microsoft.AspNetCore.Builder.IApplicationBuilder app);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseRequestLocalization(class Microsoft.AspNetCore.Builder.IApplicationBuilder app) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions.UseRequestLocalization(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />.</param>
          <summary>
            Adds the <see cref="T:Microsoft.AspNetCore.Localization.RequestLocalizationMiddleware" /> to automatically set culture information for
            requests based on information provided by the client.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions.UseRequestLocalization(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseRequestLocalization">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseRequestLocalization (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Builder.RequestLocalizationOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseRequestLocalization(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class Microsoft.AspNetCore.Builder.RequestLocalizationOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions.UseRequestLocalization(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.RequestLocalizationOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="options" Type="Microsoft.AspNetCore.Builder.RequestLocalizationOptions" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />.</param>
          <param name="options">The <see cref="T:Microsoft.AspNetCore.Builder.RequestLocalizationOptions" /> to configure the middleware with.</param>
          <summary>
            Adds the <see cref="T:Microsoft.AspNetCore.Localization.RequestLocalizationMiddleware" /> to automatically set culture information for
            requests based on information provided by the client.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions.UseRequestLocalization(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.RequestLocalizationOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseAuthentication">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseAuthentication (this Microsoft.AspNetCore.Builder.IApplicationBuilder app);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseAuthentication(class Microsoft.AspNetCore.Builder.IApplicationBuilder app) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.AuthAppBuilderExtensions.UseAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> to add the middleware to.</param>
          <summary>
            Adds the <see cref="T:Microsoft.AspNetCore.Authentication.AuthenticationMiddleware" /> to the specified <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />, which enables authentication capabilities.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.AuthAppBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.AuthAppBuilderExtensions.UseAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseBrowserLink">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseBrowserLink (this Microsoft.AspNetCore.Builder.IApplicationBuilder app);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseBrowserLink(class Microsoft.AspNetCore.Builder.IApplicationBuilder app) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.BrowserLinkExtensions.UseBrowserLink(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="app">To be added.</param>
          <summary>
            This method is called to enable Browser Link in an application. It
            registers a factory method that creates BrowserLinkMiddleware for
            each request.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.BrowserLinkExtensions" Member="M:Microsoft.AspNetCore.Builder.BrowserLinkExtensions.UseBrowserLink(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseIdentity">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseIdentity (this Microsoft.AspNetCore.Builder.IApplicationBuilder app);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseIdentity(class Microsoft.AspNetCore.Builder.IApplicationBuilder app) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.BuilderExtensions.UseIdentity(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> instance this method extends.</param>
          <summary>
            Enables ASP.NET identity for the current application.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.BuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.BuilderExtensions.UseIdentity(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseClaimsTransformation">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseClaimsTransformation (this Microsoft.AspNetCore.Builder.IApplicationBuilder app);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseClaimsTransformation(class Microsoft.AspNetCore.Builder.IApplicationBuilder app) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.ClaimsTransformationAppBuilderExtensions.UseClaimsTransformation(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> to add the middleware to.</param>
          <summary>
            Adds the <see cref="T:Microsoft.AspNetCore.Authentication.ClaimsTransformationMiddleware" /> middleware to the specified <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />, which enables claims transformation capabilities.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.ClaimsTransformationAppBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.ClaimsTransformationAppBuilderExtensions.UseClaimsTransformation(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseClaimsTransformation">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseClaimsTransformation (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Builder.ClaimsTransformationOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseClaimsTransformation(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class Microsoft.AspNetCore.Builder.ClaimsTransformationOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.ClaimsTransformationAppBuilderExtensions.UseClaimsTransformation(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.ClaimsTransformationOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="options" Type="Microsoft.AspNetCore.Builder.ClaimsTransformationOptions" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> to add the middleware to.</param>
          <param name="options">The <see cref="T:Microsoft.AspNetCore.Builder.ClaimsTransformationOptions" /> to configure the middleware with.</param>
          <summary>
            Adds the <see cref="T:Microsoft.AspNetCore.Authentication.ClaimsTransformationMiddleware" /> middleware to the specified <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />, which enables claims transformation capabilities.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.ClaimsTransformationAppBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.ClaimsTransformationAppBuilderExtensions.UseClaimsTransformation(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.ClaimsTransformationOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseClaimsTransformation">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseClaimsTransformation (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Func&lt;Microsoft.AspNetCore.Authentication.ClaimsTransformationContext,System.Threading.Tasks.Task&lt;System.Security.Claims.ClaimsPrincipal&gt;&gt; transform);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseClaimsTransformation(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class System.Func`2&lt;class Microsoft.AspNetCore.Authentication.ClaimsTransformationContext, class System.Threading.Tasks.Task`1&lt;class System.Security.Claims.ClaimsPrincipal&gt;&gt; transform) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.ClaimsTransformationAppBuilderExtensions.UseClaimsTransformation(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Func{Microsoft.AspNetCore.Authentication.ClaimsTransformationContext,System.Threading.Tasks.Task{System.Security.Claims.ClaimsPrincipal}})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="transform" Type="System.Func&lt;Microsoft.AspNetCore.Authentication.ClaimsTransformationContext,System.Threading.Tasks.Task&lt;System.Security.Claims.ClaimsPrincipal&gt;&gt;" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> to add the middleware to.</param>
          <param name="transform">A function that asynchronously transforms one <see cref="T:System.Security.Claims.ClaimsPrincipal" /> to another.</param>
          <summary>
            Adds the <see cref="T:Microsoft.AspNetCore.Authentication.ClaimsTransformationMiddleware" /> middleware to the specified <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />, which enables claims transformation capabilities.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.ClaimsTransformationAppBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.ClaimsTransformationAppBuilderExtensions.UseClaimsTransformation(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Func{Microsoft.AspNetCore.Authentication.ClaimsTransformationContext,System.Threading.Tasks.Task{System.Security.Claims.ClaimsPrincipal}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseCookieAuthentication">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseCookieAuthentication (this Microsoft.AspNetCore.Builder.IApplicationBuilder app);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseCookieAuthentication(class Microsoft.AspNetCore.Builder.IApplicationBuilder app) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.CookieAppBuilderExtensions.UseCookieAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> to add the middleware to.</param>
          <summary>
            Adds the <see cref="T:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationMiddleware" /> middleware to the specified <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />, which enables cookie authentication capabilities.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.CookieAppBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.CookieAppBuilderExtensions.UseCookieAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseCookieAuthentication">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseCookieAuthentication (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseCookieAuthentication(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.CookieAppBuilderExtensions.UseCookieAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="options" Type="Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> to add the handler to.</param>
          <param name="options">A <see cref="T:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions" /> that specifies options for the handler.</param>
          <summary>
            Obsolete, see https://go.microsoft.com/fwlink/?linkid=845470
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.CookieAppBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.CookieAppBuilderExtensions.UseCookieAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseCookieAuthentication">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseCookieAuthentication (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Builder.CookieAuthenticationOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseCookieAuthentication(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class Microsoft.AspNetCore.Builder.CookieAuthenticationOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.CookieAppBuilderExtensions.UseCookieAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.CookieAuthenticationOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="options" Type="Microsoft.AspNetCore.Builder.CookieAuthenticationOptions" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> to add the middleware to.</param>
          <param name="options">A <see cref="T:Microsoft.AspNetCore.Builder.CookieAuthenticationOptions" /> that specifies options for the middleware.</param>
          <summary>
            Adds the <see cref="T:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationMiddleware" /> middleware to the specified <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />, which enables cookie authentication capabilities.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.CookieAppBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.CookieAppBuilderExtensions.UseCookieAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.CookieAuthenticationOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseCookiePolicy">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseCookiePolicy (this Microsoft.AspNetCore.Builder.IApplicationBuilder app);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseCookiePolicy(class Microsoft.AspNetCore.Builder.IApplicationBuilder app) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.CookiePolicyAppBuilderExtensions.UseCookiePolicy(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> to add the middleware to.</param>
          <summary>
            Adds the <see cref="T:Microsoft.AspNetCore.CookiePolicy.CookiePolicyMiddleware" /> middleware to the specified <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />, which enables cookie policy capabilities.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.CookiePolicyAppBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.CookiePolicyAppBuilderExtensions.UseCookiePolicy(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseCookiePolicy">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseCookiePolicy (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Builder.CookiePolicyOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseCookiePolicy(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class Microsoft.AspNetCore.Builder.CookiePolicyOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.CookiePolicyAppBuilderExtensions.UseCookiePolicy(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.CookiePolicyOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="options" Type="Microsoft.AspNetCore.Builder.CookiePolicyOptions" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> to add the middleware to.</param>
          <param name="options">A <see cref="T:Microsoft.AspNetCore.Builder.CookiePolicyOptions" /> that specifies options for the middleware.</param>
          <summary>
            Adds the <see cref="T:Microsoft.AspNetCore.CookiePolicy.CookiePolicyMiddleware" /> middleware to the specified <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />, which enables cookie policy capabilities.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.CookiePolicyAppBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.CookiePolicyAppBuilderExtensions.UseCookiePolicy(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.CookiePolicyOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseCors">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseCors (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Action&lt;Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder&gt; configurePolicy);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseCors(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class System.Action`1&lt;class Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder&gt; configurePolicy) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.CorsMiddlewareExtensions.UseCors(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="configurePolicy" Type="System.Action&lt;Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="app">The IApplicationBuilder passed to your Configure method.</param>
          <param name="configurePolicy">A delegate which can use a policy builder to build a policy.</param>
          <summary>
            Adds a CORS middleware to your web application pipeline to allow cross domain requests.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.CorsMiddlewareExtensions" Member="M:Microsoft.AspNetCore.Builder.CorsMiddlewareExtensions.UseCors(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseCors">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseCors (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, string policyName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseCors(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, string policyName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.CorsMiddlewareExtensions.UseCors(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="policyName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="app">The IApplicationBuilder passed to your Configure method</param>
          <param name="policyName">The policy name of a configured policy.</param>
          <summary>
            Adds a CORS middleware to your web application pipeline to allow cross domain requests.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.CorsMiddlewareExtensions" Member="M:Microsoft.AspNetCore.Builder.CorsMiddlewareExtensions.UseCors(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseDefaultFiles">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseDefaultFiles (this Microsoft.AspNetCore.Builder.IApplicationBuilder app);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseDefaultFiles(class Microsoft.AspNetCore.Builder.IApplicationBuilder app) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.DefaultFilesExtensions.UseDefaultFiles(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="app" />
          <summary>
            Enables default file mapping on the current path
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.DefaultFilesExtensions" Member="M:Microsoft.AspNetCore.Builder.DefaultFilesExtensions.UseDefaultFiles(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseDefaultFiles">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseDefaultFiles (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Builder.DefaultFilesOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseDefaultFiles(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class Microsoft.AspNetCore.Builder.DefaultFilesOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.DefaultFilesExtensions.UseDefaultFiles(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.DefaultFilesOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="options" Type="Microsoft.AspNetCore.Builder.DefaultFilesOptions" />
        </Parameters>
        <Docs>
          <param name="app" />
          <param name="options" />
          <summary>
            Enables default file mapping with the given options
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.DefaultFilesExtensions" Member="M:Microsoft.AspNetCore.Builder.DefaultFilesExtensions.UseDefaultFiles(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.DefaultFilesOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseDefaultFiles">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseDefaultFiles (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, string requestPath);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseDefaultFiles(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, string requestPath) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.DefaultFilesExtensions.UseDefaultFiles(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="requestPath" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="app" />
          <param name="requestPath">The relative request path.</param>
          <summary>
            Enables default file mapping for the given request path
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.DefaultFilesExtensions" Member="M:Microsoft.AspNetCore.Builder.DefaultFilesExtensions.UseDefaultFiles(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseDeveloperExceptionPage">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseDeveloperExceptionPage (this Microsoft.AspNetCore.Builder.IApplicationBuilder app);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseDeveloperExceptionPage(class Microsoft.AspNetCore.Builder.IApplicationBuilder app) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.DeveloperExceptionPageExtensions.UseDeveloperExceptionPage(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />.</param>
          <summary>
            Captures synchronous and asynchronous <see cref="T:System.Exception" /> instances from the pipeline and generates HTML error responses.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.DeveloperExceptionPageExtensions" Member="M:Microsoft.AspNetCore.Builder.DeveloperExceptionPageExtensions.UseDeveloperExceptionPage(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseDeveloperExceptionPage">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseDeveloperExceptionPage (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Builder.DeveloperExceptionPageOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseDeveloperExceptionPage(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class Microsoft.AspNetCore.Builder.DeveloperExceptionPageOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.DeveloperExceptionPageExtensions.UseDeveloperExceptionPage(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.DeveloperExceptionPageOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="options" Type="Microsoft.AspNetCore.Builder.DeveloperExceptionPageOptions" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />.</param>
          <param name="options">A <see cref="T:Microsoft.AspNetCore.Builder.DeveloperExceptionPageOptions" /> that specifies options for the middleware.</param>
          <summary>
            Captures synchronous and asynchronous <see cref="T:System.Exception" /> instances from the pipeline and generates HTML error responses.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.DeveloperExceptionPageExtensions" Member="M:Microsoft.AspNetCore.Builder.DeveloperExceptionPageExtensions.UseDeveloperExceptionPage(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.DeveloperExceptionPageOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseDirectoryBrowser">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseDirectoryBrowser (this Microsoft.AspNetCore.Builder.IApplicationBuilder app);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseDirectoryBrowser(class Microsoft.AspNetCore.Builder.IApplicationBuilder app) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.DirectoryBrowserExtensions.UseDirectoryBrowser(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="app" />
          <summary>
            Enable directory browsing on the current path
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.DirectoryBrowserExtensions" Member="M:Microsoft.AspNetCore.Builder.DirectoryBrowserExtensions.UseDirectoryBrowser(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseDirectoryBrowser">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseDirectoryBrowser (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Builder.DirectoryBrowserOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseDirectoryBrowser(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class Microsoft.AspNetCore.Builder.DirectoryBrowserOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.DirectoryBrowserExtensions.UseDirectoryBrowser(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.DirectoryBrowserOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="options" Type="Microsoft.AspNetCore.Builder.DirectoryBrowserOptions" />
        </Parameters>
        <Docs>
          <param name="app" />
          <param name="options" />
          <summary>
            Enable directory browsing with the given options
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.DirectoryBrowserExtensions" Member="M:Microsoft.AspNetCore.Builder.DirectoryBrowserExtensions.UseDirectoryBrowser(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.DirectoryBrowserOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseDirectoryBrowser">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseDirectoryBrowser (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, string requestPath);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseDirectoryBrowser(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, string requestPath) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.DirectoryBrowserExtensions.UseDirectoryBrowser(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="requestPath" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="app" />
          <param name="requestPath">The relative request path.</param>
          <summary>
            Enables directory browsing for the given request path
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.DirectoryBrowserExtensions" Member="M:Microsoft.AspNetCore.Builder.DirectoryBrowserExtensions.UseDirectoryBrowser(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseElmCapture">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseElmCapture (this Microsoft.AspNetCore.Builder.IApplicationBuilder app);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseElmCapture(class Microsoft.AspNetCore.Builder.IApplicationBuilder app) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.ElmExtensions.UseElmCapture(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="app">To be added.</param>
          <summary>
            Enables the Elm logging service, which can be accessed via the <see cref="T:Microsoft.AspNetCore.Diagnostics.Elm.ElmPageMiddleware" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.ElmExtensions" Member="M:Microsoft.AspNetCore.Builder.ElmExtensions.UseElmCapture(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseElmPage">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseElmPage (this Microsoft.AspNetCore.Builder.IApplicationBuilder app);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseElmPage(class Microsoft.AspNetCore.Builder.IApplicationBuilder app) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.ElmExtensions.UseElmPage(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="app">To be added.</param>
          <summary>
            Enables viewing logs captured by the <see cref="T:Microsoft.AspNetCore.Diagnostics.Elm.ElmCaptureMiddleware" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.ElmExtensions" Member="M:Microsoft.AspNetCore.Builder.ElmExtensions.UseElmPage(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseExceptionHandler">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseExceptionHandler (this Microsoft.AspNetCore.Builder.IApplicationBuilder app);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseExceptionHandler(class Microsoft.AspNetCore.Builder.IApplicationBuilder app) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.ExceptionHandlerExtensions.UseExceptionHandler(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="app" />
          <summary>
            Adds a middleware to the pipeline that will catch exceptions, log them, and re-execute the request in an alternate pipeline.
            The request will not be re-executed if the response has already started.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.ExceptionHandlerExtensions" Member="M:Microsoft.AspNetCore.Builder.ExceptionHandlerExtensions.UseExceptionHandler(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseExceptionHandler">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseExceptionHandler (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Builder.ExceptionHandlerOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseExceptionHandler(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class Microsoft.AspNetCore.Builder.ExceptionHandlerOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.ExceptionHandlerExtensions.UseExceptionHandler(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.ExceptionHandlerOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="options" Type="Microsoft.AspNetCore.Builder.ExceptionHandlerOptions" />
        </Parameters>
        <Docs>
          <param name="app" />
          <param name="options" />
          <summary>
            Adds a middleware to the pipeline that will catch exceptions, log them, and re-execute the request in an alternate pipeline.
            The request will not be re-executed if the response has already started.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.ExceptionHandlerExtensions" Member="M:Microsoft.AspNetCore.Builder.ExceptionHandlerExtensions.UseExceptionHandler(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.ExceptionHandlerOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseExceptionHandler">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseExceptionHandler (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; configure);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseExceptionHandler(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class System.Action`1&lt;class Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; configure) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.ExceptionHandlerExtensions.UseExceptionHandler(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="configure" Type="System.Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="app" />
          <param name="configure" />
          <summary>
            Adds a middleware to the pipeline that will catch exceptions, log them, and re-execute the request in an alternate pipeline.
            The request will not be re-executed if the response has already started.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.ExceptionHandlerExtensions" Member="M:Microsoft.AspNetCore.Builder.ExceptionHandlerExtensions.UseExceptionHandler(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseExceptionHandler">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseExceptionHandler (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, string errorHandlingPath);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseExceptionHandler(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, string errorHandlingPath) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.ExceptionHandlerExtensions.UseExceptionHandler(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="errorHandlingPath" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="app" />
          <param name="errorHandlingPath" />
          <summary>
            Adds a middleware to the pipeline that will catch exceptions, log them, reset the request path, and re-execute the request.
            The request will not be re-executed if the response has already started.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.ExceptionHandlerExtensions" Member="M:Microsoft.AspNetCore.Builder.ExceptionHandlerExtensions.UseExceptionHandler(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseFacebookAuthentication">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseFacebookAuthentication (this Microsoft.AspNetCore.Builder.IApplicationBuilder app);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseFacebookAuthentication(class Microsoft.AspNetCore.Builder.IApplicationBuilder app) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.FacebookAppBuilderExtensions.UseFacebookAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> to add the middleware to.</param>
          <summary>
            Adds the <see cref="T:Microsoft.AspNetCore.Authentication.Facebook.FacebookMiddleware" /> middleware to the specified <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />, which enables Facebook authentication capabilities.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.FacebookAppBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.FacebookAppBuilderExtensions.UseFacebookAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseFacebookAuthentication">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseFacebookAuthentication (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Authentication.Facebook.FacebookOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseFacebookAuthentication(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class Microsoft.AspNetCore.Authentication.Facebook.FacebookOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.FacebookAppBuilderExtensions.UseFacebookAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Authentication.Facebook.FacebookOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="options" Type="Microsoft.AspNetCore.Authentication.Facebook.FacebookOptions" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> to add the handler to.</param>
          <param name="options">A <see cref="T:Microsoft.AspNetCore.Authentication.Facebook.FacebookOptions" /> that specifies options for the handler.</param>
          <summary>
            Obsolete, see https://go.microsoft.com/fwlink/?linkid=845470
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.FacebookAppBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.FacebookAppBuilderExtensions.UseFacebookAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Authentication.Facebook.FacebookOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseFacebookAuthentication">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseFacebookAuthentication (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Builder.FacebookOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseFacebookAuthentication(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class Microsoft.AspNetCore.Builder.FacebookOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.FacebookAppBuilderExtensions.UseFacebookAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.FacebookOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="options" Type="Microsoft.AspNetCore.Builder.FacebookOptions" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> to add the middleware to.</param>
          <param name="options">A <see cref="T:Microsoft.AspNetCore.Builder.FacebookOptions" /> that specifies options for the middleware.</param>
          <summary>
            Adds the <see cref="T:Microsoft.AspNetCore.Authentication.Facebook.FacebookMiddleware" /> middleware to the specified <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />, which enables Facebook authentication capabilities.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.FacebookAppBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.FacebookAppBuilderExtensions.UseFacebookAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.FacebookOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseFileServer">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseFileServer (this Microsoft.AspNetCore.Builder.IApplicationBuilder app);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseFileServer(class Microsoft.AspNetCore.Builder.IApplicationBuilder app) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.FileServerExtensions.UseFileServer(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="app" />
          <summary>
            Enable all static file middleware (except directory browsing) for the current request path in the current directory.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.FileServerExtensions" Member="M:Microsoft.AspNetCore.Builder.FileServerExtensions.UseFileServer(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseFileServer">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseFileServer (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Builder.FileServerOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseFileServer(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class Microsoft.AspNetCore.Builder.FileServerOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.FileServerExtensions.UseFileServer(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.FileServerOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="options" Type="Microsoft.AspNetCore.Builder.FileServerOptions" />
        </Parameters>
        <Docs>
          <param name="app" />
          <param name="options" />
          <summary>
            Enable all static file middleware with the given options
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.FileServerExtensions" Member="M:Microsoft.AspNetCore.Builder.FileServerExtensions.UseFileServer(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.FileServerOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseFileServer">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseFileServer (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, bool enableDirectoryBrowsing);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseFileServer(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, bool enableDirectoryBrowsing) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.FileServerExtensions.UseFileServer(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Boolean)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="enableDirectoryBrowsing" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="app" />
          <param name="enableDirectoryBrowsing">Should directory browsing be enabled?</param>
          <summary>
            Enable all static file middleware on for the current request path in the current directory.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.FileServerExtensions" Member="M:Microsoft.AspNetCore.Builder.FileServerExtensions.UseFileServer(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseFileServer">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseFileServer (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, string requestPath);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseFileServer(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, string requestPath) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.FileServerExtensions.UseFileServer(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="requestPath" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="app" />
          <param name="requestPath">The relative request path.</param>
          <summary>
            Enables all static file middleware (except directory browsing) for the given request path from the directory of the same name
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.FileServerExtensions" Member="M:Microsoft.AspNetCore.Builder.FileServerExtensions.UseFileServer(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseForwardedHeaders">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseForwardedHeaders (this Microsoft.AspNetCore.Builder.IApplicationBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseForwardedHeaders(class Microsoft.AspNetCore.Builder.IApplicationBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.ForwardedHeadersExtensions.UseForwardedHeaders(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder" />
          <summary>
            Forwards proxied headers onto current request
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.ForwardedHeadersExtensions" Member="M:Microsoft.AspNetCore.Builder.ForwardedHeadersExtensions.UseForwardedHeaders(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseForwardedHeaders">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseForwardedHeaders (this Microsoft.AspNetCore.Builder.IApplicationBuilder builder, Microsoft.AspNetCore.Builder.ForwardedHeadersOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseForwardedHeaders(class Microsoft.AspNetCore.Builder.IApplicationBuilder builder, class Microsoft.AspNetCore.Builder.ForwardedHeadersOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.ForwardedHeadersExtensions.UseForwardedHeaders(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.ForwardedHeadersOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="options" Type="Microsoft.AspNetCore.Builder.ForwardedHeadersOptions" />
        </Parameters>
        <Docs>
          <param name="builder" />
          <param name="options">Enables the different forwarding options.</param>
          <summary>
            Forwards proxied headers onto current request
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.ForwardedHeadersExtensions" Member="M:Microsoft.AspNetCore.Builder.ForwardedHeadersExtensions.UseForwardedHeaders(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.ForwardedHeadersOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseGoogleAuthentication">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseGoogleAuthentication (this Microsoft.AspNetCore.Builder.IApplicationBuilder app);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseGoogleAuthentication(class Microsoft.AspNetCore.Builder.IApplicationBuilder app) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.GoogleAppBuilderExtensions.UseGoogleAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> to add the middleware to.</param>
          <summary>
            Adds the <see cref="T:Microsoft.AspNetCore.Authentication.Google.GoogleMiddleware" /> middleware to the specified <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />, which enables Google authentication capabilities.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.GoogleAppBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.GoogleAppBuilderExtensions.UseGoogleAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseGoogleAuthentication">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseGoogleAuthentication (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Authentication.Google.GoogleOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseGoogleAuthentication(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class Microsoft.AspNetCore.Authentication.Google.GoogleOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.GoogleAppBuilderExtensions.UseGoogleAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Authentication.Google.GoogleOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="options" Type="Microsoft.AspNetCore.Authentication.Google.GoogleOptions" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> to add the handler to.</param>
          <param name="options">A <see cref="T:Microsoft.AspNetCore.Authentication.Google.GoogleOptions" /> that specifies options for the handler.</param>
          <summary>
            Obsolete, see https://go.microsoft.com/fwlink/?linkid=845470
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.GoogleAppBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.GoogleAppBuilderExtensions.UseGoogleAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Authentication.Google.GoogleOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseGoogleAuthentication">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseGoogleAuthentication (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Builder.GoogleOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseGoogleAuthentication(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class Microsoft.AspNetCore.Builder.GoogleOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.GoogleAppBuilderExtensions.UseGoogleAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.GoogleOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="options" Type="Microsoft.AspNetCore.Builder.GoogleOptions" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> to add the middleware to.</param>
          <param name="options">A <see cref="T:Microsoft.AspNetCore.Builder.GoogleOptions" /> that specifies options for the middleware.</param>
          <summary>
            Adds the <see cref="T:Microsoft.AspNetCore.Authentication.Google.GoogleMiddleware" /> middleware to the specified <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />, which enables Google authentication capabilities.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.GoogleAppBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.GoogleAppBuilderExtensions.UseGoogleAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.GoogleOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseHttpMethodOverride">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseHttpMethodOverride (this Microsoft.AspNetCore.Builder.IApplicationBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseHttpMethodOverride(class Microsoft.AspNetCore.Builder.IApplicationBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.HttpMethodOverrideExtensions.UseHttpMethodOverride(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> instance this method extends.</param>
          <summary>
            Allows incoming POST request to override method type with type specified in header.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.HttpMethodOverrideExtensions" Member="M:Microsoft.AspNetCore.Builder.HttpMethodOverrideExtensions.UseHttpMethodOverride(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseHttpMethodOverride">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseHttpMethodOverride (this Microsoft.AspNetCore.Builder.IApplicationBuilder builder, Microsoft.AspNetCore.Builder.HttpMethodOverrideOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseHttpMethodOverride(class Microsoft.AspNetCore.Builder.IApplicationBuilder builder, class Microsoft.AspNetCore.Builder.HttpMethodOverrideOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.HttpMethodOverrideExtensions.UseHttpMethodOverride(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.HttpMethodOverrideOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="options" Type="Microsoft.AspNetCore.Builder.HttpMethodOverrideOptions" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> instance this method extends.</param>
          <param name="options">The <see cref="T:Microsoft.AspNetCore.Builder.HttpMethodOverrideOptions" />.</param>
          <summary>
            Allows incoming POST request to override method type with type specified in form.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.HttpMethodOverrideExtensions" Member="M:Microsoft.AspNetCore.Builder.HttpMethodOverrideExtensions.UseHttpMethodOverride(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.HttpMethodOverrideOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseJwtBearerAuthentication">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseJwtBearerAuthentication (this Microsoft.AspNetCore.Builder.IApplicationBuilder app);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseJwtBearerAuthentication(class Microsoft.AspNetCore.Builder.IApplicationBuilder app) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.JwtBearerAppBuilderExtensions.UseJwtBearerAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> to add the middleware to.</param>
          <summary>
            Adds the <see cref="T:Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerMiddleware" /> middleware to the specified <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />, which enables Bearer token processing capabilities.
            This middleware understands appropriately
            formatted and secured tokens which appear in the request header. If the Options.AuthenticationMode is Active, the
            claims within the bearer token are added to the current request's IPrincipal User. If the Options.AuthenticationMode 
            is Passive, then the current request is not modified, but IAuthenticationManager AuthenticateAsync may be used at
            any time to obtain the claims from the request's bearer token.
            See also http://tools.ietf.org/html/rfc6749
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.JwtBearerAppBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.JwtBearerAppBuilderExtensions.UseJwtBearerAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseJwtBearerAuthentication">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseJwtBearerAuthentication (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseJwtBearerAuthentication(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.JwtBearerAppBuilderExtensions.UseJwtBearerAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="options" Type="Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerOptions" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> to add the handler to.</param>
          <param name="options">A  <see cref="T:Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerOptions" /> that specifies options for the handler.</param>
          <summary>
            Obsolete, see https://go.microsoft.com/fwlink/?linkid=845470
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.JwtBearerAppBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.JwtBearerAppBuilderExtensions.UseJwtBearerAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseJwtBearerAuthentication">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseJwtBearerAuthentication (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Builder.JwtBearerOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseJwtBearerAuthentication(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class Microsoft.AspNetCore.Builder.JwtBearerOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.JwtBearerAppBuilderExtensions.UseJwtBearerAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.JwtBearerOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="options" Type="Microsoft.AspNetCore.Builder.JwtBearerOptions" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> to add the middleware to.</param>
          <param name="options">A  <see cref="T:Microsoft.AspNetCore.Builder.JwtBearerOptions" /> that specifies options for the middleware.</param>
          <summary>
            Adds the <see cref="T:Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerMiddleware" /> middleware to the specified <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />, which enables Bearer token processing capabilities.
            This middleware understands appropriately
            formatted and secured tokens which appear in the request header. If the Options.AuthenticationMode is Active, the
            claims within the bearer token are added to the current request's IPrincipal User. If the Options.AuthenticationMode 
            is Passive, then the current request is not modified, but IAuthenticationManager AuthenticateAsync may be used at
            any time to obtain the claims from the request's bearer token.
            See also http://tools.ietf.org/html/rfc6749
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.JwtBearerAppBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.JwtBearerAppBuilderExtensions.UseJwtBearerAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.JwtBearerOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="Map">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder Map (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Http.PathString pathMatch, Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; configuration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder Map(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, valuetype Microsoft.AspNetCore.Http.PathString pathMatch, class System.Action`1&lt;class Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; configuration) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.MapExtensions.Map(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Http.PathString,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="pathMatch" Type="Microsoft.AspNetCore.Http.PathString" />
          <Parameter Name="configuration" Type="System.Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> instance.</param>
          <param name="pathMatch">The request path to match.</param>
          <param name="configuration">The branch to take for positive path matches.</param>
          <summary>
            Branches the request pipeline based on matches of the given request path. If the request path starts with
            the given path, the branch is executed.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.MapExtensions" Member="M:Microsoft.AspNetCore.Builder.MapExtensions.Map(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Http.PathString,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />
      </Targets>
      <Member MemberName="MapRoute">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Routing.IRouteBuilder MapRoute (this Microsoft.AspNetCore.Routing.IRouteBuilder routeBuilder, string name, string template);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Routing.IRouteBuilder MapRoute(class Microsoft.AspNetCore.Routing.IRouteBuilder routeBuilder, string name, string template) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.MapRouteRouteBuilderExtensions.MapRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Routing.IRouteBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="routeBuilder" Type="Microsoft.AspNetCore.Routing.IRouteBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="template" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="routeBuilder">The <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> to add the route to.</param>
          <param name="name">The name of the route.</param>
          <param name="template">The URL pattern of the route.</param>
          <summary>
            Adds a route to the <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> with the specified name and template.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.MapRouteRouteBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.MapRouteRouteBuilderExtensions.MapRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />
      </Targets>
      <Member MemberName="MapRoute">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Routing.IRouteBuilder MapRoute (this Microsoft.AspNetCore.Routing.IRouteBuilder routeBuilder, string name, string template, object defaults);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Routing.IRouteBuilder MapRoute(class Microsoft.AspNetCore.Routing.IRouteBuilder routeBuilder, string name, string template, object defaults) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.MapRouteRouteBuilderExtensions.MapRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Routing.IRouteBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="routeBuilder" Type="Microsoft.AspNetCore.Routing.IRouteBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="template" Type="System.String" />
          <Parameter Name="defaults" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="routeBuilder">The <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> to add the route to.</param>
          <param name="name">The name of the route.</param>
          <param name="template">The URL pattern of the route.</param>
          <param name="defaults">
            An object that contains default values for route parameters. The object's properties represent the names 
            and values of the default values.
            </param>
          <summary>
            Adds a route to the <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> with the specified name, template, and default values.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.MapRouteRouteBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.MapRouteRouteBuilderExtensions.MapRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />
      </Targets>
      <Member MemberName="MapRoute">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Routing.IRouteBuilder MapRoute (this Microsoft.AspNetCore.Routing.IRouteBuilder routeBuilder, string name, string template, object defaults, object constraints);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Routing.IRouteBuilder MapRoute(class Microsoft.AspNetCore.Routing.IRouteBuilder routeBuilder, string name, string template, object defaults, object constraints) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.MapRouteRouteBuilderExtensions.MapRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.Object,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Routing.IRouteBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="routeBuilder" Type="Microsoft.AspNetCore.Routing.IRouteBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="template" Type="System.String" />
          <Parameter Name="defaults" Type="System.Object" />
          <Parameter Name="constraints" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="routeBuilder">The <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> to add the route to.</param>
          <param name="name">The name of the route.</param>
          <param name="template">The URL pattern of the route.</param>
          <param name="defaults">
            An object that contains default values for route parameters. The object's properties represent the names
            and values of the default values.
            </param>
          <param name="constraints">
            An object that contains constraints for the route. The object's properties represent the names and values
            of the constraints.
            </param>
          <summary>
            Adds a route to the <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> with the specified name, template, default values, and
            constraints.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.MapRouteRouteBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.MapRouteRouteBuilderExtensions.MapRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.Object,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />
      </Targets>
      <Member MemberName="MapRoute">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Routing.IRouteBuilder MapRoute (this Microsoft.AspNetCore.Routing.IRouteBuilder routeBuilder, string name, string template, object defaults, object constraints, object dataTokens);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Routing.IRouteBuilder MapRoute(class Microsoft.AspNetCore.Routing.IRouteBuilder routeBuilder, string name, string template, object defaults, object constraints, object dataTokens) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.MapRouteRouteBuilderExtensions.MapRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.Object,System.Object,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Routing.IRouteBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="routeBuilder" Type="Microsoft.AspNetCore.Routing.IRouteBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="template" Type="System.String" />
          <Parameter Name="defaults" Type="System.Object" />
          <Parameter Name="constraints" Type="System.Object" />
          <Parameter Name="dataTokens" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="routeBuilder">The <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> to add the route to.</param>
          <param name="name">The name of the route.</param>
          <param name="template">The URL pattern of the route.</param>
          <param name="defaults">
            An object that contains default values for route parameters. The object's properties represent the names
            and values of the default values.
            </param>
          <param name="constraints">
            An object that contains constraints for the route. The object's properties represent the names and values
            of the constraints.
            </param>
          <param name="dataTokens">
            An object that contains data tokens for the route. The object's properties represent the names and values
            of the data tokens.
            </param>
          <summary>
            Adds a route to the <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> with the specified name, template, default values, and
            data tokens.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.MapRouteRouteBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.MapRouteRouteBuilderExtensions.MapRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.Object,System.Object,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="MapWhen">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder MapWhen (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Func&lt;Microsoft.AspNetCore.Http.HttpContext,bool&gt; predicate, Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; configuration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder MapWhen(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class System.Func`2&lt;class Microsoft.AspNetCore.Http.HttpContext, bool&gt; predicate, class System.Action`1&lt;class Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; configuration) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.MapWhenExtensions.MapWhen(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Func{Microsoft.AspNetCore.Http.HttpContext,System.Boolean},System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;Microsoft.AspNetCore.Http.HttpContext,System.Boolean&gt;" />
          <Parameter Name="configuration" Type="System.Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="app" />
          <param name="predicate">Invoked with the request environment to determine if the branch should be taken</param>
          <param name="configuration">Configures a branch to take</param>
          <summary>
            Branches the request pipeline based on the result of the given predicate.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.MapWhenExtensions" Member="M:Microsoft.AspNetCore.Builder.MapWhenExtensions.MapWhen(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Func{Microsoft.AspNetCore.Http.HttpContext,System.Boolean},System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseMicrosoftAccountAuthentication">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseMicrosoftAccountAuthentication (this Microsoft.AspNetCore.Builder.IApplicationBuilder app);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseMicrosoftAccountAuthentication(class Microsoft.AspNetCore.Builder.IApplicationBuilder app) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.MicrosoftAccountAppBuilderExtensions.UseMicrosoftAccountAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> to add the middleware to.</param>
          <summary>
            Adds the <see cref="T:Microsoft.AspNetCore.Authentication.MicrosoftAccount.MicrosoftAccountMiddleware" /> middleware to the specified <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />, which enables Microsoft Account authentication capabilities.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.MicrosoftAccountAppBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.MicrosoftAccountAppBuilderExtensions.UseMicrosoftAccountAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseMicrosoftAccountAuthentication">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseMicrosoftAccountAuthentication (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Authentication.MicrosoftAccount.MicrosoftAccountOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseMicrosoftAccountAuthentication(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class Microsoft.AspNetCore.Authentication.MicrosoftAccount.MicrosoftAccountOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.MicrosoftAccountAppBuilderExtensions.UseMicrosoftAccountAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Authentication.MicrosoftAccount.MicrosoftAccountOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="options" Type="Microsoft.AspNetCore.Authentication.MicrosoftAccount.MicrosoftAccountOptions" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> to add the handler to.</param>
          <param name="options">A <see cref="T:Microsoft.AspNetCore.Authentication.MicrosoftAccount.MicrosoftAccountOptions" /> that specifies options for the handler.</param>
          <summary>
            Obsolete, see https://go.microsoft.com/fwlink/?linkid=845470
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.MicrosoftAccountAppBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.MicrosoftAccountAppBuilderExtensions.UseMicrosoftAccountAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Authentication.MicrosoftAccount.MicrosoftAccountOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseMicrosoftAccountAuthentication">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseMicrosoftAccountAuthentication (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Builder.MicrosoftAccountOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseMicrosoftAccountAuthentication(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class Microsoft.AspNetCore.Builder.MicrosoftAccountOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.MicrosoftAccountAppBuilderExtensions.UseMicrosoftAccountAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.MicrosoftAccountOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="options" Type="Microsoft.AspNetCore.Builder.MicrosoftAccountOptions" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> to add the middleware to.</param>
          <param name="options">A <see cref="T:Microsoft.AspNetCore.Builder.MicrosoftAccountOptions" /> that specifies options for the middleware.</param>
          <summary>
            Adds the <see cref="T:Microsoft.AspNetCore.Authentication.MicrosoftAccount.MicrosoftAccountMiddleware" /> middleware to the specified <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />, which enables Microsoft Account authentication capabilities.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.MicrosoftAccountAppBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.MicrosoftAccountAppBuilderExtensions.UseMicrosoftAccountAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.MicrosoftAccountOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseMvc">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseMvc (this Microsoft.AspNetCore.Builder.IApplicationBuilder app);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseMvc(class Microsoft.AspNetCore.Builder.IApplicationBuilder app) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.MvcApplicationBuilderExtensions.UseMvc(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />.</param>
          <summary>
            Adds MVC to the <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> request execution pipeline.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.MvcApplicationBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.MvcApplicationBuilderExtensions.UseMvc(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseMvc">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseMvc (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Action&lt;Microsoft.AspNetCore.Routing.IRouteBuilder&gt; configureRoutes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseMvc(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class System.Action`1&lt;class Microsoft.AspNetCore.Routing.IRouteBuilder&gt; configureRoutes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.MvcApplicationBuilderExtensions.UseMvc(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Microsoft.AspNetCore.Routing.IRouteBuilder})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="configureRoutes" Type="System.Action&lt;Microsoft.AspNetCore.Routing.IRouteBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />.</param>
          <param name="configureRoutes">A callback to configure MVC routes.</param>
          <summary>
            Adds MVC to the <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> request execution pipeline.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.MvcApplicationBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.MvcApplicationBuilderExtensions.UseMvc(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Microsoft.AspNetCore.Routing.IRouteBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseMvcWithDefaultRoute">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseMvcWithDefaultRoute (this Microsoft.AspNetCore.Builder.IApplicationBuilder app);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseMvcWithDefaultRoute(class Microsoft.AspNetCore.Builder.IApplicationBuilder app) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.MvcApplicationBuilderExtensions.UseMvcWithDefaultRoute(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />.</param>
          <summary>
            Adds MVC to the <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> request execution pipeline
            with a default route named 'default' and the following template:
            '{controller=Home}/{action=Index}/{id?}'.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.MvcApplicationBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.MvcApplicationBuilderExtensions.UseMvcWithDefaultRoute(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />
      </Targets>
      <Member MemberName="MapAreaRoute">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Routing.IRouteBuilder MapAreaRoute (this Microsoft.AspNetCore.Routing.IRouteBuilder routeBuilder, string name, string areaName, string template);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Routing.IRouteBuilder MapAreaRoute(class Microsoft.AspNetCore.Routing.IRouteBuilder routeBuilder, string name, string areaName, string template) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.MvcAreaRouteBuilderExtensions.MapAreaRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Routing.IRouteBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="routeBuilder" Type="Microsoft.AspNetCore.Routing.IRouteBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="areaName" Type="System.String" />
          <Parameter Name="template" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="routeBuilder">The <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> to add the route to.</param>
          <param name="name">The name of the route.</param>
          <param name="areaName">The MVC area name.</param>
          <param name="template">The URL pattern of the route.</param>
          <summary>
            Adds a route to the <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> with the given MVC area with the specified
            <paramref name="name" />, <paramref name="areaName" /> and <paramref name="template" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.MvcAreaRouteBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.MvcAreaRouteBuilderExtensions.MapAreaRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />
      </Targets>
      <Member MemberName="MapAreaRoute">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Routing.IRouteBuilder MapAreaRoute (this Microsoft.AspNetCore.Routing.IRouteBuilder routeBuilder, string name, string areaName, string template, object defaults);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Routing.IRouteBuilder MapAreaRoute(class Microsoft.AspNetCore.Routing.IRouteBuilder routeBuilder, string name, string areaName, string template, object defaults) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.MvcAreaRouteBuilderExtensions.MapAreaRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Routing.IRouteBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="routeBuilder" Type="Microsoft.AspNetCore.Routing.IRouteBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="areaName" Type="System.String" />
          <Parameter Name="template" Type="System.String" />
          <Parameter Name="defaults" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="routeBuilder">The <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> to add the route to.</param>
          <param name="name">The name of the route.</param>
          <param name="areaName">The MVC area name.</param>
          <param name="template">The URL pattern of the route.</param>
          <param name="defaults">
            An object that contains default values for route parameters. The object's properties represent the
            names and values of the default values.
            </param>
          <summary>
            Adds a route to the <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> with the given MVC area with the specified
            <paramref name="name" />, <paramref name="areaName" />, <paramref name="template" />, and
            <paramref name="defaults" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.MvcAreaRouteBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.MvcAreaRouteBuilderExtensions.MapAreaRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />
      </Targets>
      <Member MemberName="MapAreaRoute">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Routing.IRouteBuilder MapAreaRoute (this Microsoft.AspNetCore.Routing.IRouteBuilder routeBuilder, string name, string areaName, string template, object defaults, object constraints);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Routing.IRouteBuilder MapAreaRoute(class Microsoft.AspNetCore.Routing.IRouteBuilder routeBuilder, string name, string areaName, string template, object defaults, object constraints) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.MvcAreaRouteBuilderExtensions.MapAreaRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.String,System.Object,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Routing.IRouteBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="routeBuilder" Type="Microsoft.AspNetCore.Routing.IRouteBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="areaName" Type="System.String" />
          <Parameter Name="template" Type="System.String" />
          <Parameter Name="defaults" Type="System.Object" />
          <Parameter Name="constraints" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="routeBuilder">The <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> to add the route to.</param>
          <param name="name">The name of the route.</param>
          <param name="areaName">The MVC area name.</param>
          <param name="template">The URL pattern of the route.</param>
          <param name="defaults">
            An object that contains default values for route parameters. The object's properties represent the
            names and values of the default values.
            </param>
          <param name="constraints">
            An object that contains constraints for the route. The object's properties represent the names and
            values of the constraints.
            </param>
          <summary>
            Adds a route to the <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> with the given MVC area with the specified
            <paramref name="name" />, <paramref name="areaName" />, <paramref name="template" />, 
            <paramref name="defaults" />, and <paramref name="constraints" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.MvcAreaRouteBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.MvcAreaRouteBuilderExtensions.MapAreaRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.String,System.Object,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />
      </Targets>
      <Member MemberName="MapAreaRoute">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Routing.IRouteBuilder MapAreaRoute (this Microsoft.AspNetCore.Routing.IRouteBuilder routeBuilder, string name, string areaName, string template, object defaults, object constraints, object dataTokens);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Routing.IRouteBuilder MapAreaRoute(class Microsoft.AspNetCore.Routing.IRouteBuilder routeBuilder, string name, string areaName, string template, object defaults, object constraints, object dataTokens) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.MvcAreaRouteBuilderExtensions.MapAreaRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.String,System.Object,System.Object,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Routing.IRouteBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="routeBuilder" Type="Microsoft.AspNetCore.Routing.IRouteBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="areaName" Type="System.String" />
          <Parameter Name="template" Type="System.String" />
          <Parameter Name="defaults" Type="System.Object" />
          <Parameter Name="constraints" Type="System.Object" />
          <Parameter Name="dataTokens" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="routeBuilder">The <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> to add the route to.</param>
          <param name="name">The name of the route.</param>
          <param name="areaName">The MVC area name.</param>
          <param name="template">The URL pattern of the route.</param>
          <param name="defaults">
            An object that contains default values for route parameters. The object's properties represent the
            names and values of the default values.
            </param>
          <param name="constraints">
            An object that contains constraints for the route. The object's properties represent the names and
            values of the constraints.
            </param>
          <param name="dataTokens">
            An object that contains data tokens for the route. The object's properties represent the names and
            values of the data tokens.
            </param>
          <summary>
            Adds a route to the <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> with the given MVC area with the specified
            <paramref name="name" />, <paramref name="areaName" />, <paramref name="template" />, 
            <paramref name="defaults" />, <paramref name="constraints" />, and <paramref name="dataTokens" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.MvcAreaRouteBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.MvcAreaRouteBuilderExtensions.MapAreaRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.String,System.Object,System.Object,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseOAuthAuthentication">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseOAuthAuthentication (this Microsoft.AspNetCore.Builder.IApplicationBuilder app);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseOAuthAuthentication(class Microsoft.AspNetCore.Builder.IApplicationBuilder app) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.OAuthAppBuilderExtensions.UseOAuthAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> to add the middleware to.</param>
          <summary>
            Adds the <see cref="T:Microsoft.AspNetCore.Authentication.OAuth.OAuthMiddleware`1" /> middleware to the specified <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />, which enables OAuth 2.0 authentication capabilities.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.OAuthAppBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.OAuthAppBuilderExtensions.UseOAuthAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseOAuthAuthentication">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseOAuthAuthentication (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseOAuthAuthentication(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.OAuthAppBuilderExtensions.UseOAuthAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="options" Type="Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> to add the handler to.</param>
          <param name="options">A <see cref="T:Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions" /> that specifies options for the handler.</param>
          <summary>
            Obsolete, see https://go.microsoft.com/fwlink/?linkid=845470
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.OAuthAppBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.OAuthAppBuilderExtensions.UseOAuthAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseOAuthAuthentication">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseOAuthAuthentication (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Builder.OAuthOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseOAuthAuthentication(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class Microsoft.AspNetCore.Builder.OAuthOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.OAuthAppBuilderExtensions.UseOAuthAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.OAuthOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="options" Type="Microsoft.AspNetCore.Builder.OAuthOptions" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> to add the middleware to.</param>
          <param name="options">A <see cref="T:Microsoft.AspNetCore.Builder.OAuthOptions" /> that specifies options for the middleware.</param>
          <summary>
            Adds the <see cref="T:Microsoft.AspNetCore.Authentication.OAuth.OAuthMiddleware`1" /> middleware to the specified <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />, which enables OAuth 2.0 authentication capabilities.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.OAuthAppBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.OAuthAppBuilderExtensions.UseOAuthAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.OAuthOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseOpenIdConnectAuthentication">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseOpenIdConnectAuthentication (this Microsoft.AspNetCore.Builder.IApplicationBuilder app);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseOpenIdConnectAuthentication(class Microsoft.AspNetCore.Builder.IApplicationBuilder app) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.OpenIdConnectAppBuilderExtensions.UseOpenIdConnectAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> to add the middleware to.</param>
          <summary>
            Adds the <see cref="T:Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectMiddleware" /> middleware to the specified <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />, which enables OpenID Connect authentication capabilities.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.OpenIdConnectAppBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.OpenIdConnectAppBuilderExtensions.UseOpenIdConnectAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseOpenIdConnectAuthentication">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseOpenIdConnectAuthentication (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseOpenIdConnectAuthentication(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.OpenIdConnectAppBuilderExtensions.UseOpenIdConnectAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="options" Type="Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectOptions" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> to add the handler to.</param>
          <param name="options">A <see cref="T:Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectOptions" /> that specifies options for the handler.</param>
          <summary>
            Obsolete, see https://go.microsoft.com/fwlink/?linkid=845470
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.OpenIdConnectAppBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.OpenIdConnectAppBuilderExtensions.UseOpenIdConnectAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseOpenIdConnectAuthentication">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseOpenIdConnectAuthentication (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Builder.OpenIdConnectOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseOpenIdConnectAuthentication(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class Microsoft.AspNetCore.Builder.OpenIdConnectOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.OpenIdConnectAppBuilderExtensions.UseOpenIdConnectAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.OpenIdConnectOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="options" Type="Microsoft.AspNetCore.Builder.OpenIdConnectOptions" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> to add the middleware to.</param>
          <param name="options">A <see cref="T:Microsoft.AspNetCore.Builder.OpenIdConnectOptions" /> that specifies options for the middleware.</param>
          <summary>
            Adds the <see cref="T:Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectMiddleware" /> middleware to the specified <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />, which enables OpenID Connect authentication capabilities.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.OpenIdConnectAppBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.OpenIdConnectAppBuilderExtensions.UseOpenIdConnectAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.OpenIdConnectOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`1" />
      </Targets>
      <Member MemberName="UseBuilder">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseBuilder (this Action&lt;Func&lt;Func&lt;System.Collections.Generic.IDictionary&lt;string,object&gt;,System.Threading.Tasks.Task&gt;,Func&lt;System.Collections.Generic.IDictionary&lt;string,object&gt;,System.Threading.Tasks.Task&gt;&gt;&gt; app);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseBuilder(class System.Action`1&lt;class System.Func`2&lt;class System.Func`2&lt;class System.Collections.Generic.IDictionary`2&lt;string, object&gt;, class System.Threading.Tasks.Task&gt;, class System.Func`2&lt;class System.Collections.Generic.IDictionary`2&lt;string, object&gt;, class System.Threading.Tasks.Task&gt;&gt;&gt; app) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.OwinExtensions.UseBuilder(System.Action{System.Func{System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.Tasks.Task},System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.Tasks.Task}}})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="System.Action&lt;System.Func&lt;System.Func&lt;System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;,System.Threading.Tasks.Task&gt;,System.Func&lt;System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;,System.Threading.Tasks.Task&gt;&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="app">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.OwinExtensions" Member="M:Microsoft.AspNetCore.Builder.OwinExtensions.UseBuilder(System.Action{System.Func{System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.Tasks.Task},System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.Tasks.Task}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`1" />
      </Targets>
      <Member MemberName="UseBuilder">
        <MemberSignature Language="C#" Value="public static Action&lt;Func&lt;Func&lt;System.Collections.Generic.IDictionary&lt;string,object&gt;,System.Threading.Tasks.Task&gt;,Func&lt;System.Collections.Generic.IDictionary&lt;string,object&gt;,System.Threading.Tasks.Task&gt;&gt;&gt; UseBuilder (this Action&lt;Func&lt;Func&lt;System.Collections.Generic.IDictionary&lt;string,object&gt;,System.Threading.Tasks.Task&gt;,Func&lt;System.Collections.Generic.IDictionary&lt;string,object&gt;,System.Threading.Tasks.Task&gt;&gt;&gt; app, Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; pipeline);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Action`1&lt;class System.Func`2&lt;class System.Func`2&lt;class System.Collections.Generic.IDictionary`2&lt;string, object&gt;, class System.Threading.Tasks.Task&gt;, class System.Func`2&lt;class System.Collections.Generic.IDictionary`2&lt;string, object&gt;, class System.Threading.Tasks.Task&gt;&gt;&gt; UseBuilder(class System.Action`1&lt;class System.Func`2&lt;class System.Func`2&lt;class System.Collections.Generic.IDictionary`2&lt;string, object&gt;, class System.Threading.Tasks.Task&gt;, class System.Func`2&lt;class System.Collections.Generic.IDictionary`2&lt;string, object&gt;, class System.Threading.Tasks.Task&gt;&gt;&gt; app, class System.Action`1&lt;class Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; pipeline) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.OwinExtensions.UseBuilder(System.Action{System.Func{System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.Tasks.Task},System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.Tasks.Task}}},System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Action&lt;System.Func&lt;System.Func&lt;System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;,System.Threading.Tasks.Task&gt;,System.Func&lt;System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;,System.Threading.Tasks.Task&gt;&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="System.Action&lt;System.Func&lt;System.Func&lt;System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;,System.Threading.Tasks.Task&gt;,System.Func&lt;System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;,System.Threading.Tasks.Task&gt;&gt;&gt;" RefType="this" />
          <Parameter Name="pipeline" Type="System.Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="app">To be added.</param>
          <param name="pipeline">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.OwinExtensions" Member="M:Microsoft.AspNetCore.Builder.OwinExtensions.UseBuilder(System.Action{System.Func{System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.Tasks.Task},System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.Tasks.Task}}},System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`1" />
      </Targets>
      <Member MemberName="UseBuilder">
        <MemberSignature Language="C#" Value="public static Action&lt;Func&lt;Func&lt;System.Collections.Generic.IDictionary&lt;string,object&gt;,System.Threading.Tasks.Task&gt;,Func&lt;System.Collections.Generic.IDictionary&lt;string,object&gt;,System.Threading.Tasks.Task&gt;&gt;&gt; UseBuilder (this Action&lt;Func&lt;Func&lt;System.Collections.Generic.IDictionary&lt;string,object&gt;,System.Threading.Tasks.Task&gt;,Func&lt;System.Collections.Generic.IDictionary&lt;string,object&gt;,System.Threading.Tasks.Task&gt;&gt;&gt; app, Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; pipeline, IServiceProvider serviceProvider);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Action`1&lt;class System.Func`2&lt;class System.Func`2&lt;class System.Collections.Generic.IDictionary`2&lt;string, object&gt;, class System.Threading.Tasks.Task&gt;, class System.Func`2&lt;class System.Collections.Generic.IDictionary`2&lt;string, object&gt;, class System.Threading.Tasks.Task&gt;&gt;&gt; UseBuilder(class System.Action`1&lt;class System.Func`2&lt;class System.Func`2&lt;class System.Collections.Generic.IDictionary`2&lt;string, object&gt;, class System.Threading.Tasks.Task&gt;, class System.Func`2&lt;class System.Collections.Generic.IDictionary`2&lt;string, object&gt;, class System.Threading.Tasks.Task&gt;&gt;&gt; app, class System.Action`1&lt;class Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; pipeline, class System.IServiceProvider serviceProvider) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.OwinExtensions.UseBuilder(System.Action{System.Func{System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.Tasks.Task},System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.Tasks.Task}}},System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder},System.IServiceProvider)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Action&lt;System.Func&lt;System.Func&lt;System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;,System.Threading.Tasks.Task&gt;,System.Func&lt;System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;,System.Threading.Tasks.Task&gt;&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="System.Action&lt;System.Func&lt;System.Func&lt;System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;,System.Threading.Tasks.Task&gt;,System.Func&lt;System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;,System.Threading.Tasks.Task&gt;&gt;&gt;" RefType="this" />
          <Parameter Name="pipeline" Type="System.Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt;" />
          <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
        </Parameters>
        <Docs>
          <param name="app">To be added.</param>
          <param name="pipeline">To be added.</param>
          <param name="serviceProvider">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.OwinExtensions" Member="M:Microsoft.AspNetCore.Builder.OwinExtensions.UseBuilder(System.Action{System.Func{System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.Tasks.Task},System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.Tasks.Task}}},System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder},System.IServiceProvider)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`1" />
      </Targets>
      <Member MemberName="UseBuilder">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseBuilder (this Action&lt;Func&lt;Func&lt;System.Collections.Generic.IDictionary&lt;string,object&gt;,System.Threading.Tasks.Task&gt;,Func&lt;System.Collections.Generic.IDictionary&lt;string,object&gt;,System.Threading.Tasks.Task&gt;&gt;&gt; app, IServiceProvider serviceProvider);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseBuilder(class System.Action`1&lt;class System.Func`2&lt;class System.Func`2&lt;class System.Collections.Generic.IDictionary`2&lt;string, object&gt;, class System.Threading.Tasks.Task&gt;, class System.Func`2&lt;class System.Collections.Generic.IDictionary`2&lt;string, object&gt;, class System.Threading.Tasks.Task&gt;&gt;&gt; app, class System.IServiceProvider serviceProvider) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.OwinExtensions.UseBuilder(System.Action{System.Func{System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.Tasks.Task},System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.Tasks.Task}}},System.IServiceProvider)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="System.Action&lt;System.Func&lt;System.Func&lt;System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;,System.Threading.Tasks.Task&gt;,System.Func&lt;System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;,System.Threading.Tasks.Task&gt;&gt;&gt;" RefType="this" />
          <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
        </Parameters>
        <Docs>
          <param name="app">To be added.</param>
          <param name="serviceProvider">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.OwinExtensions" Member="M:Microsoft.AspNetCore.Builder.OwinExtensions.UseBuilder(System.Action{System.Func{System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.Tasks.Task},System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.Tasks.Task}}},System.IServiceProvider)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseOwin">
        <MemberSignature Language="C#" Value="public static Action&lt;Func&lt;Func&lt;System.Collections.Generic.IDictionary&lt;string,object&gt;,System.Threading.Tasks.Task&gt;,Func&lt;System.Collections.Generic.IDictionary&lt;string,object&gt;,System.Threading.Tasks.Task&gt;&gt;&gt; UseOwin (this Microsoft.AspNetCore.Builder.IApplicationBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Action`1&lt;class System.Func`2&lt;class System.Func`2&lt;class System.Collections.Generic.IDictionary`2&lt;string, object&gt;, class System.Threading.Tasks.Task&gt;, class System.Func`2&lt;class System.Collections.Generic.IDictionary`2&lt;string, object&gt;, class System.Threading.Tasks.Task&gt;&gt;&gt; UseOwin(class Microsoft.AspNetCore.Builder.IApplicationBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.OwinExtensions.UseOwin(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Action&lt;System.Func&lt;System.Func&lt;System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;,System.Threading.Tasks.Task&gt;,System.Func&lt;System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;,System.Threading.Tasks.Task&gt;&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.OwinExtensions" Member="M:Microsoft.AspNetCore.Builder.OwinExtensions.UseOwin(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseOwin">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseOwin (this Microsoft.AspNetCore.Builder.IApplicationBuilder builder, Action&lt;Action&lt;Func&lt;Func&lt;System.Collections.Generic.IDictionary&lt;string,object&gt;,System.Threading.Tasks.Task&gt;,Func&lt;System.Collections.Generic.IDictionary&lt;string,object&gt;,System.Threading.Tasks.Task&gt;&gt;&gt;&gt; pipeline);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseOwin(class Microsoft.AspNetCore.Builder.IApplicationBuilder builder, class System.Action`1&lt;class System.Action`1&lt;class System.Func`2&lt;class System.Func`2&lt;class System.Collections.Generic.IDictionary`2&lt;string, object&gt;, class System.Threading.Tasks.Task&gt;, class System.Func`2&lt;class System.Collections.Generic.IDictionary`2&lt;string, object&gt;, class System.Threading.Tasks.Task&gt;&gt;&gt;&gt; pipeline) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.OwinExtensions.UseOwin(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{System.Action{System.Func{System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.Tasks.Task},System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.Tasks.Task}}}})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="pipeline" Type="System.Action&lt;System.Action&lt;System.Func&lt;System.Func&lt;System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;,System.Threading.Tasks.Task&gt;,System.Func&lt;System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;,System.Threading.Tasks.Task&gt;&gt;&gt;&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="pipeline">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.OwinExtensions" Member="M:Microsoft.AspNetCore.Builder.OwinExtensions.UseOwin(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{System.Action{System.Func{System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.Tasks.Task},System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.Tasks.Task}}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="RunProxy">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder RunProxy (this Microsoft.AspNetCore.Builder.IApplicationBuilder app);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder RunProxy(class Microsoft.AspNetCore.Builder.IApplicationBuilder app) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.ProxyExtension.RunProxy(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="app" />
          <summary>
            Sends request to remote server as specified in options
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.ProxyExtension" Member="M:Microsoft.AspNetCore.Builder.ProxyExtension.RunProxy(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="RunProxy">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder RunProxy (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Builder.ProxyOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder RunProxy(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class Microsoft.AspNetCore.Builder.ProxyOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.ProxyExtension.RunProxy(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.ProxyOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="options" Type="Microsoft.AspNetCore.Builder.ProxyOptions" />
        </Parameters>
        <Docs>
          <param name="app" />
          <param name="options">Options for setting port, host, and scheme</param>
          <summary>
            Sends request to remote server as specified in options
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.ProxyExtension" Member="M:Microsoft.AspNetCore.Builder.ProxyExtension.RunProxy(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.ProxyOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseResponseBuffering">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseResponseBuffering (this Microsoft.AspNetCore.Builder.IApplicationBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseResponseBuffering(class Microsoft.AspNetCore.Builder.IApplicationBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.ResponseBufferingMiddlewareExtensions.UseResponseBuffering(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder" />
          <summary>
            Enables full buffering of response bodies. This can be disabled on a per request basis using IHttpBufferingFeature.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.ResponseBufferingMiddlewareExtensions" Member="M:Microsoft.AspNetCore.Builder.ResponseBufferingMiddlewareExtensions.UseResponseBuffering(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseResponseCaching">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseResponseCaching (this Microsoft.AspNetCore.Builder.IApplicationBuilder app);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseResponseCaching(class Microsoft.AspNetCore.Builder.IApplicationBuilder app) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.ResponseCachingExtensions.UseResponseCaching(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="app">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.ResponseCachingExtensions" Member="M:Microsoft.AspNetCore.Builder.ResponseCachingExtensions.UseResponseCaching(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseResponseCompression">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseResponseCompression (this Microsoft.AspNetCore.Builder.IApplicationBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseResponseCompression(class Microsoft.AspNetCore.Builder.IApplicationBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.ResponseCompressionBuilderExtensions.UseResponseCompression(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> instance this method extends.</param>
          <summary>
            Adds middleware for dynamically compressing HTTP Responses.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.ResponseCompressionBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.ResponseCompressionBuilderExtensions.UseResponseCompression(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddResponseCompression">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddResponseCompression (this Microsoft.Extensions.DependencyInjection.IServiceCollection services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddResponseCompression(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.ResponseCompressionServicesExtensions.AddResponseCompression(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> for adding services.</param>
          <summary>
            Add response compression services.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.ResponseCompressionServicesExtensions" Member="M:Microsoft.AspNetCore.Builder.ResponseCompressionServicesExtensions.AddResponseCompression(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddResponseCompression">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddResponseCompression (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.AspNetCore.ResponseCompression.ResponseCompressionOptions&gt; configureOptions);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddResponseCompression(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.AspNetCore.ResponseCompression.ResponseCompressionOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.ResponseCompressionServicesExtensions.AddResponseCompression(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.ResponseCompression.ResponseCompressionOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="configureOptions" Type="System.Action&lt;Microsoft.AspNetCore.ResponseCompression.ResponseCompressionOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> for adding services.</param>
          <param name="configureOptions">A delegate to configure the <see cref="T:Microsoft.AspNetCore.ResponseCompression.ResponseCompressionOptions" />.</param>
          <summary>
            Add response compression services and configure the related options.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.ResponseCompressionServicesExtensions" Member="M:Microsoft.AspNetCore.Builder.ResponseCompressionServicesExtensions.AddResponseCompression(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.ResponseCompression.ResponseCompressionOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseRewriter">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseRewriter (this Microsoft.AspNetCore.Builder.IApplicationBuilder app);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseRewriter(class Microsoft.AspNetCore.Builder.IApplicationBuilder app) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.RewriteBuilderExtensions.UseRewriter(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /></param>
          <summary>
            Checks if a given Url matches rules and conditions, and modifies the HttpContext on match.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.RewriteBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.RewriteBuilderExtensions.UseRewriter(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseRewriter">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseRewriter (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Rewrite.RewriteOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseRewriter(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class Microsoft.AspNetCore.Rewrite.RewriteOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.RewriteBuilderExtensions.UseRewriter(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Rewrite.RewriteOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="options" Type="Microsoft.AspNetCore.Rewrite.RewriteOptions" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /></param>
          <param name="options">Options for rewrite.</param>
          <summary>
            Checks if a given Url matches rules and conditions, and modifies the HttpContext on match.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.RewriteBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.RewriteBuilderExtensions.UseRewriter(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Rewrite.RewriteOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseRouter">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseRouter (this Microsoft.AspNetCore.Builder.IApplicationBuilder builder, Microsoft.AspNetCore.Routing.IRouter router);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseRouter(class Microsoft.AspNetCore.Builder.IApplicationBuilder builder, class Microsoft.AspNetCore.Routing.IRouter router) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.RoutingBuilderExtensions.UseRouter(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Routing.IRouter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="router" Type="Microsoft.AspNetCore.Routing.IRouter" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> to add the middleware to.</param>
          <param name="router">The <see cref="T:Microsoft.AspNetCore.Routing.IRouter" /> to use for routing requests.</param>
          <summary>
            Adds a <see cref="T:Microsoft.AspNetCore.Builder.RouterMiddleware" /> middleware to the specified <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> with the specified <see cref="T:Microsoft.AspNetCore.Routing.IRouter" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.RoutingBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.RoutingBuilderExtensions.UseRouter(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Routing.IRouter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseRouter">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseRouter (this Microsoft.AspNetCore.Builder.IApplicationBuilder builder, Action&lt;Microsoft.AspNetCore.Routing.IRouteBuilder&gt; action);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseRouter(class Microsoft.AspNetCore.Builder.IApplicationBuilder builder, class System.Action`1&lt;class Microsoft.AspNetCore.Routing.IRouteBuilder&gt; action) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.RoutingBuilderExtensions.UseRouter(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Microsoft.AspNetCore.Routing.IRouteBuilder})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="action" Type="System.Action&lt;Microsoft.AspNetCore.Routing.IRouteBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> to add the middleware to.</param>
          <param name="action">An <see cref="T:System.Action`1" /> to configure the provided <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />.</param>
          <summary>
            Adds a <see cref="T:Microsoft.AspNetCore.Builder.RouterMiddleware" /> middleware to the specified <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
            with the <see cref="T:Microsoft.AspNetCore.Routing.IRouter" /> built from configured <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.RoutingBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.RoutingBuilderExtensions.UseRouter(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Microsoft.AspNetCore.Routing.IRouteBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="Run">
        <MemberSignature Language="C#" Value="public static void Run (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Http.RequestDelegate handler);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class Microsoft.AspNetCore.Http.RequestDelegate handler) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.RunExtensions.Run(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Http.RequestDelegate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="handler" Type="Microsoft.AspNetCore.Http.RequestDelegate" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> instance.</param>
          <param name="handler">A delegate that handles the request.</param>
          <summary>
            Adds a terminal middleware delegate to the application's request pipeline.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.RunExtensions" Member="M:Microsoft.AspNetCore.Builder.RunExtensions.Run(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Http.RequestDelegate)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseSession">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseSession (this Microsoft.AspNetCore.Builder.IApplicationBuilder app);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseSession(class Microsoft.AspNetCore.Builder.IApplicationBuilder app) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.SessionMiddlewareExtensions.UseSession(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />.</param>
          <summary>
            Adds the <see cref="T:Microsoft.AspNetCore.Session.SessionMiddleware" /> to automatically enable session state for the application.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.SessionMiddlewareExtensions" Member="M:Microsoft.AspNetCore.Builder.SessionMiddlewareExtensions.UseSession(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseSession">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseSession (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Builder.SessionOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseSession(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class Microsoft.AspNetCore.Builder.SessionOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.SessionMiddlewareExtensions.UseSession(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.SessionOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="options" Type="Microsoft.AspNetCore.Builder.SessionOptions" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />.</param>
          <param name="options">The <see cref="T:Microsoft.AspNetCore.Builder.SessionOptions" />.</param>
          <summary>
            Adds the <see cref="T:Microsoft.AspNetCore.Session.SessionMiddleware" /> to automatically enable session state for the application.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.SessionMiddlewareExtensions" Member="M:Microsoft.AspNetCore.Builder.SessionMiddlewareExtensions.UseSession(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.SessionOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />
      </Targets>
      <Member MemberName="MapSpaFallbackRoute">
        <MemberSignature Language="C#" Value="public static void MapSpaFallbackRoute (this Microsoft.AspNetCore.Routing.IRouteBuilder routeBuilder, string name, object defaults, object constraints = null, object dataTokens = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MapSpaFallbackRoute(class Microsoft.AspNetCore.Routing.IRouteBuilder routeBuilder, string name, object defaults, object constraints, object dataTokens) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.SpaRouteExtensions.MapSpaFallbackRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Object,System.Object,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="routeBuilder" Type="Microsoft.AspNetCore.Routing.IRouteBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="defaults" Type="System.Object" />
          <Parameter Name="constraints" Type="System.Object" />
          <Parameter Name="dataTokens" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="routeBuilder">The <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />.</param>
          <param name="name">The route name.</param>
          <param name="defaults">Default route parameters.</param>
          <param name="constraints">Route constraints.</param>
          <param name="dataTokens">Route data tokens.</param>
          <summary>
            Configures a route that is automatically bypassed if the requested URL appears to be for a static file
            (e.g., if it has a filename extension).
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.SpaRouteExtensions" Member="M:Microsoft.AspNetCore.Builder.SpaRouteExtensions.MapSpaFallbackRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Object,System.Object,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />
      </Targets>
      <Member MemberName="MapSpaFallbackRoute">
        <MemberSignature Language="C#" Value="public static void MapSpaFallbackRoute (this Microsoft.AspNetCore.Routing.IRouteBuilder routeBuilder, string name, string templatePrefix, object defaults, object constraints = null, object dataTokens = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MapSpaFallbackRoute(class Microsoft.AspNetCore.Routing.IRouteBuilder routeBuilder, string name, string templatePrefix, object defaults, object constraints, object dataTokens) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.SpaRouteExtensions.MapSpaFallbackRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.Object,System.Object,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="routeBuilder" Type="Microsoft.AspNetCore.Routing.IRouteBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="templatePrefix" Type="System.String" />
          <Parameter Name="defaults" Type="System.Object" />
          <Parameter Name="constraints" Type="System.Object" />
          <Parameter Name="dataTokens" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="routeBuilder">The <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />.</param>
          <param name="name">The route name.</param>
          <param name="templatePrefix">The template prefix.</param>
          <param name="defaults">Default route parameters.</param>
          <param name="constraints">Route constraints.</param>
          <param name="dataTokens">Route data tokens.</param>
          <summary>
            Configures a route that is automatically bypassed if the requested URL appears to be for a static file
            (e.g., if it has a filename extension).
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.SpaRouteExtensions" Member="M:Microsoft.AspNetCore.Builder.SpaRouteExtensions.MapSpaFallbackRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.Object,System.Object,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseStaticFiles">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseStaticFiles (this Microsoft.AspNetCore.Builder.IApplicationBuilder app);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseStaticFiles(class Microsoft.AspNetCore.Builder.IApplicationBuilder app) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.StaticFileExtensions.UseStaticFiles(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="app" />
          <summary>
            Enables static file serving for the current request path
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.StaticFileExtensions" Member="M:Microsoft.AspNetCore.Builder.StaticFileExtensions.UseStaticFiles(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseStaticFiles">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseStaticFiles (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Builder.StaticFileOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseStaticFiles(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class Microsoft.AspNetCore.Builder.StaticFileOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.StaticFileExtensions.UseStaticFiles(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.StaticFileOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="options" Type="Microsoft.AspNetCore.Builder.StaticFileOptions" />
        </Parameters>
        <Docs>
          <param name="app" />
          <param name="options" />
          <summary>
            Enables static file serving with the given options
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.StaticFileExtensions" Member="M:Microsoft.AspNetCore.Builder.StaticFileExtensions.UseStaticFiles(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.StaticFileOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseStaticFiles">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseStaticFiles (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, string requestPath);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseStaticFiles(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, string requestPath) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.StaticFileExtensions.UseStaticFiles(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="requestPath" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="app" />
          <param name="requestPath">The relative request path.</param>
          <summary>
            Enables static file serving for the given request path
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.StaticFileExtensions" Member="M:Microsoft.AspNetCore.Builder.StaticFileExtensions.UseStaticFiles(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseStatusCodePages">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseStatusCodePages (this Microsoft.AspNetCore.Builder.IApplicationBuilder app);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseStatusCodePages(class Microsoft.AspNetCore.Builder.IApplicationBuilder app) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.StatusCodePagesExtensions.UseStatusCodePages(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="app" />
          <summary>
            Adds a StatusCodePages middleware with a default response handler that checks for responses with status codes 
            between 400 and 599 that do not have a body.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.StatusCodePagesExtensions" Member="M:Microsoft.AspNetCore.Builder.StatusCodePagesExtensions.UseStatusCodePages(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseStatusCodePages">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseStatusCodePages (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Builder.StatusCodePagesOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseStatusCodePages(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class Microsoft.AspNetCore.Builder.StatusCodePagesOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.StatusCodePagesExtensions.UseStatusCodePages(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.StatusCodePagesOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="options" Type="Microsoft.AspNetCore.Builder.StatusCodePagesOptions" />
        </Parameters>
        <Docs>
          <param name="app" />
          <param name="options" />
          <summary>
            Adds a StatusCodePages middleware with the given options that checks for responses with status codes 
            between 400 and 599 that do not have a body.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.StatusCodePagesExtensions" Member="M:Microsoft.AspNetCore.Builder.StatusCodePagesExtensions.UseStatusCodePages(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.StatusCodePagesOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseStatusCodePages">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseStatusCodePages (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; configuration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseStatusCodePages(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class System.Action`1&lt;class Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; configuration) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.StatusCodePagesExtensions.UseStatusCodePages(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="configuration" Type="System.Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="app" />
          <param name="configuration" />
          <summary>
            Adds a StatusCodePages middleware to the pipeline with the specified alternate middleware pipeline to execute 
            to generate the response body.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.StatusCodePagesExtensions" Member="M:Microsoft.AspNetCore.Builder.StatusCodePagesExtensions.UseStatusCodePages(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseStatusCodePages">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseStatusCodePages (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Func&lt;Microsoft.AspNetCore.Diagnostics.StatusCodeContext,System.Threading.Tasks.Task&gt; handler);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseStatusCodePages(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class System.Func`2&lt;class Microsoft.AspNetCore.Diagnostics.StatusCodeContext, class System.Threading.Tasks.Task&gt; handler) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.StatusCodePagesExtensions.UseStatusCodePages(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Func{Microsoft.AspNetCore.Diagnostics.StatusCodeContext,System.Threading.Tasks.Task})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="handler" Type="System.Func&lt;Microsoft.AspNetCore.Diagnostics.StatusCodeContext,System.Threading.Tasks.Task&gt;" />
        </Parameters>
        <Docs>
          <param name="app" />
          <param name="handler" />
          <summary>
            Adds a StatusCodePages middleware with the specified handler that checks for responses with status codes 
            between 400 and 599 that do not have a body.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.StatusCodePagesExtensions" Member="M:Microsoft.AspNetCore.Builder.StatusCodePagesExtensions.UseStatusCodePages(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Func{Microsoft.AspNetCore.Diagnostics.StatusCodeContext,System.Threading.Tasks.Task})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseStatusCodePages">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseStatusCodePages (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, string contentType, string bodyFormat);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseStatusCodePages(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, string contentType, string bodyFormat) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.StatusCodePagesExtensions.UseStatusCodePages(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="contentType" Type="System.String" />
          <Parameter Name="bodyFormat" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="app" />
          <param name="contentType" />
          <param name="bodyFormat" />
          <summary>
            Adds a StatusCodePages middleware with the specified response body to send. This may include a '{0}' placeholder for the status code.
            The middleware checks for responses with status codes between 400 and 599 that do not have a body.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.StatusCodePagesExtensions" Member="M:Microsoft.AspNetCore.Builder.StatusCodePagesExtensions.UseStatusCodePages(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseStatusCodePagesWithRedirects">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseStatusCodePagesWithRedirects (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, string locationFormat);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseStatusCodePagesWithRedirects(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, string locationFormat) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.StatusCodePagesExtensions.UseStatusCodePagesWithRedirects(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="locationFormat" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="app" />
          <param name="locationFormat" />
          <summary>
            Adds a StatusCodePages middleware to the pipeline. Specifies that responses should be handled by redirecting 
            with the given location URL template. This may include a '{0}' placeholder for the status code. URLs starting 
            with '~' will have PathBase prepended, where any other URL will be used as is.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.StatusCodePagesExtensions" Member="M:Microsoft.AspNetCore.Builder.StatusCodePagesExtensions.UseStatusCodePagesWithRedirects(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseStatusCodePagesWithReExecute">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseStatusCodePagesWithReExecute (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, string pathFormat, string queryFormat = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseStatusCodePagesWithReExecute(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, string pathFormat, string queryFormat) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.StatusCodePagesExtensions.UseStatusCodePagesWithReExecute(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="pathFormat" Type="System.String" />
          <Parameter Name="queryFormat" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="app" />
          <param name="pathFormat" />
          <param name="queryFormat" />
          <summary>
            Adds a StatusCodePages middleware to the pipeline. Specifies that the response body should be generated by 
            re-executing the request pipeline using an alternate path. This path may contain a '{0}' placeholder of the status code.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.StatusCodePagesExtensions" Member="M:Microsoft.AspNetCore.Builder.StatusCodePagesExtensions.UseStatusCodePagesWithReExecute(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseTwitterAuthentication">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseTwitterAuthentication (this Microsoft.AspNetCore.Builder.IApplicationBuilder app);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseTwitterAuthentication(class Microsoft.AspNetCore.Builder.IApplicationBuilder app) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.TwitterAppBuilderExtensions.UseTwitterAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> to add the middleware to.</param>
          <summary>
            Adds the <see cref="T:Microsoft.AspNetCore.Authentication.Twitter.TwitterMiddleware" /> middleware to the specified <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />, which enables Twitter authentication capabilities.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.TwitterAppBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.TwitterAppBuilderExtensions.UseTwitterAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseTwitterAuthentication">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseTwitterAuthentication (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Authentication.Twitter.TwitterOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseTwitterAuthentication(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class Microsoft.AspNetCore.Authentication.Twitter.TwitterOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.TwitterAppBuilderExtensions.UseTwitterAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Authentication.Twitter.TwitterOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="options" Type="Microsoft.AspNetCore.Authentication.Twitter.TwitterOptions" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> to add the handler to.</param>
          <param name="options">An action delegate to configure the provided <see cref="T:Microsoft.AspNetCore.Authentication.Twitter.TwitterOptions" />.</param>
          <summary>
            Obsolete, see https://go.microsoft.com/fwlink/?linkid=845470
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.TwitterAppBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.TwitterAppBuilderExtensions.UseTwitterAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Authentication.Twitter.TwitterOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseTwitterAuthentication">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseTwitterAuthentication (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Builder.TwitterOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseTwitterAuthentication(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class Microsoft.AspNetCore.Builder.TwitterOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.TwitterAppBuilderExtensions.UseTwitterAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.TwitterOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="options" Type="Microsoft.AspNetCore.Builder.TwitterOptions" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> to add the middleware to.</param>
          <param name="options">An action delegate to configure the provided <see cref="T:Microsoft.AspNetCore.Builder.TwitterOptions" />.</param>
          <summary>
            Adds the <see cref="T:Microsoft.AspNetCore.Authentication.Twitter.TwitterMiddleware" /> middleware to the specified <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />, which enables Twitter authentication capabilities.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.TwitterAppBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.TwitterAppBuilderExtensions.UseTwitterAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.TwitterOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="Use">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder Use (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Func&lt;Microsoft.AspNetCore.Http.HttpContext,Func&lt;System.Threading.Tasks.Task&gt;,System.Threading.Tasks.Task&gt; middleware);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder Use(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class System.Func`3&lt;class Microsoft.AspNetCore.Http.HttpContext, class System.Func`1&lt;class System.Threading.Tasks.Task&gt;, class System.Threading.Tasks.Task&gt; middleware) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.UseExtensions.Use(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Func{Microsoft.AspNetCore.Http.HttpContext,System.Func{System.Threading.Tasks.Task},System.Threading.Tasks.Task})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="middleware" Type="System.Func&lt;Microsoft.AspNetCore.Http.HttpContext,System.Func&lt;System.Threading.Tasks.Task&gt;,System.Threading.Tasks.Task&gt;" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> instance.</param>
          <param name="middleware">A function that handles the request or calls the given next function.</param>
          <summary>
            Adds a middleware delagate defined in-line to the application's request pipeline.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.UseExtensions" Member="M:Microsoft.AspNetCore.Builder.UseExtensions.Use(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Func{Microsoft.AspNetCore.Http.HttpContext,System.Func{System.Threading.Tasks.Task},System.Threading.Tasks.Task})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseMiddleware">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseMiddleware (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Type middleware, object[] args);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseMiddleware(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class System.Type middleware, object[] args) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.UseMiddleware(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Type,System.Object[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="middleware" Type="System.Type" />
          <Parameter Name="args" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> instance.</param>
          <param name="middleware">The middleware type.</param>
          <param name="args">The arguments to pass to the middleware type instance's constructor.</param>
          <summary>
            Adds a middleware type to the application's request pipeline.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.UseMiddlewareExtensions" Member="M:Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.UseMiddleware(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Type,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseMiddleware&lt;TMiddleware&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseMiddleware&lt;TMiddleware&gt; (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, object[] args);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseMiddleware&lt;TMiddleware&gt;(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, object[] args) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.UseMiddleware``1(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Object[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TMiddleware" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="args" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <typeparam name="TMiddleware">The middleware type.</typeparam>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> instance.</param>
          <param name="args">The arguments to pass to the middleware type instance's constructor.</param>
          <summary>
            Adds a middleware type to the application's request pipeline.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.UseMiddlewareExtensions" Member="M:Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.UseMiddleware``1(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UsePathBase">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UsePathBase (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Http.PathString pathBase);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UsePathBase(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, valuetype Microsoft.AspNetCore.Http.PathString pathBase) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.UsePathBaseExtensions.UsePathBase(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Http.PathString)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="pathBase" Type="Microsoft.AspNetCore.Http.PathString" />
        </Parameters>
        <Docs>
          <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" /> instance.</param>
          <param name="pathBase">The path base to extract.</param>
          <summary>
            Adds a middleware that extracts the specified path base from request path and postpend it to the request path base.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.UsePathBaseExtensions" Member="M:Microsoft.AspNetCore.Builder.UsePathBaseExtensions.UsePathBase(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Http.PathString)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseWhen">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseWhen (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Func&lt;Microsoft.AspNetCore.Http.HttpContext,bool&gt; predicate, Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; configuration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseWhen(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class System.Func`2&lt;class Microsoft.AspNetCore.Http.HttpContext, bool&gt; predicate, class System.Action`1&lt;class Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; configuration) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.UseWhenExtensions.UseWhen(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Func{Microsoft.AspNetCore.Http.HttpContext,System.Boolean},System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;Microsoft.AspNetCore.Http.HttpContext,System.Boolean&gt;" />
          <Parameter Name="configuration" Type="System.Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="app" />
          <param name="predicate">Invoked with the request environment to determine if the branch should be taken</param>
          <param name="configuration">Configures a branch to take</param>
          <summary>
            Conditionally creates a branch in the request pipeline that is rejoined to the main pipeline.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.UseWhenExtensions" Member="M:Microsoft.AspNetCore.Builder.UseWhenExtensions.UseWhen(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Func{Microsoft.AspNetCore.Http.HttpContext,System.Boolean},System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />
      </Targets>
      <Member MemberName="MapWebApiRoute">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Routing.IRouteBuilder MapWebApiRoute (this Microsoft.AspNetCore.Routing.IRouteBuilder routeCollectionBuilder, string name, string template);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Routing.IRouteBuilder MapWebApiRoute(class Microsoft.AspNetCore.Routing.IRouteBuilder routeCollectionBuilder, string name, string template) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.WebApiCompatShimRouteBuilderExtensions.MapWebApiRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Routing.IRouteBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="routeCollectionBuilder" Type="Microsoft.AspNetCore.Routing.IRouteBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="template" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="routeCollectionBuilder">To be added.</param>
          <param name="name">To be added.</param>
          <param name="template">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.WebApiCompatShimRouteBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.WebApiCompatShimRouteBuilderExtensions.MapWebApiRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />
      </Targets>
      <Member MemberName="MapWebApiRoute">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Routing.IRouteBuilder MapWebApiRoute (this Microsoft.AspNetCore.Routing.IRouteBuilder routeCollectionBuilder, string name, string template, object defaults);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Routing.IRouteBuilder MapWebApiRoute(class Microsoft.AspNetCore.Routing.IRouteBuilder routeCollectionBuilder, string name, string template, object defaults) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.WebApiCompatShimRouteBuilderExtensions.MapWebApiRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Routing.IRouteBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="routeCollectionBuilder" Type="Microsoft.AspNetCore.Routing.IRouteBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="template" Type="System.String" />
          <Parameter Name="defaults" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="routeCollectionBuilder">To be added.</param>
          <param name="name">To be added.</param>
          <param name="template">To be added.</param>
          <param name="defaults">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.WebApiCompatShimRouteBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.WebApiCompatShimRouteBuilderExtensions.MapWebApiRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />
      </Targets>
      <Member MemberName="MapWebApiRoute">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Routing.IRouteBuilder MapWebApiRoute (this Microsoft.AspNetCore.Routing.IRouteBuilder routeCollectionBuilder, string name, string template, object defaults, object constraints);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Routing.IRouteBuilder MapWebApiRoute(class Microsoft.AspNetCore.Routing.IRouteBuilder routeCollectionBuilder, string name, string template, object defaults, object constraints) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.WebApiCompatShimRouteBuilderExtensions.MapWebApiRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.Object,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Routing.IRouteBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="routeCollectionBuilder" Type="Microsoft.AspNetCore.Routing.IRouteBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="template" Type="System.String" />
          <Parameter Name="defaults" Type="System.Object" />
          <Parameter Name="constraints" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="routeCollectionBuilder">To be added.</param>
          <param name="name">To be added.</param>
          <param name="template">To be added.</param>
          <param name="defaults">To be added.</param>
          <param name="constraints">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.WebApiCompatShimRouteBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.WebApiCompatShimRouteBuilderExtensions.MapWebApiRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.Object,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />
      </Targets>
      <Member MemberName="MapWebApiRoute">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Routing.IRouteBuilder MapWebApiRoute (this Microsoft.AspNetCore.Routing.IRouteBuilder routeCollectionBuilder, string name, string template, object defaults, object constraints, object dataTokens);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Routing.IRouteBuilder MapWebApiRoute(class Microsoft.AspNetCore.Routing.IRouteBuilder routeCollectionBuilder, string name, string template, object defaults, object constraints, object dataTokens) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.WebApiCompatShimRouteBuilderExtensions.MapWebApiRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.Object,System.Object,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Routing.IRouteBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="routeCollectionBuilder" Type="Microsoft.AspNetCore.Routing.IRouteBuilder" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="template" Type="System.String" />
          <Parameter Name="defaults" Type="System.Object" />
          <Parameter Name="constraints" Type="System.Object" />
          <Parameter Name="dataTokens" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="routeCollectionBuilder">To be added.</param>
          <param name="name">To be added.</param>
          <param name="template">To be added.</param>
          <param name="defaults">To be added.</param>
          <param name="constraints">To be added.</param>
          <param name="dataTokens">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.WebApiCompatShimRouteBuilderExtensions" Member="M:Microsoft.AspNetCore.Builder.WebApiCompatShimRouteBuilderExtensions.MapWebApiRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.Object,System.Object,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseWebpackDevMiddleware">
        <MemberSignature Language="C#" Value="public static void UseWebpackDevMiddleware (this Microsoft.AspNetCore.Builder.IApplicationBuilder appBuilder, Microsoft.AspNetCore.SpaServices.Webpack.WebpackDevMiddlewareOptions options = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseWebpackDevMiddleware(class Microsoft.AspNetCore.Builder.IApplicationBuilder appBuilder, class Microsoft.AspNetCore.SpaServices.Webpack.WebpackDevMiddlewareOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.WebpackDevMiddleware.UseWebpackDevMiddleware(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.SpaServices.Webpack.WebpackDevMiddlewareOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="appBuilder" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="options" Type="Microsoft.AspNetCore.SpaServices.Webpack.WebpackDevMiddlewareOptions" />
        </Parameters>
        <Docs>
          <param name="appBuilder">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />.</param>
          <param name="options">Options for configuring the Webpack compiler instance.</param>
          <summary>
             Enables Webpack dev middleware support. This hosts an instance of the Webpack compiler in memory
             in your application so that you can always serve up-to-date Webpack-built resources without having
             to run the compiler manually. Since the Webpack compiler instance is retained in memory, incremental
             compilation is vastly faster that re-running the compiler from scratch.
            
             Incoming requests that match Webpack-built files will be handled by returning the Webpack compiler
             output directly, regardless of files on disk. If compilation is in progress when the request arrives,
             the response will pause until updated compiler output is ready.
             </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.WebpackDevMiddleware" Member="M:Microsoft.AspNetCore.Builder.WebpackDevMiddleware.UseWebpackDevMiddleware(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.SpaServices.Webpack.WebpackDevMiddlewareOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseWebSockets">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseWebSockets (this Microsoft.AspNetCore.Builder.IApplicationBuilder app);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseWebSockets(class Microsoft.AspNetCore.Builder.IApplicationBuilder app) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.WebSocketMiddlewareExtensions.UseWebSockets(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="app">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.WebSocketMiddlewareExtensions" Member="M:Microsoft.AspNetCore.Builder.WebSocketMiddlewareExtensions.UseWebSockets(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseWebSockets">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseWebSockets (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Builder.WebSocketOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseWebSockets(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class Microsoft.AspNetCore.Builder.WebSocketOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.WebSocketMiddlewareExtensions.UseWebSockets(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.WebSocketOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="options" Type="Microsoft.AspNetCore.Builder.WebSocketOptions" />
        </Parameters>
        <Docs>
          <param name="app">To be added.</param>
          <param name="options">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.WebSocketMiddlewareExtensions" Member="M:Microsoft.AspNetCore.Builder.WebSocketMiddlewareExtensions.UseWebSockets(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.WebSocketOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseWelcomePage">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseWelcomePage (this Microsoft.AspNetCore.Builder.IApplicationBuilder app);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseWelcomePage(class Microsoft.AspNetCore.Builder.IApplicationBuilder app) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.WelcomePageExtensions.UseWelcomePage(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="app" />
          <summary>
            Adds the WelcomePageMiddleware to the pipeline.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.WelcomePageExtensions" Member="M:Microsoft.AspNetCore.Builder.WelcomePageExtensions.UseWelcomePage(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseWelcomePage">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseWelcomePage (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Builder.WelcomePageOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseWelcomePage(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class Microsoft.AspNetCore.Builder.WelcomePageOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.WelcomePageExtensions.UseWelcomePage(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.WelcomePageOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="options" Type="Microsoft.AspNetCore.Builder.WelcomePageOptions" />
        </Parameters>
        <Docs>
          <param name="app" />
          <param name="options" />
          <summary>
            Adds the WelcomePageMiddleware to the pipeline with the given options.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.WelcomePageExtensions" Member="M:Microsoft.AspNetCore.Builder.WelcomePageExtensions.UseWelcomePage(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.WelcomePageOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseWelcomePage">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseWelcomePage (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Http.PathString path);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseWelcomePage(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, valuetype Microsoft.AspNetCore.Http.PathString path) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.WelcomePageExtensions.UseWelcomePage(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Http.PathString)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="path" Type="Microsoft.AspNetCore.Http.PathString" />
        </Parameters>
        <Docs>
          <param name="app" />
          <param name="path" />
          <summary>
            Adds the WelcomePageMiddleware to the pipeline with the given path.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.WelcomePageExtensions" Member="M:Microsoft.AspNetCore.Builder.WelcomePageExtensions.UseWelcomePage(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Http.PathString)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseWelcomePage">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseWelcomePage (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, string path);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseWelcomePage(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, string path) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.WelcomePageExtensions.UseWelcomePage(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
          <Parameter Name="path" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="app" />
          <param name="path" />
          <summary>
            Adds the WelcomePageMiddleware to the pipeline with the given path.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Builder.WelcomePageExtensions" Member="M:Microsoft.AspNetCore.Builder.WelcomePageExtensions.UseWelcomePage(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Xml.Linq.XElement" />
      </Targets>
      <Member MemberName="MarkAsRequiresEncryption">
        <MemberSignature Language="C#" Value="public static void MarkAsRequiresEncryption (this System.Xml.Linq.XElement element);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MarkAsRequiresEncryption(class System.Xml.Linq.XElement element) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.XmlExtensions.MarkAsRequiresEncryption(System.Xml.Linq.XElement)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="System.Xml.Linq.XElement" RefType="this" />
        </Parameters>
        <Docs>
          <param name="element">To be added.</param>
          <summary>
            Marks the provided <see cref="T:System.Xml.Linq.XElement" /> as requiring encryption before being persisted
            to storage. Use when implementing <see cref="M:Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.IAuthenticatedEncryptorDescriptor.ExportToXml" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.XmlExtensions" Member="M:Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.XmlExtensions.MarkAsRequiresEncryption(System.Xml.Linq.XElement)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />
      </Targets>
      <Member MemberName="PersistKeysToAzureBlobStorage">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder PersistKeysToAzureBlobStorage (this Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, Microsoft.WindowsAzure.Storage.Blob.CloudBlobContainer container, string blobName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder PersistKeysToAzureBlobStorage(class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, class Microsoft.WindowsAzure.Storage.Blob.CloudBlobContainer container, string blobName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.AzureDataProtectionBuilderExtensions.PersistKeysToAzureBlobStorage(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,Microsoft.WindowsAzure.Storage.Blob.CloudBlobContainer,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" RefType="this" />
          <Parameter Name="container" Type="Microsoft.WindowsAzure.Storage.Blob.CloudBlobContainer" />
          <Parameter Name="blobName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="builder">The builder instance to modify.</param>
          <param name="container">The <see cref="T:Microsoft.WindowsAzure.Storage.Blob.CloudBlobContainer" /> in which the
            key file should be stored.</param>
          <param name="blobName">The name of the key file, generally specified
            as "[subdir/]keys.xml"</param>
          <summary>
            Configures the data protection system to persist keys to the specified path
            in Azure Blob Storage.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.AzureDataProtectionBuilderExtensions" Member="M:Microsoft.AspNetCore.DataProtection.AzureDataProtectionBuilderExtensions.PersistKeysToAzureBlobStorage(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,Microsoft.WindowsAzure.Storage.Blob.CloudBlobContainer,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />
      </Targets>
      <Member MemberName="PersistKeysToAzureBlobStorage">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder PersistKeysToAzureBlobStorage (this Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob blobReference);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder PersistKeysToAzureBlobStorage(class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, class Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob blobReference) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.AzureDataProtectionBuilderExtensions.PersistKeysToAzureBlobStorage(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" RefType="this" />
          <Parameter Name="blobReference" Type="Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob" />
        </Parameters>
        <Docs>
          <param name="builder">The builder instance to modify.</param>
          <param name="blobReference">The <see cref="T:Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob" /> where the
            key file should be stored.</param>
          <summary>
            Configures the data protection system to persist keys to the specified path
            in Azure Blob Storage.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.AzureDataProtectionBuilderExtensions" Member="M:Microsoft.AspNetCore.DataProtection.AzureDataProtectionBuilderExtensions.PersistKeysToAzureBlobStorage(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,Microsoft.WindowsAzure.Storage.Blob.CloudBlockBlob)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />
      </Targets>
      <Member MemberName="PersistKeysToAzureBlobStorage">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder PersistKeysToAzureBlobStorage (this Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, Microsoft.WindowsAzure.Storage.CloudStorageAccount storageAccount, string relativePath);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder PersistKeysToAzureBlobStorage(class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, class Microsoft.WindowsAzure.Storage.CloudStorageAccount storageAccount, string relativePath) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.AzureDataProtectionBuilderExtensions.PersistKeysToAzureBlobStorage(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" RefType="this" />
          <Parameter Name="storageAccount" Type="Microsoft.WindowsAzure.Storage.CloudStorageAccount" />
          <Parameter Name="relativePath" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="builder">The builder instance to modify.</param>
          <param name="storageAccount">The <see cref="T:Microsoft.WindowsAzure.Storage.CloudStorageAccount" /> which
            should be utilized.</param>
          <param name="relativePath">A relative path where the key file should be
            stored, generally specified as "/containerName/[subDir/]keys.xml".</param>
          <summary>
            Configures the data protection system to persist keys to the specified path
            in Azure Blob Storage.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.AzureDataProtectionBuilderExtensions" Member="M:Microsoft.AspNetCore.DataProtection.AzureDataProtectionBuilderExtensions.PersistKeysToAzureBlobStorage(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />
      </Targets>
      <Member MemberName="PersistKeysToAzureBlobStorage">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder PersistKeysToAzureBlobStorage (this Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, Uri blobUri);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder PersistKeysToAzureBlobStorage(class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, class System.Uri blobUri) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.AzureDataProtectionBuilderExtensions.PersistKeysToAzureBlobStorage(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,System.Uri)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" RefType="this" />
          <Parameter Name="blobUri" Type="System.Uri" />
        </Parameters>
        <Docs>
          <param name="builder">The builder instance to modify.</param>
          <param name="blobUri">The full URI where the key file should be stored.
            The URI must contain the SAS token as a query string parameter.</param>
          <summary>
            Configures the data protection system to persist keys to the specified path
            in Azure Blob Storage.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.AzureDataProtectionBuilderExtensions" Member="M:Microsoft.AspNetCore.DataProtection.AzureDataProtectionBuilderExtensions.PersistKeysToAzureBlobStorage(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,System.Uri)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector" />
      </Targets>
      <Member MemberName="Protect">
        <MemberSignature Language="C#" Value="public static byte[] Protect (this Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector protector, byte[] plaintext, TimeSpan lifetime);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] Protect(class Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector protector, unsigned int8[] plaintext, valuetype System.TimeSpan lifetime) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.DataProtectionAdvancedExtensions.Protect(Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector,System.Byte[],System.TimeSpan)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Byte[]</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="protector" Type="Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector" RefType="this" />
          <Parameter Name="plaintext" Type="System.Byte[]" />
          <Parameter Name="lifetime" Type="System.TimeSpan" />
        </Parameters>
        <Docs>
          <param name="protector">The protector to use.</param>
          <param name="plaintext">The plaintext data to protect.</param>
          <param name="lifetime">The amount of time after which the payload should no longer be unprotectable.</param>
          <summary>
            Cryptographically protects a piece of plaintext data, expiring the data after
            the specified amount of time has elapsed.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.DataProtectionAdvancedExtensions" Member="M:Microsoft.AspNetCore.DataProtection.DataProtectionAdvancedExtensions.Protect(Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector,System.Byte[],System.TimeSpan)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector" />
      </Targets>
      <Member MemberName="Protect">
        <MemberSignature Language="C#" Value="public static string Protect (this Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector protector, string plaintext, DateTimeOffset expiration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Protect(class Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector protector, string plaintext, valuetype System.DateTimeOffset expiration) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.DataProtectionAdvancedExtensions.Protect(Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector,System.String,System.DateTimeOffset)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="protector" Type="Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector" RefType="this" />
          <Parameter Name="plaintext" Type="System.String" />
          <Parameter Name="expiration" Type="System.DateTimeOffset" />
        </Parameters>
        <Docs>
          <param name="protector">The protector to use.</param>
          <param name="plaintext">The plaintext data to protect.</param>
          <param name="expiration">The time when this payload should expire.</param>
          <summary>
            Cryptographically protects a piece of plaintext data, expiring the data at
            the chosen time.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.DataProtectionAdvancedExtensions" Member="M:Microsoft.AspNetCore.DataProtection.DataProtectionAdvancedExtensions.Protect(Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector,System.String,System.DateTimeOffset)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector" />
      </Targets>
      <Member MemberName="Protect">
        <MemberSignature Language="C#" Value="public static string Protect (this Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector protector, string plaintext, TimeSpan lifetime);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Protect(class Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector protector, string plaintext, valuetype System.TimeSpan lifetime) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.DataProtectionAdvancedExtensions.Protect(Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector,System.String,System.TimeSpan)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="protector" Type="Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector" RefType="this" />
          <Parameter Name="plaintext" Type="System.String" />
          <Parameter Name="lifetime" Type="System.TimeSpan" />
        </Parameters>
        <Docs>
          <param name="protector">The protector to use.</param>
          <param name="plaintext">The plaintext data to protect.</param>
          <param name="lifetime">The amount of time after which the payload should no longer be unprotectable.</param>
          <summary>
            Cryptographically protects a piece of plaintext data, expiring the data after
            the specified amount of time has elapsed.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.DataProtectionAdvancedExtensions" Member="M:Microsoft.AspNetCore.DataProtection.DataProtectionAdvancedExtensions.Protect(Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector,System.String,System.TimeSpan)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.IDataProtector" />
      </Targets>
      <Member MemberName="ToTimeLimitedDataProtector">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector ToTimeLimitedDataProtector (this Microsoft.AspNetCore.DataProtection.IDataProtector protector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector ToTimeLimitedDataProtector(class Microsoft.AspNetCore.DataProtection.IDataProtector protector) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.DataProtectionAdvancedExtensions.ToTimeLimitedDataProtector(Microsoft.AspNetCore.DataProtection.IDataProtector)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="protector" Type="Microsoft.AspNetCore.DataProtection.IDataProtector" RefType="this" />
        </Parameters>
        <Docs>
          <param name="protector">The <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtector" /> to convert to a time-limited protector.</param>
          <summary>
            Converts an <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtector" /> into an <see cref="T:Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector" />
            so that payloads can be protected with a finite lifetime.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.DataProtectionAdvancedExtensions" Member="M:Microsoft.AspNetCore.DataProtection.DataProtectionAdvancedExtensions.ToTimeLimitedDataProtector(Microsoft.AspNetCore.DataProtection.IDataProtector)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector" />
      </Targets>
      <Member MemberName="Unprotect">
        <MemberSignature Language="C#" Value="public static string Unprotect (this Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector protector, string protectedData, out DateTimeOffset expiration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Unprotect(class Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector protector, string protectedData, valuetype System.DateTimeOffset expiration) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.DataProtectionAdvancedExtensions.Unprotect(Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector,System.String,System.DateTimeOffset@)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="protector" Type="Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector" RefType="this" />
          <Parameter Name="protectedData" Type="System.String" />
          <Parameter Name="expiration" Type="System.DateTimeOffset&amp;" RefType="out" />
        </Parameters>
        <Docs>
          <param name="protector">The protector to use.</param>
          <param name="protectedData">The protected data to unprotect.</param>
          <param name="expiration">An 'out' parameter which upon a successful unprotect
            operation receives the expiration date of the payload.</param>
          <summary>
            Cryptographically unprotects a piece of protected data.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.DataProtectionAdvancedExtensions" Member="M:Microsoft.AspNetCore.DataProtection.DataProtectionAdvancedExtensions.Unprotect(Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector,System.String,System.DateTimeOffset@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />
      </Targets>
      <Member MemberName="AddKeyEscrowSink">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder AddKeyEscrowSink (this Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, Microsoft.AspNetCore.DataProtection.KeyManagement.IKeyEscrowSink sink);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder AddKeyEscrowSink(class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, class Microsoft.AspNetCore.DataProtection.KeyManagement.IKeyEscrowSink sink) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.AddKeyEscrowSink(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,Microsoft.AspNetCore.DataProtection.KeyManagement.IKeyEscrowSink)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" RefType="this" />
          <Parameter Name="sink" Type="Microsoft.AspNetCore.DataProtection.KeyManagement.IKeyEscrowSink" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />.</param>
          <param name="sink">The instance of the <see cref="T:Microsoft.AspNetCore.DataProtection.KeyManagement.IKeyEscrowSink" /> to register.</param>
          <summary>
            Registers a <see cref="T:Microsoft.AspNetCore.DataProtection.KeyManagement.IKeyEscrowSink" /> to perform escrow before keys are persisted to storage.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions" Member="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.AddKeyEscrowSink(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,Microsoft.AspNetCore.DataProtection.KeyManagement.IKeyEscrowSink)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />
      </Targets>
      <Member MemberName="AddKeyEscrowSink">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder AddKeyEscrowSink (this Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, Func&lt;IServiceProvider,Microsoft.AspNetCore.DataProtection.KeyManagement.IKeyEscrowSink&gt; factory);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder AddKeyEscrowSink(class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, class System.Func`2&lt;class System.IServiceProvider, class Microsoft.AspNetCore.DataProtection.KeyManagement.IKeyEscrowSink&gt; factory) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.AddKeyEscrowSink(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,System.Func{System.IServiceProvider,Microsoft.AspNetCore.DataProtection.KeyManagement.IKeyEscrowSink})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" RefType="this" />
          <Parameter Name="factory" Type="System.Func&lt;System.IServiceProvider,Microsoft.AspNetCore.DataProtection.KeyManagement.IKeyEscrowSink&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />.</param>
          <param name="factory">A factory that creates the <see cref="T:Microsoft.AspNetCore.DataProtection.KeyManagement.IKeyEscrowSink" /> instance.</param>
          <summary>
            Registers a <see cref="T:Microsoft.AspNetCore.DataProtection.KeyManagement.IKeyEscrowSink" /> to perform escrow before keys are persisted to storage.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions" Member="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.AddKeyEscrowSink(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,System.Func{System.IServiceProvider,Microsoft.AspNetCore.DataProtection.KeyManagement.IKeyEscrowSink})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />
      </Targets>
      <Member MemberName="AddKeyEscrowSink&lt;TImplementation&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder AddKeyEscrowSink&lt;TImplementation&gt; (this Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder) where TImplementation : class, Microsoft.AspNetCore.DataProtection.KeyManagement.IKeyEscrowSink;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder AddKeyEscrowSink&lt;class (class Microsoft.AspNetCore.DataProtection.KeyManagement.IKeyEscrowSink) TImplementation&gt;(class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.AddKeyEscrowSink``1(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TImplementation">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
              <InterfaceName>Microsoft.AspNetCore.DataProtection.KeyManagement.IKeyEscrowSink</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TImplementation">The concrete type of the <see cref="T:Microsoft.AspNetCore.DataProtection.KeyManagement.IKeyEscrowSink" /> to register.</typeparam>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />.</param>
          <summary>
            Registers a <see cref="T:Microsoft.AspNetCore.DataProtection.KeyManagement.IKeyEscrowSink" /> to perform escrow before keys are persisted to storage.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions" Member="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.AddKeyEscrowSink``1(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />
      </Targets>
      <Member MemberName="AddKeyManagementOptions">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder AddKeyManagementOptions (this Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, Action&lt;Microsoft.AspNetCore.DataProtection.KeyManagement.KeyManagementOptions&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder AddKeyManagementOptions(class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, class System.Action`1&lt;class Microsoft.AspNetCore.DataProtection.KeyManagement.KeyManagementOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.AddKeyManagementOptions(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,System.Action{Microsoft.AspNetCore.DataProtection.KeyManagement.KeyManagementOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.AspNetCore.DataProtection.KeyManagement.KeyManagementOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />.</param>
          <param name="setupAction">An <see cref="T:System.Action`1" /> to configure the provided<see cref="T:Microsoft.AspNetCore.DataProtection.KeyManagement.KeyManagementOptions" />.</param>
          <summary>
            Configures the key management options for the data protection system.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions" Member="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.AddKeyManagementOptions(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,System.Action{Microsoft.AspNetCore.DataProtection.KeyManagement.KeyManagementOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />
      </Targets>
      <Member MemberName="DisableAutomaticKeyGeneration">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder DisableAutomaticKeyGeneration (this Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder DisableAutomaticKeyGeneration(class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.DisableAutomaticKeyGeneration(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />.</param>
          <summary>
            Configures the data protection system not to generate new keys automatically.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions" Member="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.DisableAutomaticKeyGeneration(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />
      </Targets>
      <Member MemberName="PersistKeysToFileSystem">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder PersistKeysToFileSystem (this Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, System.IO.DirectoryInfo directory);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder PersistKeysToFileSystem(class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, class System.IO.DirectoryInfo directory) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.PersistKeysToFileSystem(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,System.IO.DirectoryInfo)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" RefType="this" />
          <Parameter Name="directory" Type="System.IO.DirectoryInfo" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />.</param>
          <param name="directory">The directory in which to store keys.</param>
          <summary>
            Configures the data protection system to persist keys to the specified directory.
            This path may be on the local machine or may point to a UNC share.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions" Member="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.PersistKeysToFileSystem(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,System.IO.DirectoryInfo)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />
      </Targets>
      <Member MemberName="PersistKeysToRegistry">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder PersistKeysToRegistry (this Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, Microsoft.Win32.RegistryKey registryKey);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder PersistKeysToRegistry(class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, class Microsoft.Win32.RegistryKey registryKey) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.PersistKeysToRegistry(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,Microsoft.Win32.RegistryKey)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" RefType="this" />
          <Parameter Name="registryKey" Type="Microsoft.Win32.RegistryKey" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />.</param>
          <param name="registryKey">The location in the registry where keys should be stored.</param>
          <summary>
            Configures the data protection system to persist keys to the Windows registry.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions" Member="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.PersistKeysToRegistry(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,Microsoft.Win32.RegistryKey)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />
      </Targets>
      <Member MemberName="ProtectKeysWithCertificate">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder ProtectKeysWithCertificate (this Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, System.Security.Cryptography.X509Certificates.X509Certificate2 certificate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder ProtectKeysWithCertificate(class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, class System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.ProtectKeysWithCertificate(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,System.Security.Cryptography.X509Certificates.X509Certificate2)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" RefType="this" />
          <Parameter Name="certificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />.</param>
          <param name="certificate">The certificate to use when encrypting keys.</param>
          <summary>
            Configures keys to be encrypted to a given certificate before being persisted to storage.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions" Member="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.ProtectKeysWithCertificate(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,System.Security.Cryptography.X509Certificates.X509Certificate2)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />
      </Targets>
      <Member MemberName="ProtectKeysWithCertificate">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder ProtectKeysWithCertificate (this Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, string thumbprint);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder ProtectKeysWithCertificate(class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, string thumbprint) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.ProtectKeysWithCertificate(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" RefType="this" />
          <Parameter Name="thumbprint" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />.</param>
          <param name="thumbprint">The thumbprint of the certificate to use when encrypting keys.</param>
          <summary>
            Configures keys to be encrypted to a given certificate before being persisted to storage.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions" Member="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.ProtectKeysWithCertificate(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />
      </Targets>
      <Member MemberName="ProtectKeysWithDpapi">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder ProtectKeysWithDpapi (this Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder ProtectKeysWithDpapi(class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.ProtectKeysWithDpapi(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />.</param>
          <summary>
            Configures keys to be encrypted with Windows DPAPI before being persisted to
            storage. The encrypted key will only be decryptable by the current Windows user account.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions" Member="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.ProtectKeysWithDpapi(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />
      </Targets>
      <Member MemberName="ProtectKeysWithDpapi">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder ProtectKeysWithDpapi (this Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, bool protectToLocalMachine);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder ProtectKeysWithDpapi(class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, bool protectToLocalMachine) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.ProtectKeysWithDpapi(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,System.Boolean)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" RefType="this" />
          <Parameter Name="protectToLocalMachine" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />.</param>
          <param name="protectToLocalMachine">'true' if the key should be decryptable by any
            use on the local machine, 'false' if the key should only be decryptable by the current
            Windows user account.</param>
          <summary>
            Configures keys to be encrypted with Windows DPAPI before being persisted to
            storage.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions" Member="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.ProtectKeysWithDpapi(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />
      </Targets>
      <Member MemberName="ProtectKeysWithDpapiNG">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder ProtectKeysWithDpapiNG (this Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder ProtectKeysWithDpapiNG(class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.ProtectKeysWithDpapiNG(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />.</param>
          <summary>
            Configures keys to be encrypted with Windows CNG DPAPI before being persisted
            to storage. The keys will be decryptable by the current Windows user account.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions" Member="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.ProtectKeysWithDpapiNG(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />
      </Targets>
      <Member MemberName="ProtectKeysWithDpapiNG">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder ProtectKeysWithDpapiNG (this Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, string protectionDescriptorRule, Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiNGProtectionDescriptorFlags flags);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder ProtectKeysWithDpapiNG(class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, string protectionDescriptorRule, valuetype Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiNGProtectionDescriptorFlags flags) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.ProtectKeysWithDpapiNG(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,System.String,Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiNGProtectionDescriptorFlags)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" RefType="this" />
          <Parameter Name="protectionDescriptorRule" Type="System.String" />
          <Parameter Name="flags" Type="Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiNGProtectionDescriptorFlags" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />.</param>
          <param name="protectionDescriptorRule">The descriptor rule string with which to protect the key material.</param>
          <param name="flags">Flags that should be passed to the call to 'NCryptCreateProtectionDescriptor'.
            The default value of this parameter is <see cref="F:Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiNGProtectionDescriptorFlags.None" />.</param>
          <summary>
            Configures keys to be encrypted with Windows CNG DPAPI before being persisted to storage.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions" Member="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.ProtectKeysWithDpapiNG(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,System.String,Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiNGProtectionDescriptorFlags)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />
      </Targets>
      <Member MemberName="SetApplicationName">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder SetApplicationName (this Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, string applicationName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder SetApplicationName(class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, string applicationName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.SetApplicationName(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" RefType="this" />
          <Parameter Name="applicationName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />.</param>
          <param name="applicationName">The application name.</param>
          <summary>
            Sets the unique name of this application within the data protection system.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions" Member="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.SetApplicationName(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />
      </Targets>
      <Member MemberName="SetDefaultKeyLifetime">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder SetDefaultKeyLifetime (this Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, TimeSpan lifetime);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder SetDefaultKeyLifetime(class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, valuetype System.TimeSpan lifetime) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.SetDefaultKeyLifetime(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,System.TimeSpan)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" RefType="this" />
          <Parameter Name="lifetime" Type="System.TimeSpan" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />.</param>
          <param name="lifetime">The lifetime (time before expiration) for newly-created keys.
            See <see cref="P:Microsoft.AspNetCore.DataProtection.KeyManagement.KeyManagementOptions.NewKeyLifetime" /> for more information and
            usage notes.</param>
          <summary>
            Sets the default lifetime of keys created by the data protection system.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions" Member="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.SetDefaultKeyLifetime(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,System.TimeSpan)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />
      </Targets>
      <Member MemberName="UseCryptographicAlgorithms">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder UseCryptographicAlgorithms (this Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.AuthenticatedEncryptionSettings settings);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder UseCryptographicAlgorithms(class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, class Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.AuthenticatedEncryptionSettings settings) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.UseCryptographicAlgorithms(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.AuthenticatedEncryptionSettings)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" RefType="this" />
          <Parameter Name="settings" Type="Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.AuthenticatedEncryptionSettings" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />.</param>
          <param name="settings">Information about what cryptographic algorithms should be used.</param>
          <summary>
            Configures the data protection system to use the specified cryptographic algorithms
            by default when generating protected payloads.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions" Member="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.UseCryptographicAlgorithms(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.AuthenticatedEncryptionSettings)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />
      </Targets>
      <Member MemberName="UseCryptographicAlgorithms">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder UseCryptographicAlgorithms (this Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorConfiguration configuration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder UseCryptographicAlgorithms(class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, class Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorConfiguration configuration) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.UseCryptographicAlgorithms(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorConfiguration)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" RefType="this" />
          <Parameter Name="configuration" Type="Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorConfiguration" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />.</param>
          <param name="configuration">Information about what cryptographic algorithms should be used.</param>
          <summary>
            Configures the data protection system to use the specified cryptographic algorithms
            by default when generating protected payloads.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions" Member="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.UseCryptographicAlgorithms(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorConfiguration)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />
      </Targets>
      <Member MemberName="UseCustomCryptographicAlgorithms">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder UseCustomCryptographicAlgorithms (this Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.CngCbcAuthenticatedEncryptionSettings settings);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder UseCustomCryptographicAlgorithms(class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, class Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.CngCbcAuthenticatedEncryptionSettings settings) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.UseCustomCryptographicAlgorithms(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.CngCbcAuthenticatedEncryptionSettings)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" RefType="this" />
          <Parameter Name="settings" Type="Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.CngCbcAuthenticatedEncryptionSettings" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />.</param>
          <param name="settings">Information about what cryptographic algorithms should be used.</param>
          <summary>
            Configures the data protection system to use custom Windows CNG algorithms.
            This API is intended for advanced scenarios where the developer cannot use the
            algorithms specified in the <see cref="T:Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.EncryptionAlgorithm" /> and
            <see cref="T:Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ValidationAlgorithm" /> enumerations.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions" Member="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.UseCustomCryptographicAlgorithms(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.CngCbcAuthenticatedEncryptionSettings)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />
      </Targets>
      <Member MemberName="UseCustomCryptographicAlgorithms">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder UseCustomCryptographicAlgorithms (this Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.CngGcmAuthenticatedEncryptionSettings settings);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder UseCustomCryptographicAlgorithms(class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, class Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.CngGcmAuthenticatedEncryptionSettings settings) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.UseCustomCryptographicAlgorithms(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.CngGcmAuthenticatedEncryptionSettings)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" RefType="this" />
          <Parameter Name="settings" Type="Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.CngGcmAuthenticatedEncryptionSettings" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />.</param>
          <param name="settings">Information about what cryptographic algorithms should be used.</param>
          <summary>
            Configures the data protection system to use custom Windows CNG algorithms.
            This API is intended for advanced scenarios where the developer cannot use the
            algorithms specified in the <see cref="T:Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.EncryptionAlgorithm" /> and
            <see cref="T:Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ValidationAlgorithm" /> enumerations.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions" Member="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.UseCustomCryptographicAlgorithms(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.CngGcmAuthenticatedEncryptionSettings)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />
      </Targets>
      <Member MemberName="UseCustomCryptographicAlgorithms">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder UseCustomCryptographicAlgorithms (this Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.CngCbcAuthenticatedEncryptorConfiguration configuration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder UseCustomCryptographicAlgorithms(class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, class Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.CngCbcAuthenticatedEncryptorConfiguration configuration) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.UseCustomCryptographicAlgorithms(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.CngCbcAuthenticatedEncryptorConfiguration)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" RefType="this" />
          <Parameter Name="configuration" Type="Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.CngCbcAuthenticatedEncryptorConfiguration" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />.</param>
          <param name="configuration">Information about what cryptographic algorithms should be used.</param>
          <summary>
            Configures the data protection system to use custom Windows CNG algorithms.
            This API is intended for advanced scenarios where the developer cannot use the
            algorithms specified in the <see cref="T:Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.EncryptionAlgorithm" /> and
            <see cref="T:Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ValidationAlgorithm" /> enumerations.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions" Member="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.UseCustomCryptographicAlgorithms(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.CngCbcAuthenticatedEncryptorConfiguration)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />
      </Targets>
      <Member MemberName="UseCustomCryptographicAlgorithms">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder UseCustomCryptographicAlgorithms (this Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.CngGcmAuthenticatedEncryptorConfiguration configuration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder UseCustomCryptographicAlgorithms(class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, class Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.CngGcmAuthenticatedEncryptorConfiguration configuration) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.UseCustomCryptographicAlgorithms(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.CngGcmAuthenticatedEncryptorConfiguration)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" RefType="this" />
          <Parameter Name="configuration" Type="Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.CngGcmAuthenticatedEncryptorConfiguration" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />.</param>
          <param name="configuration">Information about what cryptographic algorithms should be used.</param>
          <summary>
            Configures the data protection system to use custom Windows CNG algorithms.
            This API is intended for advanced scenarios where the developer cannot use the
            algorithms specified in the <see cref="T:Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.EncryptionAlgorithm" /> and
            <see cref="T:Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ValidationAlgorithm" /> enumerations.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions" Member="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.UseCustomCryptographicAlgorithms(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.CngGcmAuthenticatedEncryptorConfiguration)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />
      </Targets>
      <Member MemberName="UseCustomCryptographicAlgorithms">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder UseCustomCryptographicAlgorithms (this Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.ManagedAuthenticatedEncryptorConfiguration configuration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder UseCustomCryptographicAlgorithms(class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, class Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.ManagedAuthenticatedEncryptorConfiguration configuration) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.UseCustomCryptographicAlgorithms(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.ManagedAuthenticatedEncryptorConfiguration)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" RefType="this" />
          <Parameter Name="configuration" Type="Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.ManagedAuthenticatedEncryptorConfiguration" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />.</param>
          <param name="configuration">Information about what cryptographic algorithms should be used.</param>
          <summary>
            Configures the data protection system to use custom algorithms.
            This API is intended for advanced scenarios where the developer cannot use the
            algorithms specified in the <see cref="T:Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.EncryptionAlgorithm" /> and
            <see cref="T:Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ValidationAlgorithm" /> enumerations.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions" Member="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.UseCustomCryptographicAlgorithms(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.ManagedAuthenticatedEncryptorConfiguration)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />
      </Targets>
      <Member MemberName="UseCustomCryptographicAlgorithms">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder UseCustomCryptographicAlgorithms (this Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ManagedAuthenticatedEncryptionSettings settings);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder UseCustomCryptographicAlgorithms(class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, class Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ManagedAuthenticatedEncryptionSettings settings) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.UseCustomCryptographicAlgorithms(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ManagedAuthenticatedEncryptionSettings)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" RefType="this" />
          <Parameter Name="settings" Type="Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ManagedAuthenticatedEncryptionSettings" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />.</param>
          <param name="settings">Information about what cryptographic algorithms should be used.</param>
          <summary>
            Configures the data protection system to use custom algorithms.
            This API is intended for advanced scenarios where the developer cannot use the
            algorithms specified in the <see cref="T:Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.EncryptionAlgorithm" /> and
            <see cref="T:Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ValidationAlgorithm" /> enumerations.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions" Member="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.UseCustomCryptographicAlgorithms(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ManagedAuthenticatedEncryptionSettings)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />
      </Targets>
      <Member MemberName="UseEphemeralDataProtectionProvider">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder UseEphemeralDataProtectionProvider (this Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder UseEphemeralDataProtectionProvider(class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.UseEphemeralDataProtectionProvider(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />.</param>
          <summary>
            Configures the data protection system to use the <see cref="T:Microsoft.AspNetCore.DataProtection.EphemeralDataProtectionProvider" />
            for data protection services.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions" Member="M:Microsoft.AspNetCore.DataProtection.DataProtectionBuilderExtensions.UseEphemeralDataProtectionProvider(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.IDataProtectionProvider" />
      </Targets>
      <Member MemberName="CreateProtector">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.IDataProtector CreateProtector (this Microsoft.AspNetCore.DataProtection.IDataProtectionProvider provider, System.Collections.Generic.IEnumerable&lt;string&gt; purposes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.IDataProtector CreateProtector(class Microsoft.AspNetCore.DataProtection.IDataProtectionProvider provider, class System.Collections.Generic.IEnumerable`1&lt;string&gt; purposes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensions.CreateProtector(Microsoft.AspNetCore.DataProtection.IDataProtectionProvider,System.Collections.Generic.IEnumerable{System.String})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.IDataProtector</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="provider" Type="Microsoft.AspNetCore.DataProtection.IDataProtectionProvider" RefType="this" />
          <Parameter Name="purposes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        </Parameters>
        <Docs>
          <param name="provider">The <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtectionProvider" /> from which to generate the purpose chain.</param>
          <param name="purposes">The list of purposes which contribute to the purpose chain. This list must
            contain at least one element, and it may not contain null elements.</param>
          <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtector" /> given a list of purposes.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensions" Member="M:Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensions.CreateProtector(Microsoft.AspNetCore.DataProtection.IDataProtectionProvider,System.Collections.Generic.IEnumerable{System.String})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.IDataProtectionProvider" />
      </Targets>
      <Member MemberName="CreateProtector">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.IDataProtector CreateProtector (this Microsoft.AspNetCore.DataProtection.IDataProtectionProvider provider, string purpose, string[] subPurposes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.IDataProtector CreateProtector(class Microsoft.AspNetCore.DataProtection.IDataProtectionProvider provider, string purpose, string[] subPurposes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensions.CreateProtector(Microsoft.AspNetCore.DataProtection.IDataProtectionProvider,System.String,System.String[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.IDataProtector</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="provider" Type="Microsoft.AspNetCore.DataProtection.IDataProtectionProvider" RefType="this" />
          <Parameter Name="purpose" Type="System.String" />
          <Parameter Name="subPurposes" Type="System.String[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="provider">The <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtectionProvider" /> from which to generate the purpose chain.</param>
          <param name="purpose">The primary purpose used to create the <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtector" />.</param>
          <param name="subPurposes">An optional list of secondary purposes which contribute to the purpose chain.
            If this list is provided it cannot contain null elements.</param>
          <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtector" /> given a list of purposes.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensions" Member="M:Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensions.CreateProtector(Microsoft.AspNetCore.DataProtection.IDataProtectionProvider,System.String,System.String[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IServiceProvider" />
      </Targets>
      <Member MemberName="GetDataProtectionProvider">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.IDataProtectionProvider GetDataProtectionProvider (this IServiceProvider services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.IDataProtectionProvider GetDataProtectionProvider(class System.IServiceProvider services) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensions.GetDataProtectionProvider(System.IServiceProvider)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.IDataProtectionProvider</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="System.IServiceProvider" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The service provider from which to retrieve the <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtectionProvider" />.</param>
          <summary>
            Retrieves an <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtectionProvider" /> from an <see cref="T:System.IServiceProvider" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensions" Member="M:Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensions.GetDataProtectionProvider(System.IServiceProvider)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IServiceProvider" />
      </Targets>
      <Member MemberName="GetDataProtector">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.IDataProtector GetDataProtector (this IServiceProvider services, System.Collections.Generic.IEnumerable&lt;string&gt; purposes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.IDataProtector GetDataProtector(class System.IServiceProvider services, class System.Collections.Generic.IEnumerable`1&lt;string&gt; purposes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensions.GetDataProtector(System.IServiceProvider,System.Collections.Generic.IEnumerable{System.String})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.IDataProtector</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="System.IServiceProvider" RefType="this" />
          <Parameter Name="purposes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        </Parameters>
        <Docs>
          <param name="services">An <see cref="T:System.IServiceProvider" /> which contains the <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtectionProvider" />
            from which to generate the purpose chain.</param>
          <param name="purposes">The list of purposes which contribute to the purpose chain. This list must
            contain at least one element, and it may not contain null elements.</param>
          <summary>
            Retrieves an <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtector" /> from an <see cref="T:System.IServiceProvider" /> given a list of purposes.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensions" Member="M:Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensions.GetDataProtector(System.IServiceProvider,System.Collections.Generic.IEnumerable{System.String})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IServiceProvider" />
      </Targets>
      <Member MemberName="GetDataProtector">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.IDataProtector GetDataProtector (this IServiceProvider services, string purpose, string[] subPurposes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.IDataProtector GetDataProtector(class System.IServiceProvider services, string purpose, string[] subPurposes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensions.GetDataProtector(System.IServiceProvider,System.String,System.String[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.IDataProtector</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="System.IServiceProvider" RefType="this" />
          <Parameter Name="purpose" Type="System.String" />
          <Parameter Name="subPurposes" Type="System.String[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="services">An <see cref="T:System.IServiceProvider" /> which contains the <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtectionProvider" />
            from which to generate the purpose chain.</param>
          <param name="purpose">The primary purpose used to create the <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtector" />.</param>
          <param name="subPurposes">An optional list of secondary purposes which contribute to the purpose chain.
            If this list is provided it cannot contain null elements.</param>
          <summary>
            Retrieves an <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtector" /> from an <see cref="T:System.IServiceProvider" /> given a list of purposes.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensions" Member="M:Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensions.GetDataProtector(System.IServiceProvider,System.String,System.String[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.IDataProtector" />
      </Targets>
      <Member MemberName="Protect">
        <MemberSignature Language="C#" Value="public static string Protect (this Microsoft.AspNetCore.DataProtection.IDataProtector protector, string plaintext);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Protect(class Microsoft.AspNetCore.DataProtection.IDataProtector protector, string plaintext) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensions.Protect(Microsoft.AspNetCore.DataProtection.IDataProtector,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="protector" Type="Microsoft.AspNetCore.DataProtection.IDataProtector" RefType="this" />
          <Parameter Name="plaintext" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="protector">The data protector to use for this operation.</param>
          <param name="plaintext">The plaintext data to protect.</param>
          <summary>
            Cryptographically protects a piece of plaintext data.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensions" Member="M:Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensions.Protect(Microsoft.AspNetCore.DataProtection.IDataProtector,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.IDataProtector" />
      </Targets>
      <Member MemberName="Unprotect">
        <MemberSignature Language="C#" Value="public static string Unprotect (this Microsoft.AspNetCore.DataProtection.IDataProtector protector, string protectedData);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Unprotect(class Microsoft.AspNetCore.DataProtection.IDataProtector protector, string protectedData) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensions.Unprotect(Microsoft.AspNetCore.DataProtection.IDataProtector,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="protector" Type="Microsoft.AspNetCore.DataProtection.IDataProtector" RefType="this" />
          <Parameter Name="protectedData" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="protector">The data protector to use for this operation.</param>
          <param name="protectedData">The protected data to unprotect.</param>
          <summary>
            Cryptographically unprotects a piece of protected data.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensions" Member="M:Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensions.Unprotect(Microsoft.AspNetCore.DataProtection.IDataProtector,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IServiceProvider" />
      </Targets>
      <Member MemberName="GetApplicationUniqueIdentifier">
        <MemberSignature Language="C#" Value="public static string GetApplicationUniqueIdentifier (this IServiceProvider services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetApplicationUniqueIdentifier(class System.IServiceProvider services) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.DataProtectionUtilityExtensions.GetApplicationUniqueIdentifier(System.IServiceProvider)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="System.IServiceProvider" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The application-level <see cref="T:System.IServiceProvider" />.</param>
          <summary>
            Returns a unique identifier for this application.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.DataProtectionUtilityExtensions" Member="M:Microsoft.AspNetCore.DataProtection.DataProtectionUtilityExtensions.GetApplicationUniqueIdentifier(System.IServiceProvider)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />
      </Targets>
      <Member MemberName="PersistKeysToRedis">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder PersistKeysToRedis (this Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, StackExchange.Redis.IConnectionMultiplexer connectionMultiplexer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder PersistKeysToRedis(class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, class StackExchange.Redis.IConnectionMultiplexer connectionMultiplexer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.RedisDataProtectionBuilderExtensions.PersistKeysToRedis(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,StackExchange.Redis.IConnectionMultiplexer)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" RefType="this" />
          <Parameter Name="connectionMultiplexer" Type="StackExchange.Redis.IConnectionMultiplexer" />
        </Parameters>
        <Docs>
          <param name="builder">The builder instance to modify.</param>
          <param name="connectionMultiplexer">The <see cref="T:StackExchange.Redis.IConnectionMultiplexer" /> for database access.</param>
          <summary>
            Configures the data protection system to persist keys to the default key ('DataProtection-Keys') in Redis database
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.RedisDataProtectionBuilderExtensions" Member="M:Microsoft.AspNetCore.DataProtection.RedisDataProtectionBuilderExtensions.PersistKeysToRedis(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,StackExchange.Redis.IConnectionMultiplexer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />
      </Targets>
      <Member MemberName="PersistKeysToRedis">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder PersistKeysToRedis (this Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, StackExchange.Redis.IConnectionMultiplexer connectionMultiplexer, StackExchange.Redis.RedisKey key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder PersistKeysToRedis(class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, class StackExchange.Redis.IConnectionMultiplexer connectionMultiplexer, valuetype StackExchange.Redis.RedisKey key) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.RedisDataProtectionBuilderExtensions.PersistKeysToRedis(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,StackExchange.Redis.IConnectionMultiplexer,StackExchange.Redis.RedisKey)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" RefType="this" />
          <Parameter Name="connectionMultiplexer" Type="StackExchange.Redis.IConnectionMultiplexer" />
          <Parameter Name="key" Type="StackExchange.Redis.RedisKey" />
        </Parameters>
        <Docs>
          <param name="builder">The builder instance to modify.</param>
          <param name="connectionMultiplexer">The <see cref="T:StackExchange.Redis.IConnectionMultiplexer" /> for database access.</param>
          <param name="key">The <see cref="T:StackExchange.Redis.RedisKey" /> used to store key list.</param>
          <summary>
            Configures the data protection system to persist keys to the specified key in Redis database
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.RedisDataProtectionBuilderExtensions" Member="M:Microsoft.AspNetCore.DataProtection.RedisDataProtectionBuilderExtensions.PersistKeysToRedis(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,StackExchange.Redis.IConnectionMultiplexer,StackExchange.Redis.RedisKey)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" />
      </Targets>
      <Member MemberName="PersistKeysToRedis">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder PersistKeysToRedis (this Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, Func&lt;StackExchange.Redis.IDatabase&gt; databaseFactory, StackExchange.Redis.RedisKey key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder PersistKeysToRedis(class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder builder, class System.Func`1&lt;class StackExchange.Redis.IDatabase&gt; databaseFactory, valuetype StackExchange.Redis.RedisKey key) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.DataProtection.RedisDataProtectionBuilderExtensions.PersistKeysToRedis(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,System.Func{StackExchange.Redis.IDatabase},StackExchange.Redis.RedisKey)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" RefType="this" />
          <Parameter Name="databaseFactory" Type="System.Func&lt;StackExchange.Redis.IDatabase&gt;" />
          <Parameter Name="key" Type="StackExchange.Redis.RedisKey" />
        </Parameters>
        <Docs>
          <param name="builder">The builder instance to modify.</param>
          <param name="databaseFactory">The delegate used to create <see cref="T:StackExchange.Redis.IDatabase" /> instances.</param>
          <param name="key">The <see cref="T:StackExchange.Redis.RedisKey" /> used to store key list.</param>
          <summary>
            Configures the data protection system to persist keys to specified key in Redis database
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.DataProtection.RedisDataProtectionBuilderExtensions" Member="M:Microsoft.AspNetCore.DataProtection.RedisDataProtectionBuilderExtensions.PersistKeysToRedis(Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder,System.Func{StackExchange.Redis.IDatabase},StackExchange.Redis.RedisKey)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" />
      </Targets>
      <Member MemberName="UseAzureAppServices">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Hosting.IWebHostBuilder UseAzureAppServices (this Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Hosting.IWebHostBuilder UseAzureAppServices(class Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.AppServicesWebHostBuilderExtensions.UseAzureAppServices(Microsoft.AspNetCore.Hosting.IWebHostBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Hosting.IWebHostBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="hostBuilder" Type="Microsoft.AspNetCore.Hosting.IWebHostBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="hostBuilder" />
          <summary>
            Configures application to use Azure AppServices integration.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.AppServicesWebHostBuilderExtensions" Member="M:Microsoft.AspNetCore.Hosting.AppServicesWebHostBuilderExtensions.UseAzureAppServices(Microsoft.AspNetCore.Hosting.IWebHostBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" />
      </Targets>
      <Member MemberName="CaptureStartupErrors">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Hosting.IWebHostBuilder CaptureStartupErrors (this Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, bool captureStartupErrors);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Hosting.IWebHostBuilder CaptureStartupErrors(class Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, bool captureStartupErrors) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.CaptureStartupErrors(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Boolean)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Hosting.IWebHostBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="hostBuilder" Type="Microsoft.AspNetCore.Hosting.IWebHostBuilder" RefType="this" />
          <Parameter Name="captureStartupErrors" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="hostBuilder">The <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" /> to configure.</param>
          <param name="captureStartupErrors">
            <c>true</c> to use startup error page; otherwise <c>false</c>.</param>
          <summary>
            Set whether startup errors should be captured in the configuration settings of the web host.
            When enabled, startup exceptions will be caught and an error page will be returned. If disabled, startup exceptions will be propagated.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions" Member="M:Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.CaptureStartupErrors(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" />
      </Targets>
      <Member MemberName="PreferHostingUrls">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Hosting.IWebHostBuilder PreferHostingUrls (this Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, bool preferHostingUrls);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Hosting.IWebHostBuilder PreferHostingUrls(class Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, bool preferHostingUrls) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.PreferHostingUrls(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Boolean)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Hosting.IWebHostBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="hostBuilder" Type="Microsoft.AspNetCore.Hosting.IWebHostBuilder" RefType="this" />
          <Parameter Name="preferHostingUrls" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="hostBuilder">The <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" /> to configure.</param>
          <param name="preferHostingUrls">
            <c>true</c> to prefer URLs configured on the <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" />; otherwise <c>false</c>.</param>
          <summary>
            Indicate whether the host should listen on the URLs configured on the <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" />
            instead of those configured on the <see cref="T:Microsoft.AspNetCore.Hosting.Server.IServer" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions" Member="M:Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.PreferHostingUrls(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" />
      </Targets>
      <Member MemberName="Start">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Hosting.IWebHost Start (this Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, string[] urls);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Hosting.IWebHost Start(class Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, string[] urls) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.Start(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.String[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Hosting.IWebHost</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="hostBuilder" Type="Microsoft.AspNetCore.Hosting.IWebHostBuilder" RefType="this" />
          <Parameter Name="urls" Type="System.String[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="hostBuilder">The <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" /> to start.</param>
          <param name="urls">The urls the hosted application will listen on.</param>
          <summary>
            Start the web host and listen on the speficied urls.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions" Member="M:Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.Start(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.String[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" />
      </Targets>
      <Member MemberName="UseConfiguration">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Hosting.IWebHostBuilder UseConfiguration (this Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, Microsoft.Extensions.Configuration.IConfiguration configuration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Hosting.IWebHostBuilder UseConfiguration(class Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, class Microsoft.Extensions.Configuration.IConfiguration configuration) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.UseConfiguration(Microsoft.AspNetCore.Hosting.IWebHostBuilder,Microsoft.Extensions.Configuration.IConfiguration)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Hosting.IWebHostBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="hostBuilder" Type="Microsoft.AspNetCore.Hosting.IWebHostBuilder" RefType="this" />
          <Parameter Name="configuration" Type="Microsoft.Extensions.Configuration.IConfiguration" />
        </Parameters>
        <Docs>
          <param name="hostBuilder">The <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" /> to configure.</param>
          <param name="configuration">The <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> containing settings to be used.</param>
          <summary>
            Use the given configuration settings on the web host.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions" Member="M:Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.UseConfiguration(Microsoft.AspNetCore.Hosting.IWebHostBuilder,Microsoft.Extensions.Configuration.IConfiguration)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" />
      </Targets>
      <Member MemberName="UseContentRoot">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Hosting.IWebHostBuilder UseContentRoot (this Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, string contentRoot);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Hosting.IWebHostBuilder UseContentRoot(class Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, string contentRoot) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.UseContentRoot(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Hosting.IWebHostBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="hostBuilder" Type="Microsoft.AspNetCore.Hosting.IWebHostBuilder" RefType="this" />
          <Parameter Name="contentRoot" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="hostBuilder">The <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" /> to configure.</param>
          <param name="contentRoot">Path to root directory of the application.</param>
          <summary>
            Specify the content root directory to be used by the web host.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions" Member="M:Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.UseContentRoot(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" />
      </Targets>
      <Member MemberName="UseEnvironment">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Hosting.IWebHostBuilder UseEnvironment (this Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, string environment);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Hosting.IWebHostBuilder UseEnvironment(class Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, string environment) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.UseEnvironment(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Hosting.IWebHostBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="hostBuilder" Type="Microsoft.AspNetCore.Hosting.IWebHostBuilder" RefType="this" />
          <Parameter Name="environment" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="hostBuilder">The <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" /> to configure.</param>
          <param name="environment">The environment to host the application in.</param>
          <summary>
            Specify the environment to be used by the web host.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions" Member="M:Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.UseEnvironment(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" />
      </Targets>
      <Member MemberName="UseServer">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Hosting.IWebHostBuilder UseServer (this Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, Microsoft.AspNetCore.Hosting.Server.IServer server);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Hosting.IWebHostBuilder UseServer(class Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, class Microsoft.AspNetCore.Hosting.Server.IServer server) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.UseServer(Microsoft.AspNetCore.Hosting.IWebHostBuilder,Microsoft.AspNetCore.Hosting.Server.IServer)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Hosting.IWebHostBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="hostBuilder" Type="Microsoft.AspNetCore.Hosting.IWebHostBuilder" RefType="this" />
          <Parameter Name="server" Type="Microsoft.AspNetCore.Hosting.Server.IServer" />
        </Parameters>
        <Docs>
          <param name="hostBuilder">The <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" /> to configure.</param>
          <param name="server">The <see cref="T:Microsoft.AspNetCore.Hosting.Server.IServer" /> to be used.</param>
          <summary>
            Specify the server to be used by the web host.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions" Member="M:Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.UseServer(Microsoft.AspNetCore.Hosting.IWebHostBuilder,Microsoft.AspNetCore.Hosting.Server.IServer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" />
      </Targets>
      <Member MemberName="UseShutdownTimeout">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Hosting.IWebHostBuilder UseShutdownTimeout (this Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, TimeSpan timeout);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Hosting.IWebHostBuilder UseShutdownTimeout(class Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, valuetype System.TimeSpan timeout) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.UseShutdownTimeout(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.TimeSpan)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Hosting.IWebHostBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="hostBuilder" Type="Microsoft.AspNetCore.Hosting.IWebHostBuilder" RefType="this" />
          <Parameter Name="timeout" Type="System.TimeSpan" />
        </Parameters>
        <Docs>
          <param name="hostBuilder">The <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" /> to configure.</param>
          <param name="timeout">The amount of time to wait for server shutdown.</param>
          <summary>
            Specify the amount of time to wait for the web host to shutdown.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions" Member="M:Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.UseShutdownTimeout(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.TimeSpan)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" />
      </Targets>
      <Member MemberName="UseStartup">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Hosting.IWebHostBuilder UseStartup (this Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, string startupAssemblyName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Hosting.IWebHostBuilder UseStartup(class Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, string startupAssemblyName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.UseStartup(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Hosting.IWebHostBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="hostBuilder" Type="Microsoft.AspNetCore.Hosting.IWebHostBuilder" RefType="this" />
          <Parameter Name="startupAssemblyName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="hostBuilder">The <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" /> to configure.</param>
          <param name="startupAssemblyName">The name of the assembly containing the startup type.</param>
          <summary>
            Specify the assembly containing the startup type to be used by the web host.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions" Member="M:Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.UseStartup(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" />
      </Targets>
      <Member MemberName="UseUrls">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Hosting.IWebHostBuilder UseUrls (this Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, string[] urls);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Hosting.IWebHostBuilder UseUrls(class Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, string[] urls) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.UseUrls(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.String[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Hosting.IWebHostBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="hostBuilder" Type="Microsoft.AspNetCore.Hosting.IWebHostBuilder" RefType="this" />
          <Parameter Name="urls" Type="System.String[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="hostBuilder">The <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" /> to configure.</param>
          <param name="urls">The urls the hosted application will listen on.</param>
          <summary>
            Specify the urls the web host will listen on.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions" Member="M:Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.UseUrls(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.String[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" />
      </Targets>
      <Member MemberName="UseWebRoot">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Hosting.IWebHostBuilder UseWebRoot (this Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, string webRoot);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Hosting.IWebHostBuilder UseWebRoot(class Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, string webRoot) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.UseWebRoot(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Hosting.IWebHostBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="hostBuilder" Type="Microsoft.AspNetCore.Hosting.IWebHostBuilder" RefType="this" />
          <Parameter Name="webRoot" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="hostBuilder">The <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" /> to configure.</param>
          <param name="webRoot">Path to the root directory used by the web server.</param>
          <summary>
            Specify the webroot directory to be used by the web host.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions" Member="M:Microsoft.AspNetCore.Hosting.HostingAbstractionsWebHostBuilderExtensions.UseWebRoot(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IHostingEnvironment" />
      </Targets>
      <Member MemberName="IsDevelopment">
        <MemberSignature Language="C#" Value="public static bool IsDevelopment (this Microsoft.AspNetCore.Hosting.IHostingEnvironment hostingEnvironment);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDevelopment(class Microsoft.AspNetCore.Hosting.IHostingEnvironment hostingEnvironment) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions.IsDevelopment(Microsoft.AspNetCore.Hosting.IHostingEnvironment)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="hostingEnvironment" Type="Microsoft.AspNetCore.Hosting.IHostingEnvironment" RefType="this" />
        </Parameters>
        <Docs>
          <param name="hostingEnvironment">An instance of <see cref="T:Microsoft.AspNetCore.Hosting.IHostingEnvironment" />.</param>
          <summary>
            Checks if the current hosting environment name is "Development".
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions" Member="M:Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions.IsDevelopment(Microsoft.AspNetCore.Hosting.IHostingEnvironment)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IHostingEnvironment" />
      </Targets>
      <Member MemberName="IsEnvironment">
        <MemberSignature Language="C#" Value="public static bool IsEnvironment (this Microsoft.AspNetCore.Hosting.IHostingEnvironment hostingEnvironment, string environmentName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEnvironment(class Microsoft.AspNetCore.Hosting.IHostingEnvironment hostingEnvironment, string environmentName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions.IsEnvironment(Microsoft.AspNetCore.Hosting.IHostingEnvironment,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="hostingEnvironment" Type="Microsoft.AspNetCore.Hosting.IHostingEnvironment" RefType="this" />
          <Parameter Name="environmentName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="hostingEnvironment">An instance of <see cref="T:Microsoft.AspNetCore.Hosting.IHostingEnvironment" />.</param>
          <param name="environmentName">Environment name to validate against.</param>
          <summary>
            Compares the current hosting environment name against the specified value.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions" Member="M:Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions.IsEnvironment(Microsoft.AspNetCore.Hosting.IHostingEnvironment,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IHostingEnvironment" />
      </Targets>
      <Member MemberName="IsProduction">
        <MemberSignature Language="C#" Value="public static bool IsProduction (this Microsoft.AspNetCore.Hosting.IHostingEnvironment hostingEnvironment);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsProduction(class Microsoft.AspNetCore.Hosting.IHostingEnvironment hostingEnvironment) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions.IsProduction(Microsoft.AspNetCore.Hosting.IHostingEnvironment)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="hostingEnvironment" Type="Microsoft.AspNetCore.Hosting.IHostingEnvironment" RefType="this" />
        </Parameters>
        <Docs>
          <param name="hostingEnvironment">An instance of <see cref="T:Microsoft.AspNetCore.Hosting.IHostingEnvironment" />.</param>
          <summary>
            Checks if the current hosting environment name is "Production".
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions" Member="M:Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions.IsProduction(Microsoft.AspNetCore.Hosting.IHostingEnvironment)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IHostingEnvironment" />
      </Targets>
      <Member MemberName="IsStaging">
        <MemberSignature Language="C#" Value="public static bool IsStaging (this Microsoft.AspNetCore.Hosting.IHostingEnvironment hostingEnvironment);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsStaging(class Microsoft.AspNetCore.Hosting.IHostingEnvironment hostingEnvironment) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions.IsStaging(Microsoft.AspNetCore.Hosting.IHostingEnvironment)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="hostingEnvironment" Type="Microsoft.AspNetCore.Hosting.IHostingEnvironment" RefType="this" />
        </Parameters>
        <Docs>
          <param name="hostingEnvironment">An instance of <see cref="T:Microsoft.AspNetCore.Hosting.IHostingEnvironment" />.</param>
          <summary>
            Checks if the current hosting environment name is "Staging".
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions" Member="M:Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions.IsStaging(Microsoft.AspNetCore.Hosting.IHostingEnvironment)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IHostingEnvironment" />
      </Targets>
      <Member MemberName="Initialize">
        <MemberSignature Language="C#" Value="public static void Initialize (this Microsoft.AspNetCore.Hosting.IHostingEnvironment hostingEnvironment, string applicationName, string contentRootPath, Microsoft.AspNetCore.Hosting.Internal.WebHostOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Initialize(class Microsoft.AspNetCore.Hosting.IHostingEnvironment hostingEnvironment, string applicationName, string contentRootPath, class Microsoft.AspNetCore.Hosting.Internal.WebHostOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.Internal.HostingEnvironmentExtensions.Initialize(Microsoft.AspNetCore.Hosting.IHostingEnvironment,System.String,System.String,Microsoft.AspNetCore.Hosting.Internal.WebHostOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="hostingEnvironment" Type="Microsoft.AspNetCore.Hosting.IHostingEnvironment" RefType="this" />
          <Parameter Name="applicationName" Type="System.String" />
          <Parameter Name="contentRootPath" Type="System.String" />
          <Parameter Name="options" Type="Microsoft.AspNetCore.Hosting.Internal.WebHostOptions" />
        </Parameters>
        <Docs>
          <param name="hostingEnvironment">To be added.</param>
          <param name="applicationName">To be added.</param>
          <param name="contentRootPath">To be added.</param>
          <param name="options">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.Internal.HostingEnvironmentExtensions" Member="M:Microsoft.AspNetCore.Hosting.Internal.HostingEnvironmentExtensions.Initialize(Microsoft.AspNetCore.Hosting.IHostingEnvironment,System.String,System.String,Microsoft.AspNetCore.Hosting.Internal.WebHostOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions" />
      </Targets>
      <Member MemberName="UseConnectionLogging">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions UseConnectionLogging (this Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions UseConnectionLogging(class Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.KestrelServerOptionsConnectionLoggingExtensions.UseConnectionLogging(Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="options" Type="Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions" RefType="this" />
        </Parameters>
        <Docs>
          <param name="options">To be added.</param>
          <summary>
            Emits verbose logs for bytes read from and written to the connection.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.KestrelServerOptionsConnectionLoggingExtensions" Member="M:Microsoft.AspNetCore.Hosting.KestrelServerOptionsConnectionLoggingExtensions.UseConnectionLogging(Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions" />
      </Targets>
      <Member MemberName="UseConnectionLogging">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions UseConnectionLogging (this Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions options, string loggerName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions UseConnectionLogging(class Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions options, string loggerName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.KestrelServerOptionsConnectionLoggingExtensions.UseConnectionLogging(Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="options" Type="Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions" RefType="this" />
          <Parameter Name="loggerName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="options">To be added.</param>
          <param name="loggerName">To be added.</param>
          <summary>
            Emits verbose logs for bytes read from and written to the connection.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.KestrelServerOptionsConnectionLoggingExtensions" Member="M:Microsoft.AspNetCore.Hosting.KestrelServerOptionsConnectionLoggingExtensions.UseConnectionLogging(Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions" />
      </Targets>
      <Member MemberName="UseHttps">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions UseHttps (this Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions options, Microsoft.AspNetCore.Server.Kestrel.Https.HttpsConnectionFilterOptions httpsOptions);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions UseHttps(class Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions options, class Microsoft.AspNetCore.Server.Kestrel.Https.HttpsConnectionFilterOptions httpsOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.KestrelServerOptionsHttpsExtensions.UseHttps(Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions,Microsoft.AspNetCore.Server.Kestrel.Https.HttpsConnectionFilterOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="options" Type="Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions" RefType="this" />
          <Parameter Name="httpsOptions" Type="Microsoft.AspNetCore.Server.Kestrel.Https.HttpsConnectionFilterOptions" />
        </Parameters>
        <Docs>
          <param name="options">
            The Microsoft.AspNetCore.Server.KestrelServerOptions to configure.
            </param>
          <param name="httpsOptions">
            Options to configure HTTPS.
            </param>
          <summary>
            Configure Kestrel to use HTTPS.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.KestrelServerOptionsHttpsExtensions" Member="M:Microsoft.AspNetCore.Hosting.KestrelServerOptionsHttpsExtensions.UseHttps(Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions,Microsoft.AspNetCore.Server.Kestrel.Https.HttpsConnectionFilterOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions" />
      </Targets>
      <Member MemberName="UseHttps">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions UseHttps (this Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions options, System.Security.Cryptography.X509Certificates.X509Certificate2 serverCertificate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions UseHttps(class Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions options, class System.Security.Cryptography.X509Certificates.X509Certificate2 serverCertificate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.KestrelServerOptionsHttpsExtensions.UseHttps(Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions,System.Security.Cryptography.X509Certificates.X509Certificate2)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="options" Type="Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions" RefType="this" />
          <Parameter Name="serverCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" />
        </Parameters>
        <Docs>
          <param name="options">
            The Microsoft.AspNetCore.Server.KestrelServerOptions to configure.
            </param>
          <param name="serverCertificate">
            The X.509 certificate.
            </param>
          <summary>
            Configure Kestrel to use HTTPS.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.KestrelServerOptionsHttpsExtensions" Member="M:Microsoft.AspNetCore.Hosting.KestrelServerOptionsHttpsExtensions.UseHttps(Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions,System.Security.Cryptography.X509Certificates.X509Certificate2)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions" />
      </Targets>
      <Member MemberName="UseHttps">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions UseHttps (this Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions options, string fileName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions UseHttps(class Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions options, string fileName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.KestrelServerOptionsHttpsExtensions.UseHttps(Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="options" Type="Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions" RefType="this" />
          <Parameter Name="fileName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="options">
            The Microsoft.AspNetCore.Server.KestrelServerOptions to configure.
            </param>
          <param name="fileName">
            The name of a certificate file, relative to the directory that contains the application content files.
            </param>
          <summary>
            Configure Kestrel to use HTTPS.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.KestrelServerOptionsHttpsExtensions" Member="M:Microsoft.AspNetCore.Hosting.KestrelServerOptionsHttpsExtensions.UseHttps(Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions" />
      </Targets>
      <Member MemberName="UseHttps">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions UseHttps (this Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions options, string fileName, string password);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions UseHttps(class Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions options, string fileName, string password) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.KestrelServerOptionsHttpsExtensions.UseHttps(Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="options" Type="Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions" RefType="this" />
          <Parameter Name="fileName" Type="System.String" />
          <Parameter Name="password" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="options">
            The Microsoft.AspNetCore.Server.KestrelServerOptions to configure.
            </param>
          <param name="fileName">
            The name of a certificate file, relative to the directory that contains the application content files.
            </param>
          <param name="password">
            The password required to access the X.509 certificate data.
            </param>
          <summary>
            Configure Kestrel to use HTTPS.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.KestrelServerOptionsHttpsExtensions" Member="M:Microsoft.AspNetCore.Hosting.KestrelServerOptionsHttpsExtensions.UseHttps(Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerOptions" />
      </Targets>
      <Member MemberName="UseSystemd">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerOptions UseSystemd (this Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerOptions UseSystemd(class Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.KestrelServerOptionsSystemdExtensions.UseSystemd(Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="options" Type="Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerOptions" RefType="this" />
        </Parameters>
        <Docs>
          <param name="options">To be added.</param>
          <summary>
            Open file descriptor (SD_LISTEN_FDS_START) initialized by systemd socket-based activation logic if available.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.KestrelServerOptionsSystemdExtensions" Member="M:Microsoft.AspNetCore.Hosting.KestrelServerOptionsSystemdExtensions.UseSystemd(Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerOptions" />
      </Targets>
      <Member MemberName="UseSystemd">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerOptions UseSystemd (this Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerOptions options, Action&lt;Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions&gt; configure);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerOptions UseSystemd(class Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerOptions options, class System.Action`1&lt;class Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions&gt; configure) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.KestrelServerOptionsSystemdExtensions.UseSystemd(Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerOptions,System.Action{Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="options" Type="Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerOptions" RefType="this" />
          <Parameter Name="configure" Type="System.Action&lt;Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="options">To be added.</param>
          <param name="configure">To be added.</param>
          <summary>
            Open file descriptor (SD_LISTEN_FDS_START) initialized by systemd socket-based activation logic if available.
            Specify callback to configure endpoint-specific settings.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.KestrelServerOptionsSystemdExtensions" Member="M:Microsoft.AspNetCore.Hosting.KestrelServerOptionsSystemdExtensions.UseSystemd(Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerOptions,System.Action{Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions" />
      </Targets>
      <Member MemberName="UseConnectionLogging">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions UseConnectionLogging (this Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions listenOptions);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions UseConnectionLogging(class Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions listenOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.ListenOptionsConnectionLoggingExtensions.UseConnectionLogging(Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="listenOptions" Type="Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions" RefType="this" />
        </Parameters>
        <Docs>
          <param name="listenOptions">To be added.</param>
          <summary>
            Emits verbose logs for bytes read from and written to the connection.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.ListenOptionsConnectionLoggingExtensions" Member="M:Microsoft.AspNetCore.Hosting.ListenOptionsConnectionLoggingExtensions.UseConnectionLogging(Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions" />
      </Targets>
      <Member MemberName="UseConnectionLogging">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions UseConnectionLogging (this Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions listenOptions, string loggerName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions UseConnectionLogging(class Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions listenOptions, string loggerName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.ListenOptionsConnectionLoggingExtensions.UseConnectionLogging(Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="listenOptions" Type="Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions" RefType="this" />
          <Parameter Name="loggerName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="listenOptions">To be added.</param>
          <param name="loggerName">To be added.</param>
          <summary>
            Emits verbose logs for bytes read from and written to the connection.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.ListenOptionsConnectionLoggingExtensions" Member="M:Microsoft.AspNetCore.Hosting.ListenOptionsConnectionLoggingExtensions.UseConnectionLogging(Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions" />
      </Targets>
      <Member MemberName="UseHttps">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions UseHttps (this Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions listenOptions, Microsoft.AspNetCore.Server.Kestrel.Https.HttpsConnectionAdapterOptions httpsOptions);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions UseHttps(class Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions listenOptions, class Microsoft.AspNetCore.Server.Kestrel.Https.HttpsConnectionAdapterOptions httpsOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.ListenOptionsHttpsExtensions.UseHttps(Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions,Microsoft.AspNetCore.Server.Kestrel.Https.HttpsConnectionAdapterOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="listenOptions" Type="Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions" RefType="this" />
          <Parameter Name="httpsOptions" Type="Microsoft.AspNetCore.Server.Kestrel.Https.HttpsConnectionAdapterOptions" />
        </Parameters>
        <Docs>
          <param name="listenOptions">
            The <see cref="T:Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions" /> to configure.
            </param>
          <param name="httpsOptions">
            Options to configure HTTPS.
            </param>
          <summary>
            Configure Kestrel to use HTTPS.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.ListenOptionsHttpsExtensions" Member="M:Microsoft.AspNetCore.Hosting.ListenOptionsHttpsExtensions.UseHttps(Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions,Microsoft.AspNetCore.Server.Kestrel.Https.HttpsConnectionAdapterOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions" />
      </Targets>
      <Member MemberName="UseHttps">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions UseHttps (this Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions listenOptions, System.Security.Cryptography.X509Certificates.X509Certificate2 serverCertificate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions UseHttps(class Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions listenOptions, class System.Security.Cryptography.X509Certificates.X509Certificate2 serverCertificate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.ListenOptionsHttpsExtensions.UseHttps(Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions,System.Security.Cryptography.X509Certificates.X509Certificate2)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="listenOptions" Type="Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions" RefType="this" />
          <Parameter Name="serverCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" />
        </Parameters>
        <Docs>
          <param name="listenOptions">
            The <see cref="T:Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions" /> to configure.
            </param>
          <param name="serverCertificate">
            The X.509 certificate.
            </param>
          <summary>
            Configure Kestrel to use HTTPS.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.ListenOptionsHttpsExtensions" Member="M:Microsoft.AspNetCore.Hosting.ListenOptionsHttpsExtensions.UseHttps(Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions,System.Security.Cryptography.X509Certificates.X509Certificate2)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions" />
      </Targets>
      <Member MemberName="UseHttps">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions UseHttps (this Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions listenOptions, string fileName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions UseHttps(class Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions listenOptions, string fileName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.ListenOptionsHttpsExtensions.UseHttps(Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="listenOptions" Type="Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions" RefType="this" />
          <Parameter Name="fileName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="listenOptions">
            The <see cref="T:Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions" /> to configure.
            </param>
          <param name="fileName">
            The name of a certificate file, relative to the directory that contains the application content files.
            </param>
          <summary>
            Configure Kestrel to use HTTPS.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.ListenOptionsHttpsExtensions" Member="M:Microsoft.AspNetCore.Hosting.ListenOptionsHttpsExtensions.UseHttps(Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions" />
      </Targets>
      <Member MemberName="UseHttps">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions UseHttps (this Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions listenOptions, string fileName, string password);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions UseHttps(class Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions listenOptions, string fileName, string password) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.ListenOptionsHttpsExtensions.UseHttps(Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="listenOptions" Type="Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions" RefType="this" />
          <Parameter Name="fileName" Type="System.String" />
          <Parameter Name="password" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="listenOptions">
            The <see cref="T:Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions" /> to configure.
            </param>
          <param name="fileName">
            The name of a certificate file, relative to the directory that contains the application content files.
            </param>
          <param name="password">
            The password required to access the X.509 certificate data.
            </param>
          <summary>
            Configure Kestrel to use HTTPS.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.ListenOptionsHttpsExtensions" Member="M:Microsoft.AspNetCore.Hosting.ListenOptionsHttpsExtensions.UseHttps(Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" />
      </Targets>
      <Member MemberName="Configure">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Hosting.IWebHostBuilder Configure (this Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; configureApp);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Hosting.IWebHostBuilder Configure(class Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, class System.Action`1&lt;class Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; configureApp) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.Configure(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Hosting.IWebHostBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="hostBuilder" Type="Microsoft.AspNetCore.Hosting.IWebHostBuilder" RefType="this" />
          <Parameter Name="configureApp" Type="System.Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="hostBuilder">The <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" /> to configure.</param>
          <param name="configureApp">The delegate that configures the <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />.</param>
          <summary>
            Specify the startup method to be used to configure the web application.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions" Member="M:Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.Configure(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" />
      </Targets>
      <Member MemberName="ConfigureAppConfiguration">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Hosting.IWebHostBuilder ConfigureAppConfiguration (this Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, Action&lt;Microsoft.Extensions.Configuration.IConfigurationBuilder&gt; configureDelegate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Hosting.IWebHostBuilder ConfigureAppConfiguration(class Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, class System.Action`1&lt;class Microsoft.Extensions.Configuration.IConfigurationBuilder&gt; configureDelegate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.ConfigureAppConfiguration(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Action{Microsoft.Extensions.Configuration.IConfigurationBuilder})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Hosting.IWebHostBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="hostBuilder" Type="Microsoft.AspNetCore.Hosting.IWebHostBuilder" RefType="this" />
          <Parameter Name="configureDelegate" Type="System.Action&lt;Microsoft.Extensions.Configuration.IConfigurationBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="hostBuilder">The <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" /> to configure.</param>
          <param name="configureDelegate">The delegate for configuring the <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> that will be used to construct an <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" />.</param>
          <summary>
            Adds a delegate for configuring the <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> that will construct an <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions" Member="M:Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.ConfigureAppConfiguration(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Action{Microsoft.Extensions.Configuration.IConfigurationBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" />
      </Targets>
      <Member MemberName="ConfigureLogging">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Hosting.IWebHostBuilder ConfigureLogging (this Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, Action&lt;Microsoft.AspNetCore.Hosting.WebHostBuilderContext,Microsoft.Extensions.Logging.ILoggingBuilder&gt; configureLogging);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Hosting.IWebHostBuilder ConfigureLogging(class Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, class System.Action`2&lt;class Microsoft.AspNetCore.Hosting.WebHostBuilderContext, class Microsoft.Extensions.Logging.ILoggingBuilder&gt; configureLogging) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.ConfigureLogging(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Action{Microsoft.AspNetCore.Hosting.WebHostBuilderContext,Microsoft.Extensions.Logging.ILoggingBuilder})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Hosting.IWebHostBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="hostBuilder" Type="Microsoft.AspNetCore.Hosting.IWebHostBuilder" RefType="this" />
          <Parameter Name="configureLogging" Type="System.Action&lt;Microsoft.AspNetCore.Hosting.WebHostBuilderContext,Microsoft.Extensions.Logging.ILoggingBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="hostBuilder">The <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" /> to configure.</param>
          <param name="configureLogging">The delegate that configures the <see cref="T:Microsoft.Extensions.Logging.LoggerFactory" />.</param>
          <summary>
            Adds a delegate for configuring the provided <see cref="T:Microsoft.Extensions.Logging.LoggerFactory" />. This may be called multiple times.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions" Member="M:Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.ConfigureLogging(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Action{Microsoft.AspNetCore.Hosting.WebHostBuilderContext,Microsoft.Extensions.Logging.ILoggingBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" />
      </Targets>
      <Member MemberName="ConfigureLogging">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Hosting.IWebHostBuilder ConfigureLogging (this Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, Action&lt;Microsoft.Extensions.Logging.ILoggingBuilder&gt; configureLogging);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Hosting.IWebHostBuilder ConfigureLogging(class Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, class System.Action`1&lt;class Microsoft.Extensions.Logging.ILoggingBuilder&gt; configureLogging) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.ConfigureLogging(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Action{Microsoft.Extensions.Logging.ILoggingBuilder})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Hosting.IWebHostBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="hostBuilder" Type="Microsoft.AspNetCore.Hosting.IWebHostBuilder" RefType="this" />
          <Parameter Name="configureLogging" Type="System.Action&lt;Microsoft.Extensions.Logging.ILoggingBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="hostBuilder">The <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" /> to configure.</param>
          <param name="configureLogging">The delegate that configures the <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" />.</param>
          <summary>
            Adds a delegate for configuring the provided <see cref="T:Microsoft.Extensions.Logging.LoggerFactory" />. This may be called multiple times.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions" Member="M:Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.ConfigureLogging(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Action{Microsoft.Extensions.Logging.ILoggingBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" />
      </Targets>
      <Member MemberName="UseDefaultServiceProvider">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Hosting.IWebHostBuilder UseDefaultServiceProvider (this Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, Action&lt;Microsoft.AspNetCore.Hosting.WebHostBuilderContext,Microsoft.Extensions.DependencyInjection.ServiceProviderOptions&gt; configure);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Hosting.IWebHostBuilder UseDefaultServiceProvider(class Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, class System.Action`2&lt;class Microsoft.AspNetCore.Hosting.WebHostBuilderContext, class Microsoft.Extensions.DependencyInjection.ServiceProviderOptions&gt; configure) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.UseDefaultServiceProvider(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Action{Microsoft.AspNetCore.Hosting.WebHostBuilderContext,Microsoft.Extensions.DependencyInjection.ServiceProviderOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Hosting.IWebHostBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="hostBuilder" Type="Microsoft.AspNetCore.Hosting.IWebHostBuilder" RefType="this" />
          <Parameter Name="configure" Type="System.Action&lt;Microsoft.AspNetCore.Hosting.WebHostBuilderContext,Microsoft.Extensions.DependencyInjection.ServiceProviderOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="hostBuilder">The <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" /> to configure.</param>
          <param name="configure">A callback used to configure the <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceProviderOptions" /> for the default <see cref="T:System.IServiceProvider" />.</param>
          <summary>
            Configures the default service provider
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions" Member="M:Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.UseDefaultServiceProvider(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Action{Microsoft.AspNetCore.Hosting.WebHostBuilderContext,Microsoft.Extensions.DependencyInjection.ServiceProviderOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" />
      </Targets>
      <Member MemberName="UseDefaultServiceProvider">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Hosting.IWebHostBuilder UseDefaultServiceProvider (this Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, Action&lt;Microsoft.Extensions.DependencyInjection.ServiceProviderOptions&gt; configure);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Hosting.IWebHostBuilder UseDefaultServiceProvider(class Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, class System.Action`1&lt;class Microsoft.Extensions.DependencyInjection.ServiceProviderOptions&gt; configure) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.UseDefaultServiceProvider(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Action{Microsoft.Extensions.DependencyInjection.ServiceProviderOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Hosting.IWebHostBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="hostBuilder" Type="Microsoft.AspNetCore.Hosting.IWebHostBuilder" RefType="this" />
          <Parameter Name="configure" Type="System.Action&lt;Microsoft.Extensions.DependencyInjection.ServiceProviderOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="hostBuilder">The <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" /> to configure.</param>
          <param name="configure">A callback used to configure the <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceProviderOptions" /> for the default <see cref="T:System.IServiceProvider" />.</param>
          <summary>
            Configures the default service provider
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions" Member="M:Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.UseDefaultServiceProvider(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Action{Microsoft.Extensions.DependencyInjection.ServiceProviderOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" />
      </Targets>
      <Member MemberName="UseStartup">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Hosting.IWebHostBuilder UseStartup (this Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, Type startupType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Hosting.IWebHostBuilder UseStartup(class Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, class System.Type startupType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.UseStartup(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Type)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Hosting.IWebHostBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="hostBuilder" Type="Microsoft.AspNetCore.Hosting.IWebHostBuilder" RefType="this" />
          <Parameter Name="startupType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="hostBuilder">The <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" /> to configure.</param>
          <param name="startupType">The <see cref="T:System.Type" /> to be used.</param>
          <summary>
            Specify the startup type to be used by the web host. 
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions" Member="M:Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.UseStartup(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" />
      </Targets>
      <Member MemberName="UseStartup&lt;TStartup&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Hosting.IWebHostBuilder UseStartup&lt;TStartup&gt; (this Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder) where TStartup : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Hosting.IWebHostBuilder UseStartup&lt;class TStartup&gt;(class Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.UseStartup``1(Microsoft.AspNetCore.Hosting.IWebHostBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Hosting.IWebHostBuilder</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TStartup">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="hostBuilder" Type="Microsoft.AspNetCore.Hosting.IWebHostBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TStartup">The type containing the startup methods for the application.</typeparam>
          <param name="hostBuilder">The <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" /> to configure.</param>
          <summary>
            Specify the startup type to be used by the web host.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions" Member="M:Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.UseStartup``1(Microsoft.AspNetCore.Hosting.IWebHostBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" />
      </Targets>
      <Member MemberName="UseHttpSys">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Hosting.IWebHostBuilder UseHttpSys (this Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Hosting.IWebHostBuilder UseHttpSys(class Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.WebHostBuilderHttpSysExtensions.UseHttpSys(Microsoft.AspNetCore.Hosting.IWebHostBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Hosting.IWebHostBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="hostBuilder" Type="Microsoft.AspNetCore.Hosting.IWebHostBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="hostBuilder">
            The Microsoft.AspNetCore.Hosting.IWebHostBuilder to configure.
            </param>
          <summary>
            Specify HttpSys as the server to be used by the web host.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.WebHostBuilderHttpSysExtensions" Member="M:Microsoft.AspNetCore.Hosting.WebHostBuilderHttpSysExtensions.UseHttpSys(Microsoft.AspNetCore.Hosting.IWebHostBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" />
      </Targets>
      <Member MemberName="UseHttpSys">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Hosting.IWebHostBuilder UseHttpSys (this Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, Action&lt;Microsoft.AspNetCore.Server.HttpSys.HttpSysOptions&gt; options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Hosting.IWebHostBuilder UseHttpSys(class Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, class System.Action`1&lt;class Microsoft.AspNetCore.Server.HttpSys.HttpSysOptions&gt; options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.WebHostBuilderHttpSysExtensions.UseHttpSys(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Action{Microsoft.AspNetCore.Server.HttpSys.HttpSysOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Hosting.IWebHostBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="hostBuilder" Type="Microsoft.AspNetCore.Hosting.IWebHostBuilder" RefType="this" />
          <Parameter Name="options" Type="System.Action&lt;Microsoft.AspNetCore.Server.HttpSys.HttpSysOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="hostBuilder">
            The Microsoft.AspNetCore.Hosting.IWebHostBuilder to configure.
            </param>
          <param name="options">
            A callback to configure HttpSys options.
            </param>
          <summary>
            Specify HttpSys as the server to be used by the web host.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.WebHostBuilderHttpSysExtensions" Member="M:Microsoft.AspNetCore.Hosting.WebHostBuilderHttpSysExtensions.UseHttpSys(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Action{Microsoft.AspNetCore.Server.HttpSys.HttpSysOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" />
      </Targets>
      <Member MemberName="UseIISIntegration">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Hosting.IWebHostBuilder UseIISIntegration (this Microsoft.AspNetCore.Hosting.IWebHostBuilder app);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Hosting.IWebHostBuilder UseIISIntegration(class Microsoft.AspNetCore.Hosting.IWebHostBuilder app) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.WebHostBuilderIISExtensions.UseIISIntegration(Microsoft.AspNetCore.Hosting.IWebHostBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Hosting.IWebHostBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="app" Type="Microsoft.AspNetCore.Hosting.IWebHostBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="app" />
          <summary>
            Configures the port and base path the server should listen on when running behind AspNetCoreModule.
            The app will also be configured to capture startup errors.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.WebHostBuilderIISExtensions" Member="M:Microsoft.AspNetCore.Hosting.WebHostBuilderIISExtensions.UseIISIntegration(Microsoft.AspNetCore.Hosting.IWebHostBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" />
      </Targets>
      <Member MemberName="UseKestrel">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Hosting.IWebHostBuilder UseKestrel (this Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Hosting.IWebHostBuilder UseKestrel(class Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.WebHostBuilderKestrelExtensions.UseKestrel(Microsoft.AspNetCore.Hosting.IWebHostBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Hosting.IWebHostBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="hostBuilder" Type="Microsoft.AspNetCore.Hosting.IWebHostBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="hostBuilder">
            The Microsoft.AspNetCore.Hosting.IWebHostBuilder to configure.
            </param>
          <summary>
            Specify Kestrel as the server to be used by the web host.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.WebHostBuilderKestrelExtensions" Member="M:Microsoft.AspNetCore.Hosting.WebHostBuilderKestrelExtensions.UseKestrel(Microsoft.AspNetCore.Hosting.IWebHostBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" />
      </Targets>
      <Member MemberName="UseKestrel">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Hosting.IWebHostBuilder UseKestrel (this Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, Action&lt;Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerOptions&gt; options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Hosting.IWebHostBuilder UseKestrel(class Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, class System.Action`1&lt;class Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerOptions&gt; options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.WebHostBuilderKestrelExtensions.UseKestrel(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Action{Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Hosting.IWebHostBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="hostBuilder" Type="Microsoft.AspNetCore.Hosting.IWebHostBuilder" RefType="this" />
          <Parameter Name="options" Type="System.Action&lt;Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="hostBuilder">
            The Microsoft.AspNetCore.Hosting.IWebHostBuilder to configure.
            </param>
          <param name="options">
            A callback to configure Kestrel options.
            </param>
          <summary>
            Specify Kestrel as the server to be used by the web host.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.WebHostBuilderKestrelExtensions" Member="M:Microsoft.AspNetCore.Hosting.WebHostBuilderKestrelExtensions.UseKestrel(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Action{Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" />
      </Targets>
      <Member MemberName="UseKestrel">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Hosting.IWebHostBuilder UseKestrel (this Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, Action&lt;Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions&gt; options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Hosting.IWebHostBuilder UseKestrel(class Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, class System.Action`1&lt;class Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions&gt; options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.WebHostBuilderKestrelExtensions.UseKestrel(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Action{Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Hosting.IWebHostBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="hostBuilder" Type="Microsoft.AspNetCore.Hosting.IWebHostBuilder" RefType="this" />
          <Parameter Name="options" Type="System.Action&lt;Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="hostBuilder">
            The Microsoft.AspNetCore.Hosting.IWebHostBuilder to configure.
            </param>
          <param name="options">
            A callback to configure Kestrel options.
            </param>
          <summary>
            Specify Kestrel as the server to be used by the web host.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.WebHostBuilderKestrelExtensions" Member="M:Microsoft.AspNetCore.Hosting.WebHostBuilderKestrelExtensions.UseKestrel(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Action{Microsoft.AspNetCore.Server.Kestrel.KestrelServerOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" />
      </Targets>
      <Member MemberName="UseLibuv">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Hosting.IWebHostBuilder UseLibuv (this Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Hosting.IWebHostBuilder UseLibuv(class Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.WebHostBuilderLibuvExtensions.UseLibuv(Microsoft.AspNetCore.Hosting.IWebHostBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Hosting.IWebHostBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="hostBuilder" Type="Microsoft.AspNetCore.Hosting.IWebHostBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="hostBuilder">
            The Microsoft.AspNetCore.Hosting.IWebHostBuilder to configure.
            </param>
          <summary>
            Specify Libuv as the transport to be used by Kestrel.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.WebHostBuilderLibuvExtensions" Member="M:Microsoft.AspNetCore.Hosting.WebHostBuilderLibuvExtensions.UseLibuv(Microsoft.AspNetCore.Hosting.IWebHostBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" />
      </Targets>
      <Member MemberName="UseLibuv">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Hosting.IWebHostBuilder UseLibuv (this Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, Action&lt;Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.LibuvTransportOptions&gt; configureOptions);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Hosting.IWebHostBuilder UseLibuv(class Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, class System.Action`1&lt;class Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.LibuvTransportOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.WebHostBuilderLibuvExtensions.UseLibuv(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Action{Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.LibuvTransportOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Hosting.IWebHostBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="hostBuilder" Type="Microsoft.AspNetCore.Hosting.IWebHostBuilder" RefType="this" />
          <Parameter Name="configureOptions" Type="System.Action&lt;Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.LibuvTransportOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="hostBuilder">
            The Microsoft.AspNetCore.Hosting.IWebHostBuilder to configure.
            </param>
          <param name="configureOptions">
            A callback to configure Libuv options.
            </param>
          <summary>
            Specify Libuv as the transport to be used by Kestrel.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.WebHostBuilderLibuvExtensions" Member="M:Microsoft.AspNetCore.Hosting.WebHostBuilderLibuvExtensions.UseLibuv(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Action{Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.LibuvTransportOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" />
      </Targets>
      <Member MemberName="UseWebListener">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Hosting.IWebHostBuilder UseWebListener (this Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Hosting.IWebHostBuilder UseWebListener(class Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.WebHostBuilderWebListenerExtensions.UseWebListener(Microsoft.AspNetCore.Hosting.IWebHostBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Hosting.IWebHostBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="hostBuilder" Type="Microsoft.AspNetCore.Hosting.IWebHostBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="hostBuilder">
            The Microsoft.AspNetCore.Hosting.IWebHostBuilder to configure.
            </param>
          <summary>
            Specify WebListener as the server to be used by the web host.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.WebHostBuilderWebListenerExtensions" Member="M:Microsoft.AspNetCore.Hosting.WebHostBuilderWebListenerExtensions.UseWebListener(Microsoft.AspNetCore.Hosting.IWebHostBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" />
      </Targets>
      <Member MemberName="UseWebListener">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Hosting.IWebHostBuilder UseWebListener (this Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, Action&lt;Microsoft.AspNetCore.Server.WebListener.WebListenerOptions&gt; options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Hosting.IWebHostBuilder UseWebListener(class Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder, class System.Action`1&lt;class Microsoft.AspNetCore.Server.WebListener.WebListenerOptions&gt; options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.WebHostBuilderWebListenerExtensions.UseWebListener(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Action{Microsoft.AspNetCore.Server.WebListener.WebListenerOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Hosting.IWebHostBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="hostBuilder" Type="Microsoft.AspNetCore.Hosting.IWebHostBuilder" RefType="this" />
          <Parameter Name="options" Type="System.Action&lt;Microsoft.AspNetCore.Server.WebListener.WebListenerOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="hostBuilder">
            The Microsoft.AspNetCore.Hosting.IWebHostBuilder to configure.
            </param>
          <param name="options">
            A callback to configure WebListener options.
            </param>
          <summary>
            Specify WebListener as the server to be used by the web host.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.WebHostBuilderWebListenerExtensions" Member="M:Microsoft.AspNetCore.Hosting.WebHostBuilderWebListenerExtensions.UseWebListener(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Action{Microsoft.AspNetCore.Server.WebListener.WebListenerOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IWebHost" />
      </Targets>
      <Member MemberName="Run">
        <MemberSignature Language="C#" Value="public static void Run (this Microsoft.AspNetCore.Hosting.IWebHost host);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run(class Microsoft.AspNetCore.Hosting.IWebHost host) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.WebHostExtensions.Run(Microsoft.AspNetCore.Hosting.IWebHost)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="host" Type="Microsoft.AspNetCore.Hosting.IWebHost" RefType="this" />
        </Parameters>
        <Docs>
          <param name="host">The <see cref="T:Microsoft.AspNetCore.Hosting.IWebHost" /> to run.</param>
          <summary>
            Runs a web application and block the calling thread until host shutdown.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.WebHostExtensions" Member="M:Microsoft.AspNetCore.Hosting.WebHostExtensions.Run(Microsoft.AspNetCore.Hosting.IWebHost)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IWebHost" />
      </Targets>
      <Member MemberName="Run">
        <MemberSignature Language="C#" Value="public static void Run (this Microsoft.AspNetCore.Hosting.IWebHost host, System.Threading.CancellationToken token);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run(class Microsoft.AspNetCore.Hosting.IWebHost host, valuetype System.Threading.CancellationToken token) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.WebHostExtensions.Run(Microsoft.AspNetCore.Hosting.IWebHost,System.Threading.CancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="host" Type="Microsoft.AspNetCore.Hosting.IWebHost" RefType="this" />
          <Parameter Name="token" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="host">The <see cref="T:Microsoft.AspNetCore.Hosting.IWebHost" /> to run.</param>
          <param name="token">The token to trigger shutdown.</param>
          <summary>
            Runs a web application and block the calling thread until token is triggered or shutdown is triggered.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.WebHostExtensions" Member="M:Microsoft.AspNetCore.Hosting.WebHostExtensions.Run(Microsoft.AspNetCore.Hosting.IWebHost,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IWebHost" />
      </Targets>
      <Member MemberName="RunAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task RunAsync (this Microsoft.AspNetCore.Hosting.IWebHost host, System.Threading.CancellationToken token = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task RunAsync(class Microsoft.AspNetCore.Hosting.IWebHost host, valuetype System.Threading.CancellationToken token) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.WebHostExtensions.RunAsync(Microsoft.AspNetCore.Hosting.IWebHost,System.Threading.CancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="host" Type="Microsoft.AspNetCore.Hosting.IWebHost" RefType="this" />
          <Parameter Name="token" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="host">The <see cref="T:Microsoft.AspNetCore.Hosting.IWebHost" /> to run.</param>
          <param name="token">The token to trigger shutdown.</param>
          <summary>
            Runs a web application and returns a Task that only completes when the token is triggered or shutdown is triggered.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.WebHostExtensions" Member="M:Microsoft.AspNetCore.Hosting.WebHostExtensions.RunAsync(Microsoft.AspNetCore.Hosting.IWebHost,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IWebHost" />
      </Targets>
      <Member MemberName="StopAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task StopAsync (this Microsoft.AspNetCore.Hosting.IWebHost host, TimeSpan timeout);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task StopAsync(class Microsoft.AspNetCore.Hosting.IWebHost host, valuetype System.TimeSpan timeout) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.WebHostExtensions.StopAsync(Microsoft.AspNetCore.Hosting.IWebHost,System.TimeSpan)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="host" Type="Microsoft.AspNetCore.Hosting.IWebHost" RefType="this" />
          <Parameter Name="timeout" Type="System.TimeSpan" />
        </Parameters>
        <Docs>
          <param name="host" />
          <param name="timeout">The timeout for stopping gracefully. Once expired the
            server may terminate any remaining active connections.</param>
          <summary>
            Attempts to gracefully stop the host with the given timeout.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.WebHostExtensions" Member="M:Microsoft.AspNetCore.Hosting.WebHostExtensions.StopAsync(Microsoft.AspNetCore.Hosting.IWebHost,System.TimeSpan)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IWebHost" />
      </Targets>
      <Member MemberName="WaitForShutdown">
        <MemberSignature Language="C#" Value="public static void WaitForShutdown (this Microsoft.AspNetCore.Hosting.IWebHost host);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WaitForShutdown(class Microsoft.AspNetCore.Hosting.IWebHost host) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.WebHostExtensions.WaitForShutdown(Microsoft.AspNetCore.Hosting.IWebHost)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="host" Type="Microsoft.AspNetCore.Hosting.IWebHost" RefType="this" />
        </Parameters>
        <Docs>
          <param name="host">The running <see cref="T:Microsoft.AspNetCore.Hosting.IWebHost" />.</param>
          <summary>
            Block the calling thread until shutdown is triggered via Ctrl+C or SIGTERM.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.WebHostExtensions" Member="M:Microsoft.AspNetCore.Hosting.WebHostExtensions.WaitForShutdown(Microsoft.AspNetCore.Hosting.IWebHost)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IWebHost" />
      </Targets>
      <Member MemberName="WaitForShutdownAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task WaitForShutdownAsync (this Microsoft.AspNetCore.Hosting.IWebHost host, System.Threading.CancellationToken token = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task WaitForShutdownAsync(class Microsoft.AspNetCore.Hosting.IWebHost host, valuetype System.Threading.CancellationToken token) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.WebHostExtensions.WaitForShutdownAsync(Microsoft.AspNetCore.Hosting.IWebHost,System.Threading.CancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="host" Type="Microsoft.AspNetCore.Hosting.IWebHost" RefType="this" />
          <Parameter Name="token" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="host">The running <see cref="T:Microsoft.AspNetCore.Hosting.IWebHost" />.</param>
          <param name="token">The token to trigger shutdown.</param>
          <summary>
            Returns a Task that completes when shutdown is triggered via the given token, Ctrl+C or SIGTERM.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.WebHostExtensions" Member="M:Microsoft.AspNetCore.Hosting.WebHostExtensions.WaitForShutdownAsync(Microsoft.AspNetCore.Hosting.IWebHost,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Hosting.IWebHost" />
      </Targets>
      <Member MemberName="RunAsService">
        <MemberSignature Language="C#" Value="public static void RunAsService (this Microsoft.AspNetCore.Hosting.IWebHost host);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RunAsService(class Microsoft.AspNetCore.Hosting.IWebHost host) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Hosting.WindowsServices.WebHostWindowsServiceExtensions.RunAsService(Microsoft.AspNetCore.Hosting.IWebHost)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="host" Type="Microsoft.AspNetCore.Hosting.IWebHost" RefType="this" />
        </Parameters>
        <Docs>
          <param name="host">An instance of the <see cref="T:Microsoft.AspNetCore.Hosting.IWebHost" /> to host in the Windows service.</param>
          <summary>
                Runs the specified web application inside a Windows service and blocks until the service is stopped.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Hosting.WindowsServices.WebHostWindowsServiceExtensions" Member="M:Microsoft.AspNetCore.Hosting.WindowsServices.WebHostWindowsServiceExtensions.RunAsService(Microsoft.AspNetCore.Hosting.IWebHost)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Html.IHtmlContentBuilder" />
      </Targets>
      <Member MemberName="AppendFormat">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContentBuilder AppendFormat (this Microsoft.AspNetCore.Html.IHtmlContentBuilder builder, IFormatProvider formatProvider, string format, object[] args);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContentBuilder AppendFormat(class Microsoft.AspNetCore.Html.IHtmlContentBuilder builder, class System.IFormatProvider formatProvider, string format, object[] args) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions.AppendFormat(Microsoft.AspNetCore.Html.IHtmlContentBuilder,System.IFormatProvider,System.String,System.Object[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContentBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Html.IHtmlContentBuilder" RefType="this" />
          <Parameter Name="formatProvider" Type="System.IFormatProvider" />
          <Parameter Name="format" Type="System.String" />
          <Parameter Name="args" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Html.IHtmlContentBuilder" />.</param>
          <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
          <param name="format">
            The composite format <see cref="T:System.String" /> (see http://msdn.microsoft.com/en-us/library/txafckwd.aspx).
            The format string is assumed to be HTML encoded as-provided, and no further encoding will be performed.
            </param>
          <param name="args">
            The object array to format. Each element in the array will be formatted and then HTML encoded.
            </param>
          <summary>
            Appends the specified <paramref name="format" /> to the existing content with information from the
            <paramref name="formatProvider" /> after replacing each format item with the HTML encoded
            <see cref="T:System.String" /> representation of the corresponding item in the <paramref name="args" /> array.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions" Member="M:Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions.AppendFormat(Microsoft.AspNetCore.Html.IHtmlContentBuilder,System.IFormatProvider,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Html.IHtmlContentBuilder" />
      </Targets>
      <Member MemberName="AppendFormat">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContentBuilder AppendFormat (this Microsoft.AspNetCore.Html.IHtmlContentBuilder builder, string format, object[] args);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContentBuilder AppendFormat(class Microsoft.AspNetCore.Html.IHtmlContentBuilder builder, string format, object[] args) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions.AppendFormat(Microsoft.AspNetCore.Html.IHtmlContentBuilder,System.String,System.Object[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContentBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Html.IHtmlContentBuilder" RefType="this" />
          <Parameter Name="format" Type="System.String" />
          <Parameter Name="args" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Html.IHtmlContentBuilder" />.</param>
          <param name="format">
            The composite format <see cref="T:System.String" /> (see http://msdn.microsoft.com/en-us/library/txafckwd.aspx).
            The format string is assumed to be HTML encoded as-provided, and no further encoding will be performed.
            </param>
          <param name="args">
            The object array to format. Each element in the array will be formatted and then HTML encoded.
            </param>
          <summary>
            Appends the specified <paramref name="format" /> to the existing content after replacing each format
            item with the HTML encoded <see cref="T:System.String" /> representation of the corresponding item in the
            <paramref name="args" /> array.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions" Member="M:Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions.AppendFormat(Microsoft.AspNetCore.Html.IHtmlContentBuilder,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Html.IHtmlContentBuilder" />
      </Targets>
      <Member MemberName="AppendHtmlLine">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContentBuilder AppendHtmlLine (this Microsoft.AspNetCore.Html.IHtmlContentBuilder builder, string encoded);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContentBuilder AppendHtmlLine(class Microsoft.AspNetCore.Html.IHtmlContentBuilder builder, string encoded) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions.AppendHtmlLine(Microsoft.AspNetCore.Html.IHtmlContentBuilder,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContentBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Html.IHtmlContentBuilder" RefType="this" />
          <Parameter Name="encoded" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Html.IHtmlContentBuilder" />.</param>
          <param name="encoded">The HTML encoded <see cref="T:System.String" /> to append.</param>
          <summary>
            Appends an <see cref="P:System.Environment.NewLine" /> after appending the <see cref="T:System.String" /> value.
            The value is treated as HTML encoded as-provided, and no further encoding will be performed.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions" Member="M:Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions.AppendHtmlLine(Microsoft.AspNetCore.Html.IHtmlContentBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Html.IHtmlContentBuilder" />
      </Targets>
      <Member MemberName="AppendLine">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContentBuilder AppendLine (this Microsoft.AspNetCore.Html.IHtmlContentBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContentBuilder AppendLine(class Microsoft.AspNetCore.Html.IHtmlContentBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions.AppendLine(Microsoft.AspNetCore.Html.IHtmlContentBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContentBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Html.IHtmlContentBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Html.IHtmlContentBuilder" />.</param>
          <summary>
            Appends an <see cref="P:System.Environment.NewLine" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions" Member="M:Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions.AppendLine(Microsoft.AspNetCore.Html.IHtmlContentBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Html.IHtmlContentBuilder" />
      </Targets>
      <Member MemberName="AppendLine">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContentBuilder AppendLine (this Microsoft.AspNetCore.Html.IHtmlContentBuilder builder, Microsoft.AspNetCore.Html.IHtmlContent content);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContentBuilder AppendLine(class Microsoft.AspNetCore.Html.IHtmlContentBuilder builder, class Microsoft.AspNetCore.Html.IHtmlContent content) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions.AppendLine(Microsoft.AspNetCore.Html.IHtmlContentBuilder,Microsoft.AspNetCore.Html.IHtmlContent)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContentBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Html.IHtmlContentBuilder" RefType="this" />
          <Parameter Name="content" Type="Microsoft.AspNetCore.Html.IHtmlContent" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Html.IHtmlContentBuilder" />.</param>
          <param name="content">The <see cref="T:Microsoft.AspNetCore.Html.IHtmlContent" /> to append.</param>
          <summary>
            Appends an <see cref="P:System.Environment.NewLine" /> after appending the <see cref="T:Microsoft.AspNetCore.Html.IHtmlContent" /> value.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions" Member="M:Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions.AppendLine(Microsoft.AspNetCore.Html.IHtmlContentBuilder,Microsoft.AspNetCore.Html.IHtmlContent)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Html.IHtmlContentBuilder" />
      </Targets>
      <Member MemberName="AppendLine">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContentBuilder AppendLine (this Microsoft.AspNetCore.Html.IHtmlContentBuilder builder, string unencoded);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContentBuilder AppendLine(class Microsoft.AspNetCore.Html.IHtmlContentBuilder builder, string unencoded) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions.AppendLine(Microsoft.AspNetCore.Html.IHtmlContentBuilder,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContentBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Html.IHtmlContentBuilder" RefType="this" />
          <Parameter Name="unencoded" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Html.IHtmlContentBuilder" />.</param>
          <param name="unencoded">The <see cref="T:System.String" /> to append.</param>
          <summary>
            Appends an <see cref="P:System.Environment.NewLine" /> after appending the <see cref="T:System.String" /> value.
            The value is treated as unencoded as-provided, and will be HTML encoded before writing to output.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions" Member="M:Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions.AppendLine(Microsoft.AspNetCore.Html.IHtmlContentBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Html.IHtmlContentBuilder" />
      </Targets>
      <Member MemberName="SetContent">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContentBuilder SetContent (this Microsoft.AspNetCore.Html.IHtmlContentBuilder builder, string unencoded);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContentBuilder SetContent(class Microsoft.AspNetCore.Html.IHtmlContentBuilder builder, string unencoded) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions.SetContent(Microsoft.AspNetCore.Html.IHtmlContentBuilder,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContentBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Html.IHtmlContentBuilder" RefType="this" />
          <Parameter Name="unencoded" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Html.IHtmlContentBuilder" />.</param>
          <param name="unencoded">The <see cref="T:System.String" /> value that replaces the content.</param>
          <summary>
            Sets the content to the <see cref="T:System.String" /> value. The value is treated as unencoded as-provided,
            and will be HTML encoded before writing to output.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions" Member="M:Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions.SetContent(Microsoft.AspNetCore.Html.IHtmlContentBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Html.IHtmlContentBuilder" />
      </Targets>
      <Member MemberName="SetHtmlContent">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContentBuilder SetHtmlContent (this Microsoft.AspNetCore.Html.IHtmlContentBuilder builder, Microsoft.AspNetCore.Html.IHtmlContent content);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContentBuilder SetHtmlContent(class Microsoft.AspNetCore.Html.IHtmlContentBuilder builder, class Microsoft.AspNetCore.Html.IHtmlContent content) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions.SetHtmlContent(Microsoft.AspNetCore.Html.IHtmlContentBuilder,Microsoft.AspNetCore.Html.IHtmlContent)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContentBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Html.IHtmlContentBuilder" RefType="this" />
          <Parameter Name="content" Type="Microsoft.AspNetCore.Html.IHtmlContent" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Html.IHtmlContentBuilder" />.</param>
          <param name="content">The <see cref="T:Microsoft.AspNetCore.Html.IHtmlContent" /> value that replaces the content.</param>
          <summary>
            Sets the content to the <see cref="T:Microsoft.AspNetCore.Html.IHtmlContent" /> value.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions" Member="M:Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions.SetHtmlContent(Microsoft.AspNetCore.Html.IHtmlContentBuilder,Microsoft.AspNetCore.Html.IHtmlContent)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Html.IHtmlContentBuilder" />
      </Targets>
      <Member MemberName="SetHtmlContent">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContentBuilder SetHtmlContent (this Microsoft.AspNetCore.Html.IHtmlContentBuilder builder, string encoded);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContentBuilder SetHtmlContent(class Microsoft.AspNetCore.Html.IHtmlContentBuilder builder, string encoded) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions.SetHtmlContent(Microsoft.AspNetCore.Html.IHtmlContentBuilder,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContentBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Html.IHtmlContentBuilder" RefType="this" />
          <Parameter Name="encoded" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Html.IHtmlContentBuilder" />.</param>
          <param name="encoded">The HTML encoded <see cref="T:System.String" /> that replaces the content.</param>
          <summary>
            Sets the content to the <see cref="T:System.String" /> value. The value is treated as HTML encoded as-provided, and
            no further encoding will be performed.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions" Member="M:Microsoft.AspNetCore.Html.HtmlContentBuilderExtensions.SetHtmlContent(Microsoft.AspNetCore.Html.IHtmlContentBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.HttpRequest" />
      </Targets>
      <Member MemberName="GetMultipartBoundary">
        <MemberSignature Language="C#" Value="public static string GetMultipartBoundary (this Microsoft.AspNetCore.Http.HttpRequest request);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetMultipartBoundary(class Microsoft.AspNetCore.Http.HttpRequest request) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Http.Extensions.HttpRequestMultipartExtensions.GetMultipartBoundary(Microsoft.AspNetCore.Http.HttpRequest)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="Microsoft.AspNetCore.Http.HttpRequest" RefType="this" />
        </Parameters>
        <Docs>
          <param name="request">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Http.Extensions.HttpRequestMultipartExtensions" Member="M:Microsoft.AspNetCore.Http.Extensions.HttpRequestMultipartExtensions.GetMultipartBoundary(Microsoft.AspNetCore.Http.HttpRequest)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.HttpRequest" />
      </Targets>
      <Member MemberName="GetDisplayUrl">
        <MemberSignature Language="C#" Value="public static string GetDisplayUrl (this Microsoft.AspNetCore.Http.HttpRequest request);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetDisplayUrl(class Microsoft.AspNetCore.Http.HttpRequest request) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Http.Extensions.UriHelper.GetDisplayUrl(Microsoft.AspNetCore.Http.HttpRequest)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="Microsoft.AspNetCore.Http.HttpRequest" RefType="this" />
        </Parameters>
        <Docs>
          <param name="request">The request to assemble the uri pieces from.</param>
          <summary>
            Returns the combined components of the request URL in a fully un-escaped form (except for the QueryString)
            suitable only for display. This format should not be used in HTTP headers or other HTTP operations.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Http.Extensions.UriHelper" Member="M:Microsoft.AspNetCore.Http.Extensions.UriHelper.GetDisplayUrl(Microsoft.AspNetCore.Http.HttpRequest)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.HttpRequest" />
      </Targets>
      <Member MemberName="GetEncodedPathAndQuery">
        <MemberSignature Language="C#" Value="public static string GetEncodedPathAndQuery (this Microsoft.AspNetCore.Http.HttpRequest request);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetEncodedPathAndQuery(class Microsoft.AspNetCore.Http.HttpRequest request) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Http.Extensions.UriHelper.GetEncodedPathAndQuery(Microsoft.AspNetCore.Http.HttpRequest)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="Microsoft.AspNetCore.Http.HttpRequest" RefType="this" />
        </Parameters>
        <Docs>
          <param name="request">The request to assemble the uri pieces from.</param>
          <summary>
            Returns the relative url 
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Http.Extensions.UriHelper" Member="M:Microsoft.AspNetCore.Http.Extensions.UriHelper.GetEncodedPathAndQuery(Microsoft.AspNetCore.Http.HttpRequest)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.HttpRequest" />
      </Targets>
      <Member MemberName="GetEncodedUrl">
        <MemberSignature Language="C#" Value="public static string GetEncodedUrl (this Microsoft.AspNetCore.Http.HttpRequest request);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetEncodedUrl(class Microsoft.AspNetCore.Http.HttpRequest request) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Http.Extensions.UriHelper.GetEncodedUrl(Microsoft.AspNetCore.Http.HttpRequest)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="Microsoft.AspNetCore.Http.HttpRequest" RefType="this" />
        </Parameters>
        <Docs>
          <param name="request">The request to assemble the uri pieces from.</param>
          <summary>
            Returns the combined components of the request URL in a fully escaped form suitable for use in HTTP headers
            and other HTTP operations.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Http.Extensions.UriHelper" Member="M:Microsoft.AspNetCore.Http.Extensions.UriHelper.GetEncodedUrl(Microsoft.AspNetCore.Http.HttpRequest)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.IHeaderDictionary" />
      </Targets>
      <Member MemberName="Append">
        <MemberSignature Language="C#" Value="public static void Append (this Microsoft.AspNetCore.Http.IHeaderDictionary headers, string key, Microsoft.Extensions.Primitives.StringValues value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Append(class Microsoft.AspNetCore.Http.IHeaderDictionary headers, string key, valuetype Microsoft.Extensions.Primitives.StringValues value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Http.HeaderDictionaryExtensions.Append(Microsoft.AspNetCore.Http.IHeaderDictionary,System.String,Microsoft.Extensions.Primitives.StringValues)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="headers" Type="Microsoft.AspNetCore.Http.IHeaderDictionary" RefType="this" />
          <Parameter Name="key" Type="System.String" />
          <Parameter Name="value" Type="Microsoft.Extensions.Primitives.StringValues" />
        </Parameters>
        <Docs>
          <param name="headers">The <see cref="T:Microsoft.AspNetCore.Http.IHeaderDictionary" /> to use.</param>
          <param name="key">The header name.</param>
          <param name="value">The header value.</param>
          <summary>
            Add new values. Each item remains a separate array entry.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Http.HeaderDictionaryExtensions" Member="M:Microsoft.AspNetCore.Http.HeaderDictionaryExtensions.Append(Microsoft.AspNetCore.Http.IHeaderDictionary,System.String,Microsoft.Extensions.Primitives.StringValues)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.IHeaderDictionary" />
      </Targets>
      <Member MemberName="AppendCommaSeparatedValues">
        <MemberSignature Language="C#" Value="public static void AppendCommaSeparatedValues (this Microsoft.AspNetCore.Http.IHeaderDictionary headers, string key, string[] values);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AppendCommaSeparatedValues(class Microsoft.AspNetCore.Http.IHeaderDictionary headers, string key, string[] values) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Http.HeaderDictionaryExtensions.AppendCommaSeparatedValues(Microsoft.AspNetCore.Http.IHeaderDictionary,System.String,System.String[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="headers" Type="Microsoft.AspNetCore.Http.IHeaderDictionary" RefType="this" />
          <Parameter Name="key" Type="System.String" />
          <Parameter Name="values" Type="System.String[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="headers">The <see cref="T:Microsoft.AspNetCore.Http.IHeaderDictionary" /> to use.</param>
          <param name="key">The header name.</param>
          <param name="values">The header values.</param>
          <summary>
            Quotes any values containing comas, and then coma joins all of the values with any existing values.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Http.HeaderDictionaryExtensions" Member="M:Microsoft.AspNetCore.Http.HeaderDictionaryExtensions.AppendCommaSeparatedValues(Microsoft.AspNetCore.Http.IHeaderDictionary,System.String,System.String[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.IHeaderDictionary" />
      </Targets>
      <Member MemberName="GetCommaSeparatedValues">
        <MemberSignature Language="C#" Value="public static string[] GetCommaSeparatedValues (this Microsoft.AspNetCore.Http.IHeaderDictionary headers, string key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetCommaSeparatedValues(class Microsoft.AspNetCore.Http.IHeaderDictionary headers, string key) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Http.HeaderDictionaryExtensions.GetCommaSeparatedValues(Microsoft.AspNetCore.Http.IHeaderDictionary,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String[]</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="headers" Type="Microsoft.AspNetCore.Http.IHeaderDictionary" RefType="this" />
          <Parameter Name="key" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="headers">The <see cref="T:Microsoft.AspNetCore.Http.IHeaderDictionary" /> to use.</param>
          <param name="key">The header name.</param>
          <summary>
            Get the associated values from the collection separated into individual values.
            Quoted values will not be split, and the quotes will be removed.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Http.HeaderDictionaryExtensions" Member="M:Microsoft.AspNetCore.Http.HeaderDictionaryExtensions.GetCommaSeparatedValues(Microsoft.AspNetCore.Http.IHeaderDictionary,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.IHeaderDictionary" />
      </Targets>
      <Member MemberName="SetCommaSeparatedValues">
        <MemberSignature Language="C#" Value="public static void SetCommaSeparatedValues (this Microsoft.AspNetCore.Http.IHeaderDictionary headers, string key, string[] values);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCommaSeparatedValues(class Microsoft.AspNetCore.Http.IHeaderDictionary headers, string key, string[] values) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Http.HeaderDictionaryExtensions.SetCommaSeparatedValues(Microsoft.AspNetCore.Http.IHeaderDictionary,System.String,System.String[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="headers" Type="Microsoft.AspNetCore.Http.IHeaderDictionary" RefType="this" />
          <Parameter Name="key" Type="System.String" />
          <Parameter Name="values" Type="System.String[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="headers">The <see cref="T:Microsoft.AspNetCore.Http.IHeaderDictionary" /> to use.</param>
          <param name="key">The header name.</param>
          <param name="values">The header values.</param>
          <summary>
            Quotes any values containing comas, and then coma joins all of the values.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Http.HeaderDictionaryExtensions" Member="M:Microsoft.AspNetCore.Http.HeaderDictionaryExtensions.SetCommaSeparatedValues(Microsoft.AspNetCore.Http.IHeaderDictionary,System.String,System.String[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.IHeaderDictionary" />
      </Targets>
      <Member MemberName="AppendList&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static void AppendList&lt;T&gt; (this Microsoft.AspNetCore.Http.IHeaderDictionary Headers, string name, System.Collections.Generic.IList&lt;T&gt; values);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AppendList&lt;T&gt;(class Microsoft.AspNetCore.Http.IHeaderDictionary Headers, string name, class System.Collections.Generic.IList`1&lt;!!T&gt; values) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Http.HeaderDictionaryTypeExtensions.AppendList``1(Microsoft.AspNetCore.Http.IHeaderDictionary,System.String,System.Collections.Generic.IList{``0})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="Headers" Type="Microsoft.AspNetCore.Http.IHeaderDictionary" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="values" Type="System.Collections.Generic.IList&lt;T&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="Headers">To be added.</param>
          <param name="name">To be added.</param>
          <param name="values">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Http.HeaderDictionaryTypeExtensions" Member="M:Microsoft.AspNetCore.Http.HeaderDictionaryTypeExtensions.AppendList``1(Microsoft.AspNetCore.Http.IHeaderDictionary,System.String,System.Collections.Generic.IList{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.HttpRequest" />
      </Targets>
      <Member MemberName="GetTypedHeaders">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Http.Headers.RequestHeaders GetTypedHeaders (this Microsoft.AspNetCore.Http.HttpRequest request);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Http.Headers.RequestHeaders GetTypedHeaders(class Microsoft.AspNetCore.Http.HttpRequest request) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Http.HeaderDictionaryTypeExtensions.GetTypedHeaders(Microsoft.AspNetCore.Http.HttpRequest)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Http.Headers.RequestHeaders</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="Microsoft.AspNetCore.Http.HttpRequest" RefType="this" />
        </Parameters>
        <Docs>
          <param name="request">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Http.HeaderDictionaryTypeExtensions" Member="M:Microsoft.AspNetCore.Http.HeaderDictionaryTypeExtensions.GetTypedHeaders(Microsoft.AspNetCore.Http.HttpRequest)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.HttpResponse" />
      </Targets>
      <Member MemberName="GetTypedHeaders">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Http.Headers.ResponseHeaders GetTypedHeaders (this Microsoft.AspNetCore.Http.HttpResponse response);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Http.Headers.ResponseHeaders GetTypedHeaders(class Microsoft.AspNetCore.Http.HttpResponse response) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Http.HeaderDictionaryTypeExtensions.GetTypedHeaders(Microsoft.AspNetCore.Http.HttpResponse)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Http.Headers.ResponseHeaders</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="response" Type="Microsoft.AspNetCore.Http.HttpResponse" RefType="this" />
        </Parameters>
        <Docs>
          <param name="response">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Http.HeaderDictionaryTypeExtensions" Member="M:Microsoft.AspNetCore.Http.HeaderDictionaryTypeExtensions.GetTypedHeaders(Microsoft.AspNetCore.Http.HttpResponse)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.HttpResponse" />
      </Targets>
      <Member MemberName="WriteAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task WriteAsync (this Microsoft.AspNetCore.Http.HttpResponse response, string text, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task WriteAsync(class Microsoft.AspNetCore.Http.HttpResponse response, string text, class System.Text.Encoding encoding, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Http.HttpResponseWritingExtensions.WriteAsync(Microsoft.AspNetCore.Http.HttpResponse,System.String,System.Text.Encoding,System.Threading.CancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="response" Type="Microsoft.AspNetCore.Http.HttpResponse" RefType="this" />
          <Parameter Name="text" Type="System.String" />
          <Parameter Name="encoding" Type="System.Text.Encoding" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="response">The <see cref="T:Microsoft.AspNetCore.Http.HttpResponse" />.</param>
          <param name="text">The text to write to the response.</param>
          <param name="encoding">The encoding to use.</param>
          <param name="cancellationToken">Notifies when request operations should be cancelled.</param>
          <summary>
            Writes the given text to the response body using the given encoding.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Http.HttpResponseWritingExtensions" Member="M:Microsoft.AspNetCore.Http.HttpResponseWritingExtensions.WriteAsync(Microsoft.AspNetCore.Http.HttpResponse,System.String,System.Text.Encoding,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.HttpResponse" />
      </Targets>
      <Member MemberName="WriteAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task WriteAsync (this Microsoft.AspNetCore.Http.HttpResponse response, string text, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task WriteAsync(class Microsoft.AspNetCore.Http.HttpResponse response, string text, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Http.HttpResponseWritingExtensions.WriteAsync(Microsoft.AspNetCore.Http.HttpResponse,System.String,System.Threading.CancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="response" Type="Microsoft.AspNetCore.Http.HttpResponse" RefType="this" />
          <Parameter Name="text" Type="System.String" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="response">The <see cref="T:Microsoft.AspNetCore.Http.HttpResponse" />.</param>
          <param name="text">The text to write to the response.</param>
          <param name="cancellationToken">Notifies when request operations should be cancelled.</param>
          <summary>
            Writes the given text to the response body. UTF-8 encoding will be used.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Http.HttpResponseWritingExtensions" Member="M:Microsoft.AspNetCore.Http.HttpResponseWritingExtensions.WriteAsync(Microsoft.AspNetCore.Http.HttpResponse,System.String,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.HttpRequest" />
      </Targets>
      <Member MemberName="EnableRewind">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Http.HttpRequest EnableRewind (this Microsoft.AspNetCore.Http.HttpRequest request, int bufferThreshold = 30720, Nullable&lt;long&gt; bufferLimit = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Http.HttpRequest EnableRewind(class Microsoft.AspNetCore.Http.HttpRequest request, int32 bufferThreshold, valuetype System.Nullable`1&lt;int64&gt; bufferLimit) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Http.Internal.BufferingHelper.EnableRewind(Microsoft.AspNetCore.Http.HttpRequest,System.Int32,System.Nullable{System.Int64})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Http.HttpRequest</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="Microsoft.AspNetCore.Http.HttpRequest" RefType="this" />
          <Parameter Name="bufferThreshold" Type="System.Int32" />
          <Parameter Name="bufferLimit" Type="System.Nullable&lt;System.Int64&gt;" />
        </Parameters>
        <Docs>
          <param name="request">To be added.</param>
          <param name="bufferThreshold">To be added.</param>
          <param name="bufferLimit">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Http.Internal.BufferingHelper" Member="M:Microsoft.AspNetCore.Http.Internal.BufferingHelper.EnableRewind(Microsoft.AspNetCore.Http.HttpRequest,System.Int32,System.Nullable{System.Int64})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.WebUtilities.MultipartSection" />
      </Targets>
      <Member MemberName="EnableRewind">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.WebUtilities.MultipartSection EnableRewind (this Microsoft.AspNetCore.WebUtilities.MultipartSection section, Action&lt;IDisposable&gt; registerForDispose, int bufferThreshold = 30720, Nullable&lt;long&gt; bufferLimit = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.WebUtilities.MultipartSection EnableRewind(class Microsoft.AspNetCore.WebUtilities.MultipartSection section, class System.Action`1&lt;class System.IDisposable&gt; registerForDispose, int32 bufferThreshold, valuetype System.Nullable`1&lt;int64&gt; bufferLimit) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Http.Internal.BufferingHelper.EnableRewind(Microsoft.AspNetCore.WebUtilities.MultipartSection,System.Action{System.IDisposable},System.Int32,System.Nullable{System.Int64})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.WebUtilities.MultipartSection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="section" Type="Microsoft.AspNetCore.WebUtilities.MultipartSection" RefType="this" />
          <Parameter Name="registerForDispose" Type="System.Action&lt;System.IDisposable&gt;" />
          <Parameter Name="bufferThreshold" Type="System.Int32" />
          <Parameter Name="bufferLimit" Type="System.Nullable&lt;System.Int64&gt;" />
        </Parameters>
        <Docs>
          <param name="section">To be added.</param>
          <param name="registerForDispose">To be added.</param>
          <param name="bufferThreshold">To be added.</param>
          <param name="bufferLimit">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Http.Internal.BufferingHelper" Member="M:Microsoft.AspNetCore.Http.Internal.BufferingHelper.EnableRewind(Microsoft.AspNetCore.WebUtilities.MultipartSection,System.Action{System.IDisposable},System.Int32,System.Nullable{System.Int64})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.HttpRequest" />
      </Targets>
      <Member MemberName="ReadFormAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Http.IFormCollection&gt; ReadFormAsync (this Microsoft.AspNetCore.Http.HttpRequest request, Microsoft.AspNetCore.Http.Features.FormOptions options, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Http.IFormCollection&gt; ReadFormAsync(class Microsoft.AspNetCore.Http.HttpRequest request, class Microsoft.AspNetCore.Http.Features.FormOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Http.RequestFormReaderExtensions.ReadFormAsync(Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.Features.FormOptions,System.Threading.CancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Http.IFormCollection&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="Microsoft.AspNetCore.Http.HttpRequest" RefType="this" />
          <Parameter Name="options" Type="Microsoft.AspNetCore.Http.Features.FormOptions" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="request">The request.</param>
          <param name="options">Options for reading the form.</param>
          <param name="cancellationToken" />
          <summary>
            Read the request body as a form with the given options. These options will only be used
            if the form has not already been read.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Http.RequestFormReaderExtensions" Member="M:Microsoft.AspNetCore.Http.RequestFormReaderExtensions.ReadFormAsync(Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.Features.FormOptions,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.HttpResponse" />
      </Targets>
      <Member MemberName="Clear">
        <MemberSignature Language="C#" Value="public static void Clear (this Microsoft.AspNetCore.Http.HttpResponse response);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Clear(class Microsoft.AspNetCore.Http.HttpResponse response) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Http.ResponseExtensions.Clear(Microsoft.AspNetCore.Http.HttpResponse)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="response" Type="Microsoft.AspNetCore.Http.HttpResponse" RefType="this" />
        </Parameters>
        <Docs>
          <param name="response">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Http.ResponseExtensions" Member="M:Microsoft.AspNetCore.Http.ResponseExtensions.Clear(Microsoft.AspNetCore.Http.HttpResponse)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.HttpResponse" />
      </Targets>
      <Member MemberName="SendFileAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SendFileAsync (this Microsoft.AspNetCore.Http.HttpResponse response, Microsoft.Extensions.FileProviders.IFileInfo file, long offset, Nullable&lt;long&gt; count, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SendFileAsync(class Microsoft.AspNetCore.Http.HttpResponse response, class Microsoft.Extensions.FileProviders.IFileInfo file, int64 offset, valuetype System.Nullable`1&lt;int64&gt; count, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Http.SendFileResponseExtensions.SendFileAsync(Microsoft.AspNetCore.Http.HttpResponse,Microsoft.Extensions.FileProviders.IFileInfo,System.Int64,System.Nullable{System.Int64},System.Threading.CancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="response" Type="Microsoft.AspNetCore.Http.HttpResponse" RefType="this" />
          <Parameter Name="file" Type="Microsoft.Extensions.FileProviders.IFileInfo" />
          <Parameter Name="offset" Type="System.Int64" />
          <Parameter Name="count" Type="System.Nullable&lt;System.Int64&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="response" />
          <param name="file">The file.</param>
          <param name="offset">The offset in the file.</param>
          <param name="count">The number of bytes to send, or null to send the remainder of the file.</param>
          <param name="cancellationToken" />
          <summary>
            Sends the given file using the SendFile extension.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Http.SendFileResponseExtensions" Member="M:Microsoft.AspNetCore.Http.SendFileResponseExtensions.SendFileAsync(Microsoft.AspNetCore.Http.HttpResponse,Microsoft.Extensions.FileProviders.IFileInfo,System.Int64,System.Nullable{System.Int64},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.HttpResponse" />
      </Targets>
      <Member MemberName="SendFileAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SendFileAsync (this Microsoft.AspNetCore.Http.HttpResponse response, Microsoft.Extensions.FileProviders.IFileInfo file, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SendFileAsync(class Microsoft.AspNetCore.Http.HttpResponse response, class Microsoft.Extensions.FileProviders.IFileInfo file, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Http.SendFileResponseExtensions.SendFileAsync(Microsoft.AspNetCore.Http.HttpResponse,Microsoft.Extensions.FileProviders.IFileInfo,System.Threading.CancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="response" Type="Microsoft.AspNetCore.Http.HttpResponse" RefType="this" />
          <Parameter Name="file" Type="Microsoft.Extensions.FileProviders.IFileInfo" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="response" />
          <param name="file">The file.</param>
          <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" />.</param>
          <summary>
            Sends the given file using the SendFile extension.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Http.SendFileResponseExtensions" Member="M:Microsoft.AspNetCore.Http.SendFileResponseExtensions.SendFileAsync(Microsoft.AspNetCore.Http.HttpResponse,Microsoft.Extensions.FileProviders.IFileInfo,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.HttpResponse" />
      </Targets>
      <Member MemberName="SendFileAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SendFileAsync (this Microsoft.AspNetCore.Http.HttpResponse response, string fileName, long offset, Nullable&lt;long&gt; count, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SendFileAsync(class Microsoft.AspNetCore.Http.HttpResponse response, string fileName, int64 offset, valuetype System.Nullable`1&lt;int64&gt; count, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Http.SendFileResponseExtensions.SendFileAsync(Microsoft.AspNetCore.Http.HttpResponse,System.String,System.Int64,System.Nullable{System.Int64},System.Threading.CancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="response" Type="Microsoft.AspNetCore.Http.HttpResponse" RefType="this" />
          <Parameter Name="fileName" Type="System.String" />
          <Parameter Name="offset" Type="System.Int64" />
          <Parameter Name="count" Type="System.Nullable&lt;System.Int64&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="response" />
          <param name="fileName">The full path to the file.</param>
          <param name="offset">The offset in the file.</param>
          <param name="count">The number of bytes to send, or null to send the remainder of the file.</param>
          <param name="cancellationToken" />
          <summary>
            Sends the given file using the SendFile extension.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Http.SendFileResponseExtensions" Member="M:Microsoft.AspNetCore.Http.SendFileResponseExtensions.SendFileAsync(Microsoft.AspNetCore.Http.HttpResponse,System.String,System.Int64,System.Nullable{System.Int64},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.HttpResponse" />
      </Targets>
      <Member MemberName="SendFileAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SendFileAsync (this Microsoft.AspNetCore.Http.HttpResponse response, string fileName, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SendFileAsync(class Microsoft.AspNetCore.Http.HttpResponse response, string fileName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Http.SendFileResponseExtensions.SendFileAsync(Microsoft.AspNetCore.Http.HttpResponse,System.String,System.Threading.CancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="response" Type="Microsoft.AspNetCore.Http.HttpResponse" RefType="this" />
          <Parameter Name="fileName" Type="System.String" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="response" />
          <param name="fileName">The full path to the file.</param>
          <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" />.</param>
          <summary>
            Sends the given file using the SendFile extension.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Http.SendFileResponseExtensions" Member="M:Microsoft.AspNetCore.Http.SendFileResponseExtensions.SendFileAsync(Microsoft.AspNetCore.Http.HttpResponse,System.String,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.ISession" />
      </Targets>
      <Member MemberName="Get">
        <MemberSignature Language="C#" Value="public static byte[] Get (this Microsoft.AspNetCore.Http.ISession session, string key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] Get(class Microsoft.AspNetCore.Http.ISession session, string key) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Http.SessionExtensions.Get(Microsoft.AspNetCore.Http.ISession,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Byte[]</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="session" Type="Microsoft.AspNetCore.Http.ISession" RefType="this" />
          <Parameter Name="key" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="session">To be added.</param>
          <param name="key">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Http.SessionExtensions" Member="M:Microsoft.AspNetCore.Http.SessionExtensions.Get(Microsoft.AspNetCore.Http.ISession,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.ISession" />
      </Targets>
      <Member MemberName="GetInt32">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; GetInt32 (this Microsoft.AspNetCore.Http.ISession session, string key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; GetInt32(class Microsoft.AspNetCore.Http.ISession session, string key) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Http.SessionExtensions.GetInt32(Microsoft.AspNetCore.Http.ISession,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="session" Type="Microsoft.AspNetCore.Http.ISession" RefType="this" />
          <Parameter Name="key" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="session">To be added.</param>
          <param name="key">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Http.SessionExtensions" Member="M:Microsoft.AspNetCore.Http.SessionExtensions.GetInt32(Microsoft.AspNetCore.Http.ISession,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.ISession" />
      </Targets>
      <Member MemberName="GetString">
        <MemberSignature Language="C#" Value="public static string GetString (this Microsoft.AspNetCore.Http.ISession session, string key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetString(class Microsoft.AspNetCore.Http.ISession session, string key) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Http.SessionExtensions.GetString(Microsoft.AspNetCore.Http.ISession,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="session" Type="Microsoft.AspNetCore.Http.ISession" RefType="this" />
          <Parameter Name="key" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="session">To be added.</param>
          <param name="key">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Http.SessionExtensions" Member="M:Microsoft.AspNetCore.Http.SessionExtensions.GetString(Microsoft.AspNetCore.Http.ISession,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.ISession" />
      </Targets>
      <Member MemberName="SetInt32">
        <MemberSignature Language="C#" Value="public static void SetInt32 (this Microsoft.AspNetCore.Http.ISession session, string key, int value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetInt32(class Microsoft.AspNetCore.Http.ISession session, string key, int32 value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Http.SessionExtensions.SetInt32(Microsoft.AspNetCore.Http.ISession,System.String,System.Int32)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="session" Type="Microsoft.AspNetCore.Http.ISession" RefType="this" />
          <Parameter Name="key" Type="System.String" />
          <Parameter Name="value" Type="System.Int32" />
        </Parameters>
        <Docs>
          <param name="session">To be added.</param>
          <param name="key">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Http.SessionExtensions" Member="M:Microsoft.AspNetCore.Http.SessionExtensions.SetInt32(Microsoft.AspNetCore.Http.ISession,System.String,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.ISession" />
      </Targets>
      <Member MemberName="SetString">
        <MemberSignature Language="C#" Value="public static void SetString (this Microsoft.AspNetCore.Http.ISession session, string key, string value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetString(class Microsoft.AspNetCore.Http.ISession session, string key, string value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Http.SessionExtensions.SetString(Microsoft.AspNetCore.Http.ISession,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="session" Type="Microsoft.AspNetCore.Http.ISession" RefType="this" />
          <Parameter Name="key" Type="System.String" />
          <Parameter Name="value" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="session">To be added.</param>
          <param name="key">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Http.SessionExtensions" Member="M:Microsoft.AspNetCore.Http.SessionExtensions.SetString(Microsoft.AspNetCore.Http.ISession,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Identity.IdentityBuilder" />
      </Targets>
      <Member MemberName="AddDefaultTokenProviders">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Identity.IdentityBuilder AddDefaultTokenProviders (this Microsoft.AspNetCore.Identity.IdentityBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Identity.IdentityBuilder AddDefaultTokenProviders(class Microsoft.AspNetCore.Identity.IdentityBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.IdentityBuilderExtensions.AddDefaultTokenProviders(Microsoft.AspNetCore.Identity.IdentityBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Identity.IdentityBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Identity.IdentityBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">The current <see cref="T:Microsoft.AspNetCore.Identity.IdentityBuilder" /> instance.</param>
          <summary>
            Adds the default token providers used to generate tokens for reset passwords, change email
            and change telephone number operations, and for two factor authentication token generation.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Identity.IdentityBuilderExtensions" Member="M:Microsoft.AspNetCore.Identity.IdentityBuilderExtensions.AddDefaultTokenProviders(Microsoft.AspNetCore.Identity.IdentityBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Identity.IdentityBuilder" />
      </Targets>
      <Member MemberName="AddSignInManager&lt;TSignInManager&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Identity.IdentityBuilder AddSignInManager&lt;TSignInManager&gt; (this Microsoft.AspNetCore.Identity.IdentityBuilder builder) where TSignInManager : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Identity.IdentityBuilder AddSignInManager&lt;class TSignInManager&gt;(class Microsoft.AspNetCore.Identity.IdentityBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.IdentityBuilderExtensions.AddSignInManager``1(Microsoft.AspNetCore.Identity.IdentityBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Identity.IdentityBuilder</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSignInManager">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Identity.IdentityBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSignInManager">The type of the sign in manager to add.</typeparam>
          <param name="builder">The current <see cref="T:Microsoft.AspNetCore.Identity.IdentityBuilder" /> instance.</param>
          <summary>
            Adds a <see cref="T:Microsoft.AspNetCore.Identity.SignInManager`1" /> for the <seealso cref="P:Microsoft.AspNetCore.Identity.IdentityBuilder.UserType" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Identity.IdentityBuilderExtensions" Member="M:Microsoft.AspNetCore.Identity.IdentityBuilderExtensions.AddSignInManager``1(Microsoft.AspNetCore.Identity.IdentityBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor" />
      </Targets>
      <Member MemberName="GetProperty&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T GetProperty&lt;T&gt; (this Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor actionDescriptor);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetProperty&lt;T&gt;(class Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor actionDescriptor) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptorExtensions.GetProperty``1(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="actionDescriptor" Type="Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the property.</typeparam>
          <param name="actionDescriptor">The action descriptor.</param>
          <summary>
            Gets the value of a property from the <see cref="P:Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor.Properties" /> collection
            using the provided value of <typeparamref name="T" /> as the key.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptorExtensions" Member="M:Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptorExtensions.GetProperty``1(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor" />
      </Targets>
      <Member MemberName="SetProperty&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static void SetProperty&lt;T&gt; (this Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor actionDescriptor, T value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetProperty&lt;T&gt;(class Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor actionDescriptor, !!T value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptorExtensions.SetProperty``1(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,``0)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="actionDescriptor" Type="Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor" RefType="this" />
          <Parameter Name="value" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the property.</typeparam>
          <param name="actionDescriptor">The action descriptor.</param>
          <param name="value">The value of the property.</param>
          <summary>
            Sets the value of an property in the <see cref="P:Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor.Properties" /> collection using
            the provided value of <typeparamref name="T" /> as the key.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptorExtensions" Member="M:Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptorExtensions.SetProperty``1(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription" />
      </Targets>
      <Member MemberName="GetProperty&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T GetProperty&lt;T&gt; (this Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription apiDescription);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetProperty&lt;T&gt;(class Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription apiDescription) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionExtensions.GetProperty``1(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="apiDescription" Type="Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the property.</typeparam>
          <param name="apiDescription">The <see cref="T:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription" />.</param>
          <summary>
            Gets the value of a property from the <see cref="P:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription.Properties" /> collection
            using the provided value of <typeparamref name="T" /> as the key.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionExtensions" Member="M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionExtensions.GetProperty``1(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription" />
      </Targets>
      <Member MemberName="SetProperty&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static void SetProperty&lt;T&gt; (this Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription apiDescription, T value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetProperty&lt;T&gt;(class Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription apiDescription, !!T value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionExtensions.SetProperty``1(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription,``0)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="apiDescription" Type="Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription" RefType="this" />
          <Parameter Name="value" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the property.</typeparam>
          <param name="apiDescription">The <see cref="T:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription" />.</param>
          <param name="value">The value of the property.</param>
          <summary>
            Sets the value of an property in the <see cref="P:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription.Properties" /> collection using
            the provided value of <typeparamref name="T" /> as the key.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionExtensions" Member="M:Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionExtensions.SetProperty``1(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription,``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="GetWrapperProvider">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider GetWrapperProvider (this System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProviderFactory&gt; wrapperProviderFactories, Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext wrapperProviderContext);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider GetWrapperProvider(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProviderFactory&gt; wrapperProviderFactories, class Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext wrapperProviderContext) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderFactoriesExtensions.GetWrapperProvider(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProviderFactory},Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="wrapperProviderFactories" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProviderFactory&gt;" RefType="this" />
          <Parameter Name="wrapperProviderContext" Type="Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext" />
        </Parameters>
        <Docs>
          <param name="wrapperProviderFactories">A list of <see cref="T:Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProviderFactory" />.</param>
          <param name="wrapperProviderContext">The <see cref="T:Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext" />.</param>
          <summary>
            Gets an instance of <see cref="T:Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider" /> for the supplied
            type.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderFactoriesExtensions" Member="M:Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderFactoriesExtensions.GetWrapperProvider(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProviderFactory},Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="AfterAction">
        <MemberSignature Language="C#" Value="public static void AfterAction (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor actionDescriptor, Microsoft.AspNetCore.Http.HttpContext httpContext, Microsoft.AspNetCore.Routing.RouteData routeData);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AfterAction(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor actionDescriptor, class Microsoft.AspNetCore.Http.HttpContext httpContext, class Microsoft.AspNetCore.Routing.RouteData routeData) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.AfterAction(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.RouteData)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="actionDescriptor" Type="Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor" />
          <Parameter Name="httpContext" Type="Microsoft.AspNetCore.Http.HttpContext" />
          <Parameter Name="routeData" Type="Microsoft.AspNetCore.Routing.RouteData" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="actionDescriptor">To be added.</param>
          <param name="httpContext">To be added.</param>
          <param name="routeData">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.AfterAction(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.RouteData)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="AfterActionMethod">
        <MemberSignature Language="C#" Value="public static void AfterActionMethod (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.ActionContext actionContext, System.Collections.Generic.IDictionary&lt;string,object&gt; actionArguments, object controller, Microsoft.AspNetCore.Mvc.IActionResult result);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AfterActionMethod(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.ActionContext actionContext, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; actionArguments, object controller, class Microsoft.AspNetCore.Mvc.IActionResult result) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.AfterActionMethod(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.ActionContext,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object,Microsoft.AspNetCore.Mvc.IActionResult)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="actionContext" Type="Microsoft.AspNetCore.Mvc.ActionContext" />
          <Parameter Name="actionArguments" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
          <Parameter Name="controller" Type="System.Object" />
          <Parameter Name="result" Type="Microsoft.AspNetCore.Mvc.IActionResult" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="actionContext">To be added.</param>
          <param name="actionArguments">To be added.</param>
          <param name="controller">To be added.</param>
          <param name="result">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.AfterActionMethod(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.ActionContext,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object,Microsoft.AspNetCore.Mvc.IActionResult)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="AfterActionResult">
        <MemberSignature Language="C#" Value="public static void AfterActionResult (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.ActionContext actionContext, Microsoft.AspNetCore.Mvc.IActionResult result);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AfterActionResult(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.ActionContext actionContext, class Microsoft.AspNetCore.Mvc.IActionResult result) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.AfterActionResult(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.IActionResult)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="actionContext" Type="Microsoft.AspNetCore.Mvc.ActionContext" />
          <Parameter Name="result" Type="Microsoft.AspNetCore.Mvc.IActionResult" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="actionContext">To be added.</param>
          <param name="result">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.AfterActionResult(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.IActionResult)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="AfterOnActionExecuted">
        <MemberSignature Language="C#" Value="public static void AfterOnActionExecuted (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext actionExecutedContext, Microsoft.AspNetCore.Mvc.Filters.IActionFilter filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AfterOnActionExecuted(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext actionExecutedContext, class Microsoft.AspNetCore.Mvc.Filters.IActionFilter filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.AfterOnActionExecuted(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext,Microsoft.AspNetCore.Mvc.Filters.IActionFilter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="actionExecutedContext" Type="Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext" />
          <Parameter Name="filter" Type="Microsoft.AspNetCore.Mvc.Filters.IActionFilter" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="actionExecutedContext">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.AfterOnActionExecuted(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext,Microsoft.AspNetCore.Mvc.Filters.IActionFilter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="AfterOnActionExecuting">
        <MemberSignature Language="C#" Value="public static void AfterOnActionExecuting (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext actionExecutingContext, Microsoft.AspNetCore.Mvc.Filters.IActionFilter filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AfterOnActionExecuting(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext actionExecutingContext, class Microsoft.AspNetCore.Mvc.Filters.IActionFilter filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.AfterOnActionExecuting(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.IActionFilter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="actionExecutingContext" Type="Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext" />
          <Parameter Name="filter" Type="Microsoft.AspNetCore.Mvc.Filters.IActionFilter" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="actionExecutingContext">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.AfterOnActionExecuting(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.IActionFilter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="AfterOnActionExecution">
        <MemberSignature Language="C#" Value="public static void AfterOnActionExecution (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext actionExecutedContext, Microsoft.AspNetCore.Mvc.Filters.IAsyncActionFilter filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AfterOnActionExecution(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext actionExecutedContext, class Microsoft.AspNetCore.Mvc.Filters.IAsyncActionFilter filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.AfterOnActionExecution(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext,Microsoft.AspNetCore.Mvc.Filters.IAsyncActionFilter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="actionExecutedContext" Type="Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext" />
          <Parameter Name="filter" Type="Microsoft.AspNetCore.Mvc.Filters.IAsyncActionFilter" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="actionExecutedContext">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.AfterOnActionExecution(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext,Microsoft.AspNetCore.Mvc.Filters.IAsyncActionFilter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="AfterOnAuthorization">
        <MemberSignature Language="C#" Value="public static void AfterOnAuthorization (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext authorizationContext, Microsoft.AspNetCore.Mvc.Filters.IAuthorizationFilter filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AfterOnAuthorization(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext authorizationContext, class Microsoft.AspNetCore.Mvc.Filters.IAuthorizationFilter filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.AfterOnAuthorization(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext,Microsoft.AspNetCore.Mvc.Filters.IAuthorizationFilter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="authorizationContext" Type="Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext" />
          <Parameter Name="filter" Type="Microsoft.AspNetCore.Mvc.Filters.IAuthorizationFilter" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="authorizationContext">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.AfterOnAuthorization(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext,Microsoft.AspNetCore.Mvc.Filters.IAuthorizationFilter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="AfterOnAuthorizationAsync">
        <MemberSignature Language="C#" Value="public static void AfterOnAuthorizationAsync (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext authorizationContext, Microsoft.AspNetCore.Mvc.Filters.IAsyncAuthorizationFilter filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AfterOnAuthorizationAsync(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext authorizationContext, class Microsoft.AspNetCore.Mvc.Filters.IAsyncAuthorizationFilter filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.AfterOnAuthorizationAsync(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext,Microsoft.AspNetCore.Mvc.Filters.IAsyncAuthorizationFilter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="authorizationContext" Type="Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext" />
          <Parameter Name="filter" Type="Microsoft.AspNetCore.Mvc.Filters.IAsyncAuthorizationFilter" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="authorizationContext">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.AfterOnAuthorizationAsync(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext,Microsoft.AspNetCore.Mvc.Filters.IAsyncAuthorizationFilter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="AfterOnException">
        <MemberSignature Language="C#" Value="public static void AfterOnException (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Filters.ExceptionContext exceptionContext, Microsoft.AspNetCore.Mvc.Filters.IExceptionFilter filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AfterOnException(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Filters.ExceptionContext exceptionContext, class Microsoft.AspNetCore.Mvc.Filters.IExceptionFilter filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.AfterOnException(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ExceptionContext,Microsoft.AspNetCore.Mvc.Filters.IExceptionFilter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="exceptionContext" Type="Microsoft.AspNetCore.Mvc.Filters.ExceptionContext" />
          <Parameter Name="filter" Type="Microsoft.AspNetCore.Mvc.Filters.IExceptionFilter" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="exceptionContext">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.AfterOnException(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ExceptionContext,Microsoft.AspNetCore.Mvc.Filters.IExceptionFilter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="AfterOnExceptionAsync">
        <MemberSignature Language="C#" Value="public static void AfterOnExceptionAsync (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Filters.ExceptionContext exceptionContext, Microsoft.AspNetCore.Mvc.Filters.IAsyncExceptionFilter filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AfterOnExceptionAsync(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Filters.ExceptionContext exceptionContext, class Microsoft.AspNetCore.Mvc.Filters.IAsyncExceptionFilter filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.AfterOnExceptionAsync(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ExceptionContext,Microsoft.AspNetCore.Mvc.Filters.IAsyncExceptionFilter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="exceptionContext" Type="Microsoft.AspNetCore.Mvc.Filters.ExceptionContext" />
          <Parameter Name="filter" Type="Microsoft.AspNetCore.Mvc.Filters.IAsyncExceptionFilter" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="exceptionContext">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.AfterOnExceptionAsync(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ExceptionContext,Microsoft.AspNetCore.Mvc.Filters.IAsyncExceptionFilter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="AfterOnResourceExecuted">
        <MemberSignature Language="C#" Value="public static void AfterOnResourceExecuted (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext resourceExecutedContext, Microsoft.AspNetCore.Mvc.Filters.IResourceFilter filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AfterOnResourceExecuted(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext resourceExecutedContext, class Microsoft.AspNetCore.Mvc.Filters.IResourceFilter filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.AfterOnResourceExecuted(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext,Microsoft.AspNetCore.Mvc.Filters.IResourceFilter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="resourceExecutedContext" Type="Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext" />
          <Parameter Name="filter" Type="Microsoft.AspNetCore.Mvc.Filters.IResourceFilter" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="resourceExecutedContext">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.AfterOnResourceExecuted(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext,Microsoft.AspNetCore.Mvc.Filters.IResourceFilter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="AfterOnResourceExecuting">
        <MemberSignature Language="C#" Value="public static void AfterOnResourceExecuting (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext resourceExecutingContext, Microsoft.AspNetCore.Mvc.Filters.IResourceFilter filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AfterOnResourceExecuting(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext resourceExecutingContext, class Microsoft.AspNetCore.Mvc.Filters.IResourceFilter filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.AfterOnResourceExecuting(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext,Microsoft.AspNetCore.Mvc.Filters.IResourceFilter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="resourceExecutingContext" Type="Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext" />
          <Parameter Name="filter" Type="Microsoft.AspNetCore.Mvc.Filters.IResourceFilter" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="resourceExecutingContext">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.AfterOnResourceExecuting(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext,Microsoft.AspNetCore.Mvc.Filters.IResourceFilter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="AfterOnResourceExecution">
        <MemberSignature Language="C#" Value="public static void AfterOnResourceExecution (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext resourceExecutedContext, Microsoft.AspNetCore.Mvc.Filters.IAsyncResourceFilter filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AfterOnResourceExecution(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext resourceExecutedContext, class Microsoft.AspNetCore.Mvc.Filters.IAsyncResourceFilter filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.AfterOnResourceExecution(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext,Microsoft.AspNetCore.Mvc.Filters.IAsyncResourceFilter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="resourceExecutedContext" Type="Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext" />
          <Parameter Name="filter" Type="Microsoft.AspNetCore.Mvc.Filters.IAsyncResourceFilter" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="resourceExecutedContext">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.AfterOnResourceExecution(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext,Microsoft.AspNetCore.Mvc.Filters.IAsyncResourceFilter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="AfterOnResultExecuted">
        <MemberSignature Language="C#" Value="public static void AfterOnResultExecuted (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext resultExecutedContext, Microsoft.AspNetCore.Mvc.Filters.IResultFilter filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AfterOnResultExecuted(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext resultExecutedContext, class Microsoft.AspNetCore.Mvc.Filters.IResultFilter filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.AfterOnResultExecuted(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext,Microsoft.AspNetCore.Mvc.Filters.IResultFilter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="resultExecutedContext" Type="Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext" />
          <Parameter Name="filter" Type="Microsoft.AspNetCore.Mvc.Filters.IResultFilter" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="resultExecutedContext">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.AfterOnResultExecuted(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext,Microsoft.AspNetCore.Mvc.Filters.IResultFilter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="AfterOnResultExecuting">
        <MemberSignature Language="C#" Value="public static void AfterOnResultExecuting (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext resultExecutingContext, Microsoft.AspNetCore.Mvc.Filters.IResultFilter filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AfterOnResultExecuting(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext resultExecutingContext, class Microsoft.AspNetCore.Mvc.Filters.IResultFilter filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.AfterOnResultExecuting(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext,Microsoft.AspNetCore.Mvc.Filters.IResultFilter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="resultExecutingContext" Type="Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext" />
          <Parameter Name="filter" Type="Microsoft.AspNetCore.Mvc.Filters.IResultFilter" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="resultExecutingContext">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.AfterOnResultExecuting(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext,Microsoft.AspNetCore.Mvc.Filters.IResultFilter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="AfterOnResultExecution">
        <MemberSignature Language="C#" Value="public static void AfterOnResultExecution (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext resultExecutedContext, Microsoft.AspNetCore.Mvc.Filters.IAsyncResultFilter filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AfterOnResultExecution(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext resultExecutedContext, class Microsoft.AspNetCore.Mvc.Filters.IAsyncResultFilter filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.AfterOnResultExecution(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext,Microsoft.AspNetCore.Mvc.Filters.IAsyncResultFilter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="resultExecutedContext" Type="Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext" />
          <Parameter Name="filter" Type="Microsoft.AspNetCore.Mvc.Filters.IAsyncResultFilter" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="resultExecutedContext">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.AfterOnResultExecution(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext,Microsoft.AspNetCore.Mvc.Filters.IAsyncResultFilter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="BeforeAction">
        <MemberSignature Language="C#" Value="public static void BeforeAction (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor actionDescriptor, Microsoft.AspNetCore.Http.HttpContext httpContext, Microsoft.AspNetCore.Routing.RouteData routeData);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BeforeAction(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor actionDescriptor, class Microsoft.AspNetCore.Http.HttpContext httpContext, class Microsoft.AspNetCore.Routing.RouteData routeData) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.BeforeAction(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.RouteData)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="actionDescriptor" Type="Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor" />
          <Parameter Name="httpContext" Type="Microsoft.AspNetCore.Http.HttpContext" />
          <Parameter Name="routeData" Type="Microsoft.AspNetCore.Routing.RouteData" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="actionDescriptor">To be added.</param>
          <param name="httpContext">To be added.</param>
          <param name="routeData">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.BeforeAction(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor,Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.RouteData)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="BeforeActionMethod">
        <MemberSignature Language="C#" Value="public static void BeforeActionMethod (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.ActionContext actionContext, System.Collections.Generic.IDictionary&lt;string,object&gt; actionArguments, object controller);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BeforeActionMethod(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.ActionContext actionContext, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; actionArguments, object controller) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.BeforeActionMethod(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.ActionContext,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="actionContext" Type="Microsoft.AspNetCore.Mvc.ActionContext" />
          <Parameter Name="actionArguments" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
          <Parameter Name="controller" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="actionContext">To be added.</param>
          <param name="actionArguments">To be added.</param>
          <param name="controller">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.BeforeActionMethod(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.ActionContext,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="BeforeActionResult">
        <MemberSignature Language="C#" Value="public static void BeforeActionResult (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.ActionContext actionContext, Microsoft.AspNetCore.Mvc.IActionResult result);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BeforeActionResult(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.ActionContext actionContext, class Microsoft.AspNetCore.Mvc.IActionResult result) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.BeforeActionResult(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.IActionResult)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="actionContext" Type="Microsoft.AspNetCore.Mvc.ActionContext" />
          <Parameter Name="result" Type="Microsoft.AspNetCore.Mvc.IActionResult" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="actionContext">To be added.</param>
          <param name="result">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.BeforeActionResult(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.IActionResult)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="BeforeOnActionExecuted">
        <MemberSignature Language="C#" Value="public static void BeforeOnActionExecuted (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext actionExecutedContext, Microsoft.AspNetCore.Mvc.Filters.IActionFilter filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BeforeOnActionExecuted(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext actionExecutedContext, class Microsoft.AspNetCore.Mvc.Filters.IActionFilter filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.BeforeOnActionExecuted(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext,Microsoft.AspNetCore.Mvc.Filters.IActionFilter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="actionExecutedContext" Type="Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext" />
          <Parameter Name="filter" Type="Microsoft.AspNetCore.Mvc.Filters.IActionFilter" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="actionExecutedContext">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.BeforeOnActionExecuted(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext,Microsoft.AspNetCore.Mvc.Filters.IActionFilter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="BeforeOnActionExecuting">
        <MemberSignature Language="C#" Value="public static void BeforeOnActionExecuting (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext actionExecutingContext, Microsoft.AspNetCore.Mvc.Filters.IActionFilter filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BeforeOnActionExecuting(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext actionExecutingContext, class Microsoft.AspNetCore.Mvc.Filters.IActionFilter filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.BeforeOnActionExecuting(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.IActionFilter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="actionExecutingContext" Type="Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext" />
          <Parameter Name="filter" Type="Microsoft.AspNetCore.Mvc.Filters.IActionFilter" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="actionExecutingContext">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.BeforeOnActionExecuting(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.IActionFilter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="BeforeOnActionExecution">
        <MemberSignature Language="C#" Value="public static void BeforeOnActionExecution (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext actionExecutingContext, Microsoft.AspNetCore.Mvc.Filters.IAsyncActionFilter filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BeforeOnActionExecution(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext actionExecutingContext, class Microsoft.AspNetCore.Mvc.Filters.IAsyncActionFilter filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.BeforeOnActionExecution(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.IAsyncActionFilter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="actionExecutingContext" Type="Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext" />
          <Parameter Name="filter" Type="Microsoft.AspNetCore.Mvc.Filters.IAsyncActionFilter" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="actionExecutingContext">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.BeforeOnActionExecution(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.IAsyncActionFilter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="BeforeOnAuthorization">
        <MemberSignature Language="C#" Value="public static void BeforeOnAuthorization (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext authorizationContext, Microsoft.AspNetCore.Mvc.Filters.IAuthorizationFilter filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BeforeOnAuthorization(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext authorizationContext, class Microsoft.AspNetCore.Mvc.Filters.IAuthorizationFilter filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.BeforeOnAuthorization(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext,Microsoft.AspNetCore.Mvc.Filters.IAuthorizationFilter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="authorizationContext" Type="Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext" />
          <Parameter Name="filter" Type="Microsoft.AspNetCore.Mvc.Filters.IAuthorizationFilter" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="authorizationContext">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.BeforeOnAuthorization(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext,Microsoft.AspNetCore.Mvc.Filters.IAuthorizationFilter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="BeforeOnAuthorizationAsync">
        <MemberSignature Language="C#" Value="public static void BeforeOnAuthorizationAsync (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext authorizationContext, Microsoft.AspNetCore.Mvc.Filters.IAsyncAuthorizationFilter filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BeforeOnAuthorizationAsync(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext authorizationContext, class Microsoft.AspNetCore.Mvc.Filters.IAsyncAuthorizationFilter filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.BeforeOnAuthorizationAsync(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext,Microsoft.AspNetCore.Mvc.Filters.IAsyncAuthorizationFilter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="authorizationContext" Type="Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext" />
          <Parameter Name="filter" Type="Microsoft.AspNetCore.Mvc.Filters.IAsyncAuthorizationFilter" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="authorizationContext">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.BeforeOnAuthorizationAsync(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext,Microsoft.AspNetCore.Mvc.Filters.IAsyncAuthorizationFilter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="BeforeOnException">
        <MemberSignature Language="C#" Value="public static void BeforeOnException (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Filters.ExceptionContext exceptionContext, Microsoft.AspNetCore.Mvc.Filters.IExceptionFilter filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BeforeOnException(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Filters.ExceptionContext exceptionContext, class Microsoft.AspNetCore.Mvc.Filters.IExceptionFilter filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.BeforeOnException(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ExceptionContext,Microsoft.AspNetCore.Mvc.Filters.IExceptionFilter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="exceptionContext" Type="Microsoft.AspNetCore.Mvc.Filters.ExceptionContext" />
          <Parameter Name="filter" Type="Microsoft.AspNetCore.Mvc.Filters.IExceptionFilter" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="exceptionContext">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.BeforeOnException(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ExceptionContext,Microsoft.AspNetCore.Mvc.Filters.IExceptionFilter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="BeforeOnExceptionAsync">
        <MemberSignature Language="C#" Value="public static void BeforeOnExceptionAsync (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Filters.ExceptionContext exceptionContext, Microsoft.AspNetCore.Mvc.Filters.IAsyncExceptionFilter filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BeforeOnExceptionAsync(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Filters.ExceptionContext exceptionContext, class Microsoft.AspNetCore.Mvc.Filters.IAsyncExceptionFilter filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.BeforeOnExceptionAsync(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ExceptionContext,Microsoft.AspNetCore.Mvc.Filters.IAsyncExceptionFilter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="exceptionContext" Type="Microsoft.AspNetCore.Mvc.Filters.ExceptionContext" />
          <Parameter Name="filter" Type="Microsoft.AspNetCore.Mvc.Filters.IAsyncExceptionFilter" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="exceptionContext">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.BeforeOnExceptionAsync(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ExceptionContext,Microsoft.AspNetCore.Mvc.Filters.IAsyncExceptionFilter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="BeforeOnResourceExecuted">
        <MemberSignature Language="C#" Value="public static void BeforeOnResourceExecuted (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext resourceExecutedContext, Microsoft.AspNetCore.Mvc.Filters.IResourceFilter filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BeforeOnResourceExecuted(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext resourceExecutedContext, class Microsoft.AspNetCore.Mvc.Filters.IResourceFilter filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.BeforeOnResourceExecuted(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext,Microsoft.AspNetCore.Mvc.Filters.IResourceFilter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="resourceExecutedContext" Type="Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext" />
          <Parameter Name="filter" Type="Microsoft.AspNetCore.Mvc.Filters.IResourceFilter" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="resourceExecutedContext">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.BeforeOnResourceExecuted(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext,Microsoft.AspNetCore.Mvc.Filters.IResourceFilter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="BeforeOnResourceExecuting">
        <MemberSignature Language="C#" Value="public static void BeforeOnResourceExecuting (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext resourceExecutingContext, Microsoft.AspNetCore.Mvc.Filters.IResourceFilter filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BeforeOnResourceExecuting(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext resourceExecutingContext, class Microsoft.AspNetCore.Mvc.Filters.IResourceFilter filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.BeforeOnResourceExecuting(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext,Microsoft.AspNetCore.Mvc.Filters.IResourceFilter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="resourceExecutingContext" Type="Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext" />
          <Parameter Name="filter" Type="Microsoft.AspNetCore.Mvc.Filters.IResourceFilter" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="resourceExecutingContext">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.BeforeOnResourceExecuting(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext,Microsoft.AspNetCore.Mvc.Filters.IResourceFilter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="BeforeOnResourceExecution">
        <MemberSignature Language="C#" Value="public static void BeforeOnResourceExecution (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext resourceExecutingContext, Microsoft.AspNetCore.Mvc.Filters.IAsyncResourceFilter filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BeforeOnResourceExecution(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext resourceExecutingContext, class Microsoft.AspNetCore.Mvc.Filters.IAsyncResourceFilter filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.BeforeOnResourceExecution(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext,Microsoft.AspNetCore.Mvc.Filters.IAsyncResourceFilter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="resourceExecutingContext" Type="Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext" />
          <Parameter Name="filter" Type="Microsoft.AspNetCore.Mvc.Filters.IAsyncResourceFilter" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="resourceExecutingContext">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.BeforeOnResourceExecution(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext,Microsoft.AspNetCore.Mvc.Filters.IAsyncResourceFilter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="BeforeOnResultExecuted">
        <MemberSignature Language="C#" Value="public static void BeforeOnResultExecuted (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext resultExecutedContext, Microsoft.AspNetCore.Mvc.Filters.IResultFilter filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BeforeOnResultExecuted(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext resultExecutedContext, class Microsoft.AspNetCore.Mvc.Filters.IResultFilter filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.BeforeOnResultExecuted(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext,Microsoft.AspNetCore.Mvc.Filters.IResultFilter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="resultExecutedContext" Type="Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext" />
          <Parameter Name="filter" Type="Microsoft.AspNetCore.Mvc.Filters.IResultFilter" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="resultExecutedContext">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.BeforeOnResultExecuted(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext,Microsoft.AspNetCore.Mvc.Filters.IResultFilter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="BeforeOnResultExecuting">
        <MemberSignature Language="C#" Value="public static void BeforeOnResultExecuting (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext resultExecutingContext, Microsoft.AspNetCore.Mvc.Filters.IResultFilter filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BeforeOnResultExecuting(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext resultExecutingContext, class Microsoft.AspNetCore.Mvc.Filters.IResultFilter filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.BeforeOnResultExecuting(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext,Microsoft.AspNetCore.Mvc.Filters.IResultFilter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="resultExecutingContext" Type="Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext" />
          <Parameter Name="filter" Type="Microsoft.AspNetCore.Mvc.Filters.IResultFilter" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="resultExecutingContext">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.BeforeOnResultExecuting(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext,Microsoft.AspNetCore.Mvc.Filters.IResultFilter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="BeforeOnResultExecution">
        <MemberSignature Language="C#" Value="public static void BeforeOnResultExecution (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext resultExecutingContext, Microsoft.AspNetCore.Mvc.Filters.IAsyncResultFilter filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BeforeOnResultExecution(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext resultExecutingContext, class Microsoft.AspNetCore.Mvc.Filters.IAsyncResultFilter filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.BeforeOnResultExecution(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext,Microsoft.AspNetCore.Mvc.Filters.IAsyncResultFilter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="resultExecutingContext" Type="Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext" />
          <Parameter Name="filter" Type="Microsoft.AspNetCore.Mvc.Filters.IAsyncResultFilter" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="resultExecutingContext">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcCoreDiagnosticSourceExtensions.BeforeOnResultExecution(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext,Microsoft.AspNetCore.Mvc.Filters.IAsyncResultFilter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="AfterHandlerMethod">
        <MemberSignature Language="C#" Value="public static void AfterHandlerMethod (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.ActionContext actionContext, Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor handlerMethodDescriptor, System.Collections.Generic.IDictionary&lt;string,object&gt; arguments, object instance, Microsoft.AspNetCore.Mvc.IActionResult result);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AfterHandlerMethod(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.ActionContext actionContext, class Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor handlerMethodDescriptor, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; arguments, object instance, class Microsoft.AspNetCore.Mvc.IActionResult result) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcRazorPagesDiagnosticSourceExtensions.AfterHandlerMethod(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object,Microsoft.AspNetCore.Mvc.IActionResult)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="actionContext" Type="Microsoft.AspNetCore.Mvc.ActionContext" />
          <Parameter Name="handlerMethodDescriptor" Type="Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor" />
          <Parameter Name="arguments" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
          <Parameter Name="instance" Type="System.Object" />
          <Parameter Name="result" Type="Microsoft.AspNetCore.Mvc.IActionResult" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="actionContext">To be added.</param>
          <param name="handlerMethodDescriptor">To be added.</param>
          <param name="arguments">To be added.</param>
          <param name="instance">To be added.</param>
          <param name="result">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcRazorPagesDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcRazorPagesDiagnosticSourceExtensions.AfterHandlerMethod(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object,Microsoft.AspNetCore.Mvc.IActionResult)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="AfterOnPageHandlerExecuted">
        <MemberSignature Language="C#" Value="public static void AfterOnPageHandlerExecuted (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext handlerExecutedContext, Microsoft.AspNetCore.Mvc.Filters.IPageFilter filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AfterOnPageHandlerExecuted(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext handlerExecutedContext, class Microsoft.AspNetCore.Mvc.Filters.IPageFilter filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcRazorPagesDiagnosticSourceExtensions.AfterOnPageHandlerExecuted(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext,Microsoft.AspNetCore.Mvc.Filters.IPageFilter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="handlerExecutedContext" Type="Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext" />
          <Parameter Name="filter" Type="Microsoft.AspNetCore.Mvc.Filters.IPageFilter" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="handlerExecutedContext">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcRazorPagesDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcRazorPagesDiagnosticSourceExtensions.AfterOnPageHandlerExecuted(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext,Microsoft.AspNetCore.Mvc.Filters.IPageFilter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="AfterOnPageHandlerExecuting">
        <MemberSignature Language="C#" Value="public static void AfterOnPageHandlerExecuting (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext handlerExecutingContext, Microsoft.AspNetCore.Mvc.Filters.IPageFilter filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AfterOnPageHandlerExecuting(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext handlerExecutingContext, class Microsoft.AspNetCore.Mvc.Filters.IPageFilter filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcRazorPagesDiagnosticSourceExtensions.AfterOnPageHandlerExecuting(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext,Microsoft.AspNetCore.Mvc.Filters.IPageFilter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="handlerExecutingContext" Type="Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext" />
          <Parameter Name="filter" Type="Microsoft.AspNetCore.Mvc.Filters.IPageFilter" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="handlerExecutingContext">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcRazorPagesDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcRazorPagesDiagnosticSourceExtensions.AfterOnPageHandlerExecuting(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext,Microsoft.AspNetCore.Mvc.Filters.IPageFilter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="AfterOnPageHandlerExecution">
        <MemberSignature Language="C#" Value="public static void AfterOnPageHandlerExecution (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext handlerExecutedContext, Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AfterOnPageHandlerExecution(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext handlerExecutedContext, class Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcRazorPagesDiagnosticSourceExtensions.AfterOnPageHandlerExecution(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext,Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="handlerExecutedContext" Type="Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext" />
          <Parameter Name="filter" Type="Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="handlerExecutedContext">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcRazorPagesDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcRazorPagesDiagnosticSourceExtensions.AfterOnPageHandlerExecution(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext,Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="AfterOnPageHandlerSelected">
        <MemberSignature Language="C#" Value="public static void AfterOnPageHandlerSelected (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext handlerSelectedContext, Microsoft.AspNetCore.Mvc.Filters.IPageFilter filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AfterOnPageHandlerSelected(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext handlerSelectedContext, class Microsoft.AspNetCore.Mvc.Filters.IPageFilter filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcRazorPagesDiagnosticSourceExtensions.AfterOnPageHandlerSelected(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext,Microsoft.AspNetCore.Mvc.Filters.IPageFilter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="handlerSelectedContext" Type="Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext" />
          <Parameter Name="filter" Type="Microsoft.AspNetCore.Mvc.Filters.IPageFilter" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="handlerSelectedContext">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcRazorPagesDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcRazorPagesDiagnosticSourceExtensions.AfterOnPageHandlerSelected(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext,Microsoft.AspNetCore.Mvc.Filters.IPageFilter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="AfterOnPageHandlerSelection">
        <MemberSignature Language="C#" Value="public static void AfterOnPageHandlerSelection (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext handlerSelectedContext, Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AfterOnPageHandlerSelection(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext handlerSelectedContext, class Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcRazorPagesDiagnosticSourceExtensions.AfterOnPageHandlerSelection(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext,Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="handlerSelectedContext" Type="Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext" />
          <Parameter Name="filter" Type="Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="handlerSelectedContext">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcRazorPagesDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcRazorPagesDiagnosticSourceExtensions.AfterOnPageHandlerSelection(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext,Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="BeforeHandlerMethod">
        <MemberSignature Language="C#" Value="public static void BeforeHandlerMethod (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.ActionContext actionContext, Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor handlerMethodDescriptor, System.Collections.Generic.IDictionary&lt;string,object&gt; arguments, object instance);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BeforeHandlerMethod(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.ActionContext actionContext, class Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor handlerMethodDescriptor, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; arguments, object instance) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcRazorPagesDiagnosticSourceExtensions.BeforeHandlerMethod(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="actionContext" Type="Microsoft.AspNetCore.Mvc.ActionContext" />
          <Parameter Name="handlerMethodDescriptor" Type="Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor" />
          <Parameter Name="arguments" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
          <Parameter Name="instance" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="actionContext">To be added.</param>
          <param name="handlerMethodDescriptor">To be added.</param>
          <param name="arguments">To be added.</param>
          <param name="instance">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcRazorPagesDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcRazorPagesDiagnosticSourceExtensions.BeforeHandlerMethod(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.HandlerMethodDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="BeforeOnPageHandlerExecuted">
        <MemberSignature Language="C#" Value="public static void BeforeOnPageHandlerExecuted (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext handlerExecutedContext, Microsoft.AspNetCore.Mvc.Filters.IPageFilter filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BeforeOnPageHandlerExecuted(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext handlerExecutedContext, class Microsoft.AspNetCore.Mvc.Filters.IPageFilter filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcRazorPagesDiagnosticSourceExtensions.BeforeOnPageHandlerExecuted(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext,Microsoft.AspNetCore.Mvc.Filters.IPageFilter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="handlerExecutedContext" Type="Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext" />
          <Parameter Name="filter" Type="Microsoft.AspNetCore.Mvc.Filters.IPageFilter" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="handlerExecutedContext">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcRazorPagesDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcRazorPagesDiagnosticSourceExtensions.BeforeOnPageHandlerExecuted(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutedContext,Microsoft.AspNetCore.Mvc.Filters.IPageFilter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="BeforeOnPageHandlerExecuting">
        <MemberSignature Language="C#" Value="public static void BeforeOnPageHandlerExecuting (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext handlerExecutingContext, Microsoft.AspNetCore.Mvc.Filters.IPageFilter filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BeforeOnPageHandlerExecuting(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext handlerExecutingContext, class Microsoft.AspNetCore.Mvc.Filters.IPageFilter filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcRazorPagesDiagnosticSourceExtensions.BeforeOnPageHandlerExecuting(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext,Microsoft.AspNetCore.Mvc.Filters.IPageFilter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="handlerExecutingContext" Type="Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext" />
          <Parameter Name="filter" Type="Microsoft.AspNetCore.Mvc.Filters.IPageFilter" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="handlerExecutingContext">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcRazorPagesDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcRazorPagesDiagnosticSourceExtensions.BeforeOnPageHandlerExecuting(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext,Microsoft.AspNetCore.Mvc.Filters.IPageFilter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="BeforeOnPageHandlerExecution">
        <MemberSignature Language="C#" Value="public static void BeforeOnPageHandlerExecution (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext handlerExecutionContext, Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BeforeOnPageHandlerExecution(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext handlerExecutionContext, class Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcRazorPagesDiagnosticSourceExtensions.BeforeOnPageHandlerExecution(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext,Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="handlerExecutionContext" Type="Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext" />
          <Parameter Name="filter" Type="Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="handlerExecutionContext">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcRazorPagesDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcRazorPagesDiagnosticSourceExtensions.BeforeOnPageHandlerExecution(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.PageHandlerExecutingContext,Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="BeforeOnPageHandlerSelected">
        <MemberSignature Language="C#" Value="public static void BeforeOnPageHandlerSelected (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext handlerSelectedContext, Microsoft.AspNetCore.Mvc.Filters.IPageFilter filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BeforeOnPageHandlerSelected(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext handlerSelectedContext, class Microsoft.AspNetCore.Mvc.Filters.IPageFilter filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcRazorPagesDiagnosticSourceExtensions.BeforeOnPageHandlerSelected(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext,Microsoft.AspNetCore.Mvc.Filters.IPageFilter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="handlerSelectedContext" Type="Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext" />
          <Parameter Name="filter" Type="Microsoft.AspNetCore.Mvc.Filters.IPageFilter" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="handlerSelectedContext">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcRazorPagesDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcRazorPagesDiagnosticSourceExtensions.BeforeOnPageHandlerSelected(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext,Microsoft.AspNetCore.Mvc.Filters.IPageFilter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="BeforeOnPageHandlerSelection">
        <MemberSignature Language="C#" Value="public static void BeforeOnPageHandlerSelection (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext handlerSelectedContext, Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BeforeOnPageHandlerSelection(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext handlerSelectedContext, class Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Internal.MvcRazorPagesDiagnosticSourceExtensions.BeforeOnPageHandlerSelection(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext,Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="handlerSelectedContext" Type="Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext" />
          <Parameter Name="filter" Type="Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="handlerSelectedContext">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Internal.MvcRazorPagesDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Internal.MvcRazorPagesDiagnosticSourceExtensions.BeforeOnPageHandlerSelection(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext,Microsoft.AspNetCore.Mvc.Filters.IAsyncPageFilter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1" />
      </Targets>
      <Member MemberName="ApplyTo&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static void ApplyTo&lt;T&gt; (this Microsoft.AspNetCore.JsonPatch.JsonPatchDocument&lt;T&gt; patchDoc, T objectToApplyTo, Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary modelState) where T : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ApplyTo&lt;class T&gt;(class Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1&lt;!!T&gt; patchDoc, !!T objectToApplyTo, class Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary modelState) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.JsonPatchExtensions.ApplyTo``1(Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{``0},``0,Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="patchDoc" Type="Microsoft.AspNetCore.JsonPatch.JsonPatchDocument&lt;T&gt;" RefType="this" />
          <Parameter Name="objectToApplyTo" Type="T" />
          <Parameter Name="modelState" Type="Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="patchDoc">The <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1" />.</param>
          <param name="objectToApplyTo">The entity on which <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1" /> is applied.</param>
          <param name="modelState">The <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" /> to add errors.</param>
          <summary>
            Applies JSON patch operations on object and logs errors in <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.JsonPatchExtensions" Member="M:Microsoft.AspNetCore.Mvc.JsonPatchExtensions.ApplyTo``1(Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{``0},``0,Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1" />
      </Targets>
      <Member MemberName="ApplyTo&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static void ApplyTo&lt;T&gt; (this Microsoft.AspNetCore.JsonPatch.JsonPatchDocument&lt;T&gt; patchDoc, T objectToApplyTo, Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary modelState, string prefix) where T : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ApplyTo&lt;class T&gt;(class Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1&lt;!!T&gt; patchDoc, !!T objectToApplyTo, class Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary modelState, string prefix) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.JsonPatchExtensions.ApplyTo``1(Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{``0},``0,Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="patchDoc" Type="Microsoft.AspNetCore.JsonPatch.JsonPatchDocument&lt;T&gt;" RefType="this" />
          <Parameter Name="objectToApplyTo" Type="T" />
          <Parameter Name="modelState" Type="Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" />
          <Parameter Name="prefix" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="patchDoc">The <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1" />.</param>
          <param name="objectToApplyTo">The entity on which <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1" /> is applied.</param>
          <param name="modelState">The <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" /> to add errors.</param>
          <param name="prefix">The prefix to use when looking up values in <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" />.</param>
          <summary>
            Applies JSON patch operations on object and logs errors in <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.JsonPatchExtensions" Member="M:Microsoft.AspNetCore.Mvc.JsonPatchExtensions.ApplyTo``1(Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{``0},``0,Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer" />
      </Targets>
      <Member MemberName="GetAllStrings">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.Localization.LocalizedString&gt; GetAllStrings (this Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer htmlLocalizer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Extensions.Localization.LocalizedString&gt; GetAllStrings(class Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer htmlLocalizer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Localization.HtmlLocalizerExtensions.GetAllStrings(Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.Localization.LocalizedString&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlLocalizer" Type="Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer" RefType="this" />
        </Parameters>
        <Docs>
          <param name="htmlLocalizer">The <see cref="T:Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer" />.</param>
          <summary>
            Gets all string resources including those for parent cultures.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Localization.HtmlLocalizerExtensions" Member="M:Microsoft.AspNetCore.Mvc.Localization.HtmlLocalizerExtensions.GetAllStrings(Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer" />
      </Targets>
      <Member MemberName="GetHtml">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString GetHtml (this Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer htmlLocalizer, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString GetHtml(class Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer htmlLocalizer, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Localization.HtmlLocalizerExtensions.GetHtml(Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlLocalizer" Type="Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlLocalizer">The <see cref="T:Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer" />.</param>
          <param name="name">The key to use.</param>
          <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString" /> resource for a specific name.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Localization.HtmlLocalizerExtensions" Member="M:Microsoft.AspNetCore.Mvc.Localization.HtmlLocalizerExtensions.GetHtml(Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer" />
      </Targets>
      <Member MemberName="GetHtml">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString GetHtml (this Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer htmlLocalizer, string name, object[] arguments);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString GetHtml(class Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer htmlLocalizer, string name, object[] arguments) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Localization.HtmlLocalizerExtensions.GetHtml(Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer,System.String,System.Object[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlLocalizer" Type="Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="arguments" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="htmlLocalizer">The <see cref="T:Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer" />.</param>
          <param name="name">The key to use.</param>
          <param name="arguments">The values to format the string with.</param>
          <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString" /> resource for a specific name.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Localization.HtmlLocalizerExtensions" Member="M:Microsoft.AspNetCore.Mvc.Localization.HtmlLocalizerExtensions.GetHtml(Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IList`1" />
      </Targets>
      <Member MemberName="RemoveType">
        <MemberSignature Language="C#" Value="public static void RemoveType (this System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IMetadataDetailsProvider&gt; list, Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveType(class System.Collections.Generic.IList`1&lt;class Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IMetadataDetailsProvider&gt; list, class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.MetadataDetailsProviderExtensions.RemoveType(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IMetadataDetailsProvider},System.Type)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="list" Type="System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IMetadataDetailsProvider&gt;" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="list">The list of <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IMetadataDetailsProvider" />s.</param>
          <param name="type">The type to remove.</param>
          <summary>
            Removes all metadata details providers of the specified type.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.MetadataDetailsProviderExtensions" Member="M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.MetadataDetailsProviderExtensions.RemoveType(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IMetadataDetailsProvider},System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IList`1" />
      </Targets>
      <Member MemberName="RemoveType&lt;TMetadataDetailsProvider&gt;">
        <MemberSignature Language="C#" Value="public static void RemoveType&lt;TMetadataDetailsProvider&gt; (this System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IMetadataDetailsProvider&gt; list) where TMetadataDetailsProvider : Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IMetadataDetailsProvider;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveType&lt;(class Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IMetadataDetailsProvider) TMetadataDetailsProvider&gt;(class System.Collections.Generic.IList`1&lt;class Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IMetadataDetailsProvider&gt; list) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.MetadataDetailsProviderExtensions.RemoveType``1(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IMetadataDetailsProvider})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TMetadataDetailsProvider">
            <Constraints>
              <InterfaceName>Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IMetadataDetailsProvider</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="list" Type="System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IMetadataDetailsProvider&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TMetadataDetailsProvider">The type to remove.</typeparam>
          <param name="list">The list of <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IMetadataDetailsProvider" />s.</param>
          <summary>
            Removes all metadata details providers of the specified type.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.MetadataDetailsProviderExtensions" Member="M:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.MetadataDetailsProviderExtensions.RemoveType``1(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IMetadataDetailsProvider})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IList`1" />
      </Targets>
      <Member MemberName="RemoveType">
        <MemberSignature Language="C#" Value="public static void RemoveType (this System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderProvider&gt; list, Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveType(class System.Collections.Generic.IList`1&lt;class Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderProvider&gt; list, class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderExtensions.RemoveType(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderProvider},System.Type)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="list" Type="System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderProvider&gt;" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="list">The list of <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderProvider" />s.</param>
          <param name="type">The type to remove.</param>
          <summary>
            Removes all model binder providers of the specified type.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderExtensions" Member="M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderExtensions.RemoveType(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderProvider},System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IList`1" />
      </Targets>
      <Member MemberName="RemoveType&lt;TModelBinderProvider&gt;">
        <MemberSignature Language="C#" Value="public static void RemoveType&lt;TModelBinderProvider&gt; (this System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderProvider&gt; list) where TModelBinderProvider : Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderProvider;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveType&lt;(class Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderProvider) TModelBinderProvider&gt;(class System.Collections.Generic.IList`1&lt;class Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderProvider&gt; list) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderExtensions.RemoveType``1(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderProvider})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModelBinderProvider">
            <Constraints>
              <InterfaceName>Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderProvider</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="list" Type="System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderProvider&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TModelBinderProvider">The type to remove.</typeparam>
          <param name="list">The list of <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderProvider" />s.</param>
          <summary>
            Removes all model binder providers of the specified type.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderExtensions" Member="M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderExtensions.RemoveType``1(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderProvider})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider" />
      </Targets>
      <Member MemberName="GetMetadataForProperty">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata GetMetadataForProperty (this Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider provider, Type containerType, string propertyName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata GetMetadataForProperty(class Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider provider, class System.Type containerType, string propertyName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadataProviderExtensions.GetMetadataForProperty(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,System.Type,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="provider" Type="Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider" RefType="this" />
          <Parameter Name="containerType" Type="System.Type" />
          <Parameter Name="propertyName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="provider">The <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" />.</param>
          <param name="containerType">The <see cref="T:System.Type" /> for which the property is defined.</param>
          <param name="propertyName">The property name.</param>
          <summary>
            Gets a <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" /> for property identified by the provided
            <paramref name="containerType" /> and <paramref name="propertyName" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadataProviderExtensions" Member="M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadataProviderExtensions.GetMetadataForProperty(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,System.Type,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" />
      </Targets>
      <Member MemberName="AddModelError&lt;TModel&gt;">
        <MemberSignature Language="C#" Value="public static void AddModelError&lt;TModel&gt; (this Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary modelState, System.Linq.Expressions.Expression&lt;Func&lt;TModel,object&gt;&gt; expression, Exception exception, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata metadata);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddModelError&lt;TModel&gt;(class Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary modelState, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TModel, object&gt;&gt; expression, class System.Exception exception, class Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata metadata) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionaryExtensions.AddModelError``1(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Exception,Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModel" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="modelState" Type="Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" RefType="this" />
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,System.Object&gt;&gt;" />
          <Parameter Name="exception" Type="System.Exception" />
          <Parameter Name="metadata" Type="Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" />
        </Parameters>
        <Docs>
          <typeparam name="TModel">The type of the model.</typeparam>
          <param name="modelState">The <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" /> instance this method extends.</param>
          <param name="expression">An expression to be evaluated against an item in the current model.</param>
          <param name="exception">The <see cref="T:System.Exception" /> to add.</param>
          <param name="metadata">The <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" /> associated with the model.</param>
          <summary>
            Adds the specified <paramref name="exception" /> to the <see cref="P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.Errors" /> instance
            that is associated with the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionaryExtensions" Member="M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionaryExtensions.AddModelError``1(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Exception,Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" />
      </Targets>
      <Member MemberName="AddModelError&lt;TModel&gt;">
        <MemberSignature Language="C#" Value="public static void AddModelError&lt;TModel&gt; (this Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary modelState, System.Linq.Expressions.Expression&lt;Func&lt;TModel,object&gt;&gt; expression, string errorMessage);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddModelError&lt;TModel&gt;(class Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary modelState, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TModel, object&gt;&gt; expression, string errorMessage) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionaryExtensions.AddModelError``1(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModel" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="modelState" Type="Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" RefType="this" />
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,System.Object&gt;&gt;" />
          <Parameter Name="errorMessage" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TModel">The type of the model.</typeparam>
          <param name="modelState">The <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" /> instance this method extends.</param>
          <param name="expression">An expression to be evaluated against an item in the current model.</param>
          <param name="errorMessage">The error message to add.</param>
          <summary>
            Adds the specified <paramref name="errorMessage" /> to the <see cref="P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.Errors" /> instance
            that is associated with the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionaryExtensions" Member="M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionaryExtensions.AddModelError``1(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" />
      </Targets>
      <Member MemberName="Remove&lt;TModel&gt;">
        <MemberSignature Language="C#" Value="public static bool Remove&lt;TModel&gt; (this Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary modelState, System.Linq.Expressions.Expression&lt;Func&lt;TModel,object&gt;&gt; expression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Remove&lt;TModel&gt;(class Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary modelState, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TModel, object&gt;&gt; expression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionaryExtensions.Remove``1(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModel" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="modelState" Type="Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" RefType="this" />
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,System.Object&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TModel">The type of the model.</typeparam>
          <param name="modelState">The <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" /> instance this method extends.</param>
          <param name="expression">An expression to be evaluated against an item in the current model.</param>
          <summary>
            Removes the specified <paramref name="expression" /> from the <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionaryExtensions" Member="M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionaryExtensions.Remove``1(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" />
      </Targets>
      <Member MemberName="RemoveAll&lt;TModel&gt;">
        <MemberSignature Language="C#" Value="public static void RemoveAll&lt;TModel&gt; (this Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary modelState, System.Linq.Expressions.Expression&lt;Func&lt;TModel,object&gt;&gt; expression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveAll&lt;TModel&gt;(class Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary modelState, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TModel, object&gt;&gt; expression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionaryExtensions.RemoveAll``1(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModel" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="modelState" Type="Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" RefType="this" />
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,System.Object&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TModel">The type of the model.</typeparam>
          <param name="modelState">The <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" /> instance this method extends.</param>
          <param name="expression">An expression to be evaluated against an item in the current model.</param>
          <summary>
            Removes all the entries for the specified <paramref name="expression" /> from the
            <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionaryExtensions" Member="M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionaryExtensions.RemoveAll``1(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IList`1" />
      </Targets>
      <Member MemberName="RemoveType">
        <MemberSignature Language="C#" Value="public static void RemoveType (this System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider&gt; list, Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveType(class System.Collections.Generic.IList`1&lt;class Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider&gt; list, class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidatorProviderExtensions.RemoveType(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider},System.Type)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="list" Type="System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider&gt;" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="list">This list of <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider" />s.</param>
          <param name="type">The type to remove.</param>
          <summary>
            Removes all model validator providers of the specified type.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidatorProviderExtensions" Member="M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidatorProviderExtensions.RemoveType(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider},System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IList`1" />
      </Targets>
      <Member MemberName="RemoveType&lt;TModelValidatorProvider&gt;">
        <MemberSignature Language="C#" Value="public static void RemoveType&lt;TModelValidatorProvider&gt; (this System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider&gt; list) where TModelValidatorProvider : Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveType&lt;(class Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider) TModelValidatorProvider&gt;(class System.Collections.Generic.IList`1&lt;class Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider&gt; list) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidatorProviderExtensions.RemoveType``1(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModelValidatorProvider">
            <Constraints>
              <InterfaceName>Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="list" Type="System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TModelValidatorProvider">The type to remove.</typeparam>
          <param name="list">This list of <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider" />s.</param>
          <summary>
            Removes all model validator providers of the specified type.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidatorProviderExtensions" Member="M:Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidatorProviderExtensions.RemoveType``1(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IList`1" />
      </Targets>
      <Member MemberName="RemoveType">
        <MemberSignature Language="C#" Value="public static void RemoveType (this System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory&gt; list, Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveType(class System.Collections.Generic.IList`1&lt;class Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory&gt; list, class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryExtensions.RemoveType(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory},System.Type)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="list" Type="System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory&gt;" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="list">The list of <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory" />.</param>
          <param name="type">The type to remove.</param>
          <summary>
            Removes all value provider factories of the specified type.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryExtensions" Member="M:Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryExtensions.RemoveType(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory},System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IList`1" />
      </Targets>
      <Member MemberName="RemoveType&lt;TValueProviderFactory&gt;">
        <MemberSignature Language="C#" Value="public static void RemoveType&lt;TValueProviderFactory&gt; (this System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory&gt; list) where TValueProviderFactory : Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveType&lt;(class Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory) TValueProviderFactory&gt;(class System.Collections.Generic.IList`1&lt;class Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory&gt; list) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryExtensions.RemoveType``1(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TValueProviderFactory">
            <Constraints>
              <InterfaceName>Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="list" Type="System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TValueProviderFactory">The type to remove.</typeparam>
          <param name="list">The list of <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory" />.</param>
          <summary>
            Removes all value provider factories of the specified type.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryExtensions" Member="M:Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryExtensions.RemoveType``1(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult" />
      </Targets>
      <Member MemberName="ConvertTo">
        <MemberSignature Language="C#" Value="public static object ConvertTo (this Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult result, Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ConvertTo(valuetype Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult result, class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResultExtensions.ConvertTo(Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult,System.Type)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Object</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="result" Type="Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="result">The <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult" />.</param>
          <param name="type">The <see cref="T:System.Type" /> for conversion.</param>
          <summary>
            Attempts to convert the values in <paramref name="result" /> to the specified type.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResultExtensions" Member="M:Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResultExtensions.ConvertTo(Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult" />
      </Targets>
      <Member MemberName="ConvertTo&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T ConvertTo&lt;T&gt; (this Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult result);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T ConvertTo&lt;T&gt;(valuetype Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult result) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResultExtensions.ConvertTo``1(Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="result" Type="Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The <see cref="T:System.Type" /> for conversion.</typeparam>
          <param name="result">The <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult" />.</param>
          <summary>
            Attempts to convert the values in <paramref name="result" /> to the specified type.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResultExtensions" Member="M:Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResultExtensions.ConvertTo``1(Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor" />
      </Targets>
      <Member MemberName="GetViewComponentName">
        <MemberSignature Language="C#" Value="public static string GetViewComponentName (this Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor tagHelper);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetViewComponentName(class Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor tagHelper) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Razor.Extensions.TagHelperDescriptorExtensions.GetViewComponentName(Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="tagHelper" Type="Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor" RefType="this" />
        </Parameters>
        <Docs>
          <param name="tagHelper">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Razor.Extensions.TagHelperDescriptorExtensions" Member="M:Microsoft.AspNetCore.Mvc.Razor.Extensions.TagHelperDescriptorExtensions.GetViewComponentName(Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor" />
      </Targets>
      <Member MemberName="IsViewComponentKind">
        <MemberSignature Language="C#" Value="public static bool IsViewComponentKind (this Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor tagHelper);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsViewComponentKind(class Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor tagHelper) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Razor.Extensions.TagHelperDescriptorExtensions.IsViewComponentKind(Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="tagHelper" Type="Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor" RefType="this" />
        </Parameters>
        <Docs>
          <param name="tagHelper">The <see cref="T:Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor" /> to check.</param>
          <summary>
            Indicates whether a <see cref="T:Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor" /> represents a view component.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Razor.Extensions.TagHelperDescriptorExtensions" Member="M:Microsoft.AspNetCore.Mvc.Razor.Extensions.TagHelperDescriptorExtensions.IsViewComponentKind(Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="AfterViewPage">
        <MemberSignature Language="C#" Value="public static void AfterViewPage (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Razor.IRazorPage page, Microsoft.AspNetCore.Mvc.Rendering.ViewContext viewContext);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AfterViewPage(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Razor.IRazorPage page, class Microsoft.AspNetCore.Mvc.Rendering.ViewContext viewContext) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Razor.Internal.MvcRazorDiagnosticSourceExtensions.AfterViewPage(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Razor.IRazorPage,Microsoft.AspNetCore.Mvc.Rendering.ViewContext)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="page" Type="Microsoft.AspNetCore.Mvc.Razor.IRazorPage" />
          <Parameter Name="viewContext" Type="Microsoft.AspNetCore.Mvc.Rendering.ViewContext" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="page">To be added.</param>
          <param name="viewContext">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Razor.Internal.MvcRazorDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Razor.Internal.MvcRazorDiagnosticSourceExtensions.AfterViewPage(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Razor.IRazorPage,Microsoft.AspNetCore.Mvc.Rendering.ViewContext)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticSource" />
      </Targets>
      <Member MemberName="BeforeViewPage">
        <MemberSignature Language="C#" Value="public static void BeforeViewPage (this System.Diagnostics.DiagnosticSource diagnosticSource, Microsoft.AspNetCore.Mvc.Razor.IRazorPage page, Microsoft.AspNetCore.Mvc.Rendering.ViewContext viewContext);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BeforeViewPage(class System.Diagnostics.DiagnosticSource diagnosticSource, class Microsoft.AspNetCore.Mvc.Razor.IRazorPage page, class Microsoft.AspNetCore.Mvc.Rendering.ViewContext viewContext) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Razor.Internal.MvcRazorDiagnosticSourceExtensions.BeforeViewPage(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Razor.IRazorPage,Microsoft.AspNetCore.Mvc.Rendering.ViewContext)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnosticSource" Type="System.Diagnostics.DiagnosticSource" RefType="this" />
          <Parameter Name="page" Type="Microsoft.AspNetCore.Mvc.Razor.IRazorPage" />
          <Parameter Name="viewContext" Type="Microsoft.AspNetCore.Mvc.Rendering.ViewContext" />
        </Parameters>
        <Docs>
          <param name="diagnosticSource">To be added.</param>
          <param name="page">To be added.</param>
          <param name="viewContext">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Razor.Internal.MvcRazorDiagnosticSourceExtensions" Member="M:Microsoft.AspNetCore.Mvc.Razor.Internal.MvcRazorDiagnosticSourceExtensions.BeforeViewPage(System.Diagnostics.DiagnosticSource,Microsoft.AspNetCore.Mvc.Razor.IRazorPage,Microsoft.AspNetCore.Mvc.Rendering.ViewContext)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="GeneratedCodeToAssemblyCompilationEnd">
        <MemberSignature Language="C#" Value="public static void GeneratedCodeToAssemblyCompilationEnd (this Microsoft.Extensions.Logging.ILogger logger, string filePath, long startTimestamp);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GeneratedCodeToAssemblyCompilationEnd(class Microsoft.Extensions.Logging.ILogger logger, string filePath, int64 startTimestamp) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Razor.Internal.MvcRazorLoggerExtensions.GeneratedCodeToAssemblyCompilationEnd(Microsoft.Extensions.Logging.ILogger,System.String,System.Int64)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="filePath" Type="System.String" />
          <Parameter Name="startTimestamp" Type="System.Int64" />
        </Parameters>
        <Docs>
          <param name="logger">To be added.</param>
          <param name="filePath">To be added.</param>
          <param name="startTimestamp">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Razor.Internal.MvcRazorLoggerExtensions" Member="M:Microsoft.AspNetCore.Mvc.Razor.Internal.MvcRazorLoggerExtensions.GeneratedCodeToAssemblyCompilationEnd(Microsoft.Extensions.Logging.ILogger,System.String,System.Int64)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="GeneratedCodeToAssemblyCompilationStart">
        <MemberSignature Language="C#" Value="public static void GeneratedCodeToAssemblyCompilationStart (this Microsoft.Extensions.Logging.ILogger logger, string filePath);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GeneratedCodeToAssemblyCompilationStart(class Microsoft.Extensions.Logging.ILogger logger, string filePath) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Razor.Internal.MvcRazorLoggerExtensions.GeneratedCodeToAssemblyCompilationStart(Microsoft.Extensions.Logging.ILogger,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="filePath" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="logger">To be added.</param>
          <param name="filePath">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Razor.Internal.MvcRazorLoggerExtensions" Member="M:Microsoft.AspNetCore.Mvc.Razor.Internal.MvcRazorLoggerExtensions.GeneratedCodeToAssemblyCompilationStart(Microsoft.Extensions.Logging.ILogger,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="PrecompiledViewFound">
        <MemberSignature Language="C#" Value="public static void PrecompiledViewFound (this Microsoft.Extensions.Logging.ILogger logger, string relativePath);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PrecompiledViewFound(class Microsoft.Extensions.Logging.ILogger logger, string relativePath) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Razor.Internal.MvcRazorLoggerExtensions.PrecompiledViewFound(Microsoft.Extensions.Logging.ILogger,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="relativePath" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="logger">To be added.</param>
          <param name="relativePath">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Razor.Internal.MvcRazorLoggerExtensions" Member="M:Microsoft.AspNetCore.Mvc.Razor.Internal.MvcRazorLoggerExtensions.PrecompiledViewFound(Microsoft.Extensions.Logging.ILogger,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="RazorFileToCodeCompilationEnd">
        <MemberSignature Language="C#" Value="public static void RazorFileToCodeCompilationEnd (this Microsoft.Extensions.Logging.ILogger logger, string filePath, long startTimestamp);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RazorFileToCodeCompilationEnd(class Microsoft.Extensions.Logging.ILogger logger, string filePath, int64 startTimestamp) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Razor.Internal.MvcRazorLoggerExtensions.RazorFileToCodeCompilationEnd(Microsoft.Extensions.Logging.ILogger,System.String,System.Int64)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="filePath" Type="System.String" />
          <Parameter Name="startTimestamp" Type="System.Int64" />
        </Parameters>
        <Docs>
          <param name="logger">To be added.</param>
          <param name="filePath">To be added.</param>
          <param name="startTimestamp">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Razor.Internal.MvcRazorLoggerExtensions" Member="M:Microsoft.AspNetCore.Mvc.Razor.Internal.MvcRazorLoggerExtensions.RazorFileToCodeCompilationEnd(Microsoft.Extensions.Logging.ILogger,System.String,System.Int64)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="RazorFileToCodeCompilationStart">
        <MemberSignature Language="C#" Value="public static void RazorFileToCodeCompilationStart (this Microsoft.Extensions.Logging.ILogger logger, string filePath);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RazorFileToCodeCompilationStart(class Microsoft.Extensions.Logging.ILogger logger, string filePath) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Razor.Internal.MvcRazorLoggerExtensions.RazorFileToCodeCompilationStart(Microsoft.Extensions.Logging.ILogger,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="filePath" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="logger">To be added.</param>
          <param name="filePath">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Razor.Internal.MvcRazorLoggerExtensions" Member="M:Microsoft.AspNetCore.Mvc.Razor.Internal.MvcRazorLoggerExtensions.RazorFileToCodeCompilationStart(Microsoft.Extensions.Logging.ILogger,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="TagHelperComponentInitialized">
        <MemberSignature Language="C#" Value="public static void TagHelperComponentInitialized (this Microsoft.Extensions.Logging.ILogger logger, string componentName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TagHelperComponentInitialized(class Microsoft.Extensions.Logging.ILogger logger, string componentName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Razor.Internal.MvcRazorLoggerExtensions.TagHelperComponentInitialized(Microsoft.Extensions.Logging.ILogger,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="componentName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="logger">To be added.</param>
          <param name="componentName">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Razor.Internal.MvcRazorLoggerExtensions" Member="M:Microsoft.AspNetCore.Mvc.Razor.Internal.MvcRazorLoggerExtensions.TagHelperComponentInitialized(Microsoft.Extensions.Logging.ILogger,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="TagHelperComponentProcessed">
        <MemberSignature Language="C#" Value="public static void TagHelperComponentProcessed (this Microsoft.Extensions.Logging.ILogger logger, string componentName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TagHelperComponentProcessed(class Microsoft.Extensions.Logging.ILogger logger, string componentName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Razor.Internal.MvcRazorLoggerExtensions.TagHelperComponentProcessed(Microsoft.Extensions.Logging.ILogger,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="componentName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="logger">To be added.</param>
          <param name="componentName">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Razor.Internal.MvcRazorLoggerExtensions" Member="M:Microsoft.AspNetCore.Mvc.Razor.Internal.MvcRazorLoggerExtensions.TagHelperComponentProcessed(Microsoft.Extensions.Logging.ILogger,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="ViewLookupCacheHit">
        <MemberSignature Language="C#" Value="public static void ViewLookupCacheHit (this Microsoft.Extensions.Logging.ILogger logger, string viewName, string controllerName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ViewLookupCacheHit(class Microsoft.Extensions.Logging.ILogger logger, string viewName, string controllerName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Razor.Internal.MvcRazorLoggerExtensions.ViewLookupCacheHit(Microsoft.Extensions.Logging.ILogger,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="viewName" Type="System.String" />
          <Parameter Name="controllerName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="logger">To be added.</param>
          <param name="viewName">To be added.</param>
          <param name="controllerName">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Razor.Internal.MvcRazorLoggerExtensions" Member="M:Microsoft.AspNetCore.Mvc.Razor.Internal.MvcRazorLoggerExtensions.ViewLookupCacheHit(Microsoft.Extensions.Logging.ILogger,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="ViewLookupCacheMiss">
        <MemberSignature Language="C#" Value="public static void ViewLookupCacheMiss (this Microsoft.Extensions.Logging.ILogger logger, string viewName, string controllerName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ViewLookupCacheMiss(class Microsoft.Extensions.Logging.ILogger logger, string viewName, string controllerName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Razor.Internal.MvcRazorLoggerExtensions.ViewLookupCacheMiss(Microsoft.Extensions.Logging.ILogger,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="viewName" Type="System.String" />
          <Parameter Name="controllerName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="logger">To be added.</param>
          <param name="viewName">To be added.</param>
          <param name="controllerName">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Razor.Internal.MvcRazorLoggerExtensions" Member="M:Microsoft.AspNetCore.Mvc.Razor.Internal.MvcRazorLoggerExtensions.ViewLookupCacheMiss(Microsoft.Extensions.Logging.ILogger,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="Display">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent Display (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent Display(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.Display(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">
            Expression name, relative to the current model. May identify a single property or an
            <see cref="T:System.Object" /> that contains the properties to display.
            </param>
          <summary>
            Returns HTML markup for the <paramref name="expression" />, using a display template. The template is found
            using the <paramref name="expression" />'s <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.Display(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="Display">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent Display (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, object additionalViewData);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent Display(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, object additionalViewData) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.Display(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
          <Parameter Name="additionalViewData" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">
            Expression name, relative to the current model. May identify a single property or an
            <see cref="T:System.Object" /> that contains the properties to display.
            </param>
          <param name="additionalViewData">
            An anonymous <see cref="T:System.Object" /> or <see cref="T:System.Collections.Generic.IDictionary`2" />
            that can contain additional view data that will be merged into the
            <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary`1" /> instance created for the template.
            </param>
          <summary>
            Returns HTML markup for the <paramref name="expression" />, using a display template and specified
            additional view data. The template is found using the <paramref name="expression" />'s
            <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.Display(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="Display">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent Display (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, string templateName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent Display(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, string templateName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.Display(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
          <Parameter Name="templateName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">
            Expression name, relative to the current model. May identify a single property or an
            <see cref="T:System.Object" /> that contains the properties to display.
            </param>
          <param name="templateName">The name of the template used to create the HTML markup.</param>
          <summary>
            Returns HTML markup for the <paramref name="expression" />, using a display template. The template is found
            using the <paramref name="templateName" /> or the <paramref name="expression" />'s
            <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.Display(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="Display">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent Display (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, string templateName, object additionalViewData);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent Display(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, string templateName, object additionalViewData) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.Display(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
          <Parameter Name="templateName" Type="System.String" />
          <Parameter Name="additionalViewData" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">
            Expression name, relative to the current model. May identify a single property or an
            <see cref="T:System.Object" /> that contains the properties to display.
            </param>
          <param name="templateName">The name of the template used to create the HTML markup.</param>
          <param name="additionalViewData">
            An anonymous <see cref="T:System.Object" /> or <see cref="T:System.Collections.Generic.IDictionary`2" />
            that can contain additional view data that will be merged into the
            <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary`1" /> instance created for the template.
            </param>
          <summary>
            Returns HTML markup for the <paramref name="expression" />, using a display template and specified
            additional view data. The template is found using the <paramref name="templateName" /> or the
            <paramref name="expression" />'s <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.Display(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="Display">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent Display (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, string templateName, string htmlFieldName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent Display(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, string templateName, string htmlFieldName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.Display(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
          <Parameter Name="templateName" Type="System.String" />
          <Parameter Name="htmlFieldName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">
            Expression name, relative to the current model. May identify a single property or an
            <see cref="T:System.Object" /> that contains the properties to display.
            </param>
          <param name="templateName">The name of the template used to create the HTML markup.</param>
          <param name="htmlFieldName">
            A <see cref="T:System.String" /> used to disambiguate the names of HTML elements that are created for
            properties that have the same name.
            </param>
          <summary>
            Returns HTML markup for the <paramref name="expression" />, using a display template and specified HTML
            field name. The template is found using the <paramref name="templateName" /> or the
            <paramref name="expression" />'s<see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.Display(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" />
      </Targets>
      <Member MemberName="DisplayFor&lt;TModel,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent DisplayFor&lt;TModel,TResult&gt; (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt; htmlHelper, System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent DisplayFor&lt;TModel, TResult&gt;(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1&lt;!!TModel&gt; htmlHelper, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TModel, !!TResult&gt;&gt; expression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModel" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt;" RefType="this" />
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TModel">The type of the model.</typeparam>
          <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" /> instance this method extends.</param>
          <param name="expression">An expression to be evaluated against the current model.</param>
          <summary>
            Returns HTML markup for the <paramref name="expression" />, using a display template. The template is found
            using the <paramref name="expression" />'s <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" />
      </Targets>
      <Member MemberName="DisplayFor&lt;TModel,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent DisplayFor&lt;TModel,TResult&gt; (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt; htmlHelper, System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression, object additionalViewData);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent DisplayFor&lt;TModel, TResult&gt;(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1&lt;!!TModel&gt; htmlHelper, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TModel, !!TResult&gt;&gt; expression, object additionalViewData) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModel" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt;" RefType="this" />
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
          <Parameter Name="additionalViewData" Type="System.Object" />
        </Parameters>
        <Docs>
          <typeparam name="TModel">The type of the model.</typeparam>
          <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" /> instance this method extends.</param>
          <param name="expression">An expression to be evaluated against the current model.</param>
          <param name="additionalViewData">
            An anonymous <see cref="T:System.Object" /> or <see cref="T:System.Collections.Generic.IDictionary`2" />
            that can contain additional view data that will be merged into the
            <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary`1" /> instance created for the template.
            </param>
          <summary>
            Returns HTML markup for the <paramref name="expression" />, using a display template and specified
            additional view data. The template is found using the <paramref name="expression" />'s
            <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" />
      </Targets>
      <Member MemberName="DisplayFor&lt;TModel,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent DisplayFor&lt;TModel,TResult&gt; (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt; htmlHelper, System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression, string templateName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent DisplayFor&lt;TModel, TResult&gt;(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1&lt;!!TModel&gt; htmlHelper, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TModel, !!TResult&gt;&gt; expression, string templateName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModel" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt;" RefType="this" />
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
          <Parameter Name="templateName" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TModel">The type of the model.</typeparam>
          <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" /> instance this method extends.</param>
          <param name="expression">An expression to be evaluated against the current model.</param>
          <param name="templateName">The name of the template used to create the HTML markup.</param>
          <summary>
            Returns HTML markup for the <paramref name="expression" />, using a display template. The template is found
            using the <paramref name="templateName" /> or the <paramref name="expression" />'s
            <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" />
      </Targets>
      <Member MemberName="DisplayFor&lt;TModel,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent DisplayFor&lt;TModel,TResult&gt; (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt; htmlHelper, System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression, string templateName, object additionalViewData);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent DisplayFor&lt;TModel, TResult&gt;(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1&lt;!!TModel&gt; htmlHelper, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TModel, !!TResult&gt;&gt; expression, string templateName, object additionalViewData) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModel" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt;" RefType="this" />
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
          <Parameter Name="templateName" Type="System.String" />
          <Parameter Name="additionalViewData" Type="System.Object" />
        </Parameters>
        <Docs>
          <typeparam name="TModel">The type of the model.</typeparam>
          <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" /> instance this method extends.</param>
          <param name="expression">An expression to be evaluated against the current model.</param>
          <param name="templateName">The name of the template used to create the HTML markup.</param>
          <param name="additionalViewData">
            An anonymous <see cref="T:System.Object" /> or <see cref="T:System.Collections.Generic.IDictionary`2" />
            that can contain additional view data that will be merged into the
            <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary`1" /> instance created for the template.
            </param>
          <summary>
            Returns HTML markup for the <paramref name="expression" />, using a display template and specified
            additional view data. The template is found using the <paramref name="templateName" /> or the
            <paramref name="expression" />'s <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" />
      </Targets>
      <Member MemberName="DisplayFor&lt;TModel,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent DisplayFor&lt;TModel,TResult&gt; (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt; htmlHelper, System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression, string templateName, string htmlFieldName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent DisplayFor&lt;TModel, TResult&gt;(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1&lt;!!TModel&gt; htmlHelper, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TModel, !!TResult&gt;&gt; expression, string templateName, string htmlFieldName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModel" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt;" RefType="this" />
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
          <Parameter Name="templateName" Type="System.String" />
          <Parameter Name="htmlFieldName" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TModel">The type of the model.</typeparam>
          <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" /> instance this method extends.</param>
          <param name="expression">An expression to be evaluated against the current model.</param>
          <param name="templateName">The name of the template used to create the HTML markup.</param>
          <param name="htmlFieldName">
            A <see cref="T:System.String" /> used to disambiguate the names of HTML elements that are created for properties
            that have the same name.
            </param>
          <summary>
            Returns HTML markup for the <paramref name="expression" />, using a display template and specified HTML
            field name. The template is found using the <paramref name="templateName" /> or the
            <paramref name="expression" />'s <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="DisplayForModel">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent DisplayForModel (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent DisplayForModel(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <summary>
            Returns HTML markup for the current model, using a display template. The template is found using the
            model's <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="DisplayForModel">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent DisplayForModel (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, object additionalViewData);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent DisplayForModel(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, object additionalViewData) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="additionalViewData" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="additionalViewData">
            An anonymous <see cref="T:System.Object" /> or <see cref="T:System.Collections.Generic.IDictionary`2" />
            that can contain additional view data that will be merged into the
            <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary`1" /> instance created for the template.
            </param>
          <summary>
            Returns HTML markup for the current model, using a display template and specified additional view data. The
            template is found using the model's <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="DisplayForModel">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent DisplayForModel (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string templateName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent DisplayForModel(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string templateName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="templateName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="templateName">The name of the template used to create the HTML markup.</param>
          <summary>
            Returns HTML markup for the current model, using a display template. The template is found using the
            <paramref name="templateName" /> or the model's <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="DisplayForModel">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent DisplayForModel (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string templateName, object additionalViewData);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent DisplayForModel(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string templateName, object additionalViewData) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="templateName" Type="System.String" />
          <Parameter Name="additionalViewData" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="templateName">The name of the template used to create the HTML markup.</param>
          <param name="additionalViewData">
            An anonymous <see cref="T:System.Object" /> or <see cref="T:System.Collections.Generic.IDictionary`2" />
            that can contain additional view data that will be merged into the
            <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary`1" /> instance created for the template.
            </param>
          <summary>
            Returns HTML markup for the current model, using a display template and specified additional view data. The
            template is found using the <paramref name="templateName" /> or the model's
            <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="DisplayForModel">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent DisplayForModel (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string templateName, string htmlFieldName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent DisplayForModel(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string templateName, string htmlFieldName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="templateName" Type="System.String" />
          <Parameter Name="htmlFieldName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="templateName">The name of the template used to create the HTML markup.</param>
          <param name="htmlFieldName">
            A <see cref="T:System.String" /> used to disambiguate the names of HTML elements that are created for
            properties that have the same name.
            </param>
          <summary>
            Returns HTML markup for the current model, using a display template and specified HTML field name. The
            template is found using the <paramref name="templateName" /> or the model's
            <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="DisplayForModel">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent DisplayForModel (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string templateName, string htmlFieldName, object additionalViewData);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent DisplayForModel(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string templateName, string htmlFieldName, object additionalViewData) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="templateName" Type="System.String" />
          <Parameter Name="htmlFieldName" Type="System.String" />
          <Parameter Name="additionalViewData" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="templateName">The name of the template used to create the HTML markup.</param>
          <param name="htmlFieldName">
            A <see cref="T:System.String" /> used to disambiguate the names of HTML elements that are created for
            properties that have the same name.
            </param>
          <param name="additionalViewData">
            An anonymous <see cref="T:System.Object" /> or <see cref="T:System.Collections.Generic.IDictionary`2" />
            that can contain additional view data that will be merged into the
            <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary`1" /> instance created for the template.
            </param>
          <summary>
            Returns HTML markup for the current model, using a display template, specified HTML field name, and
            additional view data. The template is found using the <paramref name="templateName" /> or the model's
            <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" />
      </Targets>
      <Member MemberName="DisplayNameFor&lt;TModelItem,TResult&gt;">
        <MemberSignature Language="C#" Value="public static string DisplayNameFor&lt;TModelItem,TResult&gt; (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;System.Collections.Generic.IEnumerable&lt;TModelItem&gt;&gt; htmlHelper, System.Linq.Expressions.Expression&lt;Func&lt;TModelItem,TResult&gt;&gt; expression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string DisplayNameFor&lt;TModelItem, TResult&gt;(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1&lt;class System.Collections.Generic.IEnumerable`1&lt;!!TModelItem&gt;&gt; htmlHelper, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TModelItem, !!TResult&gt;&gt; expression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayNameExtensions.DisplayNameFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{System.Collections.Generic.IEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModelItem" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;System.Collections.Generic.IEnumerable&lt;TModelItem&gt;&gt;" RefType="this" />
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModelItem,TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TModelItem">The type of items in the model collection.</typeparam>
          <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
          <param name="htmlHelper">
            The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" /> of <see cref="T:System.Collections.Generic.IEnumerable`1" /> instance this method extends.
            </param>
          <param name="expression">An expression to be evaluated against an item in the current model.</param>
          <summary>
            Returns the display name for the specified <paramref name="expression" />
            if the current model represents a collection.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayNameExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayNameExtensions.DisplayNameFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{System.Collections.Generic.IEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="DisplayNameForModel">
        <MemberSignature Language="C#" Value="public static string DisplayNameForModel (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string DisplayNameForModel(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayNameExtensions.DisplayNameForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <summary>
            Returns the display name for the current model.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayNameExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperDisplayNameExtensions.DisplayNameForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="Editor">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent Editor (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent Editor(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.Editor(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">
            Expression name, relative to the current model. May identify a single property or an
            <see cref="T:System.Object" /> that contains the properties to edit.
            </param>
          <summary>
            Returns HTML markup for the <paramref name="expression" />, using an editor template. The template is found
            using the <paramref name="expression" />'s <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.Editor(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="Editor">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent Editor (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, object additionalViewData);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent Editor(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, object additionalViewData) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.Editor(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
          <Parameter Name="additionalViewData" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">
            Expression name, relative to the current model. May identify a single property or an
            <see cref="T:System.Object" /> that contains the properties to edit.
            </param>
          <param name="additionalViewData">
            An anonymous <see cref="T:System.Object" /> or <see cref="T:System.Collections.Generic.IDictionary`2" />
            that can contain additional view data that will be merged into the
            <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary`1" /> instance created for the template.
            </param>
          <summary>
            Returns HTML markup for the <paramref name="expression" />, using an editor template and specified
            additional view data. The template is found using the <paramref name="expression" />'s
            <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.Editor(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="Editor">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent Editor (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, string templateName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent Editor(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, string templateName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.Editor(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
          <Parameter Name="templateName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">
            Expression name, relative to the current model. May identify a single property or an
            <see cref="T:System.Object" /> that contains the properties to edit.
            </param>
          <param name="templateName">The name of the template used to create the HTML markup.</param>
          <summary>
            Returns HTML markup for the <paramref name="expression" />, using an editor template. The template is found
            using the <paramref name="templateName" /> or the <paramref name="expression" />'s
            <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.Editor(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="Editor">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent Editor (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, string templateName, object additionalViewData);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent Editor(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, string templateName, object additionalViewData) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.Editor(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
          <Parameter Name="templateName" Type="System.String" />
          <Parameter Name="additionalViewData" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">
            Expression name, relative to the current model. May identify a single property or an
            <see cref="T:System.Object" /> that contains the properties to edit.
            </param>
          <param name="templateName">The name of the template used to create the HTML markup.</param>
          <param name="additionalViewData">
            An anonymous <see cref="T:System.Object" /> or <see cref="T:System.Collections.Generic.IDictionary`2" />
            that can contain additional view data that will be merged into the
            <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary`1" /> instance created for the template.
            </param>
          <summary>
            Returns HTML markup for the <paramref name="expression" />, using an editor template and specified
            additional view data. The template is found using the <paramref name="templateName" /> or the
            <paramref name="expression" />'s <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.Editor(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="Editor">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent Editor (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, string templateName, string htmlFieldName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent Editor(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, string templateName, string htmlFieldName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.Editor(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
          <Parameter Name="templateName" Type="System.String" />
          <Parameter Name="htmlFieldName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">
            Expression name, relative to the current model. May identify a single property or an
            <see cref="T:System.Object" /> that contains the properties to edit.
            </param>
          <param name="templateName">The name of the template used to create the HTML markup.</param>
          <param name="htmlFieldName">
            A <see cref="T:System.String" /> used to disambiguate the names of HTML elements that are created for
            properties that have the same name.
            </param>
          <summary>
            Returns HTML markup for the <paramref name="expression" />, using an editor template and specified HTML
            field name. The template is found using the <paramref name="templateName" /> or the
            <paramref name="expression" />'s <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.Editor(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" />
      </Targets>
      <Member MemberName="EditorFor&lt;TModel,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent EditorFor&lt;TModel,TResult&gt; (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt; htmlHelper, System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent EditorFor&lt;TModel, TResult&gt;(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1&lt;!!TModel&gt; htmlHelper, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TModel, !!TResult&gt;&gt; expression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModel" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt;" RefType="this" />
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TModel">The type of the model.</typeparam>
          <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" /> instance this method extends.</param>
          <param name="expression">An expression to be evaluated against the current model.</param>
          <summary>
            Returns HTML markup for the <paramref name="expression" />, using an editor template. The template is found
            using the <paramref name="expression" />'s <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" />
      </Targets>
      <Member MemberName="EditorFor&lt;TModel,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent EditorFor&lt;TModel,TResult&gt; (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt; htmlHelper, System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression, object additionalViewData);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent EditorFor&lt;TModel, TResult&gt;(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1&lt;!!TModel&gt; htmlHelper, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TModel, !!TResult&gt;&gt; expression, object additionalViewData) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModel" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt;" RefType="this" />
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
          <Parameter Name="additionalViewData" Type="System.Object" />
        </Parameters>
        <Docs>
          <typeparam name="TModel">The type of the model.</typeparam>
          <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" /> instance this method extends.</param>
          <param name="expression">An expression to be evaluated against the current model.</param>
          <param name="additionalViewData">
            An anonymous <see cref="T:System.Object" /> or <see cref="T:System.Collections.Generic.IDictionary`2" />
            that can contain additional view data that will be merged into the
            <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary`1" /> instance created for the template.
            </param>
          <summary>
            Returns HTML markup for the <paramref name="expression" />, using an editor template and specified
            additional view data. The template is found using the <paramref name="expression" />'s
            <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" />
      </Targets>
      <Member MemberName="EditorFor&lt;TModel,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent EditorFor&lt;TModel,TResult&gt; (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt; htmlHelper, System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression, string templateName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent EditorFor&lt;TModel, TResult&gt;(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1&lt;!!TModel&gt; htmlHelper, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TModel, !!TResult&gt;&gt; expression, string templateName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModel" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt;" RefType="this" />
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
          <Parameter Name="templateName" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TModel">The type of the model.</typeparam>
          <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" /> instance this method extends.</param>
          <param name="expression">An expression to be evaluated against the current model.</param>
          <param name="templateName">The name of the template that is used to create the HTML markup.</param>
          <summary>
            Returns HTML markup for the <paramref name="expression" />, using an editor template. The template is found
            using the <paramref name="templateName" /> or the <paramref name="expression" />'s
            <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" />
      </Targets>
      <Member MemberName="EditorFor&lt;TModel,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent EditorFor&lt;TModel,TResult&gt; (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt; htmlHelper, System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression, string templateName, object additionalViewData);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent EditorFor&lt;TModel, TResult&gt;(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1&lt;!!TModel&gt; htmlHelper, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TModel, !!TResult&gt;&gt; expression, string templateName, object additionalViewData) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModel" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt;" RefType="this" />
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
          <Parameter Name="templateName" Type="System.String" />
          <Parameter Name="additionalViewData" Type="System.Object" />
        </Parameters>
        <Docs>
          <typeparam name="TModel">The type of the model.</typeparam>
          <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" /> instance this method extends.</param>
          <param name="expression">An expression to be evaluated against the current model.</param>
          <param name="templateName">The name of the template that is used to create the HTML markup.</param>
          <param name="additionalViewData">
            An anonymous <see cref="T:System.Object" /> or <see cref="T:System.Collections.Generic.IDictionary`2" />
            that can contain additional view data that will be merged into the
            <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary`1" /> instance created for the template.
            </param>
          <summary>
            Returns HTML markup for the <paramref name="expression" />, using an editor template and specified
            additional view data. The template is found using the <paramref name="templateName" /> or the
            <paramref name="expression" />'s <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" />
      </Targets>
      <Member MemberName="EditorFor&lt;TModel,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent EditorFor&lt;TModel,TResult&gt; (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt; htmlHelper, System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression, string templateName, string htmlFieldName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent EditorFor&lt;TModel, TResult&gt;(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1&lt;!!TModel&gt; htmlHelper, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TModel, !!TResult&gt;&gt; expression, string templateName, string htmlFieldName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModel" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt;" RefType="this" />
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
          <Parameter Name="templateName" Type="System.String" />
          <Parameter Name="htmlFieldName" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TModel">The type of the model.</typeparam>
          <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" /> instance this method extends.</param>
          <param name="expression">An expression to be evaluated against the current model.</param>
          <param name="templateName">The name of the template that is used to create the HTML markup.</param>
          <param name="htmlFieldName">
            A <see cref="T:System.String" /> used to disambiguate the names of HTML elements that are created for properties
            that have the same name.
            </param>
          <summary>
            Returns HTML markup for the <paramref name="expression" />, using an editor template and specified HTML
            field name. The template is found using the <paramref name="templateName" /> or the
            <paramref name="expression" />'s <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="EditorForModel">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent EditorForModel (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent EditorForModel(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <summary>
            Returns HTML markup for the current model, using an editor template. The template is found using the
            model's <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="EditorForModel">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent EditorForModel (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, object additionalViewData);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent EditorForModel(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, object additionalViewData) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="additionalViewData" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="additionalViewData">
            An anonymous <see cref="T:System.Object" /> or <see cref="T:System.Collections.Generic.IDictionary`2" />
            that can contain additional view data that will be merged into the
            <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary`1" /> instance created for the template.
            </param>
          <summary>
            Returns HTML markup for the current model, using an editor template and specified additional view data. The
            template is found using the model's <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="EditorForModel">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent EditorForModel (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string templateName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent EditorForModel(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string templateName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="templateName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="templateName">The name of the template used to create the HTML markup.</param>
          <summary>
            Returns HTML markup for the current model, using an editor template. The template is found using the
            <paramref name="templateName" /> or the model's <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="EditorForModel">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent EditorForModel (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string templateName, object additionalViewData);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent EditorForModel(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string templateName, object additionalViewData) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="templateName" Type="System.String" />
          <Parameter Name="additionalViewData" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="templateName">The name of the template used to create the HTML markup.</param>
          <param name="additionalViewData">
            An anonymous <see cref="T:System.Object" /> or <see cref="T:System.Collections.Generic.IDictionary`2" />
            that can contain additional view data that will be merged into the
            <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary`1" /> instance created for the template.
            </param>
          <summary>
            Returns HTML markup for the current model, using an editor template and specified additional view data. The
            template is found using the <paramref name="templateName" /> or the model's
            <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="EditorForModel">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent EditorForModel (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string templateName, string htmlFieldName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent EditorForModel(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string templateName, string htmlFieldName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="templateName" Type="System.String" />
          <Parameter Name="htmlFieldName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="templateName">The name of the template used to create the HTML markup.</param>
          <param name="htmlFieldName">
            A <see cref="T:System.String" /> used to disambiguate the names of HTML elements that are created for
            properties that have the same name.
            </param>
          <summary>
            Returns HTML markup for the current model, using an editor template and specified HTML field name. The
            template is found using the <paramref name="templateName" /> or the model's
            <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="EditorForModel">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent EditorForModel (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string templateName, string htmlFieldName, object additionalViewData);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent EditorForModel(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string templateName, string htmlFieldName, object additionalViewData) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="templateName" Type="System.String" />
          <Parameter Name="htmlFieldName" Type="System.String" />
          <Parameter Name="additionalViewData" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="templateName">The name of the template used to create the HTML markup.</param>
          <param name="htmlFieldName">
            A <see cref="T:System.String" /> used to disambiguate the names of HTML elements that are created for
            properties that have the same name.
            </param>
          <param name="additionalViewData">
            An anonymous <see cref="T:System.Object" /> or <see cref="T:System.Collections.Generic.IDictionary`2" />
            that can contain additional view data that will be merged into the
            <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary`1" /> instance created for the template.
            </param>
          <summary>
            Returns HTML markup for the current model, using an editor template, specified HTML field name, and
            additional view data. The template is found using the <paramref name="templateName" /> or the model's
            <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperEditorExtensions.EditorForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="BeginForm">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Mvc.Rendering.MvcForm</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <summary>
            Renders a &lt;form&gt; start tag to the response. The &lt;form&gt;'s <c>action</c> attribute value will
            match the current request.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="BeginForm">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, Microsoft.AspNetCore.Mvc.Rendering.FormMethod method);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, valuetype Microsoft.AspNetCore.Mvc.Rendering.FormMethod method) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,Microsoft.AspNetCore.Mvc.Rendering.FormMethod)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Mvc.Rendering.MvcForm</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="method" Type="Microsoft.AspNetCore.Mvc.Rendering.FormMethod" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="method">The HTTP method for processing the form, either GET or POST.</param>
          <summary>
            Renders a &lt;form&gt; start tag to the response. When the user submits the form, the
            current action will process the request.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,Microsoft.AspNetCore.Mvc.Rendering.FormMethod)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="BeginForm">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, Microsoft.AspNetCore.Mvc.Rendering.FormMethod method, Nullable&lt;bool&gt; antiforgery, object htmlAttributes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, valuetype Microsoft.AspNetCore.Mvc.Rendering.FormMethod method, valuetype System.Nullable`1&lt;bool&gt; antiforgery, object htmlAttributes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,Microsoft.AspNetCore.Mvc.Rendering.FormMethod,System.Nullable{System.Boolean},System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Mvc.Rendering.MvcForm</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="method" Type="Microsoft.AspNetCore.Mvc.Rendering.FormMethod" />
          <Parameter Name="antiforgery" Type="System.Nullable&lt;System.Boolean&gt;" />
          <Parameter Name="htmlAttributes" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="method">The HTTP method for processing the form, either GET or POST.</param>
          <param name="antiforgery">
            If <c>true</c>, &lt;form&gt; elements will include an antiforgery token.
            If <c>false</c>, suppresses the generation an &lt;input&gt; of type "hidden" with an antiforgery token.
            If <c>null</c>, &lt;form&gt; elements will include an antiforgery token only if
            <paramref name="method" /> is not <see cref="F:Microsoft.AspNetCore.Mvc.Rendering.FormMethod.Get" />.
            </param>
          <param name="htmlAttributes">
            An <see cref="T:System.Object" /> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the HTML
            attributes.
            </param>
          <summary>
            Renders a &lt;form&gt; start tag to the response. When the user submits the form, the
            current action will process the request.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,Microsoft.AspNetCore.Mvc.Rendering.FormMethod,System.Nullable{System.Boolean},System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="BeginForm">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, Microsoft.AspNetCore.Mvc.Rendering.FormMethod method, object htmlAttributes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, valuetype Microsoft.AspNetCore.Mvc.Rendering.FormMethod method, object htmlAttributes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,Microsoft.AspNetCore.Mvc.Rendering.FormMethod,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Mvc.Rendering.MvcForm</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="method" Type="Microsoft.AspNetCore.Mvc.Rendering.FormMethod" />
          <Parameter Name="htmlAttributes" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="method">The HTTP method for processing the form, either GET or POST.</param>
          <param name="htmlAttributes">
            An <see cref="T:System.Object" /> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the HTML
            attributes.
            </param>
          <summary>
            Renders a &lt;form&gt; start tag to the response. When the user submits the form, the
            current action will process the request.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,Microsoft.AspNetCore.Mvc.Rendering.FormMethod,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="BeginForm">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, Nullable&lt;bool&gt; antiforgery);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, valuetype System.Nullable`1&lt;bool&gt; antiforgery) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.Nullable{System.Boolean})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Mvc.Rendering.MvcForm</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="antiforgery" Type="System.Nullable&lt;System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="antiforgery">
            If <c>true</c>, &lt;form&gt; elements will include an antiforgery token.
            If <c>false</c>, suppresses the generation an &lt;input&gt; of type "hidden" with an antiforgery token.
            If <c>null</c>, &lt;form&gt; elements will include an antiforgery token.
            </param>
          <summary>
            Renders a &lt;form&gt; start tag to the response. The &lt;form&gt;'s <c>action</c> attribute value will
            match the current request.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.Nullable{System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="BeginForm">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, object routeValues);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, object routeValues) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Mvc.Rendering.MvcForm</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="routeValues" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="routeValues">
            An <see cref="T:System.Object" /> that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the <see cref="T:System.Object" />. This <see cref="T:System.Object" /> is typically
            created using <see cref="T:System.Object" /> initializer syntax. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the route
            parameters.
            </param>
          <summary>
            Renders a &lt;form&gt; start tag to the response. When the user submits the form, the
            current action will process the request.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="BeginForm">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string actionName, string controllerName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string actionName, string controllerName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Mvc.Rendering.MvcForm</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="actionName" Type="System.String" />
          <Parameter Name="controllerName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="actionName">The name of the action method.</param>
          <param name="controllerName">The name of the controller.</param>
          <summary>
            Renders a &lt;form&gt; start tag to the response. When the user submits the form, the action with name
            <paramref name="actionName" /> will process the request.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="BeginForm">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string actionName, string controllerName, Microsoft.AspNetCore.Mvc.Rendering.FormMethod method);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string actionName, string controllerName, valuetype Microsoft.AspNetCore.Mvc.Rendering.FormMethod method) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,Microsoft.AspNetCore.Mvc.Rendering.FormMethod)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Mvc.Rendering.MvcForm</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="actionName" Type="System.String" />
          <Parameter Name="controllerName" Type="System.String" />
          <Parameter Name="method" Type="Microsoft.AspNetCore.Mvc.Rendering.FormMethod" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="actionName">The name of the action method.</param>
          <param name="controllerName">The name of the controller.</param>
          <param name="method">The HTTP method for processing the form, either GET or POST.</param>
          <summary>
            Renders a &lt;form&gt; start tag to the response. When the user submits the form, the action with name
            <paramref name="actionName" /> will process the request.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,Microsoft.AspNetCore.Mvc.Rendering.FormMethod)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="BeginForm">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string actionName, string controllerName, Microsoft.AspNetCore.Mvc.Rendering.FormMethod method, object htmlAttributes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string actionName, string controllerName, valuetype Microsoft.AspNetCore.Mvc.Rendering.FormMethod method, object htmlAttributes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,Microsoft.AspNetCore.Mvc.Rendering.FormMethod,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Mvc.Rendering.MvcForm</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="actionName" Type="System.String" />
          <Parameter Name="controllerName" Type="System.String" />
          <Parameter Name="method" Type="Microsoft.AspNetCore.Mvc.Rendering.FormMethod" />
          <Parameter Name="htmlAttributes" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="actionName">The name of the action method.</param>
          <param name="controllerName">The name of the controller.</param>
          <param name="method">The HTTP method for processing the form, either GET or POST.</param>
          <param name="htmlAttributes">
            An <see cref="T:System.Object" /> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the HTML
            attributes.
            </param>
          <summary>
            Renders a &lt;form&gt; start tag to the response. When the user submits the form, the action with name
            <paramref name="actionName" /> will process the request.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,Microsoft.AspNetCore.Mvc.Rendering.FormMethod,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="BeginForm">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string actionName, string controllerName, object routeValues);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string actionName, string controllerName, object routeValues) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Mvc.Rendering.MvcForm</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="actionName" Type="System.String" />
          <Parameter Name="controllerName" Type="System.String" />
          <Parameter Name="routeValues" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="actionName">The name of the action method.</param>
          <param name="controllerName">The name of the controller.</param>
          <param name="routeValues">
            An <see cref="T:System.Object" /> that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the <see cref="T:System.Object" />. This <see cref="T:System.Object" /> is typically
            created using <see cref="T:System.Object" /> initializer syntax. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the route
            parameters.
            </param>
          <summary>
            Renders a &lt;form&gt; start tag to the response. When the user submits the form, the action with name
            <paramref name="actionName" /> will process the request.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="BeginForm">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string actionName, string controllerName, object routeValues, Microsoft.AspNetCore.Mvc.Rendering.FormMethod method);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginForm(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string actionName, string controllerName, object routeValues, valuetype Microsoft.AspNetCore.Mvc.Rendering.FormMethod method) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object,Microsoft.AspNetCore.Mvc.Rendering.FormMethod)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Mvc.Rendering.MvcForm</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="actionName" Type="System.String" />
          <Parameter Name="controllerName" Type="System.String" />
          <Parameter Name="routeValues" Type="System.Object" />
          <Parameter Name="method" Type="Microsoft.AspNetCore.Mvc.Rendering.FormMethod" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="actionName">The name of the action method.</param>
          <param name="controllerName">The name of the controller.</param>
          <param name="routeValues">
            An <see cref="T:System.Object" /> that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the <see cref="T:System.Object" />. This <see cref="T:System.Object" /> is typically
            created using <see cref="T:System.Object" /> initializer syntax. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the route
            parameters.
            </param>
          <param name="method">The HTTP method for processing the form, either GET or POST.</param>
          <summary>
            Renders a &lt;form&gt; start tag to the response. When the user submits the form, the action with name
            <paramref name="actionName" /> will process the request.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object,Microsoft.AspNetCore.Mvc.Rendering.FormMethod)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="BeginRouteForm">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginRouteForm (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, object routeValues);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginRouteForm(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, object routeValues) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Mvc.Rendering.MvcForm</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="routeValues" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="routeValues">
            An <see cref="T:System.Object" /> that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the <see cref="T:System.Object" />. This <see cref="T:System.Object" /> is typically
            created using <see cref="T:System.Object" /> initializer syntax. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the route
            parameters.
            </param>
          <summary>
            Renders a &lt;form&gt; start tag to the response. The first route that can provide a URL with the
            specified <paramref name="routeValues" /> generates the &lt;form&gt;'s <c>action</c> attribute value.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="BeginRouteForm">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginRouteForm (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, object routeValues, Nullable&lt;bool&gt; antiforgery);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginRouteForm(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, object routeValues, valuetype System.Nullable`1&lt;bool&gt; antiforgery) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.Object,System.Nullable{System.Boolean})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Mvc.Rendering.MvcForm</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="routeValues" Type="System.Object" />
          <Parameter Name="antiforgery" Type="System.Nullable&lt;System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="routeValues">
            An <see cref="T:System.Object" /> that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the <see cref="T:System.Object" />. This <see cref="T:System.Object" /> is typically
            created using <see cref="T:System.Object" /> initializer syntax. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the route
            parameters.
            </param>
          <param name="antiforgery">
            If <c>true</c>, &lt;form&gt; elements will include an antiforgery token.
            If <c>false</c>, suppresses the generation an &lt;input&gt; of type "hidden" with an antiforgery token.
            If <c>null</c>, &lt;form&gt; elements will include an antiforgery token.
            </param>
          <summary>
            Renders a &lt;form&gt; start tag to the response. The first route that can provide a URL with the
            specified <paramref name="routeValues" /> generates the &lt;form&gt;'s <c>action</c> attribute value.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.Object,System.Nullable{System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="BeginRouteForm">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginRouteForm (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string routeName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginRouteForm(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string routeName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Mvc.Rendering.MvcForm</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="routeName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="routeName">The name of the route.</param>
          <summary>
            Renders a &lt;form&gt; start tag to the response. The route with name <paramref name="routeName" />
            generates the &lt;form&gt;'s <c>action</c> attribute value.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="BeginRouteForm">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginRouteForm (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string routeName, Microsoft.AspNetCore.Mvc.Rendering.FormMethod method);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginRouteForm(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string routeName, valuetype Microsoft.AspNetCore.Mvc.Rendering.FormMethod method) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,Microsoft.AspNetCore.Mvc.Rendering.FormMethod)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Mvc.Rendering.MvcForm</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="routeName" Type="System.String" />
          <Parameter Name="method" Type="Microsoft.AspNetCore.Mvc.Rendering.FormMethod" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="routeName">The name of the route.</param>
          <param name="method">The HTTP method for processing the form, either GET or POST.</param>
          <summary>
            Renders a &lt;form&gt; start tag to the response. The route with name <paramref name="routeName" />
            generates the &lt;form&gt;'s <c>action</c> attribute value.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,Microsoft.AspNetCore.Mvc.Rendering.FormMethod)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="BeginRouteForm">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginRouteForm (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string routeName, Microsoft.AspNetCore.Mvc.Rendering.FormMethod method, object htmlAttributes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginRouteForm(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string routeName, valuetype Microsoft.AspNetCore.Mvc.Rendering.FormMethod method, object htmlAttributes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,Microsoft.AspNetCore.Mvc.Rendering.FormMethod,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Mvc.Rendering.MvcForm</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="routeName" Type="System.String" />
          <Parameter Name="method" Type="Microsoft.AspNetCore.Mvc.Rendering.FormMethod" />
          <Parameter Name="htmlAttributes" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="routeName">The name of the route.</param>
          <param name="method">The HTTP method for processing the form, either GET or POST.</param>
          <param name="htmlAttributes">
            An <see cref="T:System.Object" /> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the HTML
            attributes.
            </param>
          <summary>
            Renders a &lt;form&gt; start tag to the response. The route with name <paramref name="routeName" />
            generates the &lt;form&gt;'s <c>action</c> attribute value.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,Microsoft.AspNetCore.Mvc.Rendering.FormMethod,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="BeginRouteForm">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginRouteForm (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string routeName, Nullable&lt;bool&gt; antiforgery);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginRouteForm(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string routeName, valuetype System.Nullable`1&lt;bool&gt; antiforgery) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Nullable{System.Boolean})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Mvc.Rendering.MvcForm</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="routeName" Type="System.String" />
          <Parameter Name="antiforgery" Type="System.Nullable&lt;System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="routeName">The name of the route.</param>
          <param name="antiforgery">
            If <c>true</c>, &lt;form&gt; elements will include an antiforgery token.
            If <c>false</c>, suppresses the generation an &lt;input&gt; of type "hidden" with an antiforgery token.
            If <c>null</c>, &lt;form&gt; elements will include an antiforgery token.
            </param>
          <summary>
            Renders a &lt;form&gt; start tag to the response. The route with name <paramref name="routeName" />
            generates the &lt;form&gt;'s <c>action</c> attribute value.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Nullable{System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="BeginRouteForm">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginRouteForm (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string routeName, object routeValues);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginRouteForm(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string routeName, object routeValues) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Mvc.Rendering.MvcForm</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="routeName" Type="System.String" />
          <Parameter Name="routeValues" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="routeName">The name of the route.</param>
          <param name="routeValues">
            An <see cref="T:System.Object" /> that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the <see cref="T:System.Object" />. This <see cref="T:System.Object" /> is typically
            created using <see cref="T:System.Object" /> initializer syntax. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the route
            parameters.
            </param>
          <summary>
            Renders a &lt;form&gt; start tag to the response. The route with name <paramref name="routeName" />
            generates the &lt;form&gt;'s <c>action</c> attribute value.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="BeginRouteForm">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginRouteForm (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string routeName, object routeValues, Microsoft.AspNetCore.Mvc.Rendering.FormMethod method);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Mvc.Rendering.MvcForm BeginRouteForm(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string routeName, object routeValues, valuetype Microsoft.AspNetCore.Mvc.Rendering.FormMethod method) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object,Microsoft.AspNetCore.Mvc.Rendering.FormMethod)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Mvc.Rendering.MvcForm</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="routeName" Type="System.String" />
          <Parameter Name="routeValues" Type="System.Object" />
          <Parameter Name="method" Type="Microsoft.AspNetCore.Mvc.Rendering.FormMethod" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="routeName">The name of the route.</param>
          <param name="routeValues">
            An <see cref="T:System.Object" /> that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the <see cref="T:System.Object" />. This <see cref="T:System.Object" /> is typically
            created using <see cref="T:System.Object" /> initializer syntax. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the route
            parameters.
            </param>
          <param name="method">The HTTP method for processing the form, either GET or POST.</param>
          <summary>
            Renders a &lt;form&gt; start tag to the response. The route with name <paramref name="routeName" />
            generates the &lt;form&gt;'s <c>action</c> attribute value.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperFormExtensions.BeginRouteForm(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object,Microsoft.AspNetCore.Mvc.Rendering.FormMethod)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="CheckBox">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent CheckBox (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent CheckBox(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.CheckBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">Expression name, relative to the current model.</param>
          <summary>
            Returns an &lt;input&gt; element of type "checkbox" with value "true" and an &lt;input&gt; element of type
            "hidden" with value "false".
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.CheckBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="CheckBox">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent CheckBox (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, bool isChecked);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent CheckBox(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, bool isChecked) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.CheckBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Boolean)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
          <Parameter Name="isChecked" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">Expression name, relative to the current model.</param>
          <param name="isChecked">If <c>true</c>, checkbox is initially checked.</param>
          <summary>
            Returns an &lt;input&gt; element of type "checkbox" with value "true" and an &lt;input&gt; element of type
            "hidden" with value "false".
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.CheckBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="CheckBox">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent CheckBox (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, object htmlAttributes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent CheckBox(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, object htmlAttributes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.CheckBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
          <Parameter Name="htmlAttributes" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">Expression name, relative to the current model.</param>
          <param name="htmlAttributes">
            An <see cref="T:System.Object" /> that contains the HTML attributes for the checkbox element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the HTML
            attributes.
            </param>
          <summary>
            Returns an &lt;input&gt; element of type "checkbox" with value "true" and an &lt;input&gt; element of type
            "hidden" with value "false".
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.CheckBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" />
      </Targets>
      <Member MemberName="CheckBoxFor&lt;TModel&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent CheckBoxFor&lt;TModel&gt; (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt; htmlHelper, System.Linq.Expressions.Expression&lt;Func&lt;TModel,bool&gt;&gt; expression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent CheckBoxFor&lt;TModel&gt;(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1&lt;!!TModel&gt; htmlHelper, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TModel, bool&gt;&gt; expression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.CheckBoxFor``1(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModel" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt;" RefType="this" />
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TModel">To be added.</typeparam>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" /> instance this method extends.</param>
          <param name="expression">An expression to be evaluated against the current model.</param>
          <summary>
            Returns an &lt;input&gt; element of type "checkbox" with value "true" and an &lt;input&gt; element of type
            "hidden" with value "false".
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.CheckBoxFor``1(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="Hidden">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent Hidden (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent Hidden(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.Hidden(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">Expression name, relative to the current model.</param>
          <summary>
            Returns an &lt;input&gt; element of type "hidden" for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.Hidden(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="Hidden">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent Hidden (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, object value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent Hidden(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, object value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.Hidden(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
          <Parameter Name="value" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">Expression name, relative to the current model.</param>
          <param name="value">If non-<c>null</c>, value to include in the element.</param>
          <summary>
            Returns an &lt;input&gt; element of type "hidden" for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.Hidden(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" />
      </Targets>
      <Member MemberName="HiddenFor&lt;TModel,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent HiddenFor&lt;TModel,TResult&gt; (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt; htmlHelper, System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent HiddenFor&lt;TModel, TResult&gt;(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1&lt;!!TModel&gt; htmlHelper, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TModel, !!TResult&gt;&gt; expression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.HiddenFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModel" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt;" RefType="this" />
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TModel">The type of the model.</typeparam>
          <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" /> instance this method extends.</param>
          <param name="expression">An expression to be evaluated against the current model.</param>
          <summary>
            Returns an &lt;input&gt; element of type "hidden" for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.HiddenFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="Password">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent Password (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent Password(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.Password(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">Expression name, relative to the current model.</param>
          <summary>
            Returns an &lt;input&gt; element of type "password" for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.Password(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="Password">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent Password (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, object value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent Password(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, object value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.Password(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
          <Parameter Name="value" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">Expression name, relative to the current model.</param>
          <param name="value">If non-<c>null</c>, value to include in the element.</param>
          <summary>
            Returns an &lt;input&gt; element of type "password" for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.Password(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" />
      </Targets>
      <Member MemberName="PasswordFor&lt;TModel,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent PasswordFor&lt;TModel,TResult&gt; (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt; htmlHelper, System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent PasswordFor&lt;TModel, TResult&gt;(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1&lt;!!TModel&gt; htmlHelper, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TModel, !!TResult&gt;&gt; expression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.PasswordFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModel" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt;" RefType="this" />
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TModel">The type of the model.</typeparam>
          <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" /> instance this method extends.</param>
          <param name="expression">An expression to be evaluated against the current model.</param>
          <summary>
            Returns an &lt;input&gt; element of type "password" for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.PasswordFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="RadioButton">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent RadioButton (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, object value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent RadioButton(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, object value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.RadioButton(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
          <Parameter Name="value" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">Expression name, relative to the current model.</param>
          <param name="value">Value to include in the element. Must not be <c>null</c>.</param>
          <summary>
            Returns an &lt;input&gt; element of type "radio" for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.RadioButton(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="RadioButton">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent RadioButton (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, object value, bool isChecked);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent RadioButton(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, object value, bool isChecked) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.RadioButton(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object,System.Boolean)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
          <Parameter Name="value" Type="System.Object" />
          <Parameter Name="isChecked" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">Expression name, relative to the current model.</param>
          <param name="value">
            If non-<c>null</c>, value to include in the element. Must not be <c>null</c> if
            <paramref name="isChecked" /> is also <c>null</c>.
            </param>
          <param name="isChecked">
            If <c>true</c>, radio button is initially selected. Must not be <c>null</c> if
            <paramref name="value" /> is also <c>null</c>.
            </param>
          <summary>
            Returns an &lt;input&gt; element of type "radio" for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.RadioButton(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="RadioButton">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent RadioButton (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, object value, object htmlAttributes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent RadioButton(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, object value, object htmlAttributes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.RadioButton(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
          <Parameter Name="value" Type="System.Object" />
          <Parameter Name="htmlAttributes" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">Expression name, relative to the current model.</param>
          <param name="value">
            If non-<c>null</c>, value to include in the element. Must not be <c>null</c> if no "checked" entry exists
            in <paramref name="htmlAttributes" />.
            </param>
          <param name="htmlAttributes">
            An <see cref="T:System.Object" /> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the HTML
            attributes.
            </param>
          <summary>
            Returns an &lt;input&gt; element of type "radio" for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.RadioButton(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" />
      </Targets>
      <Member MemberName="RadioButtonFor&lt;TModel,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent RadioButtonFor&lt;TModel,TResult&gt; (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt; htmlHelper, System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression, object value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent RadioButtonFor&lt;TModel, TResult&gt;(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1&lt;!!TModel&gt; htmlHelper, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TModel, !!TResult&gt;&gt; expression, object value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.RadioButtonFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModel" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt;" RefType="this" />
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
          <Parameter Name="value" Type="System.Object" />
        </Parameters>
        <Docs>
          <typeparam name="TModel">The type of the model.</typeparam>
          <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" /> instance this method extends.</param>
          <param name="expression">An expression to be evaluated against the current model.</param>
          <param name="value">Value to include in the element. Must not be <c>null</c>.</param>
          <summary>
            Returns an &lt;input&gt; element of type "radio" for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.RadioButtonFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="TextArea">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent TextArea (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent TextArea(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextArea(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">Expression name, relative to the current model.</param>
          <summary>
            Returns a &lt;textarea&gt; element for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextArea(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="TextArea">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent TextArea (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, object htmlAttributes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent TextArea(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, object htmlAttributes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextArea(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
          <Parameter Name="htmlAttributes" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">Expression name, relative to the current model.</param>
          <param name="htmlAttributes">
            An <see cref="T:System.Object" /> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the HTML
            attributes.
            </param>
          <summary>
            Returns a &lt;textarea&gt; element for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextArea(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="TextArea">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent TextArea (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, string value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent TextArea(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, string value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextArea(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
          <Parameter Name="value" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">Expression name, relative to the current model.</param>
          <param name="value">If non-<c>null</c>, value to include in the element.</param>
          <summary>
            Returns a &lt;textarea&gt; element for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextArea(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="TextArea">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent TextArea (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, string value, object htmlAttributes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent TextArea(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, string value, object htmlAttributes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextArea(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
          <Parameter Name="value" Type="System.String" />
          <Parameter Name="htmlAttributes" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">Expression name, relative to the current model.</param>
          <param name="value">If non-<c>null</c>, value to include in the element.</param>
          <param name="htmlAttributes">
            An <see cref="T:System.Object" /> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the HTML
            attributes.
            </param>
          <summary>
            Returns a &lt;textarea&gt; element for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextArea(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" />
      </Targets>
      <Member MemberName="TextAreaFor&lt;TModel,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent TextAreaFor&lt;TModel,TResult&gt; (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt; htmlHelper, System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent TextAreaFor&lt;TModel, TResult&gt;(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1&lt;!!TModel&gt; htmlHelper, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TModel, !!TResult&gt;&gt; expression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextAreaFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModel" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt;" RefType="this" />
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TModel">The type of the model.</typeparam>
          <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" /> instance this method extends.</param>
          <param name="expression">An expression to be evaluated against the current model.</param>
          <summary>
            Returns a &lt;textarea&gt; element for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextAreaFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" />
      </Targets>
      <Member MemberName="TextAreaFor&lt;TModel,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent TextAreaFor&lt;TModel,TResult&gt; (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt; htmlHelper, System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression, object htmlAttributes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent TextAreaFor&lt;TModel, TResult&gt;(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1&lt;!!TModel&gt; htmlHelper, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TModel, !!TResult&gt;&gt; expression, object htmlAttributes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextAreaFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModel" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt;" RefType="this" />
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
          <Parameter Name="htmlAttributes" Type="System.Object" />
        </Parameters>
        <Docs>
          <typeparam name="TModel">The type of the model.</typeparam>
          <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" /> instance this method extends.</param>
          <param name="expression">An expression to be evaluated against the current model.</param>
          <param name="htmlAttributes">
            An <see cref="T:System.Object" /> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the HTML
            attributes.
            </param>
          <summary>
            Returns a &lt;textarea&gt; element for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextAreaFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="TextBox">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent TextBox (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent TextBox(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">Expression name, relative to the current model.</param>
          <summary>
            Returns an &lt;input&gt; element of type "text" for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="TextBox">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent TextBox (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, object value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent TextBox(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, object value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
          <Parameter Name="value" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">Expression name, relative to the current model.</param>
          <param name="value">If non-<c>null</c>, value to include in the element.</param>
          <summary>
            Returns an &lt;input&gt; element of type "text" for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="TextBox">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent TextBox (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, object value, object htmlAttributes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent TextBox(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, object value, object htmlAttributes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
          <Parameter Name="value" Type="System.Object" />
          <Parameter Name="htmlAttributes" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">Expression name, relative to the current model.</param>
          <param name="value">If non-<c>null</c>, value to include in the element.</param>
          <param name="htmlAttributes">
            An <see cref="T:System.Object" /> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the HTML
            attributes.
            </param>
          <summary>
            Returns an &lt;input&gt; element of type "text" for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="TextBox">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent TextBox (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, object value, string format);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent TextBox(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, object value, string format) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
          <Parameter Name="value" Type="System.Object" />
          <Parameter Name="format" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">Expression name, relative to the current model.</param>
          <param name="value">If non-<c>null</c>, value to include in the element.</param>
          <param name="format">
            The composite format <see cref="T:System.String" /> (see http://msdn.microsoft.com/en-us/library/txafckwd.aspx).
            </param>
          <summary>
            Returns an &lt;input&gt; element of type "text" for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" />
      </Targets>
      <Member MemberName="TextBoxFor&lt;TModel,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent TextBoxFor&lt;TModel,TResult&gt; (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt; htmlHelper, System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent TextBoxFor&lt;TModel, TResult&gt;(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1&lt;!!TModel&gt; htmlHelper, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TModel, !!TResult&gt;&gt; expression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextBoxFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModel" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt;" RefType="this" />
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TModel">The type of the model.</typeparam>
          <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" /> instance this method extends.</param>
          <param name="expression">An expression to be evaluated against the current model.</param>
          <summary>
            Returns an &lt;input&gt; element of type "text" for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextBoxFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" />
      </Targets>
      <Member MemberName="TextBoxFor&lt;TModel,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent TextBoxFor&lt;TModel,TResult&gt; (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt; htmlHelper, System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression, object htmlAttributes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent TextBoxFor&lt;TModel, TResult&gt;(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1&lt;!!TModel&gt; htmlHelper, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TModel, !!TResult&gt;&gt; expression, object htmlAttributes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextBoxFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModel" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt;" RefType="this" />
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
          <Parameter Name="htmlAttributes" Type="System.Object" />
        </Parameters>
        <Docs>
          <typeparam name="TModel">The type of the model.</typeparam>
          <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" /> instance this method extends.</param>
          <param name="expression">An expression to be evaluated against the current model.</param>
          <param name="htmlAttributes">
            An <see cref="T:System.Object" /> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the HTML
            attributes.
            </param>
          <summary>
            Returns an &lt;input&gt; element of type "text" for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextBoxFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" />
      </Targets>
      <Member MemberName="TextBoxFor&lt;TModel,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent TextBoxFor&lt;TModel,TResult&gt; (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt; htmlHelper, System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression, string format);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent TextBoxFor&lt;TModel, TResult&gt;(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1&lt;!!TModel&gt; htmlHelper, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TModel, !!TResult&gt;&gt; expression, string format) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextBoxFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModel" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt;" RefType="this" />
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
          <Parameter Name="format" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TModel">The type of the model.</typeparam>
          <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" /> instance this method extends.</param>
          <param name="expression">An expression to be evaluated against the current model.</param>
          <param name="format">
            The composite format <see cref="T:System.String" /> (see http://msdn.microsoft.com/en-us/library/txafckwd.aspx).
            </param>
          <summary>
            Returns an &lt;input&gt; element of type "text" for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperInputExtensions.TextBoxFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="Label">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent Label (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent Label(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions.Label(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">Expression name, relative to the current model.</param>
          <summary>
            Returns a &lt;label&gt; element for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions.Label(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="Label">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent Label (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, string labelText);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent Label(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, string labelText) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions.Label(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
          <Parameter Name="labelText" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">Expression name, relative to the current model.</param>
          <param name="labelText">The inner text of the element.</param>
          <summary>
            Returns a &lt;label&gt; element for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions.Label(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" />
      </Targets>
      <Member MemberName="LabelFor&lt;TModel,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent LabelFor&lt;TModel,TResult&gt; (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt; htmlHelper, System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent LabelFor&lt;TModel, TResult&gt;(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1&lt;!!TModel&gt; htmlHelper, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TModel, !!TResult&gt;&gt; expression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions.LabelFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModel" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt;" RefType="this" />
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TModel">The type of the model.</typeparam>
          <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" /> instance this method extends.</param>
          <param name="expression">An expression to be evaluated against the current model.</param>
          <summary>
            Returns a &lt;label&gt; element for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions.LabelFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" />
      </Targets>
      <Member MemberName="LabelFor&lt;TModel,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent LabelFor&lt;TModel,TResult&gt; (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt; htmlHelper, System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression, object htmlAttributes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent LabelFor&lt;TModel, TResult&gt;(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1&lt;!!TModel&gt; htmlHelper, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TModel, !!TResult&gt;&gt; expression, object htmlAttributes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions.LabelFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModel" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt;" RefType="this" />
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
          <Parameter Name="htmlAttributes" Type="System.Object" />
        </Parameters>
        <Docs>
          <typeparam name="TModel">The type of the model.</typeparam>
          <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" /> instance this method extends.</param>
          <param name="expression">An expression to be evaluated against the current model.</param>
          <param name="htmlAttributes">
            An <see cref="T:System.Object" /> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the HTML
            attributes.
            </param>
          <summary>
            Returns a &lt;label&gt; element for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions.LabelFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" />
      </Targets>
      <Member MemberName="LabelFor&lt;TModel,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent LabelFor&lt;TModel,TResult&gt; (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt; htmlHelper, System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression, string labelText);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent LabelFor&lt;TModel, TResult&gt;(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1&lt;!!TModel&gt; htmlHelper, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TModel, !!TResult&gt;&gt; expression, string labelText) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions.LabelFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModel" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt;" RefType="this" />
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
          <Parameter Name="labelText" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TModel">The type of the model.</typeparam>
          <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" /> instance this method extends.</param>
          <param name="expression">An expression to be evaluated against the current model.</param>
          <param name="labelText">The inner text of the element.</param>
          <summary>
            Returns a &lt;label&gt; element for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions.LabelFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="LabelForModel">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent LabelForModel (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent LabelForModel(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions.LabelForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <summary>
            Returns a &lt;label&gt; element for the current model.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions.LabelForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="LabelForModel">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent LabelForModel (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, object htmlAttributes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent LabelForModel(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, object htmlAttributes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions.LabelForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="htmlAttributes" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="htmlAttributes">
            An <see cref="T:System.Object" /> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the HTML
            attributes.
            </param>
          <summary>
            Returns a &lt;label&gt; element for the current model.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions.LabelForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="LabelForModel">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent LabelForModel (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string labelText);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent LabelForModel(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string labelText) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions.LabelForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="labelText" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="labelText">The inner text of the element.</param>
          <summary>
            Returns a &lt;label&gt; element for the current model.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions.LabelForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="LabelForModel">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent LabelForModel (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string labelText, object htmlAttributes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent LabelForModel(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string labelText, object htmlAttributes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions.LabelForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="labelText" Type="System.String" />
          <Parameter Name="htmlAttributes" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="labelText">The inner text of the element.</param>
          <param name="htmlAttributes">
            An <see cref="T:System.Object" /> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the HTML
            attributes.
            </param>
          <summary>
            Returns a &lt;label&gt; element for the current model.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLabelExtensions.LabelForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="ActionLink">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent ActionLink (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper helper, string linkText, string actionName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent ActionLink(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper helper, string linkText, string actionName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.ActionLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="helper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="linkText" Type="System.String" />
          <Parameter Name="actionName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="helper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="linkText">The inner text of the anchor element. Must not be <c>null</c>.</param>
          <param name="actionName">The name of the action.</param>
          <summary>
            Returns an anchor (&lt;a&gt;) element that contains a URL path to the specified action.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.ActionLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="ActionLink">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent ActionLink (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper helper, string linkText, string actionName, object routeValues);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent ActionLink(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper helper, string linkText, string actionName, object routeValues) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.ActionLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="helper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="linkText" Type="System.String" />
          <Parameter Name="actionName" Type="System.String" />
          <Parameter Name="routeValues" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="helper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="linkText">The inner text of the anchor element. Must not be <c>null</c>.</param>
          <param name="actionName">The name of the action.</param>
          <param name="routeValues">
            An <see cref="T:System.Object" /> that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the <see cref="T:System.Object" />. This <see cref="T:System.Object" /> is typically
            created using <see cref="T:System.Object" /> initializer syntax. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the route
            parameters.
            </param>
          <summary>
            Returns an anchor (&lt;a&gt;) element that contains a URL path to the specified action.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.ActionLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="ActionLink">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent ActionLink (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper helper, string linkText, string actionName, object routeValues, object htmlAttributes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent ActionLink(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper helper, string linkText, string actionName, object routeValues, object htmlAttributes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.ActionLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="helper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="linkText" Type="System.String" />
          <Parameter Name="actionName" Type="System.String" />
          <Parameter Name="routeValues" Type="System.Object" />
          <Parameter Name="htmlAttributes" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="helper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="linkText">The inner text of the anchor element. Must not be <c>null</c>.</param>
          <param name="actionName">The name of the action.</param>
          <param name="routeValues">
            An <see cref="T:System.Object" /> that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the <see cref="T:System.Object" />. This <see cref="T:System.Object" /> is typically
            created using <see cref="T:System.Object" /> initializer syntax. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the route
            parameters.
            </param>
          <param name="htmlAttributes">
            An <see cref="T:System.Object" /> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the HTML
            attributes.
            </param>
          <summary>
            Returns an anchor (&lt;a&gt;) element that contains a URL path to the specified action.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.ActionLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="ActionLink">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent ActionLink (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper helper, string linkText, string actionName, string controllerName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent ActionLink(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper helper, string linkText, string actionName, string controllerName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.ActionLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="helper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="linkText" Type="System.String" />
          <Parameter Name="actionName" Type="System.String" />
          <Parameter Name="controllerName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="helper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="linkText">The inner text of the anchor element. Must not be <c>null</c>.</param>
          <param name="actionName">The name of the action.</param>
          <param name="controllerName">The name of the controller.</param>
          <summary>
            Returns an anchor (&lt;a&gt;) element that contains a URL path to the specified action.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.ActionLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="ActionLink">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent ActionLink (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper helper, string linkText, string actionName, string controllerName, object routeValues);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent ActionLink(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper helper, string linkText, string actionName, string controllerName, object routeValues) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.ActionLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="helper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="linkText" Type="System.String" />
          <Parameter Name="actionName" Type="System.String" />
          <Parameter Name="controllerName" Type="System.String" />
          <Parameter Name="routeValues" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="helper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="linkText">The inner text of the anchor element. Must not be <c>null</c>.</param>
          <param name="actionName">The name of the action.</param>
          <param name="controllerName">The name of the controller.</param>
          <param name="routeValues">
            An <see cref="T:System.Object" /> that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the <see cref="T:System.Object" />. This <see cref="T:System.Object" /> is typically
            created using <see cref="T:System.Object" /> initializer syntax. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the route
            parameters.
            </param>
          <summary>
            Returns an anchor (&lt;a&gt;) element that contains a URL path to the specified action.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.ActionLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="ActionLink">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent ActionLink (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper helper, string linkText, string actionName, string controllerName, object routeValues, object htmlAttributes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent ActionLink(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper helper, string linkText, string actionName, string controllerName, object routeValues, object htmlAttributes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.ActionLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.String,System.Object,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="helper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="linkText" Type="System.String" />
          <Parameter Name="actionName" Type="System.String" />
          <Parameter Name="controllerName" Type="System.String" />
          <Parameter Name="routeValues" Type="System.Object" />
          <Parameter Name="htmlAttributes" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="helper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="linkText">The inner text of the anchor element. Must not be <c>null</c>.</param>
          <param name="actionName">The name of the action.</param>
          <param name="controllerName">The name of the controller.</param>
          <param name="routeValues">
            An <see cref="T:System.Object" /> that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the <see cref="T:System.Object" />. This <see cref="T:System.Object" /> is typically
            created using <see cref="T:System.Object" /> initializer syntax. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the route
            parameters.
            </param>
          <param name="htmlAttributes">
            An <see cref="T:System.Object" /> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the HTML
            attributes.
            </param>
          <summary>
            Returns an anchor (&lt;a&gt;) element that contains a URL path to the specified action.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.ActionLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.String,System.Object,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="RouteLink">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent RouteLink (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string linkText, object routeValues);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent RouteLink(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string linkText, object routeValues) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.RouteLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="linkText" Type="System.String" />
          <Parameter Name="routeValues" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="linkText">The inner text of the anchor element. Must not be <c>null</c>.</param>
          <param name="routeValues">
            An <see cref="T:System.Object" /> that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the <see cref="T:System.Object" />. This <see cref="T:System.Object" /> is typically
            created using <see cref="T:System.Object" /> initializer syntax. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the route
            parameters.
            </param>
          <summary>
            Returns an anchor (&lt;a&gt;) element that contains a URL path to the specified route.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.RouteLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="RouteLink">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent RouteLink (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string linkText, object routeValues, object htmlAttributes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent RouteLink(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string linkText, object routeValues, object htmlAttributes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.RouteLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="linkText" Type="System.String" />
          <Parameter Name="routeValues" Type="System.Object" />
          <Parameter Name="htmlAttributes" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="linkText">The inner text of the anchor element. Must not be <c>null</c>.</param>
          <param name="routeValues">
            An <see cref="T:System.Object" /> that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the <see cref="T:System.Object" />. This <see cref="T:System.Object" /> is typically
            created using <see cref="T:System.Object" /> initializer syntax. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the route
            parameters.
            </param>
          <param name="htmlAttributes">
            An <see cref="T:System.Object" /> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the HTML
            attributes.
            </param>
          <summary>
            Returns an anchor (&lt;a&gt;) element that contains a URL path to the specified route.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.RouteLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="RouteLink">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent RouteLink (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string linkText, string routeName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent RouteLink(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string linkText, string routeName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.RouteLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="linkText" Type="System.String" />
          <Parameter Name="routeName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="linkText">The inner text of the anchor element. Must not be <c>null</c>.</param>
          <param name="routeName">The name of the route.</param>
          <summary>
            Returns an anchor (&lt;a&gt;) element that contains a URL path to the specified route.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.RouteLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="RouteLink">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent RouteLink (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string linkText, string routeName, object routeValues);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent RouteLink(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string linkText, string routeName, object routeValues) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.RouteLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="linkText" Type="System.String" />
          <Parameter Name="routeName" Type="System.String" />
          <Parameter Name="routeValues" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="linkText">The inner text of the anchor element. Must not be <c>null</c>.</param>
          <param name="routeName">The name of the route.</param>
          <param name="routeValues">
            An <see cref="T:System.Object" /> that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the <see cref="T:System.Object" />. This <see cref="T:System.Object" /> is typically
            created using <see cref="T:System.Object" /> initializer syntax. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the route
            parameters.
            </param>
          <summary>
            Returns an anchor (&lt;a&gt;) element that contains a URL path to the specified route.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.RouteLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="RouteLink">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent RouteLink (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string linkText, string routeName, object routeValues, object htmlAttributes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent RouteLink(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string linkText, string routeName, object routeValues, object htmlAttributes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.RouteLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="linkText" Type="System.String" />
          <Parameter Name="routeName" Type="System.String" />
          <Parameter Name="routeValues" Type="System.Object" />
          <Parameter Name="htmlAttributes" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="linkText">The inner text of the anchor element. Must not be <c>null</c>.</param>
          <param name="routeName">The name of the route.</param>
          <param name="routeValues">
            An <see cref="T:System.Object" /> that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the <see cref="T:System.Object" />. This <see cref="T:System.Object" /> is typically
            created using <see cref="T:System.Object" /> initializer syntax. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the route
            parameters.
            </param>
          <param name="htmlAttributes">
            An <see cref="T:System.Object" /> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the HTML
            attributes.
            </param>
          <summary>
            Returns an anchor (&lt;a&gt;) element that contains a URL path to the specified route.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperLinkExtensions.RouteLink(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="IdForModel">
        <MemberSignature Language="C#" Value="public static string IdForModel (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string IdForModel(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperNameExtensions.IdForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <summary>
            Returns the HTML element Id for the current model.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperNameExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperNameExtensions.IdForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="NameForModel">
        <MemberSignature Language="C#" Value="public static string NameForModel (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string NameForModel(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperNameExtensions.NameForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <summary>
            Returns the full HTML element name for the current model.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperNameExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperNameExtensions.NameForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="Partial">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent Partial (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string partialViewName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent Partial(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string partialViewName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.Partial(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="partialViewName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="partialViewName">
            The name of the partial view used to create the HTML markup. Must not be <c>null</c>.
            </param>
          <summary>
            Returns HTML markup for the specified partial view.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.Partial(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="Partial">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent Partial (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string partialViewName, Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary viewData);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent Partial(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string partialViewName, class Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary viewData) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.Partial(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="partialViewName" Type="System.String" />
          <Parameter Name="viewData" Type="Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="partialViewName">
            The name of the partial view used to create the HTML markup. Must not be <c>null</c>.
            </param>
          <param name="viewData">A <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary" /> to pass into the partial view.</param>
          <summary>
            Returns HTML markup for the specified partial view.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.Partial(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="Partial">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent Partial (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string partialViewName, object model);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent Partial(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string partialViewName, object model) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.Partial(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="partialViewName" Type="System.String" />
          <Parameter Name="model" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="partialViewName">
            The name of the partial view used to create the HTML markup. Must not be <c>null</c>.
            </param>
          <param name="model">A model to pass into the partial view.</param>
          <summary>
            Returns HTML markup for the specified partial view.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.Partial(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="Partial">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent Partial (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string partialViewName, object model, Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary viewData);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent Partial(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string partialViewName, object model, class Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary viewData) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.Partial(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object,Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="partialViewName" Type="System.String" />
          <Parameter Name="model" Type="System.Object" />
          <Parameter Name="viewData" Type="Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="partialViewName">
            The name of the partial view used to create the HTML markup. Must not be <c>null</c>.
            </param>
          <param name="model">A model to pass into the partial view.</param>
          <param name="viewData">A <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary" /> to pass into the partial view.</param>
          <summary>
            Returns HTML markup for the specified partial view.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.Partial(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object,Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="PartialAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Html.IHtmlContent&gt; PartialAsync (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string partialViewName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Html.IHtmlContent&gt; PartialAsync(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string partialViewName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.PartialAsync(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Html.IHtmlContent&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="partialViewName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="partialViewName">
            The name of the partial view used to create the HTML markup. Must not be <c>null</c>.
            </param>
          <summary>
            Returns HTML markup for the specified partial view.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.PartialAsync(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="PartialAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Html.IHtmlContent&gt; PartialAsync (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string partialViewName, Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary viewData);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Html.IHtmlContent&gt; PartialAsync(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string partialViewName, class Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary viewData) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.PartialAsync(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Html.IHtmlContent&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="partialViewName" Type="System.String" />
          <Parameter Name="viewData" Type="Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="partialViewName">
            The name of the partial view used to create the HTML markup. Must not be <c>null</c>.
            </param>
          <param name="viewData">A <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary" /> to pass into the partial view.</param>
          <summary>
            Returns HTML markup for the specified partial view.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.PartialAsync(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="PartialAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Html.IHtmlContent&gt; PartialAsync (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string partialViewName, object model);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Html.IHtmlContent&gt; PartialAsync(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string partialViewName, object model) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.PartialAsync(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Html.IHtmlContent&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="partialViewName" Type="System.String" />
          <Parameter Name="model" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="partialViewName">
            The name of the partial view used to create the HTML markup. Must not be <c>null</c>.
            </param>
          <param name="model">A model to pass into the partial view.</param>
          <summary>
            Returns HTML markup for the specified partial view.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.PartialAsync(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="RenderPartial">
        <MemberSignature Language="C#" Value="public static void RenderPartial (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string partialViewName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RenderPartial(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string partialViewName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.RenderPartial(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="partialViewName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="partialViewName">
            The name of the partial view used to create the HTML markup. Must not be <c>null</c>.
            </param>
          <summary>
            Renders HTML markup for the specified partial view.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.RenderPartial(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="RenderPartial">
        <MemberSignature Language="C#" Value="public static void RenderPartial (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string partialViewName, Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary viewData);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RenderPartial(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string partialViewName, class Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary viewData) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.RenderPartial(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="partialViewName" Type="System.String" />
          <Parameter Name="viewData" Type="Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="partialViewName">
            The name of the partial view used to create the HTML markup. Must not be <c>null</c>.
            </param>
          <param name="viewData">A <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary" /> to pass into the partial view.</param>
          <summary>
            Renders HTML markup for the specified partial view.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.RenderPartial(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="RenderPartial">
        <MemberSignature Language="C#" Value="public static void RenderPartial (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string partialViewName, object model);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RenderPartial(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string partialViewName, object model) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.RenderPartial(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="partialViewName" Type="System.String" />
          <Parameter Name="model" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="partialViewName">
            The name of the partial view used to create the HTML markup. Must not be <c>null</c>.
            </param>
          <param name="model">A model to pass into the partial view.</param>
          <summary>
            Renders HTML markup for the specified partial view.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.RenderPartial(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="RenderPartialAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task RenderPartialAsync (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string partialViewName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task RenderPartialAsync(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string partialViewName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.RenderPartialAsync(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="partialViewName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="partialViewName">
            The name of the partial view used to create the HTML markup. Must not be <c>null</c>.
            </param>
          <summary>
            Renders HTML markup for the specified partial view.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.RenderPartialAsync(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="RenderPartialAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task RenderPartialAsync (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string partialViewName, Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary viewData);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task RenderPartialAsync(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string partialViewName, class Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary viewData) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.RenderPartialAsync(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="partialViewName" Type="System.String" />
          <Parameter Name="viewData" Type="Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="partialViewName">
            The name of the partial view used to create the HTML markup. Must not be <c>null</c>.
            </param>
          <param name="viewData">A <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary" /> to pass into the partial view.</param>
          <summary>
            Renders HTML markup for the specified partial view.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.RenderPartialAsync(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="RenderPartialAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task RenderPartialAsync (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string partialViewName, object model);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task RenderPartialAsync(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string partialViewName, object model) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.RenderPartialAsync(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="partialViewName" Type="System.String" />
          <Parameter Name="model" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="partialViewName">
            The name of the partial view used to create the HTML markup. Must not be <c>null</c>.
            </param>
          <param name="model">A model to pass into the partial view.</param>
          <summary>
            Renders HTML markup for the specified partial view.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperPartialExtensions.RenderPartialAsync(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="DropDownList">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent DropDownList (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent DropDownList(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownList(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">Expression name, relative to the current model.</param>
          <summary>
            Returns a single-selection HTML &lt;select&gt; element for the <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownList(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="DropDownList">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent DropDownList (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Mvc.Rendering.SelectListItem&gt; selectList);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent DropDownList(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.AspNetCore.Mvc.Rendering.SelectListItem&gt; selectList) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownList(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
          <Parameter Name="selectList" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Mvc.Rendering.SelectListItem&gt;" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">Expression name, relative to the current model.</param>
          <param name="selectList">
            A collection of <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.SelectListItem" /> objects used to populate the &lt;select&gt; element with
            &lt;optgroup&gt; and &lt;option&gt; elements.
            </param>
          <summary>
            Returns a single-selection HTML &lt;select&gt; element for the <paramref name="expression" />, using the
            specified list items.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownList(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="DropDownList">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent DropDownList (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Mvc.Rendering.SelectListItem&gt; selectList, object htmlAttributes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent DropDownList(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.AspNetCore.Mvc.Rendering.SelectListItem&gt; selectList, object htmlAttributes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownList(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem},System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
          <Parameter Name="selectList" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Mvc.Rendering.SelectListItem&gt;" />
          <Parameter Name="htmlAttributes" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">Expression name, relative to the current model.</param>
          <param name="selectList">
            A collection of <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.SelectListItem" /> objects used to populate the &lt;select&gt; element with
            &lt;optgroup&gt; and &lt;option&gt; elements.
            </param>
          <param name="htmlAttributes">
            An <see cref="T:System.Object" /> that contains the HTML attributes for the &lt;select&gt; element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the HTML attributes.
            </param>
          <summary>
            Returns a single-selection HTML &lt;select&gt; element for the <paramref name="expression" />, using the
            specified list items and HTML attributes.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownList(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem},System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="DropDownList">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent DropDownList (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Mvc.Rendering.SelectListItem&gt; selectList, string optionLabel);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent DropDownList(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.AspNetCore.Mvc.Rendering.SelectListItem&gt; selectList, string optionLabel) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownList(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem},System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
          <Parameter Name="selectList" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Mvc.Rendering.SelectListItem&gt;" />
          <Parameter Name="optionLabel" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">Expression name, relative to the current model.</param>
          <param name="selectList">
            A collection of <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.SelectListItem" /> objects used to populate the &lt;select&gt; element with
            &lt;optgroup&gt; and &lt;option&gt; elements.
            </param>
          <param name="optionLabel">
            The text for a default empty item. Does not include such an item if argument is <c>null</c>.
            </param>
          <summary>
            Returns a single-selection HTML &lt;select&gt; element for the <paramref name="expression" />, using the
            specified list items and option label.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownList(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="DropDownList">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent DropDownList (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, string optionLabel);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent DropDownList(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, string optionLabel) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownList(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
          <Parameter Name="optionLabel" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">Expression name, relative to the current model.</param>
          <param name="optionLabel">
            The text for a default empty item. Does not include such an item if argument is <c>null</c>.
            </param>
          <summary>
            Returns a single-selection HTML &lt;select&gt; element for the <paramref name="expression" />, using the
            option label.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownList(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" />
      </Targets>
      <Member MemberName="DropDownListFor&lt;TModel,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent DropDownListFor&lt;TModel,TResult&gt; (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt; htmlHelper, System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression, System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Mvc.Rendering.SelectListItem&gt; selectList);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent DropDownListFor&lt;TModel, TResult&gt;(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1&lt;!!TModel&gt; htmlHelper, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TModel, !!TResult&gt;&gt; expression, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.AspNetCore.Mvc.Rendering.SelectListItem&gt; selectList) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownListFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModel" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt;" RefType="this" />
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
          <Parameter Name="selectList" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Mvc.Rendering.SelectListItem&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TModel">The type of the model.</typeparam>
          <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" /> instance this method extends.</param>
          <param name="expression">An expression to be evaluated against the current model.</param>
          <param name="selectList">
            A collection of <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.SelectListItem" /> objects used to populate the &lt;select&gt; element with
            &lt;optgroup&gt; and &lt;option&gt; elements.
            </param>
          <summary>
            Returns a single-selection HTML &lt;select&gt; element for the <paramref name="expression" />, using the
            specified list items.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownListFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" />
      </Targets>
      <Member MemberName="DropDownListFor&lt;TModel,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent DropDownListFor&lt;TModel,TResult&gt; (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt; htmlHelper, System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression, System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Mvc.Rendering.SelectListItem&gt; selectList, object htmlAttributes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent DropDownListFor&lt;TModel, TResult&gt;(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1&lt;!!TModel&gt; htmlHelper, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TModel, !!TResult&gt;&gt; expression, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.AspNetCore.Mvc.Rendering.SelectListItem&gt; selectList, object htmlAttributes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownListFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem},System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModel" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt;" RefType="this" />
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
          <Parameter Name="selectList" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Mvc.Rendering.SelectListItem&gt;" />
          <Parameter Name="htmlAttributes" Type="System.Object" />
        </Parameters>
        <Docs>
          <typeparam name="TModel">The type of the model.</typeparam>
          <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" /> instance this method extends.</param>
          <param name="expression">An expression to be evaluated against the current model.</param>
          <param name="selectList">
            A collection of <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.SelectListItem" /> objects used to populate the &lt;select&gt; element with
            &lt;optgroup&gt; and &lt;option&gt; elements.
            </param>
          <param name="htmlAttributes">
            An <see cref="T:System.Object" /> that contains the HTML attributes for the &lt;select&gt; element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the HTML attributes.
            </param>
          <summary>
            Returns a single-selection HTML &lt;select&gt; element for the <paramref name="expression" />, using the
            specified list items and HTML attributes.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownListFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem},System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" />
      </Targets>
      <Member MemberName="DropDownListFor&lt;TModel,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent DropDownListFor&lt;TModel,TResult&gt; (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt; htmlHelper, System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression, System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Mvc.Rendering.SelectListItem&gt; selectList, string optionLabel);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent DropDownListFor&lt;TModel, TResult&gt;(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1&lt;!!TModel&gt; htmlHelper, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TModel, !!TResult&gt;&gt; expression, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.AspNetCore.Mvc.Rendering.SelectListItem&gt; selectList, string optionLabel) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownListFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem},System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModel" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt;" RefType="this" />
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
          <Parameter Name="selectList" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Mvc.Rendering.SelectListItem&gt;" />
          <Parameter Name="optionLabel" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TModel">The type of the model.</typeparam>
          <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" /> instance this method extends.</param>
          <param name="expression">An expression to be evaluated against the current model.</param>
          <param name="selectList">
            A collection of <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.SelectListItem" /> objects used to populate the &lt;select&gt; element with
            &lt;optgroup&gt; and &lt;option&gt; elements.
            </param>
          <param name="optionLabel">
            The text for a default empty item. Does not include such an item if argument is <c>null</c>.
            </param>
          <summary>
            Returns a single-selection HTML &lt;select&gt; element for the <paramref name="expression" />, using the
            specified list items and option label.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownListFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="ListBox">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent ListBox (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent ListBox(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.ListBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">Expression name, relative to the current model.</param>
          <summary>
            Returns a multi-selection &lt;select&gt; element for the <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.ListBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="ListBox">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent ListBox (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Mvc.Rendering.SelectListItem&gt; selectList);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent ListBox(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.AspNetCore.Mvc.Rendering.SelectListItem&gt; selectList) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.ListBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
          <Parameter Name="selectList" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Mvc.Rendering.SelectListItem&gt;" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">Expression name, relative to the current model.</param>
          <param name="selectList">
            A collection of <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.SelectListItem" /> objects used to populate the &lt;select&gt; element with
            &lt;optgroup&gt; and &lt;option&gt; elements.
            </param>
          <summary>
            Returns a multi-selection &lt;select&gt; element for the <paramref name="expression" />, using the
            specified list items.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.ListBox(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" />
      </Targets>
      <Member MemberName="ListBoxFor&lt;TModel,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent ListBoxFor&lt;TModel,TResult&gt; (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt; htmlHelper, System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression, System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Mvc.Rendering.SelectListItem&gt; selectList);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent ListBoxFor&lt;TModel, TResult&gt;(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1&lt;!!TModel&gt; htmlHelper, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TModel, !!TResult&gt;&gt; expression, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.AspNetCore.Mvc.Rendering.SelectListItem&gt; selectList) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.ListBoxFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModel" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt;" RefType="this" />
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
          <Parameter Name="selectList" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Mvc.Rendering.SelectListItem&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TModel">The type of the model.</typeparam>
          <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" /> instance this method extends.</param>
          <param name="expression">An expression to be evaluated against the current model.</param>
          <param name="selectList">
            A collection of <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.SelectListItem" /> objects used to populate the &lt;select&gt; element with
            &lt;optgroup&gt; and &lt;option&gt; elements.
            </param>
          <summary>
            Returns a multi-selection &lt;select&gt; element for the  <paramref name="expression" />, using the
            specified list items.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperSelectExtensions.ListBoxFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="ValidationMessage">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent ValidationMessage (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent ValidationMessage(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessage(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">Expression name, relative to the current model.</param>
          <summary>
            Returns the validation message if an error exists in the <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" />
            object for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessage(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="ValidationMessage">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent ValidationMessage (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, object htmlAttributes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent ValidationMessage(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, object htmlAttributes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessage(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
          <Parameter Name="htmlAttributes" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">Expression name, relative to the current model.</param>
          <param name="htmlAttributes">
            An <see cref="T:System.Object" /> that contains the HTML attributes for the
            (<see cref="P:Microsoft.AspNetCore.Mvc.Rendering.ViewContext.ValidationMessageElement" />) element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the HTML
            attributes.
            </param>
          <summary>
            Returns the validation message if an error exists in the <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" />
            object for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessage(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="ValidationMessage">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent ValidationMessage (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, string message);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent ValidationMessage(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, string message) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessage(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
          <Parameter Name="message" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">Expression name, relative to the current model.</param>
          <param name="message">
            The message to be displayed. If <c>null</c> or empty, method extracts an error string from the
            <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" /> object. Message will always be visible but client-side
            validation may update the associated CSS class.
            </param>
          <summary>
            Returns the validation message if an error exists in the <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" />
            object for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessage(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="ValidationMessage">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent ValidationMessage (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, string message, object htmlAttributes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent ValidationMessage(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, string message, object htmlAttributes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessage(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
          <Parameter Name="message" Type="System.String" />
          <Parameter Name="htmlAttributes" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">Expression name, relative to the current model.</param>
          <param name="message">
            The message to be displayed. If <c>null</c> or empty, method extracts an error string from the
            <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" /> object. Message will always be visible but client-side
            validation may update the associated CSS class.
            </param>
          <param name="htmlAttributes">
            An <see cref="T:System.Object" /> that contains the HTML attributes for the
            (<see cref="P:Microsoft.AspNetCore.Mvc.Rendering.ViewContext.ValidationMessageElement" />) element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the HTML
            attributes.
            </param>
          <summary>
            Returns the validation message if an error exists in the <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" />
            object for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessage(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="ValidationMessage">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent ValidationMessage (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, string message, string tag);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent ValidationMessage(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression, string message, string tag) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessage(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
          <Parameter Name="message" Type="System.String" />
          <Parameter Name="tag" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">Expression name, relative to the current model.</param>
          <param name="message">
            The message to be displayed. If <c>null</c> or empty, method extracts an error string from the
            <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" /> object. Message will always be visible but client-side
            validation may update the associated CSS class.
            </param>
          <param name="tag">
            The tag to wrap the <paramref name="message" /> in the generated HTML. Its default value is
            <see cref="P:Microsoft.AspNetCore.Mvc.Rendering.ViewContext.ValidationMessageElement" />.
            </param>
          <summary>
            Returns the validation message if an error exists in the <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" />
            object for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessage(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" />
      </Targets>
      <Member MemberName="ValidationMessageFor&lt;TModel,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent ValidationMessageFor&lt;TModel,TResult&gt; (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt; htmlHelper, System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent ValidationMessageFor&lt;TModel, TResult&gt;(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1&lt;!!TModel&gt; htmlHelper, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TModel, !!TResult&gt;&gt; expression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessageFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModel" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt;" RefType="this" />
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TModel">The type of the model.</typeparam>
          <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">An expression to be evaluated against the current model.</param>
          <summary>
            Returns the validation message if an error exists in the <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" />
            object for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessageFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" />
      </Targets>
      <Member MemberName="ValidationMessageFor&lt;TModel,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent ValidationMessageFor&lt;TModel,TResult&gt; (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt; htmlHelper, System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression, string message);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent ValidationMessageFor&lt;TModel, TResult&gt;(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1&lt;!!TModel&gt; htmlHelper, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TModel, !!TResult&gt;&gt; expression, string message) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessageFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModel" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt;" RefType="this" />
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
          <Parameter Name="message" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TModel">The type of the model.</typeparam>
          <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">An expression to be evaluated against the current model.</param>
          <param name="message">
            The message to be displayed. If <c>null</c> or empty, method extracts an error string from the
            <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" /> object. Message will always be visible but client-side
            validation may update the associated CSS class.
            </param>
          <summary>
            Returns the validation message if an error exists in the <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" />
            object for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessageFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" />
      </Targets>
      <Member MemberName="ValidationMessageFor&lt;TModel,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent ValidationMessageFor&lt;TModel,TResult&gt; (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt; htmlHelper, System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression, string message, object htmlAttributes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent ValidationMessageFor&lt;TModel, TResult&gt;(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1&lt;!!TModel&gt; htmlHelper, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TModel, !!TResult&gt;&gt; expression, string message, object htmlAttributes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessageFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModel" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt;" RefType="this" />
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
          <Parameter Name="message" Type="System.String" />
          <Parameter Name="htmlAttributes" Type="System.Object" />
        </Parameters>
        <Docs>
          <typeparam name="TModel">The type of the model.</typeparam>
          <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">An expression to be evaluated against the current model.</param>
          <param name="message">
            The message to be displayed. If <c>null</c> or empty, method extracts an error string from the
            <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" /> object. Message will always be visible but client-side
            validation may update the associated CSS class.
            </param>
          <param name="htmlAttributes">
            An <see cref="T:System.Object" /> that contains the HTML attributes for the
            (<see cref="P:Microsoft.AspNetCore.Mvc.Rendering.ViewContext.ValidationMessageElement" />) element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the HTML
            attributes.
            </param>
          <summary>
            Returns the validation message if an error exists in the <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" />
            object for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessageFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" />
      </Targets>
      <Member MemberName="ValidationMessageFor&lt;TModel,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent ValidationMessageFor&lt;TModel,TResult&gt; (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt; htmlHelper, System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression, string message, string tag);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent ValidationMessageFor&lt;TModel, TResult&gt;(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1&lt;!!TModel&gt; htmlHelper, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TModel, !!TResult&gt;&gt; expression, string message, string tag) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessageFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModel" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt;" RefType="this" />
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
          <Parameter Name="message" Type="System.String" />
          <Parameter Name="tag" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TModel">The type of the model.</typeparam>
          <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">An expression to be evaluated against the current model.</param>
          <param name="message">
            The message to be displayed. If <c>null</c> or empty, method extracts an error string from the
            <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" /> object. Message will always be visible but client-side
            validation may update the associated CSS class.
            </param>
          <param name="tag">
            The tag to wrap the <paramref name="message" /> in the generated HTML. Its default value is
            <see cref="P:Microsoft.AspNetCore.Mvc.Rendering.ViewContext.ValidationMessageElement" />.
            </param>
          <summary>
            Returns the validation message if an error exists in the <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" />
            object for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessageFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="ValidationSummary">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent ValidationSummary (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent ValidationSummary(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <summary>
            Returns an unordered list (&lt;ul&gt; element) of validation messages that are in the
            <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" /> object.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="ValidationSummary">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent ValidationSummary (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, bool excludePropertyErrors);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent ValidationSummary(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, bool excludePropertyErrors) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.Boolean)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="excludePropertyErrors" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="excludePropertyErrors">
            If <c>true</c>, display model-level errors only; otherwise display all errors.
            </param>
          <summary>
            Returns an unordered list (&lt;ul&gt; element) of validation messages that are in the
            <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" /> object.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="ValidationSummary">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent ValidationSummary (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, bool excludePropertyErrors, string message);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent ValidationSummary(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, bool excludePropertyErrors, string message) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.Boolean,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="excludePropertyErrors" Type="System.Boolean" />
          <Parameter Name="message" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="excludePropertyErrors">
            If <c>true</c>, display model-level errors only; otherwise display all errors.
            </param>
          <param name="message">The message to display with the validation summary.</param>
          <summary>
            Returns an unordered list (&lt;ul&gt; element) of validation messages that are in the
            <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" /> object.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.Boolean,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="ValidationSummary">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent ValidationSummary (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, bool excludePropertyErrors, string message, object htmlAttributes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent ValidationSummary(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, bool excludePropertyErrors, string message, object htmlAttributes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.Boolean,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="excludePropertyErrors" Type="System.Boolean" />
          <Parameter Name="message" Type="System.String" />
          <Parameter Name="htmlAttributes" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="excludePropertyErrors">
            If <c>true</c>, display model-level errors only; otherwise display all errors.
            </param>
          <param name="message">The message to display with the validation summary.</param>
          <param name="htmlAttributes">
            An <see cref="T:System.Object" /> that contains the HTML attributes for the topmost (&lt;div&gt;) element.
            Alternatively, an <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing
            the HTML attributes.
            </param>
          <summary>
            Returns an unordered list (&lt;ul&gt; element) of validation messages that are in the
            <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" /> object.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.Boolean,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="ValidationSummary">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent ValidationSummary (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, bool excludePropertyErrors, string message, string tag);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent ValidationSummary(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, bool excludePropertyErrors, string message, string tag) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.Boolean,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="excludePropertyErrors" Type="System.Boolean" />
          <Parameter Name="message" Type="System.String" />
          <Parameter Name="tag" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="excludePropertyErrors">
            If <c>true</c>, display model-level errors only; otherwise display all errors.
            </param>
          <param name="message">The message to display with the validation summary.</param>
          <param name="tag">
            The tag to wrap the <paramref name="message" /> in the generated HTML. Its default value is
            <see cref="P:Microsoft.AspNetCore.Mvc.Rendering.ViewContext.ValidationSummaryMessageElement" />.
            </param>
          <summary>
            Returns an unordered list (&lt;ul&gt; element) of validation messages that are in the
            <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" /> object.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.Boolean,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="ValidationSummary">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent ValidationSummary (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string message);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent ValidationSummary(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string message) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="message" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="message">The message to display with the validation summary.</param>
          <summary>
            Returns an unordered list (&lt;ul&gt; element) of validation messages that are in the
            <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" /> object.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="ValidationSummary">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent ValidationSummary (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string message, object htmlAttributes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent ValidationSummary(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string message, object htmlAttributes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="message" Type="System.String" />
          <Parameter Name="htmlAttributes" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="message">The message to display with the validation summary.</param>
          <param name="htmlAttributes">
            An <see cref="T:System.Object" /> that contains the HTML attributes for the topmost (&lt;div&gt;) element.
            Alternatively, an <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing
            the HTML attributes.
            </param>
          <summary>
            Returns an unordered list (&lt;ul&gt; element) of validation messages that are in the
            <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" /> object.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="ValidationSummary">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent ValidationSummary (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string message, object htmlAttributes, string tag);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent ValidationSummary(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string message, object htmlAttributes, string tag) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="message" Type="System.String" />
          <Parameter Name="htmlAttributes" Type="System.Object" />
          <Parameter Name="tag" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="message">The message to display with the validation summary.</param>
          <param name="htmlAttributes">
            An <see cref="T:System.Object" /> that contains the HTML attributes for the topmost (&lt;div&gt;) element.
            Alternatively, an <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing
            the HTML attributes.
            </param>
          <param name="tag">
            The tag to wrap the <paramref name="message" /> in the generated HTML. Its default value is
            <see cref="P:Microsoft.AspNetCore.Mvc.Rendering.ViewContext.ValidationSummaryMessageElement" />.
            </param>
          <summary>
            Returns an unordered list (&lt;ul&gt; element) of validation messages that are in the
            <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" /> object.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.Object,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="ValidationSummary">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent ValidationSummary (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string message, string tag);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent ValidationSummary(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string message, string tag) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="message" Type="System.String" />
          <Parameter Name="tag" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="message">The message to display with the validation summary.</param>
          <param name="tag">
            The tag to wrap the <paramref name="message" /> in the generated HTML. Its default value is
            <see cref="P:Microsoft.AspNetCore.Mvc.Rendering.ViewContext.ValidationSummaryMessageElement" />.
            </param>
          <summary>
            Returns an unordered list (&lt;ul&gt; element) of validation messages that are in the
            <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" /> object.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="Value">
        <MemberSignature Language="C#" Value="public static string Value (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Value(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string expression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValueExtensions.Value(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="expression" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="expression">Expression name, relative to the current model.</param>
          <summary>
            Returns the formatted value for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValueExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValueExtensions.Value(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" />
      </Targets>
      <Member MemberName="ValueFor&lt;TModel,TResult&gt;">
        <MemberSignature Language="C#" Value="public static string ValueFor&lt;TModel,TResult&gt; (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt; htmlHelper, System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ValueFor&lt;TModel, TResult&gt;(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1&lt;!!TModel&gt; htmlHelper, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TModel, !!TResult&gt;&gt; expression) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValueExtensions.ValueFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModel" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt;" RefType="this" />
          <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TModel">The type of the model.</typeparam>
          <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" /> instance this method extends.</param>
          <param name="expression">An expression to be evaluated against the current model.</param>
          <summary>
            Returns the formatted value for the specified <paramref name="expression" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValueExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValueExtensions.ValueFor``2(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="ValueForModel">
        <MemberSignature Language="C#" Value="public static string ValueForModel (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ValueForModel(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValueExtensions.ValueForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <summary>
            Returns the formatted value for the current model.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValueExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValueExtensions.ValueForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
      </Targets>
      <Member MemberName="ValueForModel">
        <MemberSignature Language="C#" Value="public static string ValueForModel (this Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string format);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ValueForModel(class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper htmlHelper, string format) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValueExtensions.ValueForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="htmlHelper" Type="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" RefType="this" />
          <Parameter Name="format" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="htmlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> instance this method extends.</param>
          <param name="format">
            The composite format <see cref="T:System.String" /> (see http://msdn.microsoft.com/en-us/library/txafckwd.aspx).
            </param>
          <summary>
            Returns the formatted value for the current model.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValueExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.HtmlHelperValueExtensions.ValueForModel(Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.IViewComponentHelper" />
      </Targets>
      <Member MemberName="InvokeAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Html.IHtmlContent&gt; InvokeAsync (this Microsoft.AspNetCore.Mvc.IViewComponentHelper helper, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Html.IHtmlContent&gt; InvokeAsync(class Microsoft.AspNetCore.Mvc.IViewComponentHelper helper, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.ViewComponentHelperExtensions.InvokeAsync(Microsoft.AspNetCore.Mvc.IViewComponentHelper,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Html.IHtmlContent&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="helper" Type="Microsoft.AspNetCore.Mvc.IViewComponentHelper" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="helper">The <see cref="T:Microsoft.AspNetCore.Mvc.IViewComponentHelper" />.</param>
          <param name="name">The name of the view component.</param>
          <summary>
            Invokes a view component with the specified <paramref name="name" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.ViewComponentHelperExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.ViewComponentHelperExtensions.InvokeAsync(Microsoft.AspNetCore.Mvc.IViewComponentHelper,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.IViewComponentHelper" />
      </Targets>
      <Member MemberName="InvokeAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Html.IHtmlContent&gt; InvokeAsync (this Microsoft.AspNetCore.Mvc.IViewComponentHelper helper, Type componentType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Html.IHtmlContent&gt; InvokeAsync(class Microsoft.AspNetCore.Mvc.IViewComponentHelper helper, class System.Type componentType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.ViewComponentHelperExtensions.InvokeAsync(Microsoft.AspNetCore.Mvc.IViewComponentHelper,System.Type)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Html.IHtmlContent&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="helper" Type="Microsoft.AspNetCore.Mvc.IViewComponentHelper" RefType="this" />
          <Parameter Name="componentType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="helper">The <see cref="T:Microsoft.AspNetCore.Mvc.IViewComponentHelper" />.</param>
          <param name="componentType">The view component <see cref="T:System.Type" />.</param>
          <summary>
            Invokes a view component of type <paramref name="componentType" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.ViewComponentHelperExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.ViewComponentHelperExtensions.InvokeAsync(Microsoft.AspNetCore.Mvc.IViewComponentHelper,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.IViewComponentHelper" />
      </Targets>
      <Member MemberName="InvokeAsync&lt;TComponent&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Html.IHtmlContent&gt; InvokeAsync&lt;TComponent&gt; (this Microsoft.AspNetCore.Mvc.IViewComponentHelper helper);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Html.IHtmlContent&gt; InvokeAsync&lt;TComponent&gt;(class Microsoft.AspNetCore.Mvc.IViewComponentHelper helper) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.ViewComponentHelperExtensions.InvokeAsync``1(Microsoft.AspNetCore.Mvc.IViewComponentHelper)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Html.IHtmlContent&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TComponent" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="helper" Type="Microsoft.AspNetCore.Mvc.IViewComponentHelper" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TComponent">The <see cref="T:System.Type" /> of the view component.</typeparam>
          <param name="helper">The <see cref="T:Microsoft.AspNetCore.Mvc.IViewComponentHelper" />.</param>
          <summary>
            Invokes a view component of type <typeparamref name="TComponent" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.ViewComponentHelperExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.ViewComponentHelperExtensions.InvokeAsync``1(Microsoft.AspNetCore.Mvc.IViewComponentHelper)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.IViewComponentHelper" />
      </Targets>
      <Member MemberName="InvokeAsync&lt;TComponent&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Html.IHtmlContent&gt; InvokeAsync&lt;TComponent&gt; (this Microsoft.AspNetCore.Mvc.IViewComponentHelper helper, object arguments);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Html.IHtmlContent&gt; InvokeAsync&lt;TComponent&gt;(class Microsoft.AspNetCore.Mvc.IViewComponentHelper helper, object arguments) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.ViewComponentHelperExtensions.InvokeAsync``1(Microsoft.AspNetCore.Mvc.IViewComponentHelper,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Html.IHtmlContent&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TComponent" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="helper" Type="Microsoft.AspNetCore.Mvc.IViewComponentHelper" RefType="this" />
          <Parameter Name="arguments" Type="System.Object" />
        </Parameters>
        <Docs>
          <typeparam name="TComponent">The <see cref="T:System.Type" /> of the view component.</typeparam>
          <param name="helper">The <see cref="T:Microsoft.AspNetCore.Mvc.IViewComponentHelper" />.</param>
          <param name="arguments">Arguments to be passed to the invoked view component method.</param>
          <summary>
            Invokes a view component of type <typeparamref name="TComponent" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.Rendering.ViewComponentHelperExtensions" Member="M:Microsoft.AspNetCore.Mvc.Rendering.ViewComponentHelperExtensions.InvokeAsync``1(Microsoft.AspNetCore.Mvc.IViewComponentHelper,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput" />
      </Targets>
      <Member MemberName="CopyHtmlAttribute">
        <MemberSignature Language="C#" Value="public static void CopyHtmlAttribute (this Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput tagHelperOutput, string attributeName, Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyHtmlAttribute(class Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput tagHelperOutput, string attributeName, class Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext context) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.TagHelpers.TagHelperOutputExtensions.CopyHtmlAttribute(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput,System.String,Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="tagHelperOutput" Type="Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput" RefType="this" />
          <Parameter Name="attributeName" Type="System.String" />
          <Parameter Name="context" Type="Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext" />
        </Parameters>
        <Docs>
          <param name="tagHelperOutput">The <see cref="T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput" /> this method extends.</param>
          <param name="attributeName">The name of the bound attribute.</param>
          <param name="context">The <see cref="T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext" />.</param>
          <summary>
            Copies a user-provided attribute from <paramref name="context" />'s
            <see cref="P:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext.AllAttributes" /> to <paramref name="tagHelperOutput" />'s
            <see cref="P:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput.Attributes" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.TagHelpers.TagHelperOutputExtensions" Member="M:Microsoft.AspNetCore.Mvc.TagHelpers.TagHelperOutputExtensions.CopyHtmlAttribute(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput,System.String,Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput" />
      </Targets>
      <Member MemberName="MergeAttributes">
        <MemberSignature Language="C#" Value="public static void MergeAttributes (this Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput tagHelperOutput, Microsoft.AspNetCore.Mvc.Rendering.TagBuilder tagBuilder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MergeAttributes(class Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput tagHelperOutput, class Microsoft.AspNetCore.Mvc.Rendering.TagBuilder tagBuilder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.TagHelpers.TagHelperOutputExtensions.MergeAttributes(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput,Microsoft.AspNetCore.Mvc.Rendering.TagBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="tagHelperOutput" Type="Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput" RefType="this" />
          <Parameter Name="tagBuilder" Type="Microsoft.AspNetCore.Mvc.Rendering.TagBuilder" />
        </Parameters>
        <Docs>
          <param name="tagHelperOutput">The <see cref="T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput" /> this method extends.</param>
          <param name="tagBuilder">The <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.TagBuilder" /> to merge attributes from.</param>
          <summary>
            Merges the given <paramref name="tagBuilder" />'s <see cref="P:Microsoft.AspNetCore.Mvc.Rendering.TagBuilder.Attributes" /> into the
            <paramref name="tagHelperOutput" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.TagHelpers.TagHelperOutputExtensions" Member="M:Microsoft.AspNetCore.Mvc.TagHelpers.TagHelperOutputExtensions.MergeAttributes(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput,Microsoft.AspNetCore.Mvc.Rendering.TagBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput" />
      </Targets>
      <Member MemberName="RemoveRange">
        <MemberSignature Language="C#" Value="public static void RemoveRange (this Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput tagHelperOutput, System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute&gt; attributes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveRange(class Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput tagHelperOutput, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute&gt; attributes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.TagHelpers.TagHelperOutputExtensions.RemoveRange(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="tagHelperOutput" Type="Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput" RefType="this" />
          <Parameter Name="attributes" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute&gt;" />
        </Parameters>
        <Docs>
          <param name="tagHelperOutput">The <see cref="T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput" /> this method extends.</param>
          <param name="attributes">Attributes to remove.</param>
          <summary>
            Removes the given <paramref name="attributes" /> from <paramref name="tagHelperOutput" />'s
            <see cref="P:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput.Attributes" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.TagHelpers.TagHelperOutputExtensions" Member="M:Microsoft.AspNetCore.Mvc.TagHelpers.TagHelperOutputExtensions.RemoveRange(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperOutput,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />
      </Targets>
      <Member MemberName="Action">
        <MemberSignature Language="C#" Value="public static string Action (this Microsoft.AspNetCore.Mvc.IUrlHelper helper);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Action(class Microsoft.AspNetCore.Mvc.IUrlHelper helper) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(Microsoft.AspNetCore.Mvc.IUrlHelper)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="helper" Type="Microsoft.AspNetCore.Mvc.IUrlHelper" RefType="this" />
        </Parameters>
        <Docs>
          <param name="helper">To be added.</param>
          <summary>
            Generates a fully qualified or absolute URL for an action method.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.UrlHelperExtensions" Member="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(Microsoft.AspNetCore.Mvc.IUrlHelper)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />
      </Targets>
      <Member MemberName="Action">
        <MemberSignature Language="C#" Value="public static string Action (this Microsoft.AspNetCore.Mvc.IUrlHelper helper, string action);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Action(class Microsoft.AspNetCore.Mvc.IUrlHelper helper, string action) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="helper" Type="Microsoft.AspNetCore.Mvc.IUrlHelper" RefType="this" />
          <Parameter Name="action" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="helper">The <see cref="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />.</param>
          <param name="action">The name of the action method.</param>
          <summary>
            Generates a fully qualified or absolute URL for an action method by using the specified action name.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.UrlHelperExtensions" Member="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />
      </Targets>
      <Member MemberName="Action">
        <MemberSignature Language="C#" Value="public static string Action (this Microsoft.AspNetCore.Mvc.IUrlHelper helper, string action, object values);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Action(class Microsoft.AspNetCore.Mvc.IUrlHelper helper, string action, object values) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="helper" Type="Microsoft.AspNetCore.Mvc.IUrlHelper" RefType="this" />
          <Parameter Name="action" Type="System.String" />
          <Parameter Name="values" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="helper">The <see cref="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />.</param>
          <param name="action">The name of the action method.</param>
          <param name="values">An object that contains route values.</param>
          <summary>
            Generates a fully qualified or absolute URL for an action method by using the specified action name,
            and route values.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.UrlHelperExtensions" Member="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />
      </Targets>
      <Member MemberName="Action">
        <MemberSignature Language="C#" Value="public static string Action (this Microsoft.AspNetCore.Mvc.IUrlHelper helper, string action, string controller);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Action(class Microsoft.AspNetCore.Mvc.IUrlHelper helper, string action, string controller) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="helper" Type="Microsoft.AspNetCore.Mvc.IUrlHelper" RefType="this" />
          <Parameter Name="action" Type="System.String" />
          <Parameter Name="controller" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="helper">The <see cref="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />.</param>
          <param name="action">The name of the action method.</param>
          <param name="controller">The name of the controller.</param>
          <summary>
            Generates a fully qualified or absolute URL for an action method by using the specified action name,
            and controller name.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.UrlHelperExtensions" Member="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />
      </Targets>
      <Member MemberName="Action">
        <MemberSignature Language="C#" Value="public static string Action (this Microsoft.AspNetCore.Mvc.IUrlHelper helper, string action, string controller, object values);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Action(class Microsoft.AspNetCore.Mvc.IUrlHelper helper, string action, string controller, object values) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="helper" Type="Microsoft.AspNetCore.Mvc.IUrlHelper" RefType="this" />
          <Parameter Name="action" Type="System.String" />
          <Parameter Name="controller" Type="System.String" />
          <Parameter Name="values" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="helper">The <see cref="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />.</param>
          <param name="action">The name of the action method.</param>
          <param name="controller">The name of the controller.</param>
          <param name="values">An object that contains route values.</param>
          <summary>
            Generates a fully qualified or absolute URL for an action method by using the specified action name,
            controller name, and route values.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.UrlHelperExtensions" Member="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />
      </Targets>
      <Member MemberName="Action">
        <MemberSignature Language="C#" Value="public static string Action (this Microsoft.AspNetCore.Mvc.IUrlHelper helper, string action, string controller, object values, string protocol);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Action(class Microsoft.AspNetCore.Mvc.IUrlHelper helper, string action, string controller, object values, string protocol) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,System.Object,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="helper" Type="Microsoft.AspNetCore.Mvc.IUrlHelper" RefType="this" />
          <Parameter Name="action" Type="System.String" />
          <Parameter Name="controller" Type="System.String" />
          <Parameter Name="values" Type="System.Object" />
          <Parameter Name="protocol" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="helper">The <see cref="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />.</param>
          <param name="action">The name of the action method.</param>
          <param name="controller">The name of the controller.</param>
          <param name="values">An object that contains route values.</param>
          <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
          <summary>
            Generates a fully qualified or absolute URL for an action method by using the specified action name,
            controller name, route values, and protocol to use.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.UrlHelperExtensions" Member="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,System.Object,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />
      </Targets>
      <Member MemberName="Action">
        <MemberSignature Language="C#" Value="public static string Action (this Microsoft.AspNetCore.Mvc.IUrlHelper helper, string action, string controller, object values, string protocol, string host);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Action(class Microsoft.AspNetCore.Mvc.IUrlHelper helper, string action, string controller, object values, string protocol, string host) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,System.Object,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="helper" Type="Microsoft.AspNetCore.Mvc.IUrlHelper" RefType="this" />
          <Parameter Name="action" Type="System.String" />
          <Parameter Name="controller" Type="System.String" />
          <Parameter Name="values" Type="System.Object" />
          <Parameter Name="protocol" Type="System.String" />
          <Parameter Name="host" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="helper">The <see cref="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />.</param>
          <param name="action">The name of the action method.</param>
          <param name="controller">The name of the controller.</param>
          <param name="values">An object that contains route values.</param>
          <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
          <param name="host">The host name for the URL.</param>
          <summary>
            Generates a fully qualified or absolute URL for an action method by using the specified action name,
            controller name, route values, protocol to use, and host name.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.UrlHelperExtensions" Member="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,System.Object,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />
      </Targets>
      <Member MemberName="Action">
        <MemberSignature Language="C#" Value="public static string Action (this Microsoft.AspNetCore.Mvc.IUrlHelper helper, string action, string controller, object values, string protocol, string host, string fragment);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Action(class Microsoft.AspNetCore.Mvc.IUrlHelper helper, string action, string controller, object values, string protocol, string host, string fragment) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,System.Object,System.String,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="helper" Type="Microsoft.AspNetCore.Mvc.IUrlHelper" RefType="this" />
          <Parameter Name="action" Type="System.String" />
          <Parameter Name="controller" Type="System.String" />
          <Parameter Name="values" Type="System.Object" />
          <Parameter Name="protocol" Type="System.String" />
          <Parameter Name="host" Type="System.String" />
          <Parameter Name="fragment" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="helper">The <see cref="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />.</param>
          <param name="action">The name of the action method.</param>
          <param name="controller">The name of the controller.</param>
          <param name="values">An object that contains route values.</param>
          <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
          <param name="host">The host name for the URL.</param>
          <param name="fragment">The fragment for the URL.</param>
          <summary>
            Generates a fully qualified or absolute URL for an action method by using the specified action name,
            controller name, route values, protocol to use, host name and fragment.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.UrlHelperExtensions" Member="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,System.Object,System.String,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />
      </Targets>
      <Member MemberName="Page">
        <MemberSignature Language="C#" Value="public static string Page (this Microsoft.AspNetCore.Mvc.IUrlHelper urlHelper, string pageName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Page(class Microsoft.AspNetCore.Mvc.IUrlHelper urlHelper, string pageName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Page(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="urlHelper" Type="Microsoft.AspNetCore.Mvc.IUrlHelper" RefType="this" />
          <Parameter Name="pageName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="urlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />.</param>
          <param name="pageName">The page name to generate the url for.</param>
          <summary>
            Generates a URL with an absolute path for the specified <paramref name="pageName" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.UrlHelperExtensions" Member="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Page(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />
      </Targets>
      <Member MemberName="Page">
        <MemberSignature Language="C#" Value="public static string Page (this Microsoft.AspNetCore.Mvc.IUrlHelper urlHelper, string pageName, object values);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Page(class Microsoft.AspNetCore.Mvc.IUrlHelper urlHelper, string pageName, object values) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Page(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="urlHelper" Type="Microsoft.AspNetCore.Mvc.IUrlHelper" RefType="this" />
          <Parameter Name="pageName" Type="System.String" />
          <Parameter Name="values" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="urlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />.</param>
          <param name="pageName">The page name to generate the url for.</param>
          <param name="values">An object that contains route values.</param>
          <summary>
            Generates a URL with an absolute path for the specified <paramref name="pageName" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.UrlHelperExtensions" Member="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Page(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />
      </Targets>
      <Member MemberName="Page">
        <MemberSignature Language="C#" Value="public static string Page (this Microsoft.AspNetCore.Mvc.IUrlHelper urlHelper, string pageName, string pageHandler);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Page(class Microsoft.AspNetCore.Mvc.IUrlHelper urlHelper, string pageName, string pageHandler) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Page(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="urlHelper" Type="Microsoft.AspNetCore.Mvc.IUrlHelper" RefType="this" />
          <Parameter Name="pageName" Type="System.String" />
          <Parameter Name="pageHandler" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="urlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />.</param>
          <param name="pageName">The page name to generate the url for.</param>
          <param name="pageHandler">The handler to generate the url for.</param>
          <summary>
            Generates a URL with an absolute path for the specified <paramref name="pageName" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.UrlHelperExtensions" Member="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Page(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />
      </Targets>
      <Member MemberName="Page">
        <MemberSignature Language="C#" Value="public static string Page (this Microsoft.AspNetCore.Mvc.IUrlHelper urlHelper, string pageName, string pageHandler, object values);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Page(class Microsoft.AspNetCore.Mvc.IUrlHelper urlHelper, string pageName, string pageHandler, object values) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Page(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="urlHelper" Type="Microsoft.AspNetCore.Mvc.IUrlHelper" RefType="this" />
          <Parameter Name="pageName" Type="System.String" />
          <Parameter Name="pageHandler" Type="System.String" />
          <Parameter Name="values" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="urlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />.</param>
          <param name="pageName">The page name to generate the url for.</param>
          <param name="pageHandler">The handler to generate the url for.</param>
          <param name="values">An object that contains route values.</param>
          <summary>
            Generates a URL with an absolute path for the specified <paramref name="pageName" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.UrlHelperExtensions" Member="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Page(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />
      </Targets>
      <Member MemberName="Page">
        <MemberSignature Language="C#" Value="public static string Page (this Microsoft.AspNetCore.Mvc.IUrlHelper urlHelper, string pageName, string pageHandler, object values, string protocol);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Page(class Microsoft.AspNetCore.Mvc.IUrlHelper urlHelper, string pageName, string pageHandler, object values, string protocol) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Page(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,System.Object,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="urlHelper" Type="Microsoft.AspNetCore.Mvc.IUrlHelper" RefType="this" />
          <Parameter Name="pageName" Type="System.String" />
          <Parameter Name="pageHandler" Type="System.String" />
          <Parameter Name="values" Type="System.Object" />
          <Parameter Name="protocol" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="urlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />.</param>
          <param name="pageName">The page name to generate the url for.</param>
          <param name="pageHandler">The handler to generate the url for.</param>
          <param name="values">An object that contains route values.</param>
          <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
          <summary>
            Generates a URL with an absolute path for the specified <paramref name="pageName" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.UrlHelperExtensions" Member="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Page(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,System.Object,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />
      </Targets>
      <Member MemberName="Page">
        <MemberSignature Language="C#" Value="public static string Page (this Microsoft.AspNetCore.Mvc.IUrlHelper urlHelper, string pageName, string pageHandler, object values, string protocol, string host);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Page(class Microsoft.AspNetCore.Mvc.IUrlHelper urlHelper, string pageName, string pageHandler, object values, string protocol, string host) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Page(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,System.Object,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="urlHelper" Type="Microsoft.AspNetCore.Mvc.IUrlHelper" RefType="this" />
          <Parameter Name="pageName" Type="System.String" />
          <Parameter Name="pageHandler" Type="System.String" />
          <Parameter Name="values" Type="System.Object" />
          <Parameter Name="protocol" Type="System.String" />
          <Parameter Name="host" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="urlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />.</param>
          <param name="pageName">The page name to generate the url for.</param>
          <param name="pageHandler">The handler to generate the url for.</param>
          <param name="values">An object that contains route values.</param>
          <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
          <param name="host">The host name for the URL.</param>
          <summary>
            Generates a URL with an absolute path for the specified <paramref name="pageName" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.UrlHelperExtensions" Member="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Page(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,System.Object,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />
      </Targets>
      <Member MemberName="Page">
        <MemberSignature Language="C#" Value="public static string Page (this Microsoft.AspNetCore.Mvc.IUrlHelper urlHelper, string pageName, string pageHandler, object values, string protocol, string host, string fragment);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Page(class Microsoft.AspNetCore.Mvc.IUrlHelper urlHelper, string pageName, string pageHandler, object values, string protocol, string host, string fragment) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Page(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,System.Object,System.String,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="urlHelper" Type="Microsoft.AspNetCore.Mvc.IUrlHelper" RefType="this" />
          <Parameter Name="pageName" Type="System.String" />
          <Parameter Name="pageHandler" Type="System.String" />
          <Parameter Name="values" Type="System.Object" />
          <Parameter Name="protocol" Type="System.String" />
          <Parameter Name="host" Type="System.String" />
          <Parameter Name="fragment" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="urlHelper">The <see cref="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />.</param>
          <param name="pageName">The page name to generate the url for.</param>
          <param name="pageHandler">The handler to generate the url for.</param>
          <param name="values">An object that contains route values.</param>
          <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
          <param name="host">The host name for the URL.</param>
          <param name="fragment">The fragment for the URL.</param>
          <summary>
            Generates a URL with an absolute path for the specified <paramref name="pageName" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.UrlHelperExtensions" Member="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Page(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.String,System.Object,System.String,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />
      </Targets>
      <Member MemberName="RouteUrl">
        <MemberSignature Language="C#" Value="public static string RouteUrl (this Microsoft.AspNetCore.Mvc.IUrlHelper helper, object values);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string RouteUrl(class Microsoft.AspNetCore.Mvc.IUrlHelper helper, object values) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.RouteUrl(Microsoft.AspNetCore.Mvc.IUrlHelper,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="helper" Type="Microsoft.AspNetCore.Mvc.IUrlHelper" RefType="this" />
          <Parameter Name="values" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="helper">The <see cref="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />.</param>
          <param name="values">An object that contains route values.</param>
          <summary>
            Generates a fully qualified or absolute URL for the specified route values.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.UrlHelperExtensions" Member="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.RouteUrl(Microsoft.AspNetCore.Mvc.IUrlHelper,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />
      </Targets>
      <Member MemberName="RouteUrl">
        <MemberSignature Language="C#" Value="public static string RouteUrl (this Microsoft.AspNetCore.Mvc.IUrlHelper helper, string routeName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string RouteUrl(class Microsoft.AspNetCore.Mvc.IUrlHelper helper, string routeName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.RouteUrl(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="helper" Type="Microsoft.AspNetCore.Mvc.IUrlHelper" RefType="this" />
          <Parameter Name="routeName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="helper">The <see cref="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />.</param>
          <param name="routeName">The name of the route that is used to generate URL.</param>
          <summary>
            Generates a fully qualified or absolute URL for the specified route name.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.UrlHelperExtensions" Member="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.RouteUrl(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />
      </Targets>
      <Member MemberName="RouteUrl">
        <MemberSignature Language="C#" Value="public static string RouteUrl (this Microsoft.AspNetCore.Mvc.IUrlHelper helper, string routeName, object values);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string RouteUrl(class Microsoft.AspNetCore.Mvc.IUrlHelper helper, string routeName, object values) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.RouteUrl(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="helper" Type="Microsoft.AspNetCore.Mvc.IUrlHelper" RefType="this" />
          <Parameter Name="routeName" Type="System.String" />
          <Parameter Name="values" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="helper">The <see cref="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />.</param>
          <param name="routeName">The name of the route that is used to generate URL.</param>
          <param name="values">An object that contains route values.</param>
          <summary>
            Generates a fully qualified or absolute URL for the specified route values by
            using the specified route name.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.UrlHelperExtensions" Member="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.RouteUrl(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />
      </Targets>
      <Member MemberName="RouteUrl">
        <MemberSignature Language="C#" Value="public static string RouteUrl (this Microsoft.AspNetCore.Mvc.IUrlHelper helper, string routeName, object values, string protocol);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string RouteUrl(class Microsoft.AspNetCore.Mvc.IUrlHelper helper, string routeName, object values, string protocol) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.RouteUrl(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.Object,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="helper" Type="Microsoft.AspNetCore.Mvc.IUrlHelper" RefType="this" />
          <Parameter Name="routeName" Type="System.String" />
          <Parameter Name="values" Type="System.Object" />
          <Parameter Name="protocol" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="helper">The <see cref="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />.</param>
          <param name="routeName">The name of the route that is used to generate URL.</param>
          <param name="values">An object that contains route values.</param>
          <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
          <summary>
            Generates a fully qualified or absolute URL for the specified route values by
            using the specified route name, and protocol to use.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.UrlHelperExtensions" Member="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.RouteUrl(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.Object,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />
      </Targets>
      <Member MemberName="RouteUrl">
        <MemberSignature Language="C#" Value="public static string RouteUrl (this Microsoft.AspNetCore.Mvc.IUrlHelper helper, string routeName, object values, string protocol, string host);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string RouteUrl(class Microsoft.AspNetCore.Mvc.IUrlHelper helper, string routeName, object values, string protocol, string host) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.RouteUrl(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.Object,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="helper" Type="Microsoft.AspNetCore.Mvc.IUrlHelper" RefType="this" />
          <Parameter Name="routeName" Type="System.String" />
          <Parameter Name="values" Type="System.Object" />
          <Parameter Name="protocol" Type="System.String" />
          <Parameter Name="host" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="helper">The <see cref="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />.</param>
          <param name="routeName">The name of the route that is used to generate URL.</param>
          <param name="values">An object that contains route values.</param>
          <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
          <param name="host">The host name for the URL.</param>
          <summary>
            Generates a fully qualified or absolute URL for the specified route values by
            using the specified route name, protocol to use, and host name.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.UrlHelperExtensions" Member="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.RouteUrl(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.Object,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />
      </Targets>
      <Member MemberName="RouteUrl">
        <MemberSignature Language="C#" Value="public static string RouteUrl (this Microsoft.AspNetCore.Mvc.IUrlHelper helper, string routeName, object values, string protocol, string host, string fragment);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string RouteUrl(class Microsoft.AspNetCore.Mvc.IUrlHelper helper, string routeName, object values, string protocol, string host, string fragment) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.RouteUrl(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.Object,System.String,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="helper" Type="Microsoft.AspNetCore.Mvc.IUrlHelper" RefType="this" />
          <Parameter Name="routeName" Type="System.String" />
          <Parameter Name="values" Type="System.Object" />
          <Parameter Name="protocol" Type="System.String" />
          <Parameter Name="host" Type="System.String" />
          <Parameter Name="fragment" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="helper">The <see cref="T:Microsoft.AspNetCore.Mvc.IUrlHelper" />.</param>
          <param name="routeName">The name of the route that is used to generate URL.</param>
          <param name="values">An object that contains route values.</param>
          <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
          <param name="host">The host name for the URL.</param>
          <param name="fragment">The fragment for the URL.</param>
          <summary>
            Generates a fully qualified or absolute URL for the specified route values by
            using the specified route name, protocol to use, host name and fragment.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.UrlHelperExtensions" Member="M:Microsoft.AspNetCore.Mvc.UrlHelperExtensions.RouteUrl(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.Object,System.String,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Antiforgery.IAntiforgery" />
      </Targets>
      <Member MemberName="GetHtml">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Html.IHtmlContent GetHtml (this Microsoft.AspNetCore.Antiforgery.IAntiforgery antiforgery, Microsoft.AspNetCore.Http.HttpContext httpContext);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Html.IHtmlContent GetHtml(class Microsoft.AspNetCore.Antiforgery.IAntiforgery antiforgery, class Microsoft.AspNetCore.Http.HttpContext httpContext) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.ViewFeatures.AntiforgeryExtensions.GetHtml(Microsoft.AspNetCore.Antiforgery.IAntiforgery,Microsoft.AspNetCore.Http.HttpContext)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="antiforgery" Type="Microsoft.AspNetCore.Antiforgery.IAntiforgery" RefType="this" />
          <Parameter Name="httpContext" Type="Microsoft.AspNetCore.Http.HttpContext" />
        </Parameters>
        <Docs>
          <param name="antiforgery">The <see cref="T:Microsoft.AspNetCore.Antiforgery.IAntiforgery" /> instance.</param>
          <param name="httpContext">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> associated with the current request.</param>
          <summary>
            Generates an &lt;input type="hidden"&gt; element for an antiforgery token.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.ViewFeatures.AntiforgeryExtensions" Member="M:Microsoft.AspNetCore.Mvc.ViewFeatures.AntiforgeryExtensions.GetHtml(Microsoft.AspNetCore.Antiforgery.IAntiforgery,Microsoft.AspNetCore.Http.HttpContext)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator" />
      </Targets>
      <Member MemberName="GenerateForm">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GenerateForm (this Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator generator, Microsoft.AspNetCore.Mvc.Rendering.ViewContext viewContext, string actionName, string controllerName, string fragment, object routeValues, string method, object htmlAttributes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GenerateForm(class Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator generator, class Microsoft.AspNetCore.Mvc.Rendering.ViewContext viewContext, string actionName, string controllerName, string fragment, object routeValues, string method, object htmlAttributes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGeneratorExtensions.GenerateForm(Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator,Microsoft.AspNetCore.Mvc.Rendering.ViewContext,System.String,System.String,System.String,System.Object,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Mvc.Rendering.TagBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="generator" Type="Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator" RefType="this" />
          <Parameter Name="viewContext" Type="Microsoft.AspNetCore.Mvc.Rendering.ViewContext" />
          <Parameter Name="actionName" Type="System.String" />
          <Parameter Name="controllerName" Type="System.String" />
          <Parameter Name="fragment" Type="System.String" />
          <Parameter Name="routeValues" Type="System.Object" />
          <Parameter Name="method" Type="System.String" />
          <Parameter Name="htmlAttributes" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="generator">To be added.</param>
          <param name="viewContext">To be added.</param>
          <param name="actionName">To be added.</param>
          <param name="controllerName">To be added.</param>
          <param name="fragment">To be added.</param>
          <param name="routeValues">To be added.</param>
          <param name="method">To be added.</param>
          <param name="htmlAttributes">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGeneratorExtensions" Member="M:Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGeneratorExtensions.GenerateForm(Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator,Microsoft.AspNetCore.Mvc.Rendering.ViewContext,System.String,System.String,System.String,System.Object,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator" />
      </Targets>
      <Member MemberName="GenerateRouteForm">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GenerateRouteForm (this Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator generator, Microsoft.AspNetCore.Mvc.Rendering.ViewContext viewContext, string routeName, object routeValues, string fragment, string method, object htmlAttributes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Mvc.Rendering.TagBuilder GenerateRouteForm(class Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator generator, class Microsoft.AspNetCore.Mvc.Rendering.ViewContext viewContext, string routeName, object routeValues, string fragment, string method, object htmlAttributes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGeneratorExtensions.GenerateRouteForm(Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator,Microsoft.AspNetCore.Mvc.Rendering.ViewContext,System.String,System.Object,System.String,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Mvc.Rendering.TagBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="generator" Type="Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator" RefType="this" />
          <Parameter Name="viewContext" Type="Microsoft.AspNetCore.Mvc.Rendering.ViewContext" />
          <Parameter Name="routeName" Type="System.String" />
          <Parameter Name="routeValues" Type="System.Object" />
          <Parameter Name="fragment" Type="System.String" />
          <Parameter Name="method" Type="System.String" />
          <Parameter Name="htmlAttributes" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="generator">To be added.</param>
          <param name="viewContext">To be added.</param>
          <param name="routeName">To be added.</param>
          <param name="routeValues">To be added.</param>
          <param name="fragment">To be added.</param>
          <param name="method">To be added.</param>
          <param name="htmlAttributes">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGeneratorExtensions" Member="M:Microsoft.AspNetCore.Mvc.ViewFeatures.DefaultHtmlGeneratorExtensions.GenerateRouteForm(Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator,Microsoft.AspNetCore.Mvc.Rendering.ViewContext,System.String,System.Object,System.String,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer" />
      </Targets>
      <Member MemberName="GetSimpleDisplayText">
        <MemberSignature Language="C#" Value="public static string GetSimpleDisplayText (this Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer modelExplorer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetSimpleDisplayText(class Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer modelExplorer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorerExtensions.GetSimpleDisplayText(Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="modelExplorer" Type="Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer" RefType="this" />
        </Parameters>
        <Docs>
          <param name="modelExplorer">The <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer" />.</param>
          <summary>
            Gets a simple display string for the <see cref="P:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer.Model" /> property
            of <paramref name="modelExplorer" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorerExtensions" Member="M:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorerExtensions.GetSimpleDisplayText(Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider" />
      </Targets>
      <Member MemberName="GetModelExplorerForType">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer GetModelExplorerForType (this Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider provider, Type modelType, object model);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer GetModelExplorerForType(class Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider provider, class System.Type modelType, object model) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelMetadataProviderExtensions.GetModelExplorerForType(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,System.Type,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="provider" Type="Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider" RefType="this" />
          <Parameter Name="modelType" Type="System.Type" />
          <Parameter Name="model" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="provider">The <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider" />.</param>
          <param name="modelType">The declared <see cref="T:System.Type" /> of the model object.</param>
          <param name="model">The model object.</param>
          <summary>
            Gets a <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer" /> for the provided <paramref name="modelType" /> and
            <paramref name="model" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.ViewFeatures.ModelMetadataProviderExtensions" Member="M:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelMetadataProviderExtensions.GetModelExplorerForType(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,System.Type,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.Formatting.FormDataCollection" />
      </Targets>
      <Member MemberName="GetJQueryNameValuePairs">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,string&gt;&gt; GetJQueryNameValuePairs (this System.Net.Http.Formatting.FormDataCollection formData);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, string&gt;&gt; GetJQueryNameValuePairs(class System.Net.Http.Formatting.FormDataCollection formData) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.WebApiCompatShim.FormDataCollectionExtensions.GetJQueryNameValuePairs(System.Net.Http.Formatting.FormDataCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.String&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="formData" Type="System.Net.Http.Formatting.FormDataCollection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="formData">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.WebApiCompatShim.FormDataCollectionExtensions" Member="M:Microsoft.AspNetCore.Mvc.WebApiCompatShim.FormDataCollectionExtensions.GetJQueryNameValuePairs(System.Net.Http.Formatting.FormDataCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.HttpContext" />
      </Targets>
      <Member MemberName="GetHttpRequestMessage">
        <MemberSignature Language="C#" Value="public static System.Net.Http.HttpRequestMessage GetHttpRequestMessage (this Microsoft.AspNetCore.Http.HttpContext httpContext);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Http.HttpRequestMessage GetHttpRequestMessage(class Microsoft.AspNetCore.Http.HttpContext httpContext) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.WebApiCompatShim.HttpRequestMessageHttpContextExtensions.GetHttpRequestMessage(Microsoft.AspNetCore.Http.HttpContext)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Net.Http.HttpRequestMessage</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="httpContext" Type="Microsoft.AspNetCore.Http.HttpContext" RefType="this" />
        </Parameters>
        <Docs>
          <param name="httpContext">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Mvc.WebApiCompatShim.HttpRequestMessageHttpContextExtensions" Member="M:Microsoft.AspNetCore.Mvc.WebApiCompatShim.HttpRequestMessageHttpContextExtensions.GetHttpRequestMessage(Microsoft.AspNetCore.Http.HttpContext)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.NodeServices.NodeServicesOptions" />
      </Targets>
      <Member MemberName="UseHttpHosting">
        <MemberSignature Language="C#" Value="public static void UseHttpHosting (this Microsoft.AspNetCore.NodeServices.NodeServicesOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UseHttpHosting(class Microsoft.AspNetCore.NodeServices.NodeServicesOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.NodeServices.HostingModels.NodeServicesOptionsExtensions.UseHttpHosting(Microsoft.AspNetCore.NodeServices.NodeServicesOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="options" Type="Microsoft.AspNetCore.NodeServices.NodeServicesOptions" RefType="this" />
        </Parameters>
        <Docs>
          <param name="options">To be added.</param>
          <summary>
            Configures the <see cref="T:Microsoft.AspNetCore.NodeServices.INodeServices" /> service so that it will use out-of-process
            Node.js instances and perform RPC calls over HTTP.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.NodeServices.HostingModels.NodeServicesOptionsExtensions" Member="M:Microsoft.AspNetCore.NodeServices.HostingModels.NodeServicesOptionsExtensions.UseHttpHosting(Microsoft.AspNetCore.NodeServices.NodeServicesOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder" />
      </Targets>
      <Member MemberName="AsDictionary">
        <MemberSignature Language="C#" Value="public static void AsDictionary (this Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder builder, string attributeNamePrefix, string valueTypeName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AsDictionary(class Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder builder, string attributeNamePrefix, string valueTypeName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilderExtensions.AsDictionary(Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder" RefType="this" />
          <Parameter Name="attributeNamePrefix" Type="System.String" />
          <Parameter Name="valueTypeName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="attributeNamePrefix">To be added.</param>
          <param name="valueTypeName">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilderExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilderExtensions.AsDictionary(Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder" />
      </Targets>
      <Member MemberName="GetPropertyName">
        <MemberSignature Language="C#" Value="public static string GetPropertyName (this Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetPropertyName(class Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilderExtensions.GetPropertyName(Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilderExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilderExtensions.GetPropertyName(Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder" />
      </Targets>
      <Member MemberName="SetPropertyName">
        <MemberSignature Language="C#" Value="public static void SetPropertyName (this Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder builder, string propertyName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetPropertyName(class Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder builder, string propertyName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilderExtensions.SetPropertyName(Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder" RefType="this" />
          <Parameter Name="propertyName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="propertyName">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilderExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilderExtensions.SetPropertyName(Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor" />
      </Targets>
      <Member MemberName="GetPropertyName">
        <MemberSignature Language="C#" Value="public static string GetPropertyName (this Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor attribute);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetPropertyName(class Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor attribute) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorExtensions.GetPropertyName(Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="attribute" Type="Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor" RefType="this" />
        </Parameters>
        <Docs>
          <param name="attribute">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorExtensions.GetPropertyName(Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor" />
      </Targets>
      <Member MemberName="IsDefaultKind">
        <MemberSignature Language="C#" Value="public static bool IsDefaultKind (this Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor attribute);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefaultKind(class Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor attribute) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorExtensions.IsDefaultKind(Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="attribute" Type="Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor" RefType="this" />
        </Parameters>
        <Docs>
          <param name="attribute">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptorExtensions.IsDefaultKind(Microsoft.AspNetCore.Razor.Language.BoundAttributeDescriptor)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder" />
      </Targets>
      <Member MemberName="AddMemberToken">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder AddMemberToken (this Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder AddMemberToken(class Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.DirectiveDescriptorBuilderExtensions.AddMemberToken(Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.DirectiveDescriptorBuilderExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.DirectiveDescriptorBuilderExtensions.AddMemberToken(Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder" />
      </Targets>
      <Member MemberName="AddNamespaceToken">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder AddNamespaceToken (this Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder AddNamespaceToken(class Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.DirectiveDescriptorBuilderExtensions.AddNamespaceToken(Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.DirectiveDescriptorBuilderExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.DirectiveDescriptorBuilderExtensions.AddNamespaceToken(Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder" />
      </Targets>
      <Member MemberName="AddOptionalMemberToken">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder AddOptionalMemberToken (this Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder AddOptionalMemberToken(class Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.DirectiveDescriptorBuilderExtensions.AddOptionalMemberToken(Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.DirectiveDescriptorBuilderExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.DirectiveDescriptorBuilderExtensions.AddOptionalMemberToken(Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder" />
      </Targets>
      <Member MemberName="AddOptionalNamespaceToken">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder AddOptionalNamespaceToken (this Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder AddOptionalNamespaceToken(class Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.DirectiveDescriptorBuilderExtensions.AddOptionalNamespaceToken(Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.DirectiveDescriptorBuilderExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.DirectiveDescriptorBuilderExtensions.AddOptionalNamespaceToken(Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder" />
      </Targets>
      <Member MemberName="AddOptionalStringToken">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder AddOptionalStringToken (this Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder AddOptionalStringToken(class Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.DirectiveDescriptorBuilderExtensions.AddOptionalStringToken(Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.DirectiveDescriptorBuilderExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.DirectiveDescriptorBuilderExtensions.AddOptionalStringToken(Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder" />
      </Targets>
      <Member MemberName="AddOptionalTypeToken">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder AddOptionalTypeToken (this Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder AddOptionalTypeToken(class Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.DirectiveDescriptorBuilderExtensions.AddOptionalTypeToken(Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.DirectiveDescriptorBuilderExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.DirectiveDescriptorBuilderExtensions.AddOptionalTypeToken(Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder" />
      </Targets>
      <Member MemberName="AddStringToken">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder AddStringToken (this Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder AddStringToken(class Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.DirectiveDescriptorBuilderExtensions.AddStringToken(Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.DirectiveDescriptorBuilderExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.DirectiveDescriptorBuilderExtensions.AddStringToken(Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder" />
      </Targets>
      <Member MemberName="AddTypeToken">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder AddTypeToken (this Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder AddTypeToken(class Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.DirectiveDescriptorBuilderExtensions.AddTypeToken(Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.DirectiveDescriptorBuilderExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.DirectiveDescriptorBuilderExtensions.AddTypeToken(Microsoft.AspNetCore.Razor.Language.IDirectiveDescriptorBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode" />
      </Targets>
      <Member MemberName="FindDirectiveReferences">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeReference&gt; FindDirectiveReferences (this Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode node, Microsoft.AspNetCore.Razor.Language.DirectiveDescriptor directive);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyList`1&lt;valuetype Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeReference&gt; FindDirectiveReferences(class Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode node, class Microsoft.AspNetCore.Razor.Language.DirectiveDescriptor directive) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNodeExtensions.FindDirectiveReferences(Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode,Microsoft.AspNetCore.Razor.Language.DirectiveDescriptor)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeReference&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="node" Type="Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode" RefType="this" />
          <Parameter Name="directive" Type="Microsoft.AspNetCore.Razor.Language.DirectiveDescriptor" />
        </Parameters>
        <Docs>
          <param name="node">To be added.</param>
          <param name="directive">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNodeExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNodeExtensions.FindDirectiveReferences(Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode,Microsoft.AspNetCore.Razor.Language.DirectiveDescriptor)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode" />
      </Targets>
      <Member MemberName="FindPrimaryClass">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Razor.Language.Intermediate.ClassDeclarationIntermediateNode FindPrimaryClass (this Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode node);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Razor.Language.Intermediate.ClassDeclarationIntermediateNode FindPrimaryClass(class Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode node) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNodeExtensions.FindPrimaryClass(Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Razor.Language.Intermediate.ClassDeclarationIntermediateNode</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="node" Type="Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode" RefType="this" />
        </Parameters>
        <Docs>
          <param name="node">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNodeExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNodeExtensions.FindPrimaryClass(Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode" />
      </Targets>
      <Member MemberName="FindPrimaryMethod">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Razor.Language.Intermediate.MethodDeclarationIntermediateNode FindPrimaryMethod (this Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode node);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Razor.Language.Intermediate.MethodDeclarationIntermediateNode FindPrimaryMethod(class Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode node) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNodeExtensions.FindPrimaryMethod(Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Razor.Language.Intermediate.MethodDeclarationIntermediateNode</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="node" Type="Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode" RefType="this" />
        </Parameters>
        <Docs>
          <param name="node">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNodeExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNodeExtensions.FindPrimaryMethod(Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode" />
      </Targets>
      <Member MemberName="FindPrimaryNamespace">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Razor.Language.Intermediate.NamespaceDeclarationIntermediateNode FindPrimaryNamespace (this Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode node);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Razor.Language.Intermediate.NamespaceDeclarationIntermediateNode FindPrimaryNamespace(class Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode node) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNodeExtensions.FindPrimaryNamespace(Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Razor.Language.Intermediate.NamespaceDeclarationIntermediateNode</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="node" Type="Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode" RefType="this" />
        </Parameters>
        <Docs>
          <param name="node">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNodeExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNodeExtensions.FindPrimaryNamespace(Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode" />
      </Targets>
      <Member MemberName="FindDescendantNodes&lt;TNode&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyList&lt;TNode&gt; FindDescendantNodes&lt;TNode&gt; (this Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode node) where TNode : Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyList`1&lt;!!TNode&gt; FindDescendantNodes&lt;(class Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode) TNode&gt;(class Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode node) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeExtensions.FindDescendantNodes``1(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IReadOnlyList&lt;TNode&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TNode">
            <Constraints>
              <BaseTypeName>Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="node" Type="Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TNode">To be added.</typeparam>
          <param name="node">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeExtensions.FindDescendantNodes``1(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode" />
      </Targets>
      <Member MemberName="GetAllDiagnostics">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Razor.Language.RazorDiagnostic&gt; GetAllDiagnostics (this Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode node);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.AspNetCore.Razor.Language.RazorDiagnostic&gt; GetAllDiagnostics(class Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode node) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeExtensions.GetAllDiagnostics(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Razor.Language.RazorDiagnostic&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="node" Type="Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode" RefType="this" />
        </Parameters>
        <Docs>
          <param name="node">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeExtensions.GetAllDiagnostics(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode" />
      </Targets>
      <Member MemberName="IsImported">
        <MemberSignature Language="C#" Value="public static bool IsImported (this Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode node);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsImported(class Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode node) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeExtensions.IsImported(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="node" Type="Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode" RefType="this" />
        </Parameters>
        <Docs>
          <param name="node">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNodeExtensions.IsImported(Microsoft.AspNetCore.Razor.Language.Intermediate.IntermediateNode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.RazorCodeDocument" />
      </Targets>
      <Member MemberName="GetCSharpDocument">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Razor.Language.RazorCSharpDocument GetCSharpDocument (this Microsoft.AspNetCore.Razor.Language.RazorCodeDocument document);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Razor.Language.RazorCSharpDocument GetCSharpDocument(class Microsoft.AspNetCore.Razor.Language.RazorCodeDocument document) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.RazorCodeDocumentExtensions.GetCSharpDocument(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Razor.Language.RazorCSharpDocument</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="document" Type="Microsoft.AspNetCore.Razor.Language.RazorCodeDocument" RefType="this" />
        </Parameters>
        <Docs>
          <param name="document">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.RazorCodeDocumentExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.RazorCodeDocumentExtensions.GetCSharpDocument(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.RazorCodeDocument" />
      </Targets>
      <Member MemberName="GetDocumentIntermediateNode">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode GetDocumentIntermediateNode (this Microsoft.AspNetCore.Razor.Language.RazorCodeDocument document);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode GetDocumentIntermediateNode(class Microsoft.AspNetCore.Razor.Language.RazorCodeDocument document) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.RazorCodeDocumentExtensions.GetDocumentIntermediateNode(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="document" Type="Microsoft.AspNetCore.Razor.Language.RazorCodeDocument" RefType="this" />
        </Parameters>
        <Docs>
          <param name="document">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.RazorCodeDocumentExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.RazorCodeDocumentExtensions.GetDocumentIntermediateNode(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.RazorCodeDocument" />
      </Targets>
      <Member MemberName="GetImportSyntaxTrees">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Razor.Language.RazorSyntaxTree&gt; GetImportSyntaxTrees (this Microsoft.AspNetCore.Razor.Language.RazorCodeDocument document);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.AspNetCore.Razor.Language.RazorSyntaxTree&gt; GetImportSyntaxTrees(class Microsoft.AspNetCore.Razor.Language.RazorCodeDocument document) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.RazorCodeDocumentExtensions.GetImportSyntaxTrees(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Razor.Language.RazorSyntaxTree&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="document" Type="Microsoft.AspNetCore.Razor.Language.RazorCodeDocument" RefType="this" />
        </Parameters>
        <Docs>
          <param name="document">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.RazorCodeDocumentExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.RazorCodeDocumentExtensions.GetImportSyntaxTrees(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.RazorCodeDocument" />
      </Targets>
      <Member MemberName="GetSyntaxTree">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Razor.Language.RazorSyntaxTree GetSyntaxTree (this Microsoft.AspNetCore.Razor.Language.RazorCodeDocument document);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Razor.Language.RazorSyntaxTree GetSyntaxTree(class Microsoft.AspNetCore.Razor.Language.RazorCodeDocument document) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.RazorCodeDocumentExtensions.GetSyntaxTree(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Razor.Language.RazorSyntaxTree</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="document" Type="Microsoft.AspNetCore.Razor.Language.RazorCodeDocument" RefType="this" />
        </Parameters>
        <Docs>
          <param name="document">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.RazorCodeDocumentExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.RazorCodeDocumentExtensions.GetSyntaxTree(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.RazorCodeDocument" />
      </Targets>
      <Member MemberName="GetTagHelperContext">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Razor.Language.TagHelperDocumentContext GetTagHelperContext (this Microsoft.AspNetCore.Razor.Language.RazorCodeDocument document);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Razor.Language.TagHelperDocumentContext GetTagHelperContext(class Microsoft.AspNetCore.Razor.Language.RazorCodeDocument document) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.RazorCodeDocumentExtensions.GetTagHelperContext(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Razor.Language.TagHelperDocumentContext</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="document" Type="Microsoft.AspNetCore.Razor.Language.RazorCodeDocument" RefType="this" />
        </Parameters>
        <Docs>
          <param name="document">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.RazorCodeDocumentExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.RazorCodeDocumentExtensions.GetTagHelperContext(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.RazorCodeDocument" />
      </Targets>
      <Member MemberName="SetCSharpDocument">
        <MemberSignature Language="C#" Value="public static void SetCSharpDocument (this Microsoft.AspNetCore.Razor.Language.RazorCodeDocument document, Microsoft.AspNetCore.Razor.Language.RazorCSharpDocument csharp);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCSharpDocument(class Microsoft.AspNetCore.Razor.Language.RazorCodeDocument document, class Microsoft.AspNetCore.Razor.Language.RazorCSharpDocument csharp) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.RazorCodeDocumentExtensions.SetCSharpDocument(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument,Microsoft.AspNetCore.Razor.Language.RazorCSharpDocument)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="document" Type="Microsoft.AspNetCore.Razor.Language.RazorCodeDocument" RefType="this" />
          <Parameter Name="csharp" Type="Microsoft.AspNetCore.Razor.Language.RazorCSharpDocument" />
        </Parameters>
        <Docs>
          <param name="document">To be added.</param>
          <param name="csharp">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.RazorCodeDocumentExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.RazorCodeDocumentExtensions.SetCSharpDocument(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument,Microsoft.AspNetCore.Razor.Language.RazorCSharpDocument)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.RazorCodeDocument" />
      </Targets>
      <Member MemberName="SetDocumentIntermediateNode">
        <MemberSignature Language="C#" Value="public static void SetDocumentIntermediateNode (this Microsoft.AspNetCore.Razor.Language.RazorCodeDocument document, Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode documentNode);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetDocumentIntermediateNode(class Microsoft.AspNetCore.Razor.Language.RazorCodeDocument document, class Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode documentNode) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.RazorCodeDocumentExtensions.SetDocumentIntermediateNode(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument,Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="document" Type="Microsoft.AspNetCore.Razor.Language.RazorCodeDocument" RefType="this" />
          <Parameter Name="documentNode" Type="Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode" />
        </Parameters>
        <Docs>
          <param name="document">To be added.</param>
          <param name="documentNode">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.RazorCodeDocumentExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.RazorCodeDocumentExtensions.SetDocumentIntermediateNode(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument,Microsoft.AspNetCore.Razor.Language.Intermediate.DocumentIntermediateNode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.RazorCodeDocument" />
      </Targets>
      <Member MemberName="SetImportSyntaxTrees">
        <MemberSignature Language="C#" Value="public static void SetImportSyntaxTrees (this Microsoft.AspNetCore.Razor.Language.RazorCodeDocument document, System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Razor.Language.RazorSyntaxTree&gt; syntaxTrees);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetImportSyntaxTrees(class Microsoft.AspNetCore.Razor.Language.RazorCodeDocument document, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.AspNetCore.Razor.Language.RazorSyntaxTree&gt; syntaxTrees) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.RazorCodeDocumentExtensions.SetImportSyntaxTrees(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Language.RazorSyntaxTree})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="document" Type="Microsoft.AspNetCore.Razor.Language.RazorCodeDocument" RefType="this" />
          <Parameter Name="syntaxTrees" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Razor.Language.RazorSyntaxTree&gt;" />
        </Parameters>
        <Docs>
          <param name="document">To be added.</param>
          <param name="syntaxTrees">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.RazorCodeDocumentExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.RazorCodeDocumentExtensions.SetImportSyntaxTrees(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Language.RazorSyntaxTree})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.RazorCodeDocument" />
      </Targets>
      <Member MemberName="SetSyntaxTree">
        <MemberSignature Language="C#" Value="public static void SetSyntaxTree (this Microsoft.AspNetCore.Razor.Language.RazorCodeDocument document, Microsoft.AspNetCore.Razor.Language.RazorSyntaxTree syntaxTree);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetSyntaxTree(class Microsoft.AspNetCore.Razor.Language.RazorCodeDocument document, class Microsoft.AspNetCore.Razor.Language.RazorSyntaxTree syntaxTree) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.RazorCodeDocumentExtensions.SetSyntaxTree(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument,Microsoft.AspNetCore.Razor.Language.RazorSyntaxTree)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="document" Type="Microsoft.AspNetCore.Razor.Language.RazorCodeDocument" RefType="this" />
          <Parameter Name="syntaxTree" Type="Microsoft.AspNetCore.Razor.Language.RazorSyntaxTree" />
        </Parameters>
        <Docs>
          <param name="document">To be added.</param>
          <param name="syntaxTree">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.RazorCodeDocumentExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.RazorCodeDocumentExtensions.SetSyntaxTree(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument,Microsoft.AspNetCore.Razor.Language.RazorSyntaxTree)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.RazorCodeDocument" />
      </Targets>
      <Member MemberName="SetTagHelperContext">
        <MemberSignature Language="C#" Value="public static void SetTagHelperContext (this Microsoft.AspNetCore.Razor.Language.RazorCodeDocument document, Microsoft.AspNetCore.Razor.Language.TagHelperDocumentContext context);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetTagHelperContext(class Microsoft.AspNetCore.Razor.Language.RazorCodeDocument document, class Microsoft.AspNetCore.Razor.Language.TagHelperDocumentContext context) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.RazorCodeDocumentExtensions.SetTagHelperContext(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument,Microsoft.AspNetCore.Razor.Language.TagHelperDocumentContext)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="document" Type="Microsoft.AspNetCore.Razor.Language.RazorCodeDocument" RefType="this" />
          <Parameter Name="context" Type="Microsoft.AspNetCore.Razor.Language.TagHelperDocumentContext" />
        </Parameters>
        <Docs>
          <param name="document">To be added.</param>
          <param name="context">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.RazorCodeDocumentExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.RazorCodeDocumentExtensions.SetTagHelperContext(Microsoft.AspNetCore.Razor.Language.RazorCodeDocument,Microsoft.AspNetCore.Razor.Language.TagHelperDocumentContext)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder" />
      </Targets>
      <Member MemberName="AddDirective">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder AddDirective (this Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder builder, Microsoft.AspNetCore.Razor.Language.DirectiveDescriptor directive);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder AddDirective(class Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder builder, class Microsoft.AspNetCore.Razor.Language.DirectiveDescriptor directive) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.RazorEngineBuilderExtensions.AddDirective(Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder,Microsoft.AspNetCore.Razor.Language.DirectiveDescriptor)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder" RefType="this" />
          <Parameter Name="directive" Type="Microsoft.AspNetCore.Razor.Language.DirectiveDescriptor" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder" />.</param>
          <param name="directive">The <see cref="T:Microsoft.AspNetCore.Razor.Language.DirectiveDescriptor" /> to add.</param>
          <summary>
            Adds the specified <see cref="T:Microsoft.AspNetCore.Razor.Language.DirectiveDescriptor" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.RazorEngineBuilderExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.RazorEngineBuilderExtensions.AddDirective(Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder,Microsoft.AspNetCore.Razor.Language.DirectiveDescriptor)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder" />
      </Targets>
      <Member MemberName="AddTargetExtension">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder AddTargetExtension (this Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder builder, Microsoft.AspNetCore.Razor.Language.CodeGeneration.ICodeTargetExtension extension);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder AddTargetExtension(class Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder builder, class Microsoft.AspNetCore.Razor.Language.CodeGeneration.ICodeTargetExtension extension) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.RazorEngineBuilderExtensions.AddTargetExtension(Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder,Microsoft.AspNetCore.Razor.Language.CodeGeneration.ICodeTargetExtension)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder" RefType="this" />
          <Parameter Name="extension" Type="Microsoft.AspNetCore.Razor.Language.CodeGeneration.ICodeTargetExtension" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder" />.</param>
          <param name="extension">The <see cref="T:Microsoft.AspNetCore.Razor.Language.CodeGeneration.ICodeTargetExtension" /> to add.</param>
          <summary>
            Adds the specified <see cref="T:Microsoft.AspNetCore.Razor.Language.CodeGeneration.ICodeTargetExtension" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.RazorEngineBuilderExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.RazorEngineBuilderExtensions.AddTargetExtension(Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder,Microsoft.AspNetCore.Razor.Language.CodeGeneration.ICodeTargetExtension)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder" />
      </Targets>
      <Member MemberName="ConfigureClass">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder ConfigureClass (this Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder builder, Action&lt;Microsoft.AspNetCore.Razor.Language.RazorCodeDocument,Microsoft.AspNetCore.Razor.Language.Intermediate.ClassDeclarationIntermediateNode&gt; configureClass);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder ConfigureClass(class Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder builder, class System.Action`2&lt;class Microsoft.AspNetCore.Razor.Language.RazorCodeDocument, class Microsoft.AspNetCore.Razor.Language.Intermediate.ClassDeclarationIntermediateNode&gt; configureClass) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.RazorEngineBuilderExtensions.ConfigureClass(Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder,System.Action{Microsoft.AspNetCore.Razor.Language.RazorCodeDocument,Microsoft.AspNetCore.Razor.Language.Intermediate.ClassDeclarationIntermediateNode})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder" RefType="this" />
          <Parameter Name="configureClass" Type="System.Action&lt;Microsoft.AspNetCore.Razor.Language.RazorCodeDocument,Microsoft.AspNetCore.Razor.Language.Intermediate.ClassDeclarationIntermediateNode&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder" />.</param>
          <param name="configureClass">
            <see cref="T:System.Action" /> invoked to configure 
            <see cref="T:Microsoft.AspNetCore.Razor.Language.Intermediate.ClassDeclarationIntermediateNode" /> during code generation.</param>
          <summary>
            Registers a class configuration delegate that gets invoked during code generation.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.RazorEngineBuilderExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.RazorEngineBuilderExtensions.ConfigureClass(Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder,System.Action{Microsoft.AspNetCore.Razor.Language.RazorCodeDocument,Microsoft.AspNetCore.Razor.Language.Intermediate.ClassDeclarationIntermediateNode})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder" />
      </Targets>
      <Member MemberName="SetBaseType">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder SetBaseType (this Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder builder, string baseType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder SetBaseType(class Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder builder, string baseType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.RazorEngineBuilderExtensions.SetBaseType(Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder" RefType="this" />
          <Parameter Name="baseType" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder" />.</param>
          <param name="baseType">The name of the base type.</param>
          <summary>
            Sets the base type for generated types.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.RazorEngineBuilderExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.RazorEngineBuilderExtensions.SetBaseType(Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder" />
      </Targets>
      <Member MemberName="SetNamespace">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder SetNamespace (this Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder builder, string namespaceName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder SetNamespace(class Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder builder, string namespaceName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.RazorEngineBuilderExtensions.SetNamespace(Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder" RefType="this" />
          <Parameter Name="namespaceName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder" />.</param>
          <param name="namespaceName">The name of the namespace.</param>
          <summary>
            Sets the namespace for generated types.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.RazorEngineBuilderExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.RazorEngineBuilderExtensions.SetNamespace(Microsoft.AspNetCore.Razor.Language.IRazorEngineBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder" />
      </Targets>
      <Member MemberName="GetTypeName">
        <MemberSignature Language="C#" Value="public static string GetTypeName (this Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetTypeName(class Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilderExtensions.GetTypeName(Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilderExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilderExtensions.GetTypeName(Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder" />
      </Targets>
      <Member MemberName="SetTypeName">
        <MemberSignature Language="C#" Value="public static void SetTypeName (this Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder builder, string typeName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetTypeName(class Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder builder, string typeName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilderExtensions.SetTypeName(Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder" RefType="this" />
          <Parameter Name="typeName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="typeName">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilderExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilderExtensions.SetTypeName(Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor" />
      </Targets>
      <Member MemberName="GetTypeName">
        <MemberSignature Language="C#" Value="public static string GetTypeName (this Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor tagHelper);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetTypeName(class Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor tagHelper) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorExtensions.GetTypeName(Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="tagHelper" Type="Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor" RefType="this" />
        </Parameters>
        <Docs>
          <param name="tagHelper">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorExtensions.GetTypeName(Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor" />
      </Targets>
      <Member MemberName="IsDefaultKind">
        <MemberSignature Language="C#" Value="public static bool IsDefaultKind (this Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor tagHelper);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefaultKind(class Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor tagHelper) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorExtensions.IsDefaultKind(Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="tagHelper" Type="Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor" RefType="this" />
        </Parameters>
        <Docs>
          <param name="tagHelper">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorExtensions.IsDefaultKind(Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor" />
      </Targets>
      <Member MemberName="KindUsesDefaultTagHelperRuntime">
        <MemberSignature Language="C#" Value="public static bool KindUsesDefaultTagHelperRuntime (this Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor tagHelper);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool KindUsesDefaultTagHelperRuntime(class Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor tagHelper) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorExtensions.KindUsesDefaultTagHelperRuntime(Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="tagHelper" Type="Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor" RefType="this" />
        </Parameters>
        <Docs>
          <param name="tagHelper">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorExtensions" Member="M:Microsoft.AspNetCore.Razor.Language.TagHelperDescriptorExtensions.KindUsesDefaultTagHelperRuntime(Microsoft.AspNetCore.Razor.Language.TagHelperDescriptor)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Parser.ParserVisitor" />
      </Targets>
      <Member MemberName="Visit">
        <MemberSignature Language="C#" Value="public static void Visit (this Microsoft.AspNetCore.Razor.Parser.ParserVisitor self, Microsoft.AspNetCore.Razor.ParserResults result);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Visit(class Microsoft.AspNetCore.Razor.Parser.ParserVisitor self, class Microsoft.AspNetCore.Razor.ParserResults result) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Parser.ParserVisitorExtensions.Visit(Microsoft.AspNetCore.Razor.Parser.ParserVisitor,Microsoft.AspNetCore.Razor.ParserResults)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="Microsoft.AspNetCore.Razor.Parser.ParserVisitor" RefType="this" />
          <Parameter Name="result" Type="Microsoft.AspNetCore.Razor.ParserResults" />
        </Parameters>
        <Docs>
          <param name="self">To be added.</param>
          <param name="result">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Parser.ParserVisitorExtensions" Member="M:Microsoft.AspNetCore.Razor.Parser.ParserVisitorExtensions.Visit(Microsoft.AspNetCore.Razor.Parser.ParserVisitor,Microsoft.AspNetCore.Razor.ParserResults)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="FirstHtmlSymbolAs">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Razor.Tokenizer.Symbols.Internal.HtmlSymbol FirstHtmlSymbolAs (this System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol&gt; symbols, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.Internal.HtmlSymbolType type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Razor.Tokenizer.Symbols.Internal.HtmlSymbol FirstHtmlSymbolAs(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol&gt; symbols, valuetype Microsoft.AspNetCore.Razor.Tokenizer.Symbols.Internal.HtmlSymbolType type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.Internal.HtmlSymbolExtensions.FirstHtmlSymbolAs(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol},Microsoft.AspNetCore.Razor.Tokenizer.Symbols.Internal.HtmlSymbolType)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Razor.Tokenizer.Symbols.Internal.HtmlSymbol</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="symbols" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol&gt;" RefType="this" />
          <Parameter Name="type" Type="Microsoft.AspNetCore.Razor.Tokenizer.Symbols.Internal.HtmlSymbolType" />
        </Parameters>
        <Docs>
          <param name="symbols">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> instance this method extends.</param>
          <param name="type">The <see cref="T:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.Internal.HtmlSymbolType" /> to search for.</param>
          <summary>
            Converts the generic <see cref="T:System.Collections.Generic.IEnumerable`1" /> to a <see cref="T:System.Collections.Generic.IEnumerable`1" /> and
            finds the first <see cref="T:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.Internal.HtmlSymbol" /> with type <paramref name="type" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Tokenizer.Symbols.Internal.HtmlSymbolExtensions" Member="M:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.Internal.HtmlSymbolExtensions.FirstHtmlSymbolAs(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol},Microsoft.AspNetCore.Razor.Tokenizer.Symbols.Internal.HtmlSymbolType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder" />
      </Targets>
      <Member MemberName="GetContent">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Razor.Text.LocationTagged&lt;string&gt; GetContent (this Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder span);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Razor.Text.LocationTagged`1&lt;string&gt; GetContent(class Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder span) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Razor.Text.LocationTagged&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="span" Type="Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="span">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions" Member="M:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder" />
      </Targets>
      <Member MemberName="GetContent">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Razor.Text.LocationTagged&lt;string&gt; GetContent (this Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder span, Func&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol&gt;,System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol&gt;&gt; filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Razor.Text.LocationTagged`1&lt;string&gt; GetContent(class Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder span, class System.Func`2&lt;class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol&gt;, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol&gt;&gt; filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,System.Func{System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol}})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Razor.Text.LocationTagged&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="span" Type="Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder" RefType="this" />
          <Parameter Name="filter" Type="System.Func&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol&gt;,System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol&gt;&gt;" />
        </Parameters>
        <Docs>
          <param name="span">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions" Member="M:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,System.Func{System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol" />
      </Targets>
      <Member MemberName="GetContent">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Razor.Text.LocationTagged&lt;string&gt; GetContent (this Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol symbol);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Razor.Text.LocationTagged`1&lt;string&gt; GetContent(class Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol symbol) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Razor.Text.LocationTagged&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="symbol" Type="Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol" RefType="this" />
        </Parameters>
        <Docs>
          <param name="symbol">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions" Member="M:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="GetContent">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Razor.Text.LocationTagged&lt;string&gt; GetContent (this System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol&gt; symbols, Microsoft.AspNetCore.Razor.SourceLocation spanStart);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Razor.Text.LocationTagged`1&lt;string&gt; GetContent(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol&gt; symbols, valuetype Microsoft.AspNetCore.Razor.SourceLocation spanStart) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol},Microsoft.AspNetCore.Razor.SourceLocation)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Razor.Text.LocationTagged&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="symbols" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol&gt;" RefType="this" />
          <Parameter Name="spanStart" Type="Microsoft.AspNetCore.Razor.SourceLocation" />
        </Parameters>
        <Docs>
          <param name="symbols">To be added.</param>
          <param name="spanStart">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions" Member="M:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol},Microsoft.AspNetCore.Razor.SourceLocation)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Rewrite.RewriteOptions" />
      </Targets>
      <Member MemberName="AddApacheModRewrite">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Rewrite.RewriteOptions AddApacheModRewrite (this Microsoft.AspNetCore.Rewrite.RewriteOptions options, Microsoft.Extensions.FileProviders.IFileProvider fileProvider, string filePath);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Rewrite.RewriteOptions AddApacheModRewrite(class Microsoft.AspNetCore.Rewrite.RewriteOptions options, class Microsoft.Extensions.FileProviders.IFileProvider fileProvider, string filePath) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Rewrite.ApacheModRewriteOptionsExtensions.AddApacheModRewrite(Microsoft.AspNetCore.Rewrite.RewriteOptions,Microsoft.Extensions.FileProviders.IFileProvider,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Rewrite.RewriteOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="options" Type="Microsoft.AspNetCore.Rewrite.RewriteOptions" RefType="this" />
          <Parameter Name="fileProvider" Type="Microsoft.Extensions.FileProviders.IFileProvider" />
          <Parameter Name="filePath" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="options">The <see cref="T:Microsoft.AspNetCore.Rewrite.RewriteOptions" /></param>
          <param name="fileProvider">The <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider" /></param>
          <param name="filePath">The path to the file containing mod_rewrite rules.</param>
          <summary>
            Add rules from an Apache mod_rewrite file
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Rewrite.ApacheModRewriteOptionsExtensions" Member="M:Microsoft.AspNetCore.Rewrite.ApacheModRewriteOptionsExtensions.AddApacheModRewrite(Microsoft.AspNetCore.Rewrite.RewriteOptions,Microsoft.Extensions.FileProviders.IFileProvider,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Rewrite.RewriteOptions" />
      </Targets>
      <Member MemberName="AddApacheModRewrite">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Rewrite.RewriteOptions AddApacheModRewrite (this Microsoft.AspNetCore.Rewrite.RewriteOptions options, System.IO.TextReader reader);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Rewrite.RewriteOptions AddApacheModRewrite(class Microsoft.AspNetCore.Rewrite.RewriteOptions options, class System.IO.TextReader reader) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Rewrite.ApacheModRewriteOptionsExtensions.AddApacheModRewrite(Microsoft.AspNetCore.Rewrite.RewriteOptions,System.IO.TextReader)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Rewrite.RewriteOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="options" Type="Microsoft.AspNetCore.Rewrite.RewriteOptions" RefType="this" />
          <Parameter Name="reader" Type="System.IO.TextReader" />
        </Parameters>
        <Docs>
          <param name="options">The <see cref="T:Microsoft.AspNetCore.Rewrite.RewriteOptions" /></param>
          <param name="reader">A stream of mod_rewrite rules.</param>
          <summary>
            Add rules from an Apache mod_rewrite file
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Rewrite.ApacheModRewriteOptionsExtensions" Member="M:Microsoft.AspNetCore.Rewrite.ApacheModRewriteOptionsExtensions.AddApacheModRewrite(Microsoft.AspNetCore.Rewrite.RewriteOptions,System.IO.TextReader)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Rewrite.RewriteOptions" />
      </Targets>
      <Member MemberName="AddIISUrlRewrite">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Rewrite.RewriteOptions AddIISUrlRewrite (this Microsoft.AspNetCore.Rewrite.RewriteOptions options, Microsoft.Extensions.FileProviders.IFileProvider fileProvider, string filePath);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Rewrite.RewriteOptions AddIISUrlRewrite(class Microsoft.AspNetCore.Rewrite.RewriteOptions options, class Microsoft.Extensions.FileProviders.IFileProvider fileProvider, string filePath) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Rewrite.IISUrlRewriteOptionsExtensions.AddIISUrlRewrite(Microsoft.AspNetCore.Rewrite.RewriteOptions,Microsoft.Extensions.FileProviders.IFileProvider,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Rewrite.RewriteOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="options" Type="Microsoft.AspNetCore.Rewrite.RewriteOptions" RefType="this" />
          <Parameter Name="fileProvider" Type="Microsoft.Extensions.FileProviders.IFileProvider" />
          <Parameter Name="filePath" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="options">The <see cref="T:Microsoft.AspNetCore.Rewrite.RewriteOptions" /></param>
          <param name="fileProvider">The <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider" /></param>
          <param name="filePath">The path to the file containing UrlRewrite rules.</param>
          <summary>
            Add rules from a IIS config file containing Url Rewrite rules
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Rewrite.IISUrlRewriteOptionsExtensions" Member="M:Microsoft.AspNetCore.Rewrite.IISUrlRewriteOptionsExtensions.AddIISUrlRewrite(Microsoft.AspNetCore.Rewrite.RewriteOptions,Microsoft.Extensions.FileProviders.IFileProvider,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Rewrite.RewriteOptions" />
      </Targets>
      <Member MemberName="AddIISUrlRewrite">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Rewrite.RewriteOptions AddIISUrlRewrite (this Microsoft.AspNetCore.Rewrite.RewriteOptions options, System.IO.TextReader reader);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Rewrite.RewriteOptions AddIISUrlRewrite(class Microsoft.AspNetCore.Rewrite.RewriteOptions options, class System.IO.TextReader reader) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Rewrite.IISUrlRewriteOptionsExtensions.AddIISUrlRewrite(Microsoft.AspNetCore.Rewrite.RewriteOptions,System.IO.TextReader)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Rewrite.RewriteOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="options" Type="Microsoft.AspNetCore.Rewrite.RewriteOptions" RefType="this" />
          <Parameter Name="reader" Type="System.IO.TextReader" />
        </Parameters>
        <Docs>
          <param name="options">The <see cref="T:Microsoft.AspNetCore.Rewrite.RewriteOptions" /></param>
          <param name="reader">The text reader stream.</param>
          <summary>
            Add rules from a IIS config file containing Url Rewrite rules
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Rewrite.IISUrlRewriteOptionsExtensions" Member="M:Microsoft.AspNetCore.Rewrite.IISUrlRewriteOptionsExtensions.AddIISUrlRewrite(Microsoft.AspNetCore.Rewrite.RewriteOptions,System.IO.TextReader)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Rewrite.RewriteOptions" />
      </Targets>
      <Member MemberName="Add">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Rewrite.RewriteOptions Add (this Microsoft.AspNetCore.Rewrite.RewriteOptions options, Microsoft.AspNetCore.Rewrite.IRule rule);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Rewrite.RewriteOptions Add(class Microsoft.AspNetCore.Rewrite.RewriteOptions options, class Microsoft.AspNetCore.Rewrite.IRule rule) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.Add(Microsoft.AspNetCore.Rewrite.RewriteOptions,Microsoft.AspNetCore.Rewrite.IRule)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Rewrite.RewriteOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="options" Type="Microsoft.AspNetCore.Rewrite.RewriteOptions" RefType="this" />
          <Parameter Name="rule" Type="Microsoft.AspNetCore.Rewrite.IRule" />
        </Parameters>
        <Docs>
          <param name="options">The <see cref="T:Microsoft.AspNetCore.Rewrite.RewriteOptions" />.</param>
          <param name="rule">A rule to be added to the current rules.</param>
          <summary>
            Adds a rule to the current rules.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions" Member="M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.Add(Microsoft.AspNetCore.Rewrite.RewriteOptions,Microsoft.AspNetCore.Rewrite.IRule)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Rewrite.RewriteOptions" />
      </Targets>
      <Member MemberName="Add">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Rewrite.RewriteOptions Add (this Microsoft.AspNetCore.Rewrite.RewriteOptions options, Action&lt;Microsoft.AspNetCore.Rewrite.RewriteContext&gt; applyRule);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Rewrite.RewriteOptions Add(class Microsoft.AspNetCore.Rewrite.RewriteOptions options, class System.Action`1&lt;class Microsoft.AspNetCore.Rewrite.RewriteContext&gt; applyRule) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.Add(Microsoft.AspNetCore.Rewrite.RewriteOptions,System.Action{Microsoft.AspNetCore.Rewrite.RewriteContext})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Rewrite.RewriteOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="options" Type="Microsoft.AspNetCore.Rewrite.RewriteOptions" RefType="this" />
          <Parameter Name="applyRule" Type="System.Action&lt;Microsoft.AspNetCore.Rewrite.RewriteContext&gt;" />
        </Parameters>
        <Docs>
          <param name="options">The <see cref="T:Microsoft.AspNetCore.Rewrite.RewriteOptions" />.</param>
          <param name="applyRule">A Func that checks and applies the rule.</param>
          <summary>
            Adds a rule to the current rules.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions" Member="M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.Add(Microsoft.AspNetCore.Rewrite.RewriteOptions,System.Action{Microsoft.AspNetCore.Rewrite.RewriteContext})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Rewrite.RewriteOptions" />
      </Targets>
      <Member MemberName="AddRedirect">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirect (this Microsoft.AspNetCore.Rewrite.RewriteOptions options, string regex, string replacement);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirect(class Microsoft.AspNetCore.Rewrite.RewriteOptions options, string regex, string replacement) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirect(Microsoft.AspNetCore.Rewrite.RewriteOptions,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Rewrite.RewriteOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="options" Type="Microsoft.AspNetCore.Rewrite.RewriteOptions" RefType="this" />
          <Parameter Name="regex" Type="System.String" />
          <Parameter Name="replacement" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="options">The <see cref="T:Microsoft.AspNetCore.Rewrite.RewriteOptions" />.</param>
          <param name="regex">The regex string to compare with.</param>
          <param name="replacement">If the regex matches, what to replace the uri with.</param>
          <summary>
            Redirect the request if the regex matches the HttpContext's PathString
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions" Member="M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirect(Microsoft.AspNetCore.Rewrite.RewriteOptions,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Rewrite.RewriteOptions" />
      </Targets>
      <Member MemberName="AddRedirect">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirect (this Microsoft.AspNetCore.Rewrite.RewriteOptions options, string regex, string replacement, int statusCode);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirect(class Microsoft.AspNetCore.Rewrite.RewriteOptions options, string regex, string replacement, int32 statusCode) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirect(Microsoft.AspNetCore.Rewrite.RewriteOptions,System.String,System.String,System.Int32)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Rewrite.RewriteOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="options" Type="Microsoft.AspNetCore.Rewrite.RewriteOptions" RefType="this" />
          <Parameter Name="regex" Type="System.String" />
          <Parameter Name="replacement" Type="System.String" />
          <Parameter Name="statusCode" Type="System.Int32" />
        </Parameters>
        <Docs>
          <param name="options">The <see cref="T:Microsoft.AspNetCore.Rewrite.RewriteOptions" />.</param>
          <param name="regex">The regex string to compare with.</param>
          <param name="replacement">If the regex matches, what to replace the uri with.</param>
          <param name="statusCode">The status code to add to the response.</param>
          <summary>
            Redirect the request if the regex matches the HttpContext's PathString
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions" Member="M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirect(Microsoft.AspNetCore.Rewrite.RewriteOptions,System.String,System.String,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Rewrite.RewriteOptions" />
      </Targets>
      <Member MemberName="AddRedirectToHttps">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToHttps (this Microsoft.AspNetCore.Rewrite.RewriteOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToHttps(class Microsoft.AspNetCore.Rewrite.RewriteOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToHttps(Microsoft.AspNetCore.Rewrite.RewriteOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Rewrite.RewriteOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="options" Type="Microsoft.AspNetCore.Rewrite.RewriteOptions" RefType="this" />
        </Parameters>
        <Docs>
          <param name="options">The <see cref="T:Microsoft.AspNetCore.Rewrite.RewriteOptions" />.</param>
          <summary>
            Redirect a request to https if the incoming request is http
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions" Member="M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToHttps(Microsoft.AspNetCore.Rewrite.RewriteOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Rewrite.RewriteOptions" />
      </Targets>
      <Member MemberName="AddRedirectToHttps">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToHttps (this Microsoft.AspNetCore.Rewrite.RewriteOptions options, int statusCode);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToHttps(class Microsoft.AspNetCore.Rewrite.RewriteOptions options, int32 statusCode) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToHttps(Microsoft.AspNetCore.Rewrite.RewriteOptions,System.Int32)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Rewrite.RewriteOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="options" Type="Microsoft.AspNetCore.Rewrite.RewriteOptions" RefType="this" />
          <Parameter Name="statusCode" Type="System.Int32" />
        </Parameters>
        <Docs>
          <param name="options">The <see cref="T:Microsoft.AspNetCore.Rewrite.RewriteOptions" />.</param>
          <param name="statusCode">The status code to add to the response.</param>
          <summary>
            Redirect a request to https if the incoming request is http
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions" Member="M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToHttps(Microsoft.AspNetCore.Rewrite.RewriteOptions,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Rewrite.RewriteOptions" />
      </Targets>
      <Member MemberName="AddRedirectToHttps">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToHttps (this Microsoft.AspNetCore.Rewrite.RewriteOptions options, int statusCode, Nullable&lt;int&gt; sslPort);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToHttps(class Microsoft.AspNetCore.Rewrite.RewriteOptions options, int32 statusCode, valuetype System.Nullable`1&lt;int32&gt; sslPort) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToHttps(Microsoft.AspNetCore.Rewrite.RewriteOptions,System.Int32,System.Nullable{System.Int32})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Rewrite.RewriteOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="options" Type="Microsoft.AspNetCore.Rewrite.RewriteOptions" RefType="this" />
          <Parameter Name="statusCode" Type="System.Int32" />
          <Parameter Name="sslPort" Type="System.Nullable&lt;System.Int32&gt;" />
        </Parameters>
        <Docs>
          <param name="options">The <see cref="T:Microsoft.AspNetCore.Rewrite.RewriteOptions" />.</param>
          <param name="statusCode">The status code to add to the response.</param>
          <param name="sslPort">The SSL port to add to the response.</param>
          <summary>
            Redirect a request to https if the incoming request is http
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions" Member="M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToHttps(Microsoft.AspNetCore.Rewrite.RewriteOptions,System.Int32,System.Nullable{System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Rewrite.RewriteOptions" />
      </Targets>
      <Member MemberName="AddRedirectToHttpsPermanent">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToHttpsPermanent (this Microsoft.AspNetCore.Rewrite.RewriteOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Rewrite.RewriteOptions AddRedirectToHttpsPermanent(class Microsoft.AspNetCore.Rewrite.RewriteOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToHttpsPermanent(Microsoft.AspNetCore.Rewrite.RewriteOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Rewrite.RewriteOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="options" Type="Microsoft.AspNetCore.Rewrite.RewriteOptions" RefType="this" />
        </Parameters>
        <Docs>
          <param name="options">The <see cref="T:Microsoft.AspNetCore.Rewrite.RewriteOptions" />.</param>
          <summary>
            Redirect a request to https if the incoming request is http, with returning a 301
            status code for permanently redirected.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions" Member="M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRedirectToHttpsPermanent(Microsoft.AspNetCore.Rewrite.RewriteOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Rewrite.RewriteOptions" />
      </Targets>
      <Member MemberName="AddRewrite">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Rewrite.RewriteOptions AddRewrite (this Microsoft.AspNetCore.Rewrite.RewriteOptions options, string regex, string replacement, bool skipRemainingRules);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Rewrite.RewriteOptions AddRewrite(class Microsoft.AspNetCore.Rewrite.RewriteOptions options, string regex, string replacement, bool skipRemainingRules) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRewrite(Microsoft.AspNetCore.Rewrite.RewriteOptions,System.String,System.String,System.Boolean)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Rewrite.RewriteOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="options" Type="Microsoft.AspNetCore.Rewrite.RewriteOptions" RefType="this" />
          <Parameter Name="regex" Type="System.String" />
          <Parameter Name="replacement" Type="System.String" />
          <Parameter Name="skipRemainingRules" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="options">The <see cref="T:Microsoft.AspNetCore.Rewrite.RewriteOptions" />.</param>
          <param name="regex">The regex string to compare with.</param>
          <param name="replacement">If the regex matches, what to replace the uri with.</param>
          <param name="skipRemainingRules">If the regex matches, conditionally stop processing other rules.</param>
          <summary>
            Adds a rule that rewrites the path if the regex matches the HttpContext's PathString.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions" Member="M:Microsoft.AspNetCore.Rewrite.RewriteOptionsExtensions.AddRewrite(Microsoft.AspNetCore.Rewrite.RewriteOptions,System.String,System.String,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />
      </Targets>
      <Member MemberName="MapDelete">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Routing.IRouteBuilder MapDelete (this Microsoft.AspNetCore.Routing.IRouteBuilder builder, string template, Microsoft.AspNetCore.Http.RequestDelegate handler);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Routing.IRouteBuilder MapDelete(class Microsoft.AspNetCore.Routing.IRouteBuilder builder, string template, class Microsoft.AspNetCore.Http.RequestDelegate handler) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapDelete(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,Microsoft.AspNetCore.Http.RequestDelegate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Routing.IRouteBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Routing.IRouteBuilder" RefType="this" />
          <Parameter Name="template" Type="System.String" />
          <Parameter Name="handler" Type="Microsoft.AspNetCore.Http.RequestDelegate" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />.</param>
          <param name="template">The route template.</param>
          <param name="handler">The <see cref="T:Microsoft.AspNetCore.Http.RequestDelegate" /> route handler.</param>
          <summary>
            Adds a route to the <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> that only matches HTTP DELETE requests for the given
            <paramref name="template" />, and <paramref name="handler" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions" Member="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapDelete(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,Microsoft.AspNetCore.Http.RequestDelegate)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />
      </Targets>
      <Member MemberName="MapDelete">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Routing.IRouteBuilder MapDelete (this Microsoft.AspNetCore.Routing.IRouteBuilder builder, string template, Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; action);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Routing.IRouteBuilder MapDelete(class Microsoft.AspNetCore.Routing.IRouteBuilder builder, string template, class System.Action`1&lt;class Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; action) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapDelete(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Routing.IRouteBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Routing.IRouteBuilder" RefType="this" />
          <Parameter Name="template" Type="System.String" />
          <Parameter Name="action" Type="System.Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />.</param>
          <param name="template">The route template.</param>
          <param name="action">The action to apply to the <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />.</param>
          <summary>
            Adds a route to the <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> that only matches HTTP DELETE requests for the given
            <paramref name="template" />, and <paramref name="action" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions" Member="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapDelete(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />
      </Targets>
      <Member MemberName="MapDelete">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Routing.IRouteBuilder MapDelete (this Microsoft.AspNetCore.Routing.IRouteBuilder builder, string template, Func&lt;Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.HttpResponse,Microsoft.AspNetCore.Routing.RouteData,System.Threading.Tasks.Task&gt; handler);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Routing.IRouteBuilder MapDelete(class Microsoft.AspNetCore.Routing.IRouteBuilder builder, string template, class System.Func`4&lt;class Microsoft.AspNetCore.Http.HttpRequest, class Microsoft.AspNetCore.Http.HttpResponse, class Microsoft.AspNetCore.Routing.RouteData, class System.Threading.Tasks.Task&gt; handler) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapDelete(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Func{Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.HttpResponse,Microsoft.AspNetCore.Routing.RouteData,System.Threading.Tasks.Task})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Routing.IRouteBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Routing.IRouteBuilder" RefType="this" />
          <Parameter Name="template" Type="System.String" />
          <Parameter Name="handler" Type="System.Func&lt;Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.HttpResponse,Microsoft.AspNetCore.Routing.RouteData,System.Threading.Tasks.Task&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />.</param>
          <param name="template">The route template.</param>
          <param name="handler">The route handler.</param>
          <summary>
            Adds a route to the <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> that only matches HTTP DELETE requests for the given
            <paramref name="template" />, and <paramref name="handler" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions" Member="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapDelete(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Func{Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.HttpResponse,Microsoft.AspNetCore.Routing.RouteData,System.Threading.Tasks.Task})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />
      </Targets>
      <Member MemberName="MapGet">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Routing.IRouteBuilder MapGet (this Microsoft.AspNetCore.Routing.IRouteBuilder builder, string template, Microsoft.AspNetCore.Http.RequestDelegate handler);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Routing.IRouteBuilder MapGet(class Microsoft.AspNetCore.Routing.IRouteBuilder builder, string template, class Microsoft.AspNetCore.Http.RequestDelegate handler) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapGet(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,Microsoft.AspNetCore.Http.RequestDelegate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Routing.IRouteBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Routing.IRouteBuilder" RefType="this" />
          <Parameter Name="template" Type="System.String" />
          <Parameter Name="handler" Type="Microsoft.AspNetCore.Http.RequestDelegate" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />.</param>
          <param name="template">The route template.</param>
          <param name="handler">The <see cref="T:Microsoft.AspNetCore.Http.RequestDelegate" /> route handler.</param>
          <summary>
            Adds a route to the <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> that only matches HTTP GET requests for the given
            <paramref name="template" />, and <paramref name="handler" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions" Member="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapGet(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,Microsoft.AspNetCore.Http.RequestDelegate)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />
      </Targets>
      <Member MemberName="MapGet">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Routing.IRouteBuilder MapGet (this Microsoft.AspNetCore.Routing.IRouteBuilder builder, string template, Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; action);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Routing.IRouteBuilder MapGet(class Microsoft.AspNetCore.Routing.IRouteBuilder builder, string template, class System.Action`1&lt;class Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; action) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapGet(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Routing.IRouteBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Routing.IRouteBuilder" RefType="this" />
          <Parameter Name="template" Type="System.String" />
          <Parameter Name="action" Type="System.Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />.</param>
          <param name="template">The route template.</param>
          <param name="action">The action to apply to the <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />.</param>
          <summary>
            Adds a route to the <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> that only matches HTTP GET requests for the given
            <paramref name="template" />, and <paramref name="action" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions" Member="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapGet(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />
      </Targets>
      <Member MemberName="MapGet">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Routing.IRouteBuilder MapGet (this Microsoft.AspNetCore.Routing.IRouteBuilder builder, string template, Func&lt;Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.HttpResponse,Microsoft.AspNetCore.Routing.RouteData,System.Threading.Tasks.Task&gt; handler);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Routing.IRouteBuilder MapGet(class Microsoft.AspNetCore.Routing.IRouteBuilder builder, string template, class System.Func`4&lt;class Microsoft.AspNetCore.Http.HttpRequest, class Microsoft.AspNetCore.Http.HttpResponse, class Microsoft.AspNetCore.Routing.RouteData, class System.Threading.Tasks.Task&gt; handler) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapGet(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Func{Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.HttpResponse,Microsoft.AspNetCore.Routing.RouteData,System.Threading.Tasks.Task})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Routing.IRouteBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Routing.IRouteBuilder" RefType="this" />
          <Parameter Name="template" Type="System.String" />
          <Parameter Name="handler" Type="System.Func&lt;Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.HttpResponse,Microsoft.AspNetCore.Routing.RouteData,System.Threading.Tasks.Task&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />.</param>
          <param name="template">The route template.</param>
          <param name="handler">The route handler.</param>
          <summary>
            Adds a route to the <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> that only matches HTTP GET requests for the given
            <paramref name="template" />, and <paramref name="handler" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions" Member="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapGet(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Func{Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.HttpResponse,Microsoft.AspNetCore.Routing.RouteData,System.Threading.Tasks.Task})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />
      </Targets>
      <Member MemberName="MapMiddlewareDelete">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Routing.IRouteBuilder MapMiddlewareDelete (this Microsoft.AspNetCore.Routing.IRouteBuilder builder, string template, Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; action);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Routing.IRouteBuilder MapMiddlewareDelete(class Microsoft.AspNetCore.Routing.IRouteBuilder builder, string template, class System.Action`1&lt;class Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; action) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapMiddlewareDelete(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Routing.IRouteBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Routing.IRouteBuilder" RefType="this" />
          <Parameter Name="template" Type="System.String" />
          <Parameter Name="action" Type="System.Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />.</param>
          <param name="template">The route template.</param>
          <param name="action">The action to apply to the <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />.</param>
          <summary>
            Adds a route to the <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> that only matches HTTP DELETE requests for the given
            <paramref name="template" />, and <paramref name="action" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions" Member="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapMiddlewareDelete(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />
      </Targets>
      <Member MemberName="MapMiddlewareGet">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Routing.IRouteBuilder MapMiddlewareGet (this Microsoft.AspNetCore.Routing.IRouteBuilder builder, string template, Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; action);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Routing.IRouteBuilder MapMiddlewareGet(class Microsoft.AspNetCore.Routing.IRouteBuilder builder, string template, class System.Action`1&lt;class Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; action) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapMiddlewareGet(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Routing.IRouteBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Routing.IRouteBuilder" RefType="this" />
          <Parameter Name="template" Type="System.String" />
          <Parameter Name="action" Type="System.Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />.</param>
          <param name="template">The route template.</param>
          <param name="action">The action to apply to the <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />.</param>
          <summary>
            Adds a route to the <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> that only matches HTTP GET requests for the given
            <paramref name="template" />, and <paramref name="action" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions" Member="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapMiddlewareGet(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />
      </Targets>
      <Member MemberName="MapMiddlewarePost">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Routing.IRouteBuilder MapMiddlewarePost (this Microsoft.AspNetCore.Routing.IRouteBuilder builder, string template, Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; action);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Routing.IRouteBuilder MapMiddlewarePost(class Microsoft.AspNetCore.Routing.IRouteBuilder builder, string template, class System.Action`1&lt;class Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; action) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapMiddlewarePost(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Routing.IRouteBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Routing.IRouteBuilder" RefType="this" />
          <Parameter Name="template" Type="System.String" />
          <Parameter Name="action" Type="System.Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />.</param>
          <param name="template">The route template.</param>
          <param name="action">The action to apply to the <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />.</param>
          <summary>
            Adds a route to the <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> that only matches HTTP POST requests for the given
            <paramref name="template" />, and <paramref name="action" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions" Member="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapMiddlewarePost(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />
      </Targets>
      <Member MemberName="MapMiddlewarePut">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Routing.IRouteBuilder MapMiddlewarePut (this Microsoft.AspNetCore.Routing.IRouteBuilder builder, string template, Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; action);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Routing.IRouteBuilder MapMiddlewarePut(class Microsoft.AspNetCore.Routing.IRouteBuilder builder, string template, class System.Action`1&lt;class Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; action) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapMiddlewarePut(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Routing.IRouteBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Routing.IRouteBuilder" RefType="this" />
          <Parameter Name="template" Type="System.String" />
          <Parameter Name="action" Type="System.Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />.</param>
          <param name="template">The route template.</param>
          <param name="action">The action to apply to the <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />.</param>
          <summary>
            Adds a route to the <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> that only matches HTTP PUT requests for the given
            <paramref name="template" />, and <paramref name="action" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions" Member="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapMiddlewarePut(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />
      </Targets>
      <Member MemberName="MapMiddlewareRoute">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Routing.IRouteBuilder MapMiddlewareRoute (this Microsoft.AspNetCore.Routing.IRouteBuilder builder, string template, Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; action);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Routing.IRouteBuilder MapMiddlewareRoute(class Microsoft.AspNetCore.Routing.IRouteBuilder builder, string template, class System.Action`1&lt;class Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; action) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapMiddlewareRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Routing.IRouteBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Routing.IRouteBuilder" RefType="this" />
          <Parameter Name="template" Type="System.String" />
          <Parameter Name="action" Type="System.Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />.</param>
          <param name="template">The route template.</param>
          <param name="action">The action to apply to the <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />.</param>
          <summary>
            Adds a route to the <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> for the given <paramref name="template" />, and
            <paramref name="action" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions" Member="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapMiddlewareRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />
      </Targets>
      <Member MemberName="MapMiddlewareVerb">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Routing.IRouteBuilder MapMiddlewareVerb (this Microsoft.AspNetCore.Routing.IRouteBuilder builder, string verb, string template, Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; action);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Routing.IRouteBuilder MapMiddlewareVerb(class Microsoft.AspNetCore.Routing.IRouteBuilder builder, string verb, string template, class System.Action`1&lt;class Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; action) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapMiddlewareVerb(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Routing.IRouteBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Routing.IRouteBuilder" RefType="this" />
          <Parameter Name="verb" Type="System.String" />
          <Parameter Name="template" Type="System.String" />
          <Parameter Name="action" Type="System.Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />.</param>
          <param name="verb">The HTTP verb allowed by the route.</param>
          <param name="template">The route template.</param>
          <param name="action">The action to apply to the <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />.</param>
          <summary>
            Adds a route to the <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> that only matches HTTP requests for the given
            <paramref name="verb" />, <paramref name="template" />, and <paramref name="action" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions" Member="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapMiddlewareVerb(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />
      </Targets>
      <Member MemberName="MapPost">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Routing.IRouteBuilder MapPost (this Microsoft.AspNetCore.Routing.IRouteBuilder builder, string template, Microsoft.AspNetCore.Http.RequestDelegate handler);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Routing.IRouteBuilder MapPost(class Microsoft.AspNetCore.Routing.IRouteBuilder builder, string template, class Microsoft.AspNetCore.Http.RequestDelegate handler) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapPost(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,Microsoft.AspNetCore.Http.RequestDelegate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Routing.IRouteBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Routing.IRouteBuilder" RefType="this" />
          <Parameter Name="template" Type="System.String" />
          <Parameter Name="handler" Type="Microsoft.AspNetCore.Http.RequestDelegate" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />.</param>
          <param name="template">The route template.</param>
          <param name="handler">The <see cref="T:Microsoft.AspNetCore.Http.RequestDelegate" /> route handler.</param>
          <summary>
            Adds a route to the <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> that only matches HTTP POST requests for the given
            <paramref name="template" />, and <paramref name="handler" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions" Member="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapPost(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,Microsoft.AspNetCore.Http.RequestDelegate)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />
      </Targets>
      <Member MemberName="MapPost">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Routing.IRouteBuilder MapPost (this Microsoft.AspNetCore.Routing.IRouteBuilder builder, string template, Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; action);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Routing.IRouteBuilder MapPost(class Microsoft.AspNetCore.Routing.IRouteBuilder builder, string template, class System.Action`1&lt;class Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; action) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapPost(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Routing.IRouteBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Routing.IRouteBuilder" RefType="this" />
          <Parameter Name="template" Type="System.String" />
          <Parameter Name="action" Type="System.Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />.</param>
          <param name="template">The route template.</param>
          <param name="action">The action to apply to the <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />.</param>
          <summary>
            Adds a route to the <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> that only matches HTTP POST requests for the given
            <paramref name="template" />, and <paramref name="action" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions" Member="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapPost(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />
      </Targets>
      <Member MemberName="MapPost">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Routing.IRouteBuilder MapPost (this Microsoft.AspNetCore.Routing.IRouteBuilder builder, string template, Func&lt;Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.HttpResponse,Microsoft.AspNetCore.Routing.RouteData,System.Threading.Tasks.Task&gt; handler);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Routing.IRouteBuilder MapPost(class Microsoft.AspNetCore.Routing.IRouteBuilder builder, string template, class System.Func`4&lt;class Microsoft.AspNetCore.Http.HttpRequest, class Microsoft.AspNetCore.Http.HttpResponse, class Microsoft.AspNetCore.Routing.RouteData, class System.Threading.Tasks.Task&gt; handler) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapPost(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Func{Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.HttpResponse,Microsoft.AspNetCore.Routing.RouteData,System.Threading.Tasks.Task})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Routing.IRouteBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Routing.IRouteBuilder" RefType="this" />
          <Parameter Name="template" Type="System.String" />
          <Parameter Name="handler" Type="System.Func&lt;Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.HttpResponse,Microsoft.AspNetCore.Routing.RouteData,System.Threading.Tasks.Task&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />.</param>
          <param name="template">The route template.</param>
          <param name="handler">The route handler.</param>
          <summary>
            Adds a route to the <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> that only matches HTTP POST requests for the given
            <paramref name="template" />, and <paramref name="handler" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions" Member="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapPost(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Func{Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.HttpResponse,Microsoft.AspNetCore.Routing.RouteData,System.Threading.Tasks.Task})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />
      </Targets>
      <Member MemberName="MapPut">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Routing.IRouteBuilder MapPut (this Microsoft.AspNetCore.Routing.IRouteBuilder builder, string template, Microsoft.AspNetCore.Http.RequestDelegate handler);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Routing.IRouteBuilder MapPut(class Microsoft.AspNetCore.Routing.IRouteBuilder builder, string template, class Microsoft.AspNetCore.Http.RequestDelegate handler) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapPut(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,Microsoft.AspNetCore.Http.RequestDelegate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Routing.IRouteBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Routing.IRouteBuilder" RefType="this" />
          <Parameter Name="template" Type="System.String" />
          <Parameter Name="handler" Type="Microsoft.AspNetCore.Http.RequestDelegate" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />.</param>
          <param name="template">The route template.</param>
          <param name="handler">The <see cref="T:Microsoft.AspNetCore.Http.RequestDelegate" /> route handler.</param>
          <summary>
            Adds a route to the <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> that only matches HTTP PUT requests for the given
            <paramref name="template" />, and <paramref name="handler" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions" Member="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapPut(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,Microsoft.AspNetCore.Http.RequestDelegate)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />
      </Targets>
      <Member MemberName="MapPut">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Routing.IRouteBuilder MapPut (this Microsoft.AspNetCore.Routing.IRouteBuilder builder, string template, Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; action);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Routing.IRouteBuilder MapPut(class Microsoft.AspNetCore.Routing.IRouteBuilder builder, string template, class System.Action`1&lt;class Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; action) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapPut(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Routing.IRouteBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Routing.IRouteBuilder" RefType="this" />
          <Parameter Name="template" Type="System.String" />
          <Parameter Name="action" Type="System.Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />.</param>
          <param name="template">The route template.</param>
          <param name="action">The action to apply to the <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />.</param>
          <summary>
            Adds a route to the <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> that only matches HTTP PUT requests for the given
            <paramref name="template" />, and <paramref name="action" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions" Member="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapPut(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />
      </Targets>
      <Member MemberName="MapPut">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Routing.IRouteBuilder MapPut (this Microsoft.AspNetCore.Routing.IRouteBuilder builder, string template, Func&lt;Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.HttpResponse,Microsoft.AspNetCore.Routing.RouteData,System.Threading.Tasks.Task&gt; handler);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Routing.IRouteBuilder MapPut(class Microsoft.AspNetCore.Routing.IRouteBuilder builder, string template, class System.Func`4&lt;class Microsoft.AspNetCore.Http.HttpRequest, class Microsoft.AspNetCore.Http.HttpResponse, class Microsoft.AspNetCore.Routing.RouteData, class System.Threading.Tasks.Task&gt; handler) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapPut(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Func{Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.HttpResponse,Microsoft.AspNetCore.Routing.RouteData,System.Threading.Tasks.Task})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Routing.IRouteBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Routing.IRouteBuilder" RefType="this" />
          <Parameter Name="template" Type="System.String" />
          <Parameter Name="handler" Type="System.Func&lt;Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.HttpResponse,Microsoft.AspNetCore.Routing.RouteData,System.Threading.Tasks.Task&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />.</param>
          <param name="template">The route template.</param>
          <param name="handler">The route handler.</param>
          <summary>
            Adds a route to the <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> that only matches HTTP PUT requests for the given
            <paramref name="template" />, and <paramref name="handler" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions" Member="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapPut(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Func{Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.HttpResponse,Microsoft.AspNetCore.Routing.RouteData,System.Threading.Tasks.Task})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />
      </Targets>
      <Member MemberName="MapRoute">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Routing.IRouteBuilder MapRoute (this Microsoft.AspNetCore.Routing.IRouteBuilder builder, string template, Microsoft.AspNetCore.Http.RequestDelegate handler);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Routing.IRouteBuilder MapRoute(class Microsoft.AspNetCore.Routing.IRouteBuilder builder, string template, class Microsoft.AspNetCore.Http.RequestDelegate handler) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,Microsoft.AspNetCore.Http.RequestDelegate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Routing.IRouteBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Routing.IRouteBuilder" RefType="this" />
          <Parameter Name="template" Type="System.String" />
          <Parameter Name="handler" Type="Microsoft.AspNetCore.Http.RequestDelegate" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />.</param>
          <param name="template">The route template.</param>
          <param name="handler">The <see cref="T:Microsoft.AspNetCore.Http.RequestDelegate" /> route handler.</param>
          <summary>
            Adds a route to the <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> for the given <paramref name="template" />, and
            <paramref name="handler" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions" Member="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,Microsoft.AspNetCore.Http.RequestDelegate)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />
      </Targets>
      <Member MemberName="MapRoute">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Routing.IRouteBuilder MapRoute (this Microsoft.AspNetCore.Routing.IRouteBuilder builder, string template, Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; action);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Routing.IRouteBuilder MapRoute(class Microsoft.AspNetCore.Routing.IRouteBuilder builder, string template, class System.Action`1&lt;class Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; action) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Routing.IRouteBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Routing.IRouteBuilder" RefType="this" />
          <Parameter Name="template" Type="System.String" />
          <Parameter Name="action" Type="System.Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />.</param>
          <param name="template">The route template.</param>
          <param name="action">The action to apply to the <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />.</param>
          <summary>
            Adds a route to the <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> for the given <paramref name="template" />, and
            <paramref name="action" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions" Member="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapRoute(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />
      </Targets>
      <Member MemberName="MapVerb">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Routing.IRouteBuilder MapVerb (this Microsoft.AspNetCore.Routing.IRouteBuilder builder, string verb, string template, Microsoft.AspNetCore.Http.RequestDelegate handler);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Routing.IRouteBuilder MapVerb(class Microsoft.AspNetCore.Routing.IRouteBuilder builder, string verb, string template, class Microsoft.AspNetCore.Http.RequestDelegate handler) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapVerb(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,Microsoft.AspNetCore.Http.RequestDelegate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Routing.IRouteBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Routing.IRouteBuilder" RefType="this" />
          <Parameter Name="verb" Type="System.String" />
          <Parameter Name="template" Type="System.String" />
          <Parameter Name="handler" Type="Microsoft.AspNetCore.Http.RequestDelegate" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />.</param>
          <param name="verb">The HTTP verb allowed by the route.</param>
          <param name="template">The route template.</param>
          <param name="handler">The <see cref="T:Microsoft.AspNetCore.Http.RequestDelegate" /> route handler.</param>
          <summary>
            Adds a route to the <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> that only matches HTTP requests for the given
            <paramref name="verb" />, <paramref name="template" />, and <paramref name="handler" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions" Member="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapVerb(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,Microsoft.AspNetCore.Http.RequestDelegate)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />
      </Targets>
      <Member MemberName="MapVerb">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Routing.IRouteBuilder MapVerb (this Microsoft.AspNetCore.Routing.IRouteBuilder builder, string verb, string template, Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; action);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Routing.IRouteBuilder MapVerb(class Microsoft.AspNetCore.Routing.IRouteBuilder builder, string verb, string template, class System.Action`1&lt;class Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; action) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapVerb(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Routing.IRouteBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Routing.IRouteBuilder" RefType="this" />
          <Parameter Name="verb" Type="System.String" />
          <Parameter Name="template" Type="System.String" />
          <Parameter Name="action" Type="System.Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />.</param>
          <param name="verb">The HTTP verb allowed by the route.</param>
          <param name="template">The route template.</param>
          <param name="action">The action to apply to the <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />.</param>
          <summary>
            Adds a route to the <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> that only matches HTTP requests for the given
            <paramref name="verb" />, <paramref name="template" />, and <paramref name="action" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions" Member="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapVerb(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />
      </Targets>
      <Member MemberName="MapVerb">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Routing.IRouteBuilder MapVerb (this Microsoft.AspNetCore.Routing.IRouteBuilder builder, string verb, string template, Func&lt;Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.HttpResponse,Microsoft.AspNetCore.Routing.RouteData,System.Threading.Tasks.Task&gt; handler);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Routing.IRouteBuilder MapVerb(class Microsoft.AspNetCore.Routing.IRouteBuilder builder, string verb, string template, class System.Func`4&lt;class Microsoft.AspNetCore.Http.HttpRequest, class Microsoft.AspNetCore.Http.HttpResponse, class Microsoft.AspNetCore.Routing.RouteData, class System.Threading.Tasks.Task&gt; handler) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapVerb(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.Func{Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.HttpResponse,Microsoft.AspNetCore.Routing.RouteData,System.Threading.Tasks.Task})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Routing.IRouteBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Routing.IRouteBuilder" RefType="this" />
          <Parameter Name="verb" Type="System.String" />
          <Parameter Name="template" Type="System.String" />
          <Parameter Name="handler" Type="System.Func&lt;Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.HttpResponse,Microsoft.AspNetCore.Routing.RouteData,System.Threading.Tasks.Task&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" />.</param>
          <param name="verb">The HTTP verb allowed by the route.</param>
          <param name="template">The route template.</param>
          <param name="handler">The route handler.</param>
          <summary>
            Adds a route to the <see cref="T:Microsoft.AspNetCore.Routing.IRouteBuilder" /> that only matches HTTP requests for the given
            <paramref name="verb" />, <paramref name="template" />, and <paramref name="handler" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions" Member="M:Microsoft.AspNetCore.Routing.RequestDelegateRouteBuilderExtensions.MapVerb(Microsoft.AspNetCore.Routing.IRouteBuilder,System.String,System.String,System.Func{Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.HttpResponse,Microsoft.AspNetCore.Routing.RouteData,System.Threading.Tasks.Task})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.HttpContext" />
      </Targets>
      <Member MemberName="GetRouteData">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Routing.RouteData GetRouteData (this Microsoft.AspNetCore.Http.HttpContext httpContext);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Routing.RouteData GetRouteData(class Microsoft.AspNetCore.Http.HttpContext httpContext) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.RoutingHttpContextExtensions.GetRouteData(Microsoft.AspNetCore.Http.HttpContext)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Routing.RouteData</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="httpContext" Type="Microsoft.AspNetCore.Http.HttpContext" RefType="this" />
        </Parameters>
        <Docs>
          <param name="httpContext">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> associated with the current request.</param>
          <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Routing.RouteData" /> associated with the provided <paramref name="httpContext" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Routing.RoutingHttpContextExtensions" Member="M:Microsoft.AspNetCore.Routing.RoutingHttpContextExtensions.GetRouteData(Microsoft.AspNetCore.Http.HttpContext)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Http.HttpContext" />
      </Targets>
      <Member MemberName="GetRouteValue">
        <MemberSignature Language="C#" Value="public static object GetRouteValue (this Microsoft.AspNetCore.Http.HttpContext httpContext, string key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetRouteValue(class Microsoft.AspNetCore.Http.HttpContext httpContext, string key) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.RoutingHttpContextExtensions.GetRouteValue(Microsoft.AspNetCore.Http.HttpContext,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Object</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="httpContext" Type="Microsoft.AspNetCore.Http.HttpContext" RefType="this" />
          <Parameter Name="key" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="httpContext">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> associated with the current request.</param>
          <param name="key">The key of the route value.</param>
          <summary>
            Gets a route value from <see cref="P:Microsoft.AspNetCore.Routing.RouteData.Values" /> associated with the provided
            <paramref name="httpContext" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Routing.RoutingHttpContextExtensions" Member="M:Microsoft.AspNetCore.Routing.RoutingHttpContextExtensions.GetRouteValue(Microsoft.AspNetCore.Http.HttpContext,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Buffers.Buffer`1" />
      </Targets>
      <Member MemberName="GetArray">
        <MemberSignature Language="C#" Value="public static ArraySegment&lt;byte&gt; GetArray (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.Buffers.Buffer&lt;byte&gt; buffer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ArraySegment`1&lt;unsigned int8&gt; GetArray(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.Buffers.Buffer`1&lt;unsigned int8&gt; buffer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.PipelineExtensions.GetArray(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Buffers.Buffer{System.Byte})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ArraySegment&lt;System.Byte&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="buffer" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Buffers.Buffer&lt;System.Byte&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="buffer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.PipelineExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.PipelineExtensions.GetArray(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Buffers.Buffer{System.Byte})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.ReadableBuffer" />
      </Targets>
      <Member MemberName="ToSpan">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;byte&gt; ToSpan (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.ReadableBuffer buffer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1&lt;unsigned int8&gt; ToSpan(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.ReadableBuffer buffer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.PipelineExtensions.ToSpan(Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.ReadableBuffer)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;System.Byte&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="buffer" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.ReadableBuffer" RefType="this" />
        </Parameters>
        <Docs>
          <param name="buffer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.PipelineExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.PipelineExtensions.ToSpan(Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.ReadableBuffer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.FrameConnectionManager" />
      </Targets>
      <Member MemberName="AbortAllConnectionsAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; AbortAllConnectionsAsync (this Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.FrameConnectionManager connectionManager);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; AbortAllConnectionsAsync(class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.FrameConnectionManager connectionManager) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.FrameConnectionManagerShutdownExtensions.AbortAllConnectionsAsync(Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.FrameConnectionManager)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="connectionManager" Type="Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.FrameConnectionManager" RefType="this" />
        </Parameters>
        <Docs>
          <param name="connectionManager">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.FrameConnectionManagerShutdownExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.FrameConnectionManagerShutdownExtensions.AbortAllConnectionsAsync(Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.FrameConnectionManager)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.FrameConnectionManager" />
      </Targets>
      <Member MemberName="CloseAllConnectionsAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; CloseAllConnectionsAsync (this Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.FrameConnectionManager connectionManager, System.Threading.CancellationToken token);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; CloseAllConnectionsAsync(class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.FrameConnectionManager connectionManager, valuetype System.Threading.CancellationToken token) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.FrameConnectionManagerShutdownExtensions.CloseAllConnectionsAsync(Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.FrameConnectionManager,System.Threading.CancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="connectionManager" Type="Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.FrameConnectionManager" RefType="this" />
          <Parameter Name="token" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="connectionManager">To be added.</param>
          <param name="token">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.FrameConnectionManagerShutdownExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.FrameConnectionManagerShutdownExtensions.CloseAllConnectionsAsync(Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.FrameConnectionManager,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1" />
      </Targets>
      <Member MemberName="GetAsciiStringEscaped">
        <MemberSignature Language="C#" Value="public static string GetAsciiStringEscaped (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;byte&gt; span, int maxChars);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetAsciiStringEscaped(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1&lt;unsigned int8&gt; span, int32 maxChars) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.HttpUtilities.GetAsciiStringEscaped(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte},System.Int32)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="span" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;System.Byte&gt;" RefType="this" />
          <Parameter Name="maxChars" Type="System.Int32" />
        </Parameters>
        <Docs>
          <param name="span">To be added.</param>
          <param name="maxChars">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.HttpUtilities" Member="M:Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.HttpUtilities.GetAsciiStringEscaped(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1" />
      </Targets>
      <Member MemberName="GetAsciiStringNonNullCharacters">
        <MemberSignature Language="C#" Value="public static string GetAsciiStringNonNullCharacters (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;byte&gt; span);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetAsciiStringNonNullCharacters(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1&lt;unsigned int8&gt; span) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.HttpUtilities.GetAsciiStringNonNullCharacters(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="span" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;System.Byte&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="span">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.HttpUtilities" Member="M:Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.HttpUtilities.GetAsciiStringNonNullCharacters(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1" />
      </Targets>
      <Member MemberName="GetKnownHttpScheme">
        <MemberSignature Language="C#" Value="public static bool GetKnownHttpScheme (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;byte&gt; span, out Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpScheme knownScheme);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetKnownHttpScheme(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1&lt;unsigned int8&gt; span, valuetype Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpScheme knownScheme) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.HttpUtilities.GetKnownHttpScheme(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte},Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpScheme@)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="span" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;System.Byte&gt;" RefType="this" />
          <Parameter Name="knownScheme" Type="Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpScheme&amp;" RefType="out" />
        </Parameters>
        <Docs>
          <param name="span">The span</param>
          <param name="knownScheme">A reference to the known scheme, if the input matches any</param>
          <summary>
            Checks 8 bytes from <paramref name="span" /> that correspond to 'http://' or 'https://'
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.HttpUtilities" Member="M:Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.HttpUtilities.GetKnownHttpScheme(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte},Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpScheme@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1" />
      </Targets>
      <Member MemberName="GetKnownMethod">
        <MemberSignature Language="C#" Value="public static bool GetKnownMethod (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;byte&gt; span, out Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpMethod method, out int length);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetKnownMethod(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1&lt;unsigned int8&gt; span, valuetype Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpMethod method, int32 length) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.HttpUtilities.GetKnownMethod(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte},Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpMethod@,System.Int32@)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="span" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;System.Byte&gt;" RefType="this" />
          <Parameter Name="method" Type="Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpMethod&amp;" RefType="out" />
          <Parameter Name="length" Type="System.Int32&amp;" RefType="out" />
        </Parameters>
        <Docs>
          <param name="span">To be added.</param>
          <param name="method">To be added.</param>
          <param name="length">To be added.</param>
          <summary>
            Checks that up to 8 bytes from <paramref name="span" /> correspond to a known HTTP method.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.HttpUtilities" Member="M:Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.HttpUtilities.GetKnownMethod(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte},Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpMethod@,System.Int32@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1" />
      </Targets>
      <Member MemberName="GetKnownVersion">
        <MemberSignature Language="C#" Value="public static bool GetKnownVersion (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;byte&gt; span, out Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpVersion knownVersion, out byte length);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetKnownVersion(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1&lt;unsigned int8&gt; span, valuetype Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpVersion knownVersion, unsigned int8 length) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.HttpUtilities.GetKnownVersion(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte},Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpVersion@,System.Byte@)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="span" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;System.Byte&gt;" RefType="this" />
          <Parameter Name="knownVersion" Type="Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpVersion&amp;" RefType="out" />
          <Parameter Name="length" Type="System.Byte&amp;" RefType="out" />
        </Parameters>
        <Docs>
          <param name="span">To be added.</param>
          <param name="knownVersion">To be added.</param>
          <param name="length">To be added.</param>
          <summary>
            Checks 9 bytes from <paramref name="span" />  correspond to a known HTTP version.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.HttpUtilities" Member="M:Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.HttpUtilities.GetKnownVersion(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte},Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpVersion@,System.Byte@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.Http.SocketInput" />
      </Targets>
      <Member MemberName="PeekAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;ArraySegment&lt;byte&gt;&gt; PeekAsync (this Microsoft.AspNetCore.Server.Kestrel.Internal.Http.SocketInput input);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; PeekAsync(class Microsoft.AspNetCore.Server.Kestrel.Internal.Http.SocketInput input) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.Http.SocketInputExtensions.PeekAsync(Microsoft.AspNetCore.Server.Kestrel.Internal.Http.SocketInput)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.ValueTask&lt;System.ArraySegment&lt;System.Byte&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="input" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.Http.SocketInput" RefType="this" />
        </Parameters>
        <Docs>
          <param name="input">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.Http.SocketInputExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.Http.SocketInputExtensions.PeekAsync(Microsoft.AspNetCore.Server.Kestrel.Internal.Http.SocketInput)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.Http.SocketInput" />
      </Targets>
      <Member MemberName="ReadAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;int&gt; ReadAsync (this Microsoft.AspNetCore.Server.Kestrel.Internal.Http.SocketInput input, byte[] buffer, int offset, int count);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;int32&gt; ReadAsync(class Microsoft.AspNetCore.Server.Kestrel.Internal.Http.SocketInput input, unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.Http.SocketInputExtensions.ReadAsync(Microsoft.AspNetCore.Server.Kestrel.Internal.Http.SocketInput,System.Byte[],System.Int32,System.Int32)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="input" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.Http.SocketInput" RefType="this" />
          <Parameter Name="buffer" Type="System.Byte[]" />
          <Parameter Name="offset" Type="System.Int32" />
          <Parameter Name="count" Type="System.Int32" />
        </Parameters>
        <Docs>
          <param name="input">To be added.</param>
          <param name="buffer">To be added.</param>
          <param name="offset">To be added.</param>
          <param name="count">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.Http.SocketInputExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.Http.SocketInputExtensions.ReadAsync(Microsoft.AspNetCore.Server.Kestrel.Internal.Http.SocketInput,System.Byte[],System.Int32,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator" />
      </Targets>
      <Member MemberName="GetArraySegment">
        <MemberSignature Language="C#" Value="public static ArraySegment&lt;byte&gt; GetArraySegment (this Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator start, Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator end);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ArraySegment`1&lt;unsigned int8&gt; GetArraySegment(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator start, valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator end) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIteratorExtensions.GetArraySegment(Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator,Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ArraySegment&lt;System.Byte&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="start" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator" RefType="this" />
          <Parameter Name="end" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator" />
        </Parameters>
        <Docs>
          <param name="start">To be added.</param>
          <param name="end">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIteratorExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIteratorExtensions.GetArraySegment(Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator,Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator" />
      </Targets>
      <Member MemberName="GetAsciiString">
        <MemberSignature Language="C#" Value="public static string GetAsciiString (this Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator start, Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator end);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetAsciiString(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator start, valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator end) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIteratorExtensions.GetAsciiString(Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator,Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="start" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator" RefType="this" />
          <Parameter Name="end" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator" />
        </Parameters>
        <Docs>
          <param name="start">To be added.</param>
          <param name="end">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIteratorExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIteratorExtensions.GetAsciiString(Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator,Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator" />
      </Targets>
      <Member MemberName="GetAsciiStringEscaped">
        <MemberSignature Language="C#" Value="public static string GetAsciiStringEscaped (this Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator start, Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator end, int maxChars);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetAsciiStringEscaped(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator start, valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator end, int32 maxChars) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIteratorExtensions.GetAsciiStringEscaped(Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator,Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator,System.Int32)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="start" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator" RefType="this" />
          <Parameter Name="end" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator" />
          <Parameter Name="maxChars" Type="System.Int32" />
        </Parameters>
        <Docs>
          <param name="start">To be added.</param>
          <param name="end">To be added.</param>
          <param name="maxChars">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIteratorExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIteratorExtensions.GetAsciiStringEscaped(Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator,Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator" />
      </Targets>
      <Member MemberName="GetKnownMethod">
        <MemberSignature Language="C#" Value="public static bool GetKnownMethod (this Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator begin, out string knownMethod);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetKnownMethod(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator begin, string knownMethod) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIteratorExtensions.GetKnownMethod(Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator,System.String@)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="begin" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator" RefType="this" />
          <Parameter Name="knownMethod" Type="System.String&amp;" RefType="out" />
        </Parameters>
        <Docs>
          <param name="begin">The iterator from which to start the known string lookup.</param>
          <param name="knownMethod">A reference to a pre-allocated known string, if the input matches any.</param>
          <summary>
            Checks that up to 8 bytes from <paramref name="begin" /> correspond to a known HTTP method.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIteratorExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIteratorExtensions.GetKnownMethod(Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator,System.String@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator" />
      </Targets>
      <Member MemberName="GetKnownVersion">
        <MemberSignature Language="C#" Value="public static bool GetKnownVersion (this Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator begin, out string knownVersion);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetKnownVersion(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator begin, string knownVersion) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIteratorExtensions.GetKnownVersion(Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator,System.String@)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="begin" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator" RefType="this" />
          <Parameter Name="knownVersion" Type="System.String&amp;" RefType="out" />
        </Parameters>
        <Docs>
          <param name="begin">The iterator from which to start the known string lookup.</param>
          <param name="knownVersion">A reference to a pre-allocated known string, if the input matches any.</param>
          <summary>
            Checks 9 bytes from <paramref name="begin" />  correspond to a known HTTP version.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIteratorExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIteratorExtensions.GetKnownVersion(Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator,System.String@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator" />
      </Targets>
      <Member MemberName="GetUtf8String">
        <MemberSignature Language="C#" Value="public static string GetUtf8String (this Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator start, Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator end);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetUtf8String(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator start, valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator end) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIteratorExtensions.GetUtf8String(Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator,Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="start" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator" RefType="this" />
          <Parameter Name="end" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator" />
        </Parameters>
        <Docs>
          <param name="start">To be added.</param>
          <param name="end">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIteratorExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIteratorExtensions.GetUtf8String(Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator,Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator" />
      </Targets>
      <Member MemberName="PeekArraySegment">
        <MemberSignature Language="C#" Value="public static ArraySegment&lt;byte&gt; PeekArraySegment (this Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator iter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ArraySegment`1&lt;unsigned int8&gt; PeekArraySegment(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator iter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIteratorExtensions.PeekArraySegment(Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ArraySegment&lt;System.Byte&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="iter" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator" RefType="this" />
        </Parameters>
        <Docs>
          <param name="iter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIteratorExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIteratorExtensions.PeekArraySegment(Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolIterator)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1" />
      </Targets>
      <Member MemberName="Read&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T Read&lt;T&gt; (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;byte&gt; slice) where T : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Read&lt;struct .ctor (class System.ValueType) T&gt;(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1&lt;unsigned int8&gt; slice) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Binary.BufferReader.Read``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Attributes>
              <Attribute>
                <AttributeName>Microsoft.AspNetCore.Server.Kestrel.Internal.System.Runtime.Primitive</AttributeName>
              </Attribute>
            </Attributes>
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="slice" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;System.Byte&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="slice">To be added.</param>
          <summary>
            Reads a structure of type T out of a slice of bytes.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Binary.BufferReader" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Binary.BufferReader.Read``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1" />
      </Targets>
      <Member MemberName="Read&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T Read&lt;T&gt; (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;byte&gt; slice) where T : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Read&lt;struct .ctor (class System.ValueType) T&gt;(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1&lt;unsigned int8&gt; slice) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Binary.BufferReader.Read``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Attributes>
              <Attribute>
                <AttributeName>Microsoft.AspNetCore.Server.Kestrel.Internal.System.Runtime.Primitive</AttributeName>
              </Attribute>
            </Attributes>
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="slice" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;System.Byte&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="slice">To be added.</param>
          <summary>
            Reads a structure of type T out of a slice of bytes.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Binary.BufferReader" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Binary.BufferReader.Read``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1" />
      </Targets>
      <Member MemberName="ReadBigEndian&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T ReadBigEndian&lt;T&gt; (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;byte&gt; span) where T : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T ReadBigEndian&lt;struct .ctor (class System.ValueType) T&gt;(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1&lt;unsigned int8&gt; span) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Binary.BufferReader.ReadBigEndian``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Attributes>
              <Attribute>
                <AttributeName>Microsoft.AspNetCore.Server.Kestrel.Internal.System.Runtime.Primitive</AttributeName>
              </Attribute>
            </Attributes>
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="span" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;System.Byte&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="span">To be added.</param>
          <summary>
            Reads a structure of type <typeparamref name="T" /> out of a span of bytes.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Binary.BufferReader" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Binary.BufferReader.ReadBigEndian``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1" />
      </Targets>
      <Member MemberName="ReadBigEndian&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T ReadBigEndian&lt;T&gt; (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;byte&gt; span) where T : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T ReadBigEndian&lt;struct .ctor (class System.ValueType) T&gt;(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1&lt;unsigned int8&gt; span) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Binary.BufferReader.ReadBigEndian``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Attributes>
              <Attribute>
                <AttributeName>Microsoft.AspNetCore.Server.Kestrel.Internal.System.Runtime.Primitive</AttributeName>
              </Attribute>
            </Attributes>
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="span" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;System.Byte&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="span">To be added.</param>
          <summary>
            Reads a structure of type <typeparamref name="T" /> out of a span of bytes.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Binary.BufferReader" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Binary.BufferReader.ReadBigEndian``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1" />
      </Targets>
      <Member MemberName="ReadLittleEndian&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T ReadLittleEndian&lt;T&gt; (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;byte&gt; span) where T : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T ReadLittleEndian&lt;struct .ctor (class System.ValueType) T&gt;(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1&lt;unsigned int8&gt; span) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Binary.BufferReader.ReadLittleEndian``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Attributes>
              <Attribute>
                <AttributeName>Microsoft.AspNetCore.Server.Kestrel.Internal.System.Runtime.Primitive</AttributeName>
              </Attribute>
            </Attributes>
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="span" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;System.Byte&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="span">To be added.</param>
          <summary>
            Reads a structure of type <typeparamref name="T" /> out of a span of bytes.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Binary.BufferReader" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Binary.BufferReader.ReadLittleEndian``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1" />
      </Targets>
      <Member MemberName="ReadLittleEndian&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T ReadLittleEndian&lt;T&gt; (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;byte&gt; span) where T : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T ReadLittleEndian&lt;struct .ctor (class System.ValueType) T&gt;(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1&lt;unsigned int8&gt; span) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Binary.BufferReader.ReadLittleEndian``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Attributes>
              <Attribute>
                <AttributeName>Microsoft.AspNetCore.Server.Kestrel.Internal.System.Runtime.Primitive</AttributeName>
              </Attribute>
            </Attributes>
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="span" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;System.Byte&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="span">To be added.</param>
          <summary>
            Reads a structure of type <typeparamref name="T" /> out of a span of bytes.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Binary.BufferReader" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Binary.BufferReader.ReadLittleEndian``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1" />
      </Targets>
      <Member MemberName="TryRead&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static bool TryRead&lt;T&gt; (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;byte&gt; slice, out T value) where T : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryRead&lt;struct .ctor (class System.ValueType) T&gt;(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1&lt;unsigned int8&gt; slice, !!T value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Binary.BufferReader.TryRead``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte},``0@)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Attributes>
              <Attribute>
                <AttributeName>Microsoft.AspNetCore.Server.Kestrel.Internal.System.Runtime.Primitive</AttributeName>
              </Attribute>
            </Attributes>
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="slice" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;System.Byte&gt;" RefType="this" />
          <Parameter Name="value" Type="T&amp;" RefType="out" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="slice">To be added.</param>
          <param name="value">To be added.</param>
          <summary>
            Reads a structure of type T out of a slice of bytes.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Binary.BufferReader" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Binary.BufferReader.TryRead``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte},``0@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1" />
      </Targets>
      <Member MemberName="TryRead&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static bool TryRead&lt;T&gt; (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;byte&gt; slice, out T value) where T : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryRead&lt;struct .ctor (class System.ValueType) T&gt;(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1&lt;unsigned int8&gt; slice, !!T value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Binary.BufferReader.TryRead``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte},``0@)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Attributes>
              <Attribute>
                <AttributeName>Microsoft.AspNetCore.Server.Kestrel.Internal.System.Runtime.Primitive</AttributeName>
              </Attribute>
            </Attributes>
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="slice" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;System.Byte&gt;" RefType="this" />
          <Parameter Name="value" Type="T&amp;" RefType="out" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="slice">To be added.</param>
          <param name="value">To be added.</param>
          <summary>
            Reads a structure of type T out of a slice of bytes.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Binary.BufferReader" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Binary.BufferReader.TryRead``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte},``0@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1" />
      </Targets>
      <Member MemberName="TryWrite&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static bool TryWrite&lt;T&gt; (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;byte&gt; slice, T value) where T : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryWrite&lt;struct .ctor (class System.ValueType) T&gt;(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1&lt;unsigned int8&gt; slice, !!T value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Binary.BufferWriter.TryWrite``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte},``0)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Attributes>
              <Attribute>
                <AttributeName>Microsoft.AspNetCore.Server.Kestrel.Internal.System.Runtime.Primitive</AttributeName>
              </Attribute>
            </Attributes>
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="slice" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;System.Byte&gt;" RefType="this" />
          <Parameter Name="value" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="slice">To be added.</param>
          <param name="value">To be added.</param>
          <summary>
            Writes a structure of type T into a slice of bytes.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Binary.BufferWriter" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Binary.BufferWriter.TryWrite``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1" />
      </Targets>
      <Member MemberName="Write&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static void Write&lt;T&gt; (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;byte&gt; slice, T value) where T : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write&lt;struct .ctor (class System.ValueType) T&gt;(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1&lt;unsigned int8&gt; slice, !!T value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Binary.BufferWriter.Write``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte},``0)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Attributes>
              <Attribute>
                <AttributeName>Microsoft.AspNetCore.Server.Kestrel.Internal.System.Runtime.Primitive</AttributeName>
              </Attribute>
            </Attributes>
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="slice" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;System.Byte&gt;" RefType="this" />
          <Parameter Name="value" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="slice">To be added.</param>
          <param name="value">To be added.</param>
          <summary>
            Writes a structure of type T into a slice of bytes.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Binary.BufferWriter" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Binary.BufferWriter.Write``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1" />
      </Targets>
      <Member MemberName="WriteBigEndian&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static void WriteBigEndian&lt;T&gt; (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;byte&gt; span, T value) where T : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteBigEndian&lt;struct .ctor (class System.ValueType) T&gt;(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1&lt;unsigned int8&gt; span, !!T value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Binary.BufferWriter.WriteBigEndian``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte},``0)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Attributes>
              <Attribute>
                <AttributeName>Microsoft.AspNetCore.Server.Kestrel.Internal.System.Runtime.Primitive</AttributeName>
              </Attribute>
            </Attributes>
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="span" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;System.Byte&gt;" RefType="this" />
          <Parameter Name="value" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="span">To be added.</param>
          <param name="value">To be added.</param>
          <summary>
            Writes a structure of type T to a span of bytes.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Binary.BufferWriter" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Binary.BufferWriter.WriteBigEndian``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1" />
      </Targets>
      <Member MemberName="WriteLittleEndian&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static void WriteLittleEndian&lt;T&gt; (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;byte&gt; span, T value) where T : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLittleEndian&lt;struct .ctor (class System.ValueType) T&gt;(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1&lt;unsigned int8&gt; span, !!T value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Binary.BufferWriter.WriteLittleEndian``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte},``0)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Attributes>
              <Attribute>
                <AttributeName>Microsoft.AspNetCore.Server.Kestrel.Internal.System.Runtime.Primitive</AttributeName>
              </Attribute>
            </Attributes>
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="span" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;System.Byte&gt;" RefType="this" />
          <Parameter Name="value" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="span">To be added.</param>
          <param name="value">To be added.</param>
          <summary>
            Writes a structure of type T to a span of bytes.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Binary.BufferWriter" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Binary.BufferWriter.WriteLittleEndian``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.IPipeReader" />
      </Targets>
      <Member MemberName="Advance">
        <MemberSignature Language="C#" Value="public static void Advance (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.IPipeReader input, Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.ReadCursor cursor);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Advance(class Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.IPipeReader input, valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.ReadCursor cursor) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.PipelineReaderExtensions.Advance(Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.IPipeReader,Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.ReadCursor)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="input" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.IPipeReader" RefType="this" />
          <Parameter Name="cursor" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.ReadCursor" />
        </Parameters>
        <Docs>
          <param name="input">To be added.</param>
          <param name="cursor">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.PipelineReaderExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.PipelineReaderExtensions.Advance(Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.IPipeReader,Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.ReadCursor)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.IPipeWriter" />
      </Targets>
      <Member MemberName="WriteAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task WriteAsync (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.IPipeWriter output, ArraySegment&lt;byte&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task WriteAsync(class Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.IPipeWriter output, valuetype System.ArraySegment`1&lt;unsigned int8&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.PipelineWriterExtensions.WriteAsync(Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.IPipeWriter,System.ArraySegment{System.Byte})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="output" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.IPipeWriter" RefType="this" />
          <Parameter Name="source" Type="System.ArraySegment&lt;System.Byte&gt;" />
        </Parameters>
        <Docs>
          <param name="output">To be added.</param>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.PipelineWriterExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.PipelineWriterExtensions.WriteAsync(Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.IPipeWriter,System.ArraySegment{System.Byte})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.IPipeWriter" />
      </Targets>
      <Member MemberName="WriteAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task WriteAsync (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.IPipeWriter output, byte[] source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task WriteAsync(class Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.IPipeWriter output, unsigned int8[] source) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.PipelineWriterExtensions.WriteAsync(Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.IPipeWriter,System.Byte[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="output" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.IPipeWriter" RefType="this" />
          <Parameter Name="source" Type="System.Byte[]" />
        </Parameters>
        <Docs>
          <param name="output">To be added.</param>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.PipelineWriterExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.PipelineWriterExtensions.WriteAsync(Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.IPipeWriter,System.Byte[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.WritableBuffer" />
      </Targets>
      <Member MemberName="Write">
        <MemberSignature Language="C#" Value="public static void Write (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.WritableBuffer buffer, Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;byte&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.WritableBuffer buffer, valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1&lt;unsigned int8&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.WritableBufferExtensions.Write(Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.WritableBuffer,Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="buffer" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.WritableBuffer" RefType="this" />
          <Parameter Name="source" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;System.Byte&gt;" />
        </Parameters>
        <Docs>
          <param name="buffer">The <see cref="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.WritableBuffer" /></param>
          <param name="source">The <see cref="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1" /> to write</param>
          <summary>
            Writes the source <see cref="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1" /> to the <see cref="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.WritableBuffer" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.WritableBufferExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.WritableBufferExtensions.Write(Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.WritableBuffer,Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.WritableBuffer" />
      </Targets>
      <Member MemberName="Write">
        <MemberSignature Language="C#" Value="public static void Write (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.WritableBuffer buffer, byte[] source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.WritableBuffer buffer, unsigned int8[] source) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.WritableBufferExtensions.Write(Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.WritableBuffer,System.Byte[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="buffer" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.WritableBuffer" RefType="this" />
          <Parameter Name="source" Type="System.Byte[]" />
        </Parameters>
        <Docs>
          <param name="buffer">To be added.</param>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.WritableBufferExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.WritableBufferExtensions.Write(Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.WritableBuffer,System.Byte[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.WritableBuffer" />
      </Targets>
      <Member MemberName="Write">
        <MemberSignature Language="C#" Value="public static void Write (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.WritableBuffer buffer, byte[] source, int offset, int length);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.WritableBuffer buffer, unsigned int8[] source, int32 offset, int32 length) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.WritableBufferExtensions.Write(Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.WritableBuffer,System.Byte[],System.Int32,System.Int32)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="buffer" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.WritableBuffer" RefType="this" />
          <Parameter Name="source" Type="System.Byte[]" />
          <Parameter Name="offset" Type="System.Int32" />
          <Parameter Name="length" Type="System.Int32" />
        </Parameters>
        <Docs>
          <param name="buffer">To be added.</param>
          <param name="source">To be added.</param>
          <param name="offset">To be added.</param>
          <param name="length">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.WritableBufferExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.WritableBufferExtensions.Write(Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.WritableBuffer,System.Byte[],System.Int32,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1" />
      </Targets>
      <Member MemberName="AsBytes&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;byte&gt; AsBytes&lt;T&gt; (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;T&gt; source) where T : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1&lt;unsigned int8&gt; AsBytes&lt;struct .ctor (class System.ValueType) T&gt;(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1&lt;!!T&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.AsBytes``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{``0})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;System.Byte&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;T&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="source">The source slice, of type <typeparamref name="T" />.</param>
          <summary>
            Casts a ReadOnlySpan of one primitive type <typeparamref name="T" /> to ReadOnlySpan of bytes.
            That type may not contain pointers or references. This is checked at runtime in order to preserve type safety.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.AsBytes``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1" />
      </Targets>
      <Member MemberName="AsBytes&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;byte&gt; AsBytes&lt;T&gt; (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;T&gt; source) where T : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1&lt;unsigned int8&gt; AsBytes&lt;struct .ctor (class System.ValueType) T&gt;(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1&lt;!!T&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.AsBytes``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{``0})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;System.Byte&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;T&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="source">The source slice, of type <typeparamref name="T" />.</param>
          <summary>
            Casts a Span of one primitive type <typeparamref name="T" /> to Span of bytes.
            That type may not contain pointers or references. This is checked at runtime in order to preserve type safety.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.AsBytes``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="AsSpan">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;char&gt; AsSpan (this string text);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1&lt;char&gt; AsSpan(string text) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.AsSpan(System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="text" Type="System.String" RefType="this" />
        </Parameters>
        <Docs>
          <param name="text">The target string.</param>
          <summary>
            Creates a new readonly span over the portion of the target string.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.AsSpan(System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Array" />
      </Targets>
      <Member MemberName="AsSpan&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;T&gt; AsSpan&lt;T&gt; (this T[] array);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1&lt;!!T&gt; AsSpan&lt;T&gt;(!!T[] array) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.AsSpan``1(``0[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="array" Type="T[]" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="array">To be added.</param>
          <summary>
            Creates a new  span over the portion of the target array.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.AsSpan``1(``0[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ArraySegment`1" />
      </Targets>
      <Member MemberName="AsSpan&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;T&gt; AsSpan&lt;T&gt; (this ArraySegment&lt;T&gt; arraySegment);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1&lt;!!T&gt; AsSpan&lt;T&gt;(valuetype System.ArraySegment`1&lt;!!T&gt; arraySegment) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.AsSpan``1(System.ArraySegment{``0})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="arraySegment" Type="System.ArraySegment&lt;T&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="arraySegment">To be added.</param>
          <summary>
            Creates a new  span over the portion of the target array segment.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.AsSpan``1(System.ArraySegment{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Array" />
      </Targets>
      <Member MemberName="CopyTo&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static void CopyTo&lt;T&gt; (this T[] array, Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;T&gt; destination);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyTo&lt;T&gt;(!!T[] array, valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1&lt;!!T&gt; destination) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.CopyTo``1(``0[],Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{``0})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="array" Type="T[]" RefType="this" />
          <Parameter Name="destination" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;T&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="array">To be added.</param>
          <param name="destination">To be added.</param>
          <summary>
             Copies the contents of the array into the span. If the source
             and destinations overlap, this method behaves as if the original values in
             a temporary location before the destination is overwritten.
             
            <param name="array">The array to copy items from.</param><param name="destination">The span to copy items into.</param><exception cref="!:System.ArgumentException">
             Thrown when the destination Span is shorter than the source array.
             </exception></summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.CopyTo``1(``0[],Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1" />
      </Targets>
      <Member MemberName="IndexOf">
        <MemberSignature Language="C#" Value="public static int IndexOf (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;byte&gt; span, Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;byte&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1&lt;unsigned int8&gt; span, valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1&lt;unsigned int8&gt; value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.IndexOf(Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte},Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="span" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;System.Byte&gt;" RefType="this" />
          <Parameter Name="value" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;System.Byte&gt;" />
        </Parameters>
        <Docs>
          <param name="span">The span to search.</param>
          <param name="value">The sequence to search for.</param>
          <summary>
            Searches for the specified sequence and returns the index of its first occurrence. If not found, returns -1.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.IndexOf(Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte},Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1" />
      </Targets>
      <Member MemberName="IndexOf">
        <MemberSignature Language="C#" Value="public static int IndexOf (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;byte&gt; span, byte value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1&lt;unsigned int8&gt; span, unsigned int8 value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.IndexOf(Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte},System.Byte)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="span" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;System.Byte&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Byte" />
        </Parameters>
        <Docs>
          <param name="span">The span to search.</param>
          <param name="value">The value to search for.</param>
          <summary>
            Searches for the specified value and returns the index of its first occurrence. If not found, returns -1. 
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.IndexOf(Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte},System.Byte)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1" />
      </Targets>
      <Member MemberName="IndexOf">
        <MemberSignature Language="C#" Value="public static int IndexOf (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;byte&gt; span, Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;byte&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1&lt;unsigned int8&gt; span, valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1&lt;unsigned int8&gt; value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.IndexOf(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte},Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="span" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;System.Byte&gt;" RefType="this" />
          <Parameter Name="value" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;System.Byte&gt;" />
        </Parameters>
        <Docs>
          <param name="span">The span to search.</param>
          <param name="value">The sequence to search for.</param>
          <summary>
            Searches for the specified sequence and returns the index of its first occurrence. If not found, returns -1.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.IndexOf(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte},Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1" />
      </Targets>
      <Member MemberName="IndexOf">
        <MemberSignature Language="C#" Value="public static int IndexOf (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;byte&gt; span, byte value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1&lt;unsigned int8&gt; span, unsigned int8 value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.IndexOf(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte},System.Byte)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="span" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;System.Byte&gt;" RefType="this" />
          <Parameter Name="value" Type="System.Byte" />
        </Parameters>
        <Docs>
          <param name="span">The span to search.</param>
          <param name="value">The value to search for.</param>
          <summary>
            Searches for the specified value and returns the index of its first occurrence. If not found, returns -1. 
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.IndexOf(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte},System.Byte)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1" />
      </Targets>
      <Member MemberName="IndexOf&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static int IndexOf&lt;T&gt; (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;T&gt; span, T value) where T : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf&lt;struct .ctor (class System.IEquatable`1&lt;!!T&gt;, class System.ValueType) T&gt;(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1&lt;!!T&gt; span, !!T value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.IndexOf``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{``0},``0)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="span" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;T&gt;" RefType="this" />
          <Parameter Name="value" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="span">The span to search.</param>
          <param name="value">The value to search for.</param>
          <summary>
            Searches for the specified value and returns the index of its first occurrence. If not found, returns -1. Values are compared using IEquatable&lt;T&gt;.Equals(T). 
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.IndexOf``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{``0},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1" />
      </Targets>
      <Member MemberName="IndexOf&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static int IndexOf&lt;T&gt; (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;T&gt; span, Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;T&gt; value) where T : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf&lt;struct .ctor (class System.IEquatable`1&lt;!!T&gt;, class System.ValueType) T&gt;(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1&lt;!!T&gt; span, valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1&lt;!!T&gt; value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.IndexOf``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{``0},Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{``0})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="span" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;T&gt;" RefType="this" />
          <Parameter Name="value" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;T&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="span">The span to search.</param>
          <param name="value">The sequence to search for.</param>
          <summary>
            Searches for the specified sequence and returns the index of its first occurrence. If not found, returns -1. Values are compared using IEquatable&lt;T&gt;.Equals(T). 
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.IndexOf``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{``0},Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1" />
      </Targets>
      <Member MemberName="IndexOf&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static int IndexOf&lt;T&gt; (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;T&gt; span, T value) where T : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf&lt;struct .ctor (class System.IEquatable`1&lt;!!T&gt;, class System.ValueType) T&gt;(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1&lt;!!T&gt; span, !!T value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.IndexOf``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{``0},``0)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="span" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;T&gt;" RefType="this" />
          <Parameter Name="value" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="span">The span to search.</param>
          <param name="value">The value to search for.</param>
          <summary>
            Searches for the specified value and returns the index of its first occurrence. If not found, returns -1. Values are compared using IEquatable&lt;T&gt;.Equals(T). 
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.IndexOf``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{``0},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1" />
      </Targets>
      <Member MemberName="IndexOf&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static int IndexOf&lt;T&gt; (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;T&gt; span, Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;T&gt; value) where T : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf&lt;struct .ctor (class System.IEquatable`1&lt;!!T&gt;, class System.ValueType) T&gt;(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1&lt;!!T&gt; span, valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1&lt;!!T&gt; value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.IndexOf``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{``0},Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{``0})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="span" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;T&gt;" RefType="this" />
          <Parameter Name="value" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;T&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="span">The span to search.</param>
          <param name="value">The sequence to search for.</param>
          <summary>
            Searches for the specified sequence and returns the index of its first occurrence. If not found, returns -1. Values are compared using IEquatable&lt;T&gt;.Equals(T). 
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.IndexOf``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{``0},Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1" />
      </Targets>
      <Member MemberName="IndexOfAny">
        <MemberSignature Language="C#" Value="public static int IndexOfAny (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;byte&gt; span, Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;byte&gt; values);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOfAny(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1&lt;unsigned int8&gt; span, valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1&lt;unsigned int8&gt; values) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.IndexOfAny(Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte},Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="span" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;System.Byte&gt;" RefType="this" />
          <Parameter Name="values" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;System.Byte&gt;" />
        </Parameters>
        <Docs>
          <param name="span">The span to search.</param>
          <param name="values">The set of values to search for.</param>
          <summary>
            Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator. If not found, returns -1. 
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.IndexOfAny(Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte},Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1" />
      </Targets>
      <Member MemberName="IndexOfAny">
        <MemberSignature Language="C#" Value="public static int IndexOfAny (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;byte&gt; span, byte value0, byte value1);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOfAny(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1&lt;unsigned int8&gt; span, unsigned int8 value0, unsigned int8 value1) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.IndexOfAny(Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte},System.Byte,System.Byte)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="span" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;System.Byte&gt;" RefType="this" />
          <Parameter Name="value0" Type="System.Byte" />
          <Parameter Name="value1" Type="System.Byte" />
        </Parameters>
        <Docs>
          <param name="span">The span to search.</param>
          <param name="value0">One of the values to search for.</param>
          <param name="value1">One of the values to search for.</param>
          <summary>
            Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator. If not found, returns -1.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.IndexOfAny(Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte},System.Byte,System.Byte)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1" />
      </Targets>
      <Member MemberName="IndexOfAny">
        <MemberSignature Language="C#" Value="public static int IndexOfAny (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;byte&gt; span, byte value0, byte value1, byte value2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOfAny(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1&lt;unsigned int8&gt; span, unsigned int8 value0, unsigned int8 value1, unsigned int8 value2) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.IndexOfAny(Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte},System.Byte,System.Byte,System.Byte)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="span" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;System.Byte&gt;" RefType="this" />
          <Parameter Name="value0" Type="System.Byte" />
          <Parameter Name="value1" Type="System.Byte" />
          <Parameter Name="value2" Type="System.Byte" />
        </Parameters>
        <Docs>
          <param name="span">The span to search.</param>
          <param name="value0">One of the values to search for.</param>
          <param name="value1">One of the values to search for.</param>
          <param name="value2">One of the values to search for.</param>
          <summary>
            Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator. If not found, returns -1. 
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.IndexOfAny(Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte},System.Byte,System.Byte,System.Byte)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1" />
      </Targets>
      <Member MemberName="IndexOfAny">
        <MemberSignature Language="C#" Value="public static int IndexOfAny (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;byte&gt; span, Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;byte&gt; values);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOfAny(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1&lt;unsigned int8&gt; span, valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1&lt;unsigned int8&gt; values) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.IndexOfAny(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte},Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="span" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;System.Byte&gt;" RefType="this" />
          <Parameter Name="values" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;System.Byte&gt;" />
        </Parameters>
        <Docs>
          <param name="span">The span to search.</param>
          <param name="values">The set of values to search for.</param>
          <summary>
            Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator. If not found, returns -1. 
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.IndexOfAny(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte},Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1" />
      </Targets>
      <Member MemberName="IndexOfAny">
        <MemberSignature Language="C#" Value="public static int IndexOfAny (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;byte&gt; span, byte value0, byte value1);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOfAny(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1&lt;unsigned int8&gt; span, unsigned int8 value0, unsigned int8 value1) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.IndexOfAny(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte},System.Byte,System.Byte)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="span" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;System.Byte&gt;" RefType="this" />
          <Parameter Name="value0" Type="System.Byte" />
          <Parameter Name="value1" Type="System.Byte" />
        </Parameters>
        <Docs>
          <param name="span">The span to search.</param>
          <param name="value0">One of the values to search for.</param>
          <param name="value1">One of the values to search for.</param>
          <summary>
            Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator. If not found, returns -1.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.IndexOfAny(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte},System.Byte,System.Byte)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1" />
      </Targets>
      <Member MemberName="IndexOfAny">
        <MemberSignature Language="C#" Value="public static int IndexOfAny (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;byte&gt; span, byte value0, byte value1, byte value2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOfAny(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1&lt;unsigned int8&gt; span, unsigned int8 value0, unsigned int8 value1, unsigned int8 value2) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.IndexOfAny(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte},System.Byte,System.Byte,System.Byte)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="span" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;System.Byte&gt;" RefType="this" />
          <Parameter Name="value0" Type="System.Byte" />
          <Parameter Name="value1" Type="System.Byte" />
          <Parameter Name="value2" Type="System.Byte" />
        </Parameters>
        <Docs>
          <param name="span">The span to search.</param>
          <param name="value0">One of the values to search for.</param>
          <param name="value1">One of the values to search for.</param>
          <param name="value2">One of the values to search for.</param>
          <summary>
            Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator. If not found, returns -1.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.IndexOfAny(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte},System.Byte,System.Byte,System.Byte)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1" />
      </Targets>
      <Member MemberName="NonPortableCast&lt;TFrom,TTo&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;TTo&gt; NonPortableCast&lt;TFrom,TTo&gt; (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;TFrom&gt; source) where TFrom : struct where TTo : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1&lt;!!TTo&gt; NonPortableCast&lt;struct .ctor (class System.ValueType) TFrom, struct .ctor (class System.ValueType) TTo&gt;(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1&lt;!!TFrom&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.NonPortableCast``2(Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{``0})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;TTo&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TFrom">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TTo">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;TFrom&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TFrom">To be added.</typeparam>
          <typeparam name="TTo">To be added.</typeparam>
          <param name="source">The source slice, of type <typeparamref name="TFrom" />.</param>
          <summary>
            Casts a ReadOnlySpan of one primitive type <typeparamref name="TFrom" /> to another primitive type <typeparamref name="TTo" />.
            These types may not contain pointers or references. This is checked at runtime in order to preserve type safety.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.NonPortableCast``2(Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1" />
      </Targets>
      <Member MemberName="NonPortableCast&lt;TFrom,TTo&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;TTo&gt; NonPortableCast&lt;TFrom,TTo&gt; (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;TFrom&gt; source) where TFrom : struct where TTo : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1&lt;!!TTo&gt; NonPortableCast&lt;struct .ctor (class System.ValueType) TFrom, struct .ctor (class System.ValueType) TTo&gt;(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1&lt;!!TFrom&gt; source) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.NonPortableCast``2(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{``0})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;TTo&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TFrom">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TTo">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;TFrom&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TFrom">To be added.</typeparam>
          <typeparam name="TTo">To be added.</typeparam>
          <param name="source">The source slice, of type <typeparamref name="TFrom" />.</param>
          <summary>
            Casts a Span of one primitive type <typeparamref name="TFrom" /> to another primitive type <typeparamref name="TTo" />.
            These types may not contain pointers or references. This is checked at runtime in order to preserve type safety.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.NonPortableCast``2(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1" />
      </Targets>
      <Member MemberName="SequenceEqual">
        <MemberSignature Language="C#" Value="public static bool SequenceEqual (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;byte&gt; first, Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;byte&gt; second);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SequenceEqual(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1&lt;unsigned int8&gt; first, valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1&lt;unsigned int8&gt; second) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.SequenceEqual(Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte},Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="first" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;System.Byte&gt;" RefType="this" />
          <Parameter Name="second" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;System.Byte&gt;" />
        </Parameters>
        <Docs>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>
            Determines whether two sequences are equal by comparing the elements.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.SequenceEqual(Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte},Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1" />
      </Targets>
      <Member MemberName="SequenceEqual">
        <MemberSignature Language="C#" Value="public static bool SequenceEqual (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;byte&gt; first, Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;byte&gt; second);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SequenceEqual(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1&lt;unsigned int8&gt; first, valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1&lt;unsigned int8&gt; second) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.SequenceEqual(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte},Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="first" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;System.Byte&gt;" RefType="this" />
          <Parameter Name="second" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;System.Byte&gt;" />
        </Parameters>
        <Docs>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>
            Determines whether two sequences are equal by comparing the elements.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.SequenceEqual(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte},Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1" />
      </Targets>
      <Member MemberName="SequenceEqual&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static bool SequenceEqual&lt;T&gt; (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;T&gt; first, Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;T&gt; second) where T : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SequenceEqual&lt;struct .ctor (class System.IEquatable`1&lt;!!T&gt;, class System.ValueType) T&gt;(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1&lt;!!T&gt; first, valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1&lt;!!T&gt; second) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.SequenceEqual``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{``0},Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{``0})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;T&gt;" RefType="this" />
          <Parameter Name="second" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;T&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>
            Determines whether two sequences are equal by comparing the elements using IEquatable&lt;T&gt;.Equals(T). 
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.SequenceEqual``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{``0},Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1" />
      </Targets>
      <Member MemberName="SequenceEqual&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static bool SequenceEqual&lt;T&gt; (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;T&gt; first, Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;T&gt; second) where T : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SequenceEqual&lt;struct .ctor (class System.IEquatable`1&lt;!!T&gt;, class System.ValueType) T&gt;(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1&lt;!!T&gt; first, valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1&lt;!!T&gt; second) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.SequenceEqual``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{``0},Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{``0})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;T&gt;" RefType="this" />
          <Parameter Name="second" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;T&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>
            Determines whether two sequences are equal by comparing the elements using IEquatable&lt;T&gt;.Equals(T). 
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.SequenceEqual``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{``0},Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1" />
      </Targets>
      <Member MemberName="StartsWith">
        <MemberSignature Language="C#" Value="public static bool StartsWith (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;byte&gt; span, Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;byte&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool StartsWith(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1&lt;unsigned int8&gt; span, valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1&lt;unsigned int8&gt; value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.StartsWith(Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte},Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="span" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;System.Byte&gt;" RefType="this" />
          <Parameter Name="value" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;System.Byte&gt;" />
        </Parameters>
        <Docs>
          <param name="span">To be added.</param>
          <param name="value">To be added.</param>
          <summary>
            Determines whether the specified sequence appears at the start of the span.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.StartsWith(Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte},Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1" />
      </Targets>
      <Member MemberName="StartsWith">
        <MemberSignature Language="C#" Value="public static bool StartsWith (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;byte&gt; span, Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;byte&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool StartsWith(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1&lt;unsigned int8&gt; span, valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1&lt;unsigned int8&gt; value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.StartsWith(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte},Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="span" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;System.Byte&gt;" RefType="this" />
          <Parameter Name="value" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;System.Byte&gt;" />
        </Parameters>
        <Docs>
          <param name="span">To be added.</param>
          <param name="value">To be added.</param>
          <summary>
            Determines whether the specified sequence appears at the start of the span.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.StartsWith(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{System.Byte},Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{System.Byte})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1" />
      </Targets>
      <Member MemberName="StartsWith&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static bool StartsWith&lt;T&gt; (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;T&gt; span, Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;T&gt; value) where T : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool StartsWith&lt;struct .ctor (class System.IEquatable`1&lt;!!T&gt;, class System.ValueType) T&gt;(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1&lt;!!T&gt; span, valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1&lt;!!T&gt; value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.StartsWith``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{``0},Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{``0})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="span" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;T&gt;" RefType="this" />
          <Parameter Name="value" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;T&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="span">To be added.</param>
          <param name="value">To be added.</param>
          <summary>
            Determines whether the specified sequence appears at the start of the span.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.StartsWith``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{``0},Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1" />
      </Targets>
      <Member MemberName="StartsWith&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static bool StartsWith&lt;T&gt; (this Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;T&gt; span, Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;T&gt; value) where T : struct;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool StartsWith&lt;struct .ctor (class System.IEquatable`1&lt;!!T&gt;, class System.ValueType) T&gt;(valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span`1&lt;!!T&gt; span, valuetype Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan`1&lt;!!T&gt; value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.StartsWith``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{``0},Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{``0})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="span" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span&lt;T&gt;" RefType="this" />
          <Parameter Name="value" Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan&lt;T&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="span">To be added.</param>
          <param name="value">To be added.</param>
          <summary>
            Determines whether the specified sequence appears at the start of the span.
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions" Member="M:Microsoft.AspNetCore.Server.Kestrel.Internal.System.SpanExtensions.StartsWith``1(Microsoft.AspNetCore.Server.Kestrel.Internal.System.Span{``0},Microsoft.AspNetCore.Server.Kestrel.Internal.System.ReadOnlySpan{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.WebUtilities.MultipartSection" />
      </Targets>
      <Member MemberName="AsFileSection">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.WebUtilities.FileMultipartSection AsFileSection (this Microsoft.AspNetCore.WebUtilities.MultipartSection section);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.WebUtilities.FileMultipartSection AsFileSection(class Microsoft.AspNetCore.WebUtilities.MultipartSection section) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebUtilities.MultipartSectionConverterExtensions.AsFileSection(Microsoft.AspNetCore.WebUtilities.MultipartSection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.WebUtilities.FileMultipartSection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="section" Type="Microsoft.AspNetCore.WebUtilities.MultipartSection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="section">The section to convert</param>
          <summary>
            Converts the section to a file section
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.WebUtilities.MultipartSectionConverterExtensions" Member="M:Microsoft.AspNetCore.WebUtilities.MultipartSectionConverterExtensions.AsFileSection(Microsoft.AspNetCore.WebUtilities.MultipartSection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.WebUtilities.MultipartSection" />
      </Targets>
      <Member MemberName="AsFormDataSection">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.WebUtilities.FormMultipartSection AsFormDataSection (this Microsoft.AspNetCore.WebUtilities.MultipartSection section);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.WebUtilities.FormMultipartSection AsFormDataSection(class Microsoft.AspNetCore.WebUtilities.MultipartSection section) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebUtilities.MultipartSectionConverterExtensions.AsFormDataSection(Microsoft.AspNetCore.WebUtilities.MultipartSection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.WebUtilities.FormMultipartSection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="section" Type="Microsoft.AspNetCore.WebUtilities.MultipartSection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="section">The section to convert</param>
          <summary>
            Converts the section to a form section
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.WebUtilities.MultipartSectionConverterExtensions" Member="M:Microsoft.AspNetCore.WebUtilities.MultipartSectionConverterExtensions.AsFormDataSection(Microsoft.AspNetCore.WebUtilities.MultipartSection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.WebUtilities.MultipartSection" />
      </Targets>
      <Member MemberName="GetContentDispositionHeader">
        <MemberSignature Language="C#" Value="public static Microsoft.Net.Http.Headers.ContentDispositionHeaderValue GetContentDispositionHeader (this Microsoft.AspNetCore.WebUtilities.MultipartSection section);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Net.Http.Headers.ContentDispositionHeaderValue GetContentDispositionHeader(class Microsoft.AspNetCore.WebUtilities.MultipartSection section) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebUtilities.MultipartSectionConverterExtensions.GetContentDispositionHeader(Microsoft.AspNetCore.WebUtilities.MultipartSection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Net.Http.Headers.ContentDispositionHeaderValue</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="section" Type="Microsoft.AspNetCore.WebUtilities.MultipartSection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="section">The section from which to retrieve</param>
          <summary>
            Retrieves and parses the content disposition header from a section
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.WebUtilities.MultipartSectionConverterExtensions" Member="M:Microsoft.AspNetCore.WebUtilities.MultipartSectionConverterExtensions.GetContentDispositionHeader(Microsoft.AspNetCore.WebUtilities.MultipartSection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.WebUtilities.MultipartSection" />
      </Targets>
      <Member MemberName="ReadAsStringAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;string&gt; ReadAsStringAsync (this Microsoft.AspNetCore.WebUtilities.MultipartSection section);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;string&gt; ReadAsStringAsync(class Microsoft.AspNetCore.WebUtilities.MultipartSection section) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebUtilities.MultipartSectionStreamExtensions.ReadAsStringAsync(Microsoft.AspNetCore.WebUtilities.MultipartSection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="section" Type="Microsoft.AspNetCore.WebUtilities.MultipartSection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="section">The section to read from</param>
          <summary>
            Reads the body of the section as a string
            </summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.WebUtilities.MultipartSectionStreamExtensions" Member="M:Microsoft.AspNetCore.WebUtilities.MultipartSectionStreamExtensions.ReadAsStringAsync(Microsoft.AspNetCore.WebUtilities.MultipartSection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IO.Stream" />
      </Targets>
      <Member MemberName="DrainAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task DrainAsync (this System.IO.Stream stream, System.Buffers.ArrayPool&lt;byte&gt; bytePool, Nullable&lt;long&gt; limit, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task DrainAsync(class System.IO.Stream stream, class System.Buffers.ArrayPool`1&lt;unsigned int8&gt; bytePool, valuetype System.Nullable`1&lt;int64&gt; limit, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebUtilities.StreamHelperExtensions.DrainAsync(System.IO.Stream,System.Buffers.ArrayPool{System.Byte},System.Nullable{System.Int64},System.Threading.CancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stream" Type="System.IO.Stream" RefType="this" />
          <Parameter Name="bytePool" Type="System.Buffers.ArrayPool&lt;System.Byte&gt;" />
          <Parameter Name="limit" Type="System.Nullable&lt;System.Int64&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="stream">To be added.</param>
          <param name="bytePool">To be added.</param>
          <param name="limit">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.WebUtilities.StreamHelperExtensions" Member="M:Microsoft.AspNetCore.WebUtilities.StreamHelperExtensions.DrainAsync(System.IO.Stream,System.Buffers.ArrayPool{System.Byte},System.Nullable{System.Int64},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IO.Stream" />
      </Targets>
      <Member MemberName="DrainAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task DrainAsync (this System.IO.Stream stream, Nullable&lt;long&gt; limit, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task DrainAsync(class System.IO.Stream stream, valuetype System.Nullable`1&lt;int64&gt; limit, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebUtilities.StreamHelperExtensions.DrainAsync(System.IO.Stream,System.Nullable{System.Int64},System.Threading.CancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stream" Type="System.IO.Stream" RefType="this" />
          <Parameter Name="limit" Type="System.Nullable&lt;System.Int64&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="stream">To be added.</param>
          <param name="limit">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.WebUtilities.StreamHelperExtensions" Member="M:Microsoft.AspNetCore.WebUtilities.StreamHelperExtensions.DrainAsync(System.IO.Stream,System.Nullable{System.Int64},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IO.Stream" />
      </Targets>
      <Member MemberName="DrainAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task DrainAsync (this System.IO.Stream stream, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task DrainAsync(class System.IO.Stream stream, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.WebUtilities.StreamHelperExtensions.DrainAsync(System.IO.Stream,System.Threading.CancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stream" Type="System.IO.Stream" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="stream">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.AspNetCore.WebUtilities.StreamHelperExtensions" Member="M:Microsoft.AspNetCore.WebUtilities.StreamHelperExtensions.DrainAsync(System.IO.Stream,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions" />
      </Targets>
      <Member MemberName="SetAbsoluteExpiration">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions SetAbsoluteExpiration (this Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions options, DateTimeOffset absolute);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions SetAbsoluteExpiration(class Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions options, valuetype System.DateTimeOffset absolute) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryExtensions.SetAbsoluteExpiration(Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions,System.DateTimeOffset)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="options" Type="Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions" RefType="this" />
          <Parameter Name="absolute" Type="System.DateTimeOffset" />
        </Parameters>
        <Docs>
          <param name="options" />
          <param name="absolute" />
          <summary>
            Sets an absolute expiration date for the cache entry.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryExtensions" Member="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryExtensions.SetAbsoluteExpiration(Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions,System.DateTimeOffset)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions" />
      </Targets>
      <Member MemberName="SetAbsoluteExpiration">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions SetAbsoluteExpiration (this Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions options, TimeSpan relative);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions SetAbsoluteExpiration(class Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions options, valuetype System.TimeSpan relative) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryExtensions.SetAbsoluteExpiration(Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions,System.TimeSpan)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="options" Type="Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions" RefType="this" />
          <Parameter Name="relative" Type="System.TimeSpan" />
        </Parameters>
        <Docs>
          <param name="options" />
          <param name="relative" />
          <summary>
            Sets an absolute expiration time, relative to now.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryExtensions" Member="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryExtensions.SetAbsoluteExpiration(Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions,System.TimeSpan)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions" />
      </Targets>
      <Member MemberName="SetSlidingExpiration">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions SetSlidingExpiration (this Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions options, TimeSpan offset);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions SetSlidingExpiration(class Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions options, valuetype System.TimeSpan offset) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryExtensions.SetSlidingExpiration(Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions,System.TimeSpan)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="options" Type="Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions" RefType="this" />
          <Parameter Name="offset" Type="System.TimeSpan" />
        </Parameters>
        <Docs>
          <param name="options" />
          <param name="offset" />
          <summary>
            Sets how long the cache entry can be inactive (e.g. not accessed) before it will be removed.
            This will not extend the entry lifetime beyond the absolute expiration (if set).
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryExtensions" Member="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryExtensions.SetSlidingExpiration(Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions,System.TimeSpan)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache" />
      </Targets>
      <Member MemberName="GetString">
        <MemberSignature Language="C#" Value="public static string GetString (this Microsoft.Extensions.Caching.Distributed.IDistributedCache cache, string key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetString(class Microsoft.Extensions.Caching.Distributed.IDistributedCache cache, string key) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions.GetString(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="cache" Type="Microsoft.Extensions.Caching.Distributed.IDistributedCache" RefType="this" />
          <Parameter Name="key" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="cache">The cache in which to store the data.</param>
          <param name="key">The key to get the stored data for.</param>
          <summary>
            Gets a string from the specified cache with the specified key.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions" Member="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions.GetString(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache" />
      </Targets>
      <Member MemberName="GetStringAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (this Microsoft.Extensions.Caching.Distributed.IDistributedCache cache, string key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;string&gt; GetStringAsync(class Microsoft.Extensions.Caching.Distributed.IDistributedCache cache, string key) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions.GetStringAsync(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="cache" Type="Microsoft.Extensions.Caching.Distributed.IDistributedCache" RefType="this" />
          <Parameter Name="key" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="cache">The cache in which to store the data.</param>
          <param name="key">The key to get the stored data for.</param>
          <summary>
            Asynchronously gets a string from the specified cache with the specified key.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions" Member="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions.GetStringAsync(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache" />
      </Targets>
      <Member MemberName="GetStringAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (this Microsoft.Extensions.Caching.Distributed.IDistributedCache cache, string key, System.Threading.CancellationToken token = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;string&gt; GetStringAsync(class Microsoft.Extensions.Caching.Distributed.IDistributedCache cache, string key, valuetype System.Threading.CancellationToken token) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions.GetStringAsync(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,System.Threading.CancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="cache" Type="Microsoft.Extensions.Caching.Distributed.IDistributedCache" RefType="this" />
          <Parameter Name="key" Type="System.String" />
          <Parameter Name="token" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="cache">The cache in which to store the data.</param>
          <param name="key">The key to get the stored data for.</param>
          <param name="token">Optional. A <see cref="T:System.Threading.CancellationToken" /> to cancel the operation.</param>
          <summary>
            Asynchronously gets a string from the specified cache with the specified key.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions" Member="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions.GetStringAsync(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache" />
      </Targets>
      <Member MemberName="Set">
        <MemberSignature Language="C#" Value="public static void Set (this Microsoft.Extensions.Caching.Distributed.IDistributedCache cache, string key, byte[] value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Set(class Microsoft.Extensions.Caching.Distributed.IDistributedCache cache, string key, unsigned int8[] value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions.Set(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,System.Byte[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="cache" Type="Microsoft.Extensions.Caching.Distributed.IDistributedCache" RefType="this" />
          <Parameter Name="key" Type="System.String" />
          <Parameter Name="value" Type="System.Byte[]" />
        </Parameters>
        <Docs>
          <param name="cache">The cache in which to store the data.</param>
          <param name="key">The key to store the data in.</param>
          <param name="value">The data to store in the cache.</param>
          <summary>
            Sets a sequence of bytes in the specified cache with the specified key.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions" Member="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions.Set(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,System.Byte[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache" />
      </Targets>
      <Member MemberName="SetAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SetAsync (this Microsoft.Extensions.Caching.Distributed.IDistributedCache cache, string key, byte[] value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SetAsync(class Microsoft.Extensions.Caching.Distributed.IDistributedCache cache, string key, unsigned int8[] value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions.SetAsync(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,System.Byte[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="cache" Type="Microsoft.Extensions.Caching.Distributed.IDistributedCache" RefType="this" />
          <Parameter Name="key" Type="System.String" />
          <Parameter Name="value" Type="System.Byte[]" />
        </Parameters>
        <Docs>
          <param name="cache">The cache in which to store the data.</param>
          <param name="key">The key to store the data in.</param>
          <param name="value">The data to store in the cache.</param>
          <summary>
            Asynchronously sets a sequence of bytes in the specified cache with the specified key.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions" Member="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions.SetAsync(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,System.Byte[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache" />
      </Targets>
      <Member MemberName="SetAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SetAsync (this Microsoft.Extensions.Caching.Distributed.IDistributedCache cache, string key, byte[] value, System.Threading.CancellationToken token = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SetAsync(class Microsoft.Extensions.Caching.Distributed.IDistributedCache cache, string key, unsigned int8[] value, valuetype System.Threading.CancellationToken token) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions.SetAsync(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,System.Byte[],System.Threading.CancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="cache" Type="Microsoft.Extensions.Caching.Distributed.IDistributedCache" RefType="this" />
          <Parameter Name="key" Type="System.String" />
          <Parameter Name="value" Type="System.Byte[]" />
          <Parameter Name="token" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="cache">The cache in which to store the data.</param>
          <param name="key">The key to store the data in.</param>
          <param name="value">The data to store in the cache.</param>
          <param name="token">Optional. A <see cref="T:System.Threading.CancellationToken" /> to cancel the operation.</param>
          <summary>
            Asynchronously sets a sequence of bytes in the specified cache with the specified key.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions" Member="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions.SetAsync(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,System.Byte[],System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache" />
      </Targets>
      <Member MemberName="SetString">
        <MemberSignature Language="C#" Value="public static void SetString (this Microsoft.Extensions.Caching.Distributed.IDistributedCache cache, string key, string value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetString(class Microsoft.Extensions.Caching.Distributed.IDistributedCache cache, string key, string value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions.SetString(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="cache" Type="Microsoft.Extensions.Caching.Distributed.IDistributedCache" RefType="this" />
          <Parameter Name="key" Type="System.String" />
          <Parameter Name="value" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="cache">The cache in which to store the data.</param>
          <param name="key">The key to store the data in.</param>
          <param name="value">The data to store in the cache.</param>
          <summary>
            Sets a string in the specified cache with the specified key.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions" Member="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions.SetString(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache" />
      </Targets>
      <Member MemberName="SetString">
        <MemberSignature Language="C#" Value="public static void SetString (this Microsoft.Extensions.Caching.Distributed.IDistributedCache cache, string key, string value, Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetString(class Microsoft.Extensions.Caching.Distributed.IDistributedCache cache, string key, string value, class Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions.SetString(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,System.String,Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="cache" Type="Microsoft.Extensions.Caching.Distributed.IDistributedCache" RefType="this" />
          <Parameter Name="key" Type="System.String" />
          <Parameter Name="value" Type="System.String" />
          <Parameter Name="options" Type="Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions" />
        </Parameters>
        <Docs>
          <param name="cache">The cache in which to store the data.</param>
          <param name="key">The key to store the data in.</param>
          <param name="value">The data to store in the cache.</param>
          <param name="options">The cache options for the entry.</param>
          <summary>
            Sets a string in the specified cache with the specified key.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions" Member="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions.SetString(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,System.String,Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache" />
      </Targets>
      <Member MemberName="SetStringAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SetStringAsync (this Microsoft.Extensions.Caching.Distributed.IDistributedCache cache, string key, string value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SetStringAsync(class Microsoft.Extensions.Caching.Distributed.IDistributedCache cache, string key, string value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions.SetStringAsync(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="cache" Type="Microsoft.Extensions.Caching.Distributed.IDistributedCache" RefType="this" />
          <Parameter Name="key" Type="System.String" />
          <Parameter Name="value" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="cache">The cache in which to store the data.</param>
          <param name="key">The key to store the data in.</param>
          <param name="value">The data to store in the cache.</param>
          <summary>
            Asynchronously sets a string in the specified cache with the specified key.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions" Member="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions.SetStringAsync(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache" />
      </Targets>
      <Member MemberName="SetStringAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SetStringAsync (this Microsoft.Extensions.Caching.Distributed.IDistributedCache cache, string key, string value, Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SetStringAsync(class Microsoft.Extensions.Caching.Distributed.IDistributedCache cache, string key, string value, class Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions.SetStringAsync(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,System.String,Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="cache" Type="Microsoft.Extensions.Caching.Distributed.IDistributedCache" RefType="this" />
          <Parameter Name="key" Type="System.String" />
          <Parameter Name="value" Type="System.String" />
          <Parameter Name="options" Type="Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions" />
        </Parameters>
        <Docs>
          <param name="cache">The cache in which to store the data.</param>
          <param name="key">The key to store the data in.</param>
          <param name="value">The data to store in the cache.</param>
          <param name="options">The cache options for the entry.</param>
          <summary>
            Asynchronously sets a string in the specified cache with the specified key.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions" Member="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions.SetStringAsync(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,System.String,Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache" />
      </Targets>
      <Member MemberName="SetStringAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SetStringAsync (this Microsoft.Extensions.Caching.Distributed.IDistributedCache cache, string key, string value, Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions options, System.Threading.CancellationToken token = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SetStringAsync(class Microsoft.Extensions.Caching.Distributed.IDistributedCache cache, string key, string value, class Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions options, valuetype System.Threading.CancellationToken token) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions.SetStringAsync(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,System.String,Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions,System.Threading.CancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="cache" Type="Microsoft.Extensions.Caching.Distributed.IDistributedCache" RefType="this" />
          <Parameter Name="key" Type="System.String" />
          <Parameter Name="value" Type="System.String" />
          <Parameter Name="options" Type="Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions" />
          <Parameter Name="token" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="cache">The cache in which to store the data.</param>
          <param name="key">The key to store the data in.</param>
          <param name="value">The data to store in the cache.</param>
          <param name="options">The cache options for the entry.</param>
          <param name="token">Optional. A <see cref="T:System.Threading.CancellationToken" /> to cancel the operation.</param>
          <summary>
            Asynchronously sets a string in the specified cache with the specified key.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions" Member="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions.SetStringAsync(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,System.String,Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache" />
      </Targets>
      <Member MemberName="SetStringAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SetStringAsync (this Microsoft.Extensions.Caching.Distributed.IDistributedCache cache, string key, string value, System.Threading.CancellationToken token = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SetStringAsync(class Microsoft.Extensions.Caching.Distributed.IDistributedCache cache, string key, string value, valuetype System.Threading.CancellationToken token) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions.SetStringAsync(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,System.String,System.Threading.CancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="cache" Type="Microsoft.Extensions.Caching.Distributed.IDistributedCache" RefType="this" />
          <Parameter Name="key" Type="System.String" />
          <Parameter Name="value" Type="System.String" />
          <Parameter Name="token" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="cache">The cache in which to store the data.</param>
          <param name="key">The key to store the data in.</param>
          <param name="value">The data to store in the cache.</param>
          <param name="token">Optional. A <see cref="T:System.Threading.CancellationToken" /> to cancel the operation.</param>
          <summary>
            Asynchronously sets a string in the specified cache with the specified key.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions" Member="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions.SetStringAsync(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,System.String,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Memory.ICacheEntry" />
      </Targets>
      <Member MemberName="AddExpirationToken">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Caching.Memory.ICacheEntry AddExpirationToken (this Microsoft.Extensions.Caching.Memory.ICacheEntry entry, Microsoft.Extensions.Primitives.IChangeToken expirationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Caching.Memory.ICacheEntry AddExpirationToken(class Microsoft.Extensions.Caching.Memory.ICacheEntry entry, class Microsoft.Extensions.Primitives.IChangeToken expirationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Memory.CacheEntryExtensions.AddExpirationToken(Microsoft.Extensions.Caching.Memory.ICacheEntry,Microsoft.Extensions.Primitives.IChangeToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Caching.Memory.ICacheEntry</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entry" Type="Microsoft.Extensions.Caching.Memory.ICacheEntry" RefType="this" />
          <Parameter Name="expirationToken" Type="Microsoft.Extensions.Primitives.IChangeToken" />
        </Parameters>
        <Docs>
          <param name="entry">The <see cref="T:Microsoft.Extensions.Caching.Memory.ICacheEntry" />.</param>
          <param name="expirationToken">The <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> that causes the cache entry to expire.</param>
          <summary>
            Expire the cache entry if the given <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> expires.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Memory.CacheEntryExtensions" Member="M:Microsoft.Extensions.Caching.Memory.CacheEntryExtensions.AddExpirationToken(Microsoft.Extensions.Caching.Memory.ICacheEntry,Microsoft.Extensions.Primitives.IChangeToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Memory.ICacheEntry" />
      </Targets>
      <Member MemberName="RegisterPostEvictionCallback">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Caching.Memory.ICacheEntry RegisterPostEvictionCallback (this Microsoft.Extensions.Caching.Memory.ICacheEntry entry, Microsoft.Extensions.Caching.Memory.PostEvictionDelegate callback);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Caching.Memory.ICacheEntry RegisterPostEvictionCallback(class Microsoft.Extensions.Caching.Memory.ICacheEntry entry, class Microsoft.Extensions.Caching.Memory.PostEvictionDelegate callback) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Memory.CacheEntryExtensions.RegisterPostEvictionCallback(Microsoft.Extensions.Caching.Memory.ICacheEntry,Microsoft.Extensions.Caching.Memory.PostEvictionDelegate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Caching.Memory.ICacheEntry</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entry" Type="Microsoft.Extensions.Caching.Memory.ICacheEntry" RefType="this" />
          <Parameter Name="callback" Type="Microsoft.Extensions.Caching.Memory.PostEvictionDelegate" />
        </Parameters>
        <Docs>
          <param name="entry" />
          <param name="callback" />
          <summary>
            The given callback will be fired after the cache entry is evicted from the cache.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Memory.CacheEntryExtensions" Member="M:Microsoft.Extensions.Caching.Memory.CacheEntryExtensions.RegisterPostEvictionCallback(Microsoft.Extensions.Caching.Memory.ICacheEntry,Microsoft.Extensions.Caching.Memory.PostEvictionDelegate)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Memory.ICacheEntry" />
      </Targets>
      <Member MemberName="RegisterPostEvictionCallback">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Caching.Memory.ICacheEntry RegisterPostEvictionCallback (this Microsoft.Extensions.Caching.Memory.ICacheEntry entry, Microsoft.Extensions.Caching.Memory.PostEvictionDelegate callback, object state);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Caching.Memory.ICacheEntry RegisterPostEvictionCallback(class Microsoft.Extensions.Caching.Memory.ICacheEntry entry, class Microsoft.Extensions.Caching.Memory.PostEvictionDelegate callback, object state) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Memory.CacheEntryExtensions.RegisterPostEvictionCallback(Microsoft.Extensions.Caching.Memory.ICacheEntry,Microsoft.Extensions.Caching.Memory.PostEvictionDelegate,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Caching.Memory.ICacheEntry</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entry" Type="Microsoft.Extensions.Caching.Memory.ICacheEntry" RefType="this" />
          <Parameter Name="callback" Type="Microsoft.Extensions.Caching.Memory.PostEvictionDelegate" />
          <Parameter Name="state" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="entry" />
          <param name="callback" />
          <param name="state" />
          <summary>
            The given callback will be fired after the cache entry is evicted from the cache.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Memory.CacheEntryExtensions" Member="M:Microsoft.Extensions.Caching.Memory.CacheEntryExtensions.RegisterPostEvictionCallback(Microsoft.Extensions.Caching.Memory.ICacheEntry,Microsoft.Extensions.Caching.Memory.PostEvictionDelegate,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Memory.ICacheEntry" />
      </Targets>
      <Member MemberName="SetAbsoluteExpiration">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Caching.Memory.ICacheEntry SetAbsoluteExpiration (this Microsoft.Extensions.Caching.Memory.ICacheEntry entry, DateTimeOffset absolute);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Caching.Memory.ICacheEntry SetAbsoluteExpiration(class Microsoft.Extensions.Caching.Memory.ICacheEntry entry, valuetype System.DateTimeOffset absolute) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Memory.CacheEntryExtensions.SetAbsoluteExpiration(Microsoft.Extensions.Caching.Memory.ICacheEntry,System.DateTimeOffset)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Caching.Memory.ICacheEntry</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entry" Type="Microsoft.Extensions.Caching.Memory.ICacheEntry" RefType="this" />
          <Parameter Name="absolute" Type="System.DateTimeOffset" />
        </Parameters>
        <Docs>
          <param name="entry" />
          <param name="absolute" />
          <summary>
            Sets an absolute expiration date for the cache entry.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Memory.CacheEntryExtensions" Member="M:Microsoft.Extensions.Caching.Memory.CacheEntryExtensions.SetAbsoluteExpiration(Microsoft.Extensions.Caching.Memory.ICacheEntry,System.DateTimeOffset)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Memory.ICacheEntry" />
      </Targets>
      <Member MemberName="SetAbsoluteExpiration">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Caching.Memory.ICacheEntry SetAbsoluteExpiration (this Microsoft.Extensions.Caching.Memory.ICacheEntry entry, TimeSpan relative);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Caching.Memory.ICacheEntry SetAbsoluteExpiration(class Microsoft.Extensions.Caching.Memory.ICacheEntry entry, valuetype System.TimeSpan relative) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Memory.CacheEntryExtensions.SetAbsoluteExpiration(Microsoft.Extensions.Caching.Memory.ICacheEntry,System.TimeSpan)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Caching.Memory.ICacheEntry</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entry" Type="Microsoft.Extensions.Caching.Memory.ICacheEntry" RefType="this" />
          <Parameter Name="relative" Type="System.TimeSpan" />
        </Parameters>
        <Docs>
          <param name="entry" />
          <param name="relative" />
          <summary>
            Sets an absolute expiration time, relative to now.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Memory.CacheEntryExtensions" Member="M:Microsoft.Extensions.Caching.Memory.CacheEntryExtensions.SetAbsoluteExpiration(Microsoft.Extensions.Caching.Memory.ICacheEntry,System.TimeSpan)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Memory.ICacheEntry" />
      </Targets>
      <Member MemberName="SetOptions">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Caching.Memory.ICacheEntry SetOptions (this Microsoft.Extensions.Caching.Memory.ICacheEntry entry, Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Caching.Memory.ICacheEntry SetOptions(class Microsoft.Extensions.Caching.Memory.ICacheEntry entry, class Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Memory.CacheEntryExtensions.SetOptions(Microsoft.Extensions.Caching.Memory.ICacheEntry,Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Caching.Memory.ICacheEntry</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entry" Type="Microsoft.Extensions.Caching.Memory.ICacheEntry" RefType="this" />
          <Parameter Name="options" Type="Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions" />
        </Parameters>
        <Docs>
          <param name="entry" />
          <param name="options" />
          <summary>
            Applies the values of an existing <see cref="T:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions" /> to the entry.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Memory.CacheEntryExtensions" Member="M:Microsoft.Extensions.Caching.Memory.CacheEntryExtensions.SetOptions(Microsoft.Extensions.Caching.Memory.ICacheEntry,Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Memory.ICacheEntry" />
      </Targets>
      <Member MemberName="SetPriority">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Caching.Memory.ICacheEntry SetPriority (this Microsoft.Extensions.Caching.Memory.ICacheEntry entry, Microsoft.Extensions.Caching.Memory.CacheItemPriority priority);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Caching.Memory.ICacheEntry SetPriority(class Microsoft.Extensions.Caching.Memory.ICacheEntry entry, valuetype Microsoft.Extensions.Caching.Memory.CacheItemPriority priority) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Memory.CacheEntryExtensions.SetPriority(Microsoft.Extensions.Caching.Memory.ICacheEntry,Microsoft.Extensions.Caching.Memory.CacheItemPriority)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Caching.Memory.ICacheEntry</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entry" Type="Microsoft.Extensions.Caching.Memory.ICacheEntry" RefType="this" />
          <Parameter Name="priority" Type="Microsoft.Extensions.Caching.Memory.CacheItemPriority" />
        </Parameters>
        <Docs>
          <param name="entry" />
          <param name="priority" />
          <summary>
            Sets the priority for keeping the cache entry in the cache during a memory pressure tokened cleanup.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Memory.CacheEntryExtensions" Member="M:Microsoft.Extensions.Caching.Memory.CacheEntryExtensions.SetPriority(Microsoft.Extensions.Caching.Memory.ICacheEntry,Microsoft.Extensions.Caching.Memory.CacheItemPriority)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Memory.ICacheEntry" />
      </Targets>
      <Member MemberName="SetSize">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Caching.Memory.ICacheEntry SetSize (this Microsoft.Extensions.Caching.Memory.ICacheEntry entry, long size);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Caching.Memory.ICacheEntry SetSize(class Microsoft.Extensions.Caching.Memory.ICacheEntry entry, int64 size) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Memory.CacheEntryExtensions.SetSize(Microsoft.Extensions.Caching.Memory.ICacheEntry,System.Int64)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Caching.Memory.ICacheEntry</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entry" Type="Microsoft.Extensions.Caching.Memory.ICacheEntry" RefType="this" />
          <Parameter Name="size" Type="System.Int64" />
        </Parameters>
        <Docs>
          <param name="entry" />
          <param name="size" />
          <summary>
            Sets the size of the cache entry value.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Memory.CacheEntryExtensions" Member="M:Microsoft.Extensions.Caching.Memory.CacheEntryExtensions.SetSize(Microsoft.Extensions.Caching.Memory.ICacheEntry,System.Int64)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Memory.ICacheEntry" />
      </Targets>
      <Member MemberName="SetSlidingExpiration">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Caching.Memory.ICacheEntry SetSlidingExpiration (this Microsoft.Extensions.Caching.Memory.ICacheEntry entry, TimeSpan offset);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Caching.Memory.ICacheEntry SetSlidingExpiration(class Microsoft.Extensions.Caching.Memory.ICacheEntry entry, valuetype System.TimeSpan offset) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Memory.CacheEntryExtensions.SetSlidingExpiration(Microsoft.Extensions.Caching.Memory.ICacheEntry,System.TimeSpan)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Caching.Memory.ICacheEntry</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entry" Type="Microsoft.Extensions.Caching.Memory.ICacheEntry" RefType="this" />
          <Parameter Name="offset" Type="System.TimeSpan" />
        </Parameters>
        <Docs>
          <param name="entry" />
          <param name="offset" />
          <summary>
            Sets how long the cache entry can be inactive (e.g. not accessed) before it will be removed.
            This will not extend the entry lifetime beyond the absolute expiration (if set).
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Memory.CacheEntryExtensions" Member="M:Microsoft.Extensions.Caching.Memory.CacheEntryExtensions.SetSlidingExpiration(Microsoft.Extensions.Caching.Memory.ICacheEntry,System.TimeSpan)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Memory.ICacheEntry" />
      </Targets>
      <Member MemberName="SetValue">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Caching.Memory.ICacheEntry SetValue (this Microsoft.Extensions.Caching.Memory.ICacheEntry entry, object value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Caching.Memory.ICacheEntry SetValue(class Microsoft.Extensions.Caching.Memory.ICacheEntry entry, object value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Memory.CacheEntryExtensions.SetValue(Microsoft.Extensions.Caching.Memory.ICacheEntry,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Caching.Memory.ICacheEntry</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entry" Type="Microsoft.Extensions.Caching.Memory.ICacheEntry" RefType="this" />
          <Parameter Name="value" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="entry" />
          <param name="value" />
          <summary>
            Sets the value of the cache entry.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Memory.CacheEntryExtensions" Member="M:Microsoft.Extensions.Caching.Memory.CacheEntryExtensions.SetValue(Microsoft.Extensions.Caching.Memory.ICacheEntry,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" />
      </Targets>
      <Member MemberName="Get">
        <MemberSignature Language="C#" Value="public static object Get (this Microsoft.Extensions.Caching.Memory.IMemoryCache cache, object key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Get(class Microsoft.Extensions.Caching.Memory.IMemoryCache cache, object key) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Memory.CacheExtensions.Get(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Object</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="cache" Type="Microsoft.Extensions.Caching.Memory.IMemoryCache" RefType="this" />
          <Parameter Name="key" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="cache">To be added.</param>
          <param name="key">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Memory.CacheExtensions" Member="M:Microsoft.Extensions.Caching.Memory.CacheExtensions.Get(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" />
      </Targets>
      <Member MemberName="Get&lt;TItem&gt;">
        <MemberSignature Language="C#" Value="public static TItem Get&lt;TItem&gt; (this Microsoft.Extensions.Caching.Memory.IMemoryCache cache, object key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TItem Get&lt;TItem&gt;(class Microsoft.Extensions.Caching.Memory.IMemoryCache cache, object key) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Memory.CacheExtensions.Get``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TItem</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TItem" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="cache" Type="Microsoft.Extensions.Caching.Memory.IMemoryCache" RefType="this" />
          <Parameter Name="key" Type="System.Object" />
        </Parameters>
        <Docs>
          <typeparam name="TItem">To be added.</typeparam>
          <param name="cache">To be added.</param>
          <param name="key">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Memory.CacheExtensions" Member="M:Microsoft.Extensions.Caching.Memory.CacheExtensions.Get``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" />
      </Targets>
      <Member MemberName="GetOrCreate&lt;TItem&gt;">
        <MemberSignature Language="C#" Value="public static TItem GetOrCreate&lt;TItem&gt; (this Microsoft.Extensions.Caching.Memory.IMemoryCache cache, object key, Func&lt;Microsoft.Extensions.Caching.Memory.ICacheEntry,TItem&gt; factory);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TItem GetOrCreate&lt;TItem&gt;(class Microsoft.Extensions.Caching.Memory.IMemoryCache cache, object key, class System.Func`2&lt;class Microsoft.Extensions.Caching.Memory.ICacheEntry, !!TItem&gt; factory) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Memory.CacheExtensions.GetOrCreate``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,System.Func{Microsoft.Extensions.Caching.Memory.ICacheEntry,``0})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TItem</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TItem" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="cache" Type="Microsoft.Extensions.Caching.Memory.IMemoryCache" RefType="this" />
          <Parameter Name="key" Type="System.Object" />
          <Parameter Name="factory" Type="System.Func&lt;Microsoft.Extensions.Caching.Memory.ICacheEntry,TItem&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TItem">To be added.</typeparam>
          <param name="cache">To be added.</param>
          <param name="key">To be added.</param>
          <param name="factory">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Memory.CacheExtensions" Member="M:Microsoft.Extensions.Caching.Memory.CacheExtensions.GetOrCreate``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,System.Func{Microsoft.Extensions.Caching.Memory.ICacheEntry,``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" />
      </Targets>
      <Member MemberName="GetOrCreateAsync&lt;TItem&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TItem&gt; GetOrCreateAsync&lt;TItem&gt; (this Microsoft.Extensions.Caching.Memory.IMemoryCache cache, object key, Func&lt;Microsoft.Extensions.Caching.Memory.ICacheEntry,System.Threading.Tasks.Task&lt;TItem&gt;&gt; factory);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TItem&gt; GetOrCreateAsync&lt;TItem&gt;(class Microsoft.Extensions.Caching.Memory.IMemoryCache cache, object key, class System.Func`2&lt;class Microsoft.Extensions.Caching.Memory.ICacheEntry, class System.Threading.Tasks.Task`1&lt;!!TItem&gt;&gt; factory) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Memory.CacheExtensions.GetOrCreateAsync``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,System.Func{Microsoft.Extensions.Caching.Memory.ICacheEntry,System.Threading.Tasks.Task{``0}})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TItem&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TItem" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="cache" Type="Microsoft.Extensions.Caching.Memory.IMemoryCache" RefType="this" />
          <Parameter Name="key" Type="System.Object" />
          <Parameter Name="factory" Type="System.Func&lt;Microsoft.Extensions.Caching.Memory.ICacheEntry,System.Threading.Tasks.Task&lt;TItem&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TItem">To be added.</typeparam>
          <param name="cache">To be added.</param>
          <param name="key">To be added.</param>
          <param name="factory">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Memory.CacheExtensions" Member="M:Microsoft.Extensions.Caching.Memory.CacheExtensions.GetOrCreateAsync``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,System.Func{Microsoft.Extensions.Caching.Memory.ICacheEntry,System.Threading.Tasks.Task{``0}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" />
      </Targets>
      <Member MemberName="Set&lt;TItem&gt;">
        <MemberSignature Language="C#" Value="public static TItem Set&lt;TItem&gt; (this Microsoft.Extensions.Caching.Memory.IMemoryCache cache, object key, TItem value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TItem Set&lt;TItem&gt;(class Microsoft.Extensions.Caching.Memory.IMemoryCache cache, object key, !!TItem value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TItem</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TItem" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="cache" Type="Microsoft.Extensions.Caching.Memory.IMemoryCache" RefType="this" />
          <Parameter Name="key" Type="System.Object" />
          <Parameter Name="value" Type="TItem" />
        </Parameters>
        <Docs>
          <typeparam name="TItem">To be added.</typeparam>
          <param name="cache">To be added.</param>
          <param name="key">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Memory.CacheExtensions" Member="M:Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" />
      </Targets>
      <Member MemberName="Set&lt;TItem&gt;">
        <MemberSignature Language="C#" Value="public static TItem Set&lt;TItem&gt; (this Microsoft.Extensions.Caching.Memory.IMemoryCache cache, object key, TItem value, Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TItem Set&lt;TItem&gt;(class Microsoft.Extensions.Caching.Memory.IMemoryCache cache, object key, !!TItem value, class Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TItem</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TItem" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="cache" Type="Microsoft.Extensions.Caching.Memory.IMemoryCache" RefType="this" />
          <Parameter Name="key" Type="System.Object" />
          <Parameter Name="value" Type="TItem" />
          <Parameter Name="options" Type="Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions" />
        </Parameters>
        <Docs>
          <typeparam name="TItem">To be added.</typeparam>
          <param name="cache">To be added.</param>
          <param name="key">To be added.</param>
          <param name="value">To be added.</param>
          <param name="options">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Memory.CacheExtensions" Member="M:Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" />
      </Targets>
      <Member MemberName="Set&lt;TItem&gt;">
        <MemberSignature Language="C#" Value="public static TItem Set&lt;TItem&gt; (this Microsoft.Extensions.Caching.Memory.IMemoryCache cache, object key, TItem value, Microsoft.Extensions.Primitives.IChangeToken expirationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TItem Set&lt;TItem&gt;(class Microsoft.Extensions.Caching.Memory.IMemoryCache cache, object key, !!TItem value, class Microsoft.Extensions.Primitives.IChangeToken expirationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,Microsoft.Extensions.Primitives.IChangeToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TItem</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TItem" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="cache" Type="Microsoft.Extensions.Caching.Memory.IMemoryCache" RefType="this" />
          <Parameter Name="key" Type="System.Object" />
          <Parameter Name="value" Type="TItem" />
          <Parameter Name="expirationToken" Type="Microsoft.Extensions.Primitives.IChangeToken" />
        </Parameters>
        <Docs>
          <typeparam name="TItem">To be added.</typeparam>
          <param name="cache">To be added.</param>
          <param name="key">To be added.</param>
          <param name="value">To be added.</param>
          <param name="expirationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Memory.CacheExtensions" Member="M:Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,Microsoft.Extensions.Primitives.IChangeToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" />
      </Targets>
      <Member MemberName="Set&lt;TItem&gt;">
        <MemberSignature Language="C#" Value="public static TItem Set&lt;TItem&gt; (this Microsoft.Extensions.Caching.Memory.IMemoryCache cache, object key, TItem value, DateTimeOffset absoluteExpiration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TItem Set&lt;TItem&gt;(class Microsoft.Extensions.Caching.Memory.IMemoryCache cache, object key, !!TItem value, valuetype System.DateTimeOffset absoluteExpiration) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,System.DateTimeOffset)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TItem</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TItem" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="cache" Type="Microsoft.Extensions.Caching.Memory.IMemoryCache" RefType="this" />
          <Parameter Name="key" Type="System.Object" />
          <Parameter Name="value" Type="TItem" />
          <Parameter Name="absoluteExpiration" Type="System.DateTimeOffset" />
        </Parameters>
        <Docs>
          <typeparam name="TItem">To be added.</typeparam>
          <param name="cache">To be added.</param>
          <param name="key">To be added.</param>
          <param name="value">To be added.</param>
          <param name="absoluteExpiration">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Memory.CacheExtensions" Member="M:Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,System.DateTimeOffset)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" />
      </Targets>
      <Member MemberName="Set&lt;TItem&gt;">
        <MemberSignature Language="C#" Value="public static TItem Set&lt;TItem&gt; (this Microsoft.Extensions.Caching.Memory.IMemoryCache cache, object key, TItem value, TimeSpan absoluteExpirationRelativeToNow);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TItem Set&lt;TItem&gt;(class Microsoft.Extensions.Caching.Memory.IMemoryCache cache, object key, !!TItem value, valuetype System.TimeSpan absoluteExpirationRelativeToNow) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,System.TimeSpan)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TItem</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TItem" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="cache" Type="Microsoft.Extensions.Caching.Memory.IMemoryCache" RefType="this" />
          <Parameter Name="key" Type="System.Object" />
          <Parameter Name="value" Type="TItem" />
          <Parameter Name="absoluteExpirationRelativeToNow" Type="System.TimeSpan" />
        </Parameters>
        <Docs>
          <typeparam name="TItem">To be added.</typeparam>
          <param name="cache">To be added.</param>
          <param name="key">To be added.</param>
          <param name="value">To be added.</param>
          <param name="absoluteExpirationRelativeToNow">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Memory.CacheExtensions" Member="M:Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,System.TimeSpan)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" />
      </Targets>
      <Member MemberName="TryGetValue&lt;TItem&gt;">
        <MemberSignature Language="C#" Value="public static bool TryGetValue&lt;TItem&gt; (this Microsoft.Extensions.Caching.Memory.IMemoryCache cache, object key, out TItem value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetValue&lt;TItem&gt;(class Microsoft.Extensions.Caching.Memory.IMemoryCache cache, object key, !!TItem value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Memory.CacheExtensions.TryGetValue``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0@)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TItem" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="cache" Type="Microsoft.Extensions.Caching.Memory.IMemoryCache" RefType="this" />
          <Parameter Name="key" Type="System.Object" />
          <Parameter Name="value" Type="TItem&amp;" RefType="out" />
        </Parameters>
        <Docs>
          <typeparam name="TItem">To be added.</typeparam>
          <param name="cache">To be added.</param>
          <param name="key">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Memory.CacheExtensions" Member="M:Microsoft.Extensions.Caching.Memory.CacheExtensions.TryGetValue``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions" />
      </Targets>
      <Member MemberName="AddExpirationToken">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions AddExpirationToken (this Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions options, Microsoft.Extensions.Primitives.IChangeToken expirationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions AddExpirationToken(class Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions options, class Microsoft.Extensions.Primitives.IChangeToken expirationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.AddExpirationToken(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Primitives.IChangeToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="options" Type="Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions" RefType="this" />
          <Parameter Name="expirationToken" Type="Microsoft.Extensions.Primitives.IChangeToken" />
        </Parameters>
        <Docs>
          <param name="options">The <see cref="T:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions" />.</param>
          <param name="expirationToken">The <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> that causes the cache entry to expire.</param>
          <summary>
            Expire the cache entry if the given <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> expires.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions" Member="M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.AddExpirationToken(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Primitives.IChangeToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions" />
      </Targets>
      <Member MemberName="RegisterPostEvictionCallback">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions RegisterPostEvictionCallback (this Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions options, Microsoft.Extensions.Caching.Memory.PostEvictionDelegate callback);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions RegisterPostEvictionCallback(class Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions options, class Microsoft.Extensions.Caching.Memory.PostEvictionDelegate callback) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.RegisterPostEvictionCallback(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Caching.Memory.PostEvictionDelegate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="options" Type="Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions" RefType="this" />
          <Parameter Name="callback" Type="Microsoft.Extensions.Caching.Memory.PostEvictionDelegate" />
        </Parameters>
        <Docs>
          <param name="options" />
          <param name="callback" />
          <summary>
            The given callback will be fired after the cache entry is evicted from the cache.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions" Member="M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.RegisterPostEvictionCallback(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Caching.Memory.PostEvictionDelegate)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions" />
      </Targets>
      <Member MemberName="RegisterPostEvictionCallback">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions RegisterPostEvictionCallback (this Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions options, Microsoft.Extensions.Caching.Memory.PostEvictionDelegate callback, object state);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions RegisterPostEvictionCallback(class Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions options, class Microsoft.Extensions.Caching.Memory.PostEvictionDelegate callback, object state) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.RegisterPostEvictionCallback(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Caching.Memory.PostEvictionDelegate,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="options" Type="Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions" RefType="this" />
          <Parameter Name="callback" Type="Microsoft.Extensions.Caching.Memory.PostEvictionDelegate" />
          <Parameter Name="state" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="options" />
          <param name="callback" />
          <param name="state" />
          <summary>
            The given callback will be fired after the cache entry is evicted from the cache.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions" Member="M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.RegisterPostEvictionCallback(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Caching.Memory.PostEvictionDelegate,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions" />
      </Targets>
      <Member MemberName="SetAbsoluteExpiration">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions SetAbsoluteExpiration (this Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions options, DateTimeOffset absolute);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions SetAbsoluteExpiration(class Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions options, valuetype System.DateTimeOffset absolute) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetAbsoluteExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,System.DateTimeOffset)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="options" Type="Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions" RefType="this" />
          <Parameter Name="absolute" Type="System.DateTimeOffset" />
        </Parameters>
        <Docs>
          <param name="options" />
          <param name="absolute" />
          <summary>
            Sets an absolute expiration date for the cache entry.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions" Member="M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetAbsoluteExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,System.DateTimeOffset)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions" />
      </Targets>
      <Member MemberName="SetAbsoluteExpiration">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions SetAbsoluteExpiration (this Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions options, TimeSpan relative);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions SetAbsoluteExpiration(class Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions options, valuetype System.TimeSpan relative) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetAbsoluteExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,System.TimeSpan)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="options" Type="Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions" RefType="this" />
          <Parameter Name="relative" Type="System.TimeSpan" />
        </Parameters>
        <Docs>
          <param name="options" />
          <param name="relative" />
          <summary>
            Sets an absolute expiration time, relative to now.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions" Member="M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetAbsoluteExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,System.TimeSpan)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions" />
      </Targets>
      <Member MemberName="SetPriority">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions SetPriority (this Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions options, Microsoft.Extensions.Caching.Memory.CacheItemPriority priority);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions SetPriority(class Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions options, valuetype Microsoft.Extensions.Caching.Memory.CacheItemPriority priority) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetPriority(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Caching.Memory.CacheItemPriority)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="options" Type="Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions" RefType="this" />
          <Parameter Name="priority" Type="Microsoft.Extensions.Caching.Memory.CacheItemPriority" />
        </Parameters>
        <Docs>
          <param name="options" />
          <param name="priority" />
          <summary>
            Sets the priority for keeping the cache entry in the cache during a memory pressure tokened cleanup.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions" Member="M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetPriority(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Caching.Memory.CacheItemPriority)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions" />
      </Targets>
      <Member MemberName="SetSize">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions SetSize (this Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions options, long size);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions SetSize(class Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions options, int64 size) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetSize(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,System.Int64)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="options" Type="Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions" RefType="this" />
          <Parameter Name="size" Type="System.Int64" />
        </Parameters>
        <Docs>
          <param name="options" />
          <param name="size" />
          <summary>
            Sets the size of the cache entry value.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions" Member="M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetSize(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,System.Int64)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions" />
      </Targets>
      <Member MemberName="SetSlidingExpiration">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions SetSlidingExpiration (this Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions options, TimeSpan offset);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions SetSlidingExpiration(class Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions options, valuetype System.TimeSpan offset) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetSlidingExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,System.TimeSpan)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="options" Type="Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions" RefType="this" />
          <Parameter Name="offset" Type="System.TimeSpan" />
        </Parameters>
        <Docs>
          <param name="options" />
          <param name="offset" />
          <summary>
            Sets how long the cache entry can be inactive (e.g. not accessed) before it will be removed.
            This will not extend the entry lifetime beyond the absolute expiration (if set).
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions" Member="M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetSlidingExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,System.TimeSpan)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="AddAzureKeyVault">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddAzureKeyVault (this Microsoft.Extensions.Configuration.IConfigurationBuilder configurationBuilder, string vault, Microsoft.Azure.KeyVault.KeyVaultClient client, Microsoft.Extensions.Configuration.AzureKeyVault.IKeyVaultSecretManager manager);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddAzureKeyVault(class Microsoft.Extensions.Configuration.IConfigurationBuilder configurationBuilder, string vault, class Microsoft.Azure.KeyVault.KeyVaultClient client, class Microsoft.Extensions.Configuration.AzureKeyVault.IKeyVaultSecretManager manager) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.AzureKeyVaultConfigurationExtensions.AddAzureKeyVault(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Extensions.Configuration.AzureKeyVault.IKeyVaultSecretManager)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="configurationBuilder" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
          <Parameter Name="vault" Type="System.String" />
          <Parameter Name="client" Type="Microsoft.Azure.KeyVault.KeyVaultClient" />
          <Parameter Name="manager" Type="Microsoft.Extensions.Configuration.AzureKeyVault.IKeyVaultSecretManager" />
        </Parameters>
        <Docs>
          <param name="configurationBuilder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
          <param name="vault">Azure KeyVault uri.</param>
          <param name="client">The <see cref="T:Microsoft.Azure.KeyVault.KeyVaultClient" /> to use for retrieving values.</param>
          <param name="manager">The <see cref="T:Microsoft.Extensions.Configuration.AzureKeyVault.IKeyVaultSecretManager" /> instance used to control secret loading.</param>
          <summary>
            Adds an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" /> that reads configuration values from the Azure KeyVault.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.AzureKeyVaultConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.AzureKeyVaultConfigurationExtensions.AddAzureKeyVault(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Extensions.Configuration.AzureKeyVault.IKeyVaultSecretManager)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="AddAzureKeyVault">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddAzureKeyVault (this Microsoft.Extensions.Configuration.IConfigurationBuilder configurationBuilder, string vault, string clientId, System.Security.Cryptography.X509Certificates.X509Certificate2 certificate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddAzureKeyVault(class Microsoft.Extensions.Configuration.IConfigurationBuilder configurationBuilder, string vault, string clientId, class System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.AzureKeyVaultConfigurationExtensions.AddAzureKeyVault(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,System.String,System.Security.Cryptography.X509Certificates.X509Certificate2)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="configurationBuilder" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
          <Parameter Name="vault" Type="System.String" />
          <Parameter Name="clientId" Type="System.String" />
          <Parameter Name="certificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" />
        </Parameters>
        <Docs>
          <param name="configurationBuilder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
          <param name="vault">Azure KeyVault uri.</param>
          <param name="clientId">The application client id.</param>
          <param name="certificate">The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> to use for authentication.</param>
          <summary>
            Adds an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" /> that reads configuration values from the Azure KeyVault.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.AzureKeyVaultConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.AzureKeyVaultConfigurationExtensions.AddAzureKeyVault(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,System.String,System.Security.Cryptography.X509Certificates.X509Certificate2)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="AddAzureKeyVault">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddAzureKeyVault (this Microsoft.Extensions.Configuration.IConfigurationBuilder configurationBuilder, string vault, string clientId, System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, Microsoft.Extensions.Configuration.AzureKeyVault.IKeyVaultSecretManager manager);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddAzureKeyVault(class Microsoft.Extensions.Configuration.IConfigurationBuilder configurationBuilder, string vault, string clientId, class System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, class Microsoft.Extensions.Configuration.AzureKeyVault.IKeyVaultSecretManager manager) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.AzureKeyVaultConfigurationExtensions.AddAzureKeyVault(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,System.String,System.Security.Cryptography.X509Certificates.X509Certificate2,Microsoft.Extensions.Configuration.AzureKeyVault.IKeyVaultSecretManager)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="configurationBuilder" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
          <Parameter Name="vault" Type="System.String" />
          <Parameter Name="clientId" Type="System.String" />
          <Parameter Name="certificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" />
          <Parameter Name="manager" Type="Microsoft.Extensions.Configuration.AzureKeyVault.IKeyVaultSecretManager" />
        </Parameters>
        <Docs>
          <param name="configurationBuilder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
          <param name="vault">Azure KeyVault uri.</param>
          <param name="clientId">The application client id.</param>
          <param name="certificate">The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> to use for authentication.</param>
          <param name="manager">The <see cref="T:Microsoft.Extensions.Configuration.AzureKeyVault.IKeyVaultSecretManager" /> instance used to control secret loading.</param>
          <summary>
            Adds an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" /> that reads configuration values from the Azure KeyVault.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.AzureKeyVaultConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.AzureKeyVaultConfigurationExtensions.AddAzureKeyVault(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,System.String,System.Security.Cryptography.X509Certificates.X509Certificate2,Microsoft.Extensions.Configuration.AzureKeyVault.IKeyVaultSecretManager)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="AddAzureKeyVault">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddAzureKeyVault (this Microsoft.Extensions.Configuration.IConfigurationBuilder configurationBuilder, string vault, string clientId, string clientSecret);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddAzureKeyVault(class Microsoft.Extensions.Configuration.IConfigurationBuilder configurationBuilder, string vault, string clientId, string clientSecret) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.AzureKeyVaultConfigurationExtensions.AddAzureKeyVault(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="configurationBuilder" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
          <Parameter Name="vault" Type="System.String" />
          <Parameter Name="clientId" Type="System.String" />
          <Parameter Name="clientSecret" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="configurationBuilder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
          <param name="vault">The Azure KeyVault uri.</param>
          <param name="clientId">The application client id.</param>
          <param name="clientSecret">The client secret to use for authentication.</param>
          <summary>
            Adds an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" /> that reads configuration values from the Azure KeyVault.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.AzureKeyVaultConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.AzureKeyVaultConfigurationExtensions.AddAzureKeyVault(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="AddAzureKeyVault">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddAzureKeyVault (this Microsoft.Extensions.Configuration.IConfigurationBuilder configurationBuilder, string vault, string clientId, string clientSecret, Microsoft.Extensions.Configuration.AzureKeyVault.IKeyVaultSecretManager manager);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddAzureKeyVault(class Microsoft.Extensions.Configuration.IConfigurationBuilder configurationBuilder, string vault, string clientId, string clientSecret, class Microsoft.Extensions.Configuration.AzureKeyVault.IKeyVaultSecretManager manager) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.AzureKeyVaultConfigurationExtensions.AddAzureKeyVault(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,System.String,System.String,Microsoft.Extensions.Configuration.AzureKeyVault.IKeyVaultSecretManager)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="configurationBuilder" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
          <Parameter Name="vault" Type="System.String" />
          <Parameter Name="clientId" Type="System.String" />
          <Parameter Name="clientSecret" Type="System.String" />
          <Parameter Name="manager" Type="Microsoft.Extensions.Configuration.AzureKeyVault.IKeyVaultSecretManager" />
        </Parameters>
        <Docs>
          <param name="configurationBuilder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
          <param name="vault">The Azure KeyVault uri.</param>
          <param name="clientId">The application client id.</param>
          <param name="clientSecret">The client secret to use for authentication.</param>
          <param name="manager">The <see cref="T:Microsoft.Extensions.Configuration.AzureKeyVault.IKeyVaultSecretManager" /> instance used to control secret loading.</param>
          <summary>
            Adds an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" /> that reads configuration values from the Azure KeyVault.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.AzureKeyVaultConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.AzureKeyVaultConfigurationExtensions.AddAzureKeyVault(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,System.String,System.String,Microsoft.Extensions.Configuration.AzureKeyVault.IKeyVaultSecretManager)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="AddCommandLine">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddCommandLine (this Microsoft.Extensions.Configuration.IConfigurationBuilder builder, Action&lt;Microsoft.Extensions.Configuration.CommandLine.CommandLineConfigurationSource&gt; configureSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddCommandLine(class Microsoft.Extensions.Configuration.IConfigurationBuilder builder, class System.Action`1&lt;class Microsoft.Extensions.Configuration.CommandLine.CommandLineConfigurationSource&gt; configureSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions.AddCommandLine(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Action{Microsoft.Extensions.Configuration.CommandLine.CommandLineConfigurationSource})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
          <Parameter Name="configureSource" Type="System.Action&lt;Microsoft.Extensions.Configuration.CommandLine.CommandLineConfigurationSource&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
          <param name="configureSource">Configures the source.</param>
          <summary>
            Adds an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" /> that reads configuration values from the command line.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions.AddCommandLine(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Action{Microsoft.Extensions.Configuration.CommandLine.CommandLineConfigurationSource})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="AddCommandLine">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddCommandLine (this Microsoft.Extensions.Configuration.IConfigurationBuilder configurationBuilder, string[] args);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddCommandLine(class Microsoft.Extensions.Configuration.IConfigurationBuilder configurationBuilder, string[] args) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions.AddCommandLine(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="configurationBuilder" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
          <Parameter Name="args" Type="System.String[]" />
        </Parameters>
        <Docs>
          <param name="configurationBuilder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
          <param name="args">The command line args.</param>
          <summary>
            Adds an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" /> that reads configuration values from the command line.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions.AddCommandLine(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="AddCommandLine">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddCommandLine (this Microsoft.Extensions.Configuration.IConfigurationBuilder configurationBuilder, string[] args, System.Collections.Generic.IDictionary&lt;string,string&gt; switchMappings);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddCommandLine(class Microsoft.Extensions.Configuration.IConfigurationBuilder configurationBuilder, string[] args, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; switchMappings) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions.AddCommandLine(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String[],System.Collections.Generic.IDictionary{System.String,System.String})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="configurationBuilder" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
          <Parameter Name="args" Type="System.String[]" />
          <Parameter Name="switchMappings" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        </Parameters>
        <Docs>
          <param name="configurationBuilder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
          <param name="args">The command line args.</param>
          <param name="switchMappings">The switch mappings.</param>
          <summary>
            Adds an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" /> that reads configuration values from the command line using the specified switch mappings.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions.AddCommandLine(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String[],System.Collections.Generic.IDictionary{System.String,System.String})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfiguration" />
      </Targets>
      <Member MemberName="Bind">
        <MemberSignature Language="C#" Value="public static void Bind (this Microsoft.Extensions.Configuration.IConfiguration configuration, object instance);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Bind(class Microsoft.Extensions.Configuration.IConfiguration configuration, object instance) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.ConfigurationBinder.Bind(Microsoft.Extensions.Configuration.IConfiguration,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="configuration" Type="Microsoft.Extensions.Configuration.IConfiguration" RefType="this" />
          <Parameter Name="instance" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="configuration">The configuration instance to bind.</param>
          <param name="instance">The object to bind.</param>
          <summary>
            Attempts to bind the given object instance to configuration values by matching property names against configuration keys recursively.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.ConfigurationBinder" Member="M:Microsoft.Extensions.Configuration.ConfigurationBinder.Bind(Microsoft.Extensions.Configuration.IConfiguration,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfiguration" />
      </Targets>
      <Member MemberName="Bind">
        <MemberSignature Language="C#" Value="public static void Bind (this Microsoft.Extensions.Configuration.IConfiguration configuration, string key, object instance);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Bind(class Microsoft.Extensions.Configuration.IConfiguration configuration, string key, object instance) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.ConfigurationBinder.Bind(Microsoft.Extensions.Configuration.IConfiguration,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="configuration" Type="Microsoft.Extensions.Configuration.IConfiguration" RefType="this" />
          <Parameter Name="key" Type="System.String" />
          <Parameter Name="instance" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="configuration">The configuration instance to bind.</param>
          <param name="key">The key of the configuration section to bind.</param>
          <param name="instance">The object to bind.</param>
          <summary>
            Attempts to bind the given object instance to the configuration section specified by the key by matching property names against configuration keys recursively.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.ConfigurationBinder" Member="M:Microsoft.Extensions.Configuration.ConfigurationBinder.Bind(Microsoft.Extensions.Configuration.IConfiguration,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfiguration" />
      </Targets>
      <Member MemberName="Get">
        <MemberSignature Language="C#" Value="public static object Get (this Microsoft.Extensions.Configuration.IConfiguration configuration, Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Get(class Microsoft.Extensions.Configuration.IConfiguration configuration, class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.ConfigurationBinder.Get(Microsoft.Extensions.Configuration.IConfiguration,System.Type)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Object</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="configuration" Type="Microsoft.Extensions.Configuration.IConfiguration" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="configuration">The configuration instance to bind.</param>
          <param name="type">The type of the new instance to bind.</param>
          <summary>
            Attempts to bind the configuration instance to a new instance of type T.
            If this configuration section has a value, that will be used.
            Otherwise binding by matching property names against configuration keys recursively.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.ConfigurationBinder" Member="M:Microsoft.Extensions.Configuration.ConfigurationBinder.Get(Microsoft.Extensions.Configuration.IConfiguration,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfiguration" />
      </Targets>
      <Member MemberName="Get&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T Get&lt;T&gt; (this Microsoft.Extensions.Configuration.IConfiguration configuration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Get&lt;T&gt;(class Microsoft.Extensions.Configuration.IConfiguration configuration) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.ConfigurationBinder.Get``1(Microsoft.Extensions.Configuration.IConfiguration)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="configuration" Type="Microsoft.Extensions.Configuration.IConfiguration" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the new instance to bind.</typeparam>
          <param name="configuration">The configuration instance to bind.</param>
          <summary>
            Attempts to bind the configuration instance to a new instance of type T.
            If this configuration section has a value, that will be used.
            Otherwise binding by matching property names against configuration keys recursively.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.ConfigurationBinder" Member="M:Microsoft.Extensions.Configuration.ConfigurationBinder.Get``1(Microsoft.Extensions.Configuration.IConfiguration)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfiguration" />
      </Targets>
      <Member MemberName="GetValue">
        <MemberSignature Language="C#" Value="public static object GetValue (this Microsoft.Extensions.Configuration.IConfiguration configuration, Type type, string key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetValue(class Microsoft.Extensions.Configuration.IConfiguration configuration, class System.Type type, string key) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue(Microsoft.Extensions.Configuration.IConfiguration,System.Type,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Object</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="configuration" Type="Microsoft.Extensions.Configuration.IConfiguration" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
          <Parameter Name="key" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="configuration">The configuration.</param>
          <param name="type">The type to convert the value to.</param>
          <param name="key">The configuration key for the value to convert.</param>
          <summary>
            Extracts the value with the specified key and converts it to the specified type.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.ConfigurationBinder" Member="M:Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue(Microsoft.Extensions.Configuration.IConfiguration,System.Type,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfiguration" />
      </Targets>
      <Member MemberName="GetValue">
        <MemberSignature Language="C#" Value="public static object GetValue (this Microsoft.Extensions.Configuration.IConfiguration configuration, Type type, string key, object defaultValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetValue(class Microsoft.Extensions.Configuration.IConfiguration configuration, class System.Type type, string key, object defaultValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue(Microsoft.Extensions.Configuration.IConfiguration,System.Type,System.String,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Object</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="configuration" Type="Microsoft.Extensions.Configuration.IConfiguration" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
          <Parameter Name="key" Type="System.String" />
          <Parameter Name="defaultValue" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="configuration">The configuration.</param>
          <param name="type">The type to convert the value to.</param>
          <param name="key">The configuration key for the value to convert.</param>
          <param name="defaultValue">The default value to use if no value is found.</param>
          <summary>
            Extracts the value with the specified key and converts it to the specified type.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.ConfigurationBinder" Member="M:Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue(Microsoft.Extensions.Configuration.IConfiguration,System.Type,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfiguration" />
      </Targets>
      <Member MemberName="GetValue&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T GetValue&lt;T&gt; (this Microsoft.Extensions.Configuration.IConfiguration configuration, string key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetValue&lt;T&gt;(class Microsoft.Extensions.Configuration.IConfiguration configuration, string key) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue``1(Microsoft.Extensions.Configuration.IConfiguration,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="configuration" Type="Microsoft.Extensions.Configuration.IConfiguration" RefType="this" />
          <Parameter Name="key" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type to convert the value to.</typeparam>
          <param name="configuration">The configuration.</param>
          <param name="key">The configuration key for the value to convert.</param>
          <summary>
            Extracts the value with the specified key and converts it to type T.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.ConfigurationBinder" Member="M:Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue``1(Microsoft.Extensions.Configuration.IConfiguration,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfiguration" />
      </Targets>
      <Member MemberName="GetValue&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T GetValue&lt;T&gt; (this Microsoft.Extensions.Configuration.IConfiguration configuration, string key, T defaultValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetValue&lt;T&gt;(class Microsoft.Extensions.Configuration.IConfiguration configuration, string key, !!T defaultValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue``1(Microsoft.Extensions.Configuration.IConfiguration,System.String,``0)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="configuration" Type="Microsoft.Extensions.Configuration.IConfiguration" RefType="this" />
          <Parameter Name="key" Type="System.String" />
          <Parameter Name="defaultValue" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type to convert the value to.</typeparam>
          <param name="configuration">The configuration.</param>
          <param name="key">The configuration key for the value to convert.</param>
          <param name="defaultValue">The default value to use if no value is found.</param>
          <summary>
            Extracts the value with the specified key and converts it to type T.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.ConfigurationBinder" Member="M:Microsoft.Extensions.Configuration.ConfigurationBinder.GetValue``1(Microsoft.Extensions.Configuration.IConfiguration,System.String,``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="Add&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder Add&lt;TSource&gt; (this Microsoft.Extensions.Configuration.IConfigurationBuilder builder, Action&lt;TSource&gt; configureSource) where TSource : Microsoft.Extensions.Configuration.IConfigurationSourcenew();" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder Add&lt;.ctor (class Microsoft.Extensions.Configuration.IConfigurationSource) TSource&gt;(class Microsoft.Extensions.Configuration.IConfigurationBuilder builder, class System.Action`1&lt;!!TSource&gt; configureSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.ConfigurationExtensions.Add``1(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Action{``0})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <InterfaceName>Microsoft.Extensions.Configuration.IConfigurationSource</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
          <Parameter Name="configureSource" Type="System.Action&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
          <param name="configureSource">Configures the source secrets.</param>
          <summary>
            Adds a new configuration source.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.ConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.ConfigurationExtensions.Add``1(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Action{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="AddUserSecrets">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddUserSecrets (this Microsoft.Extensions.Configuration.IConfigurationBuilder configuration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddUserSecrets(class Microsoft.Extensions.Configuration.IConfigurationBuilder configuration) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.ConfigurationExtensions.AddUserSecrets(Microsoft.Extensions.Configuration.IConfigurationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="configuration" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="configuration" />
          <summary>
            Adds the user secrets configuration source.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.ConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.ConfigurationExtensions.AddUserSecrets(Microsoft.Extensions.Configuration.IConfigurationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="AddUserSecrets">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddUserSecrets (this Microsoft.Extensions.Configuration.IConfigurationBuilder configuration, System.Reflection.Assembly assembly);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddUserSecrets(class Microsoft.Extensions.Configuration.IConfigurationBuilder configuration, class System.Reflection.Assembly assembly) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.ConfigurationExtensions.AddUserSecrets(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Reflection.Assembly)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="configuration" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
          <Parameter Name="assembly" Type="System.Reflection.Assembly" />
        </Parameters>
        <Docs>
          <param name="configuration" />
          <param name="assembly">The assembly with the <see cref="T:Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute" /></param>
          <summary>
            Adds the user secrets configuration source.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.ConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.ConfigurationExtensions.AddUserSecrets(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Reflection.Assembly)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="AddUserSecrets">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddUserSecrets (this Microsoft.Extensions.Configuration.IConfigurationBuilder configuration, string userSecretsId);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddUserSecrets(class Microsoft.Extensions.Configuration.IConfigurationBuilder configuration, string userSecretsId) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.ConfigurationExtensions.AddUserSecrets(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="configuration" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
          <Parameter Name="userSecretsId" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="configuration" />
          <param name="userSecretsId" />
          <summary>
            Adds the user secrets configuration source with specified secrets id.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.ConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.ConfigurationExtensions.AddUserSecrets(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="AddUserSecrets&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddUserSecrets&lt;T&gt; (this Microsoft.Extensions.Configuration.IConfigurationBuilder configuration) where T : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddUserSecrets&lt;class T&gt;(class Microsoft.Extensions.Configuration.IConfigurationBuilder configuration) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.ConfigurationExtensions.AddUserSecrets``1(Microsoft.Extensions.Configuration.IConfigurationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="configuration" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type from the assembly to search for an instance of <see cref="T:Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute" />.</typeparam>
          <param name="configuration" />
          <summary>
            Adds the user secrets configuration source. Searches the assembly that contains type <typeparamref name="T" />
            for an instance of <see cref="T:Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.ConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.ConfigurationExtensions.AddUserSecrets``1(Microsoft.Extensions.Configuration.IConfigurationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfiguration" />
      </Targets>
      <Member MemberName="AsEnumerable">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,string&gt;&gt; AsEnumerable (this Microsoft.Extensions.Configuration.IConfiguration configuration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, string&gt;&gt; AsEnumerable(class Microsoft.Extensions.Configuration.IConfiguration configuration) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.ConfigurationExtensions.AsEnumerable(Microsoft.Extensions.Configuration.IConfiguration)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.String&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="configuration" Type="Microsoft.Extensions.Configuration.IConfiguration" RefType="this" />
        </Parameters>
        <Docs>
          <param name="configuration">The <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> to enumerate.</param>
          <summary>
            Get the enumeration of key value pairs within the <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /></summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.ConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.ConfigurationExtensions.AsEnumerable(Microsoft.Extensions.Configuration.IConfiguration)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfiguration" />
      </Targets>
      <Member MemberName="AsEnumerable">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,string&gt;&gt; AsEnumerable (this Microsoft.Extensions.Configuration.IConfiguration configuration, bool makePathsRelative);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, string&gt;&gt; AsEnumerable(class Microsoft.Extensions.Configuration.IConfiguration configuration, bool makePathsRelative) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.ConfigurationExtensions.AsEnumerable(Microsoft.Extensions.Configuration.IConfiguration,System.Boolean)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.String&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="configuration" Type="Microsoft.Extensions.Configuration.IConfiguration" RefType="this" />
          <Parameter Name="makePathsRelative" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="configuration">The <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> to enumerate.</param>
          <param name="makePathsRelative">If true, the child keys returned will have the current configuration's Path trimmed from the front.</param>
          <summary>
            Get the enumeration of key value pairs within the <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /></summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.ConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.ConfigurationExtensions.AsEnumerable(Microsoft.Extensions.Configuration.IConfiguration,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationSection" />
      </Targets>
      <Member MemberName="Exists">
        <MemberSignature Language="C#" Value="public static bool Exists (this Microsoft.Extensions.Configuration.IConfigurationSection section);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Exists(class Microsoft.Extensions.Configuration.IConfigurationSection section) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.ConfigurationExtensions.Exists(Microsoft.Extensions.Configuration.IConfigurationSection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="section" Type="Microsoft.Extensions.Configuration.IConfigurationSection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="section">To be added.</param>
          <summary>
            Determines whether the section has a <see cref="P:Microsoft.Extensions.Configuration.IConfigurationSection.Value" /> or has children 
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.ConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.ConfigurationExtensions.Exists(Microsoft.Extensions.Configuration.IConfigurationSection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfiguration" />
      </Targets>
      <Member MemberName="GetConnectionString">
        <MemberSignature Language="C#" Value="public static string GetConnectionString (this Microsoft.Extensions.Configuration.IConfiguration configuration, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetConnectionString(class Microsoft.Extensions.Configuration.IConfiguration configuration, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.ConfigurationExtensions.GetConnectionString(Microsoft.Extensions.Configuration.IConfiguration,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="configuration" Type="Microsoft.Extensions.Configuration.IConfiguration" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="configuration">The configuration.</param>
          <param name="name">The connection string key.</param>
          <summary>
            Shorthand for GetSection("ConnectionStrings")[name].
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.ConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.ConfigurationExtensions.GetConnectionString(Microsoft.Extensions.Configuration.IConfiguration,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="AddEnvironmentVariables">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddEnvironmentVariables (this Microsoft.Extensions.Configuration.IConfigurationBuilder configurationBuilder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddEnvironmentVariables(class Microsoft.Extensions.Configuration.IConfigurationBuilder configurationBuilder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions.AddEnvironmentVariables(Microsoft.Extensions.Configuration.IConfigurationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="configurationBuilder" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="configurationBuilder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
          <summary>
            Adds an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" /> that reads configuration values from environment variables.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions" Member="M:Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions.AddEnvironmentVariables(Microsoft.Extensions.Configuration.IConfigurationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="AddEnvironmentVariables">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddEnvironmentVariables (this Microsoft.Extensions.Configuration.IConfigurationBuilder builder, Action&lt;Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationSource&gt; configureSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddEnvironmentVariables(class Microsoft.Extensions.Configuration.IConfigurationBuilder builder, class System.Action`1&lt;class Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationSource&gt; configureSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions.AddEnvironmentVariables(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Action{Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationSource})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
          <Parameter Name="configureSource" Type="System.Action&lt;Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationSource&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
          <param name="configureSource">Configures the source.</param>
          <summary>
            Adds an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" /> that reads configuration values from environment variables.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions" Member="M:Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions.AddEnvironmentVariables(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Action{Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationSource})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="AddEnvironmentVariables">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddEnvironmentVariables (this Microsoft.Extensions.Configuration.IConfigurationBuilder configurationBuilder, string prefix);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddEnvironmentVariables(class Microsoft.Extensions.Configuration.IConfigurationBuilder configurationBuilder, string prefix) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions.AddEnvironmentVariables(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="configurationBuilder" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
          <Parameter Name="prefix" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="configurationBuilder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
          <param name="prefix">The prefix that environment variable names must start with.</param>
          <summary>
            Adds an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" /> that reads configuration values from environment variables
            with a specified prefix.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions" Member="M:Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions.AddEnvironmentVariables(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="GetFileLoadExceptionHandler">
        <MemberSignature Language="C#" Value="public static Action&lt;Microsoft.Extensions.Configuration.FileLoadExceptionContext&gt; GetFileLoadExceptionHandler (this Microsoft.Extensions.Configuration.IConfigurationBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Action`1&lt;class Microsoft.Extensions.Configuration.FileLoadExceptionContext&gt; GetFileLoadExceptionHandler(class Microsoft.Extensions.Configuration.IConfigurationBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.FileConfigurationExtensions.GetFileLoadExceptionHandler(Microsoft.Extensions.Configuration.IConfigurationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Action&lt;Microsoft.Extensions.Configuration.FileLoadExceptionContext&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.</param>
          <summary>
            Gets the default <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider" /> to be used for file-based providers.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.FileConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.FileConfigurationExtensions.GetFileLoadExceptionHandler(Microsoft.Extensions.Configuration.IConfigurationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="GetFileProvider">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.FileProviders.IFileProvider GetFileProvider (this Microsoft.Extensions.Configuration.IConfigurationBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.FileProviders.IFileProvider GetFileProvider(class Microsoft.Extensions.Configuration.IConfigurationBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.FileConfigurationExtensions.GetFileProvider(Microsoft.Extensions.Configuration.IConfigurationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.FileProviders.IFileProvider</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.</param>
          <summary>
            Gets the default <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider" /> to be used for file-based providers.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.FileConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.FileConfigurationExtensions.GetFileProvider(Microsoft.Extensions.Configuration.IConfigurationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="SetBasePath">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder SetBasePath (this Microsoft.Extensions.Configuration.IConfigurationBuilder builder, string basePath);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder SetBasePath(class Microsoft.Extensions.Configuration.IConfigurationBuilder builder, string basePath) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.FileConfigurationExtensions.SetBasePath(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
          <Parameter Name="basePath" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
          <param name="basePath">The absolute path of file-based providers.</param>
          <summary>
            Sets the FileProvider for file-based providers to a PhysicalFileProvider with the base path.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.FileConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.FileConfigurationExtensions.SetBasePath(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="SetFileLoadExceptionHandler">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder SetFileLoadExceptionHandler (this Microsoft.Extensions.Configuration.IConfigurationBuilder builder, Action&lt;Microsoft.Extensions.Configuration.FileLoadExceptionContext&gt; handler);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder SetFileLoadExceptionHandler(class Microsoft.Extensions.Configuration.IConfigurationBuilder builder, class System.Action`1&lt;class Microsoft.Extensions.Configuration.FileLoadExceptionContext&gt; handler) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.FileConfigurationExtensions.SetFileLoadExceptionHandler(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Action{Microsoft.Extensions.Configuration.FileLoadExceptionContext})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
          <Parameter Name="handler" Type="System.Action&lt;Microsoft.Extensions.Configuration.FileLoadExceptionContext&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
          <param name="handler">The Action to be invoked on a file load exception.</param>
          <summary>
            Sets a default action to be invoked for file-based providers when an error occurs.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.FileConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.FileConfigurationExtensions.SetFileLoadExceptionHandler(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Action{Microsoft.Extensions.Configuration.FileLoadExceptionContext})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="SetFileProvider">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder SetFileProvider (this Microsoft.Extensions.Configuration.IConfigurationBuilder builder, Microsoft.Extensions.FileProviders.IFileProvider fileProvider);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder SetFileProvider(class Microsoft.Extensions.Configuration.IConfigurationBuilder builder, class Microsoft.Extensions.FileProviders.IFileProvider fileProvider) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.FileConfigurationExtensions.SetFileProvider(Microsoft.Extensions.Configuration.IConfigurationBuilder,Microsoft.Extensions.FileProviders.IFileProvider)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
          <Parameter Name="fileProvider" Type="Microsoft.Extensions.FileProviders.IFileProvider" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
          <param name="fileProvider">The default file provider instance.</param>
          <summary>
            Sets the default <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider" /> to be used for file-based providers.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.FileConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.FileConfigurationExtensions.SetFileProvider(Microsoft.Extensions.Configuration.IConfigurationBuilder,Microsoft.Extensions.FileProviders.IFileProvider)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="AddIniFile">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddIniFile (this Microsoft.Extensions.Configuration.IConfigurationBuilder builder, Microsoft.Extensions.FileProviders.IFileProvider provider, string path, bool optional, bool reloadOnChange);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddIniFile(class Microsoft.Extensions.Configuration.IConfigurationBuilder builder, class Microsoft.Extensions.FileProviders.IFileProvider provider, string path, bool optional, bool reloadOnChange) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.IniConfigurationExtensions.AddIniFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,Microsoft.Extensions.FileProviders.IFileProvider,System.String,System.Boolean,System.Boolean)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
          <Parameter Name="provider" Type="Microsoft.Extensions.FileProviders.IFileProvider" />
          <Parameter Name="path" Type="System.String" />
          <Parameter Name="optional" Type="System.Boolean" />
          <Parameter Name="reloadOnChange" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
          <param name="provider">The <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider" /> to use to access the file.</param>
          <param name="path">Path relative to the base path stored in 
            <see cref="P:Microsoft.Extensions.Configuration.IConfigurationBuilder.Properties" /> of <paramref name="builder" />.</param>
          <param name="optional">Whether the file is optional.</param>
          <param name="reloadOnChange">Whether the configuration should be reloaded if the file changes.</param>
          <summary>
            Adds a INI configuration source to <paramref name="builder" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.IniConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.IniConfigurationExtensions.AddIniFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,Microsoft.Extensions.FileProviders.IFileProvider,System.String,System.Boolean,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="AddIniFile">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddIniFile (this Microsoft.Extensions.Configuration.IConfigurationBuilder builder, Action&lt;Microsoft.Extensions.Configuration.Ini.IniConfigurationSource&gt; configureSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddIniFile(class Microsoft.Extensions.Configuration.IConfigurationBuilder builder, class System.Action`1&lt;class Microsoft.Extensions.Configuration.Ini.IniConfigurationSource&gt; configureSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.IniConfigurationExtensions.AddIniFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Action{Microsoft.Extensions.Configuration.Ini.IniConfigurationSource})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
          <Parameter Name="configureSource" Type="System.Action&lt;Microsoft.Extensions.Configuration.Ini.IniConfigurationSource&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
          <param name="configureSource">Configures the source.</param>
          <summary>
            Adds a INI configuration source to <paramref name="builder" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.IniConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.IniConfigurationExtensions.AddIniFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Action{Microsoft.Extensions.Configuration.Ini.IniConfigurationSource})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="AddIniFile">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddIniFile (this Microsoft.Extensions.Configuration.IConfigurationBuilder builder, string path);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddIniFile(class Microsoft.Extensions.Configuration.IConfigurationBuilder builder, string path) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.IniConfigurationExtensions.AddIniFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
          <Parameter Name="path" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
          <param name="path">Path relative to the base path stored in
            <see cref="P:Microsoft.Extensions.Configuration.IConfigurationBuilder.Properties" /> of <paramref name="builder" />.</param>
          <summary>
            Adds the INI configuration provider at <paramref name="path" /> to <paramref name="builder" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.IniConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.IniConfigurationExtensions.AddIniFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="AddIniFile">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddIniFile (this Microsoft.Extensions.Configuration.IConfigurationBuilder builder, string path, bool optional);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddIniFile(class Microsoft.Extensions.Configuration.IConfigurationBuilder builder, string path, bool optional) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.IniConfigurationExtensions.AddIniFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,System.Boolean)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
          <Parameter Name="path" Type="System.String" />
          <Parameter Name="optional" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
          <param name="path">Path relative to the base path stored in 
            <see cref="P:Microsoft.Extensions.Configuration.IConfigurationBuilder.Properties" /> of <paramref name="builder" />.</param>
          <param name="optional">Whether the file is optional.</param>
          <summary>
            Adds the INI configuration provider at <paramref name="path" /> to <paramref name="builder" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.IniConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.IniConfigurationExtensions.AddIniFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="AddIniFile">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddIniFile (this Microsoft.Extensions.Configuration.IConfigurationBuilder builder, string path, bool optional, bool reloadOnChange);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddIniFile(class Microsoft.Extensions.Configuration.IConfigurationBuilder builder, string path, bool optional, bool reloadOnChange) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.IniConfigurationExtensions.AddIniFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,System.Boolean,System.Boolean)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
          <Parameter Name="path" Type="System.String" />
          <Parameter Name="optional" Type="System.Boolean" />
          <Parameter Name="reloadOnChange" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
          <param name="path">Path relative to the base path stored in 
            <see cref="P:Microsoft.Extensions.Configuration.IConfigurationBuilder.Properties" /> of <paramref name="builder" />.</param>
          <param name="optional">Whether the file is optional.</param>
          <param name="reloadOnChange">Whether the configuration should be reloaded if the file changes.</param>
          <summary>
            Adds the INI configuration provider at <paramref name="path" /> to <paramref name="builder" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.IniConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.IniConfigurationExtensions.AddIniFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,System.Boolean,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="AddJsonFile">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddJsonFile (this Microsoft.Extensions.Configuration.IConfigurationBuilder builder, Microsoft.Extensions.FileProviders.IFileProvider provider, string path, bool optional, bool reloadOnChange);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddJsonFile(class Microsoft.Extensions.Configuration.IConfigurationBuilder builder, class Microsoft.Extensions.FileProviders.IFileProvider provider, string path, bool optional, bool reloadOnChange) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.JsonConfigurationExtensions.AddJsonFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,Microsoft.Extensions.FileProviders.IFileProvider,System.String,System.Boolean,System.Boolean)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
          <Parameter Name="provider" Type="Microsoft.Extensions.FileProviders.IFileProvider" />
          <Parameter Name="path" Type="System.String" />
          <Parameter Name="optional" Type="System.Boolean" />
          <Parameter Name="reloadOnChange" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
          <param name="provider">The <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider" /> to use to access the file.</param>
          <param name="path">Path relative to the base path stored in 
            <see cref="P:Microsoft.Extensions.Configuration.IConfigurationBuilder.Properties" /> of <paramref name="builder" />.</param>
          <param name="optional">Whether the file is optional.</param>
          <param name="reloadOnChange">Whether the configuration should be reloaded if the file changes.</param>
          <summary>
            Adds a JSON configuration source to <paramref name="builder" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.JsonConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.JsonConfigurationExtensions.AddJsonFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,Microsoft.Extensions.FileProviders.IFileProvider,System.String,System.Boolean,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="AddJsonFile">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddJsonFile (this Microsoft.Extensions.Configuration.IConfigurationBuilder builder, Action&lt;Microsoft.Extensions.Configuration.Json.JsonConfigurationSource&gt; configureSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddJsonFile(class Microsoft.Extensions.Configuration.IConfigurationBuilder builder, class System.Action`1&lt;class Microsoft.Extensions.Configuration.Json.JsonConfigurationSource&gt; configureSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.JsonConfigurationExtensions.AddJsonFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Action{Microsoft.Extensions.Configuration.Json.JsonConfigurationSource})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
          <Parameter Name="configureSource" Type="System.Action&lt;Microsoft.Extensions.Configuration.Json.JsonConfigurationSource&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
          <param name="configureSource">Configures the source.</param>
          <summary>
            Adds a JSON configuration source to <paramref name="builder" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.JsonConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.JsonConfigurationExtensions.AddJsonFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Action{Microsoft.Extensions.Configuration.Json.JsonConfigurationSource})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="AddJsonFile">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddJsonFile (this Microsoft.Extensions.Configuration.IConfigurationBuilder builder, string path);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddJsonFile(class Microsoft.Extensions.Configuration.IConfigurationBuilder builder, string path) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.JsonConfigurationExtensions.AddJsonFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
          <Parameter Name="path" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
          <param name="path">Path relative to the base path stored in 
            <see cref="P:Microsoft.Extensions.Configuration.IConfigurationBuilder.Properties" /> of <paramref name="builder" />.</param>
          <summary>
            Adds the JSON configuration provider at <paramref name="path" /> to <paramref name="builder" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.JsonConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.JsonConfigurationExtensions.AddJsonFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="AddJsonFile">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddJsonFile (this Microsoft.Extensions.Configuration.IConfigurationBuilder builder, string path, bool optional);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddJsonFile(class Microsoft.Extensions.Configuration.IConfigurationBuilder builder, string path, bool optional) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.JsonConfigurationExtensions.AddJsonFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,System.Boolean)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
          <Parameter Name="path" Type="System.String" />
          <Parameter Name="optional" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
          <param name="path">Path relative to the base path stored in 
            <see cref="P:Microsoft.Extensions.Configuration.IConfigurationBuilder.Properties" /> of <paramref name="builder" />.</param>
          <param name="optional">Whether the file is optional.</param>
          <summary>
            Adds the JSON configuration provider at <paramref name="path" /> to <paramref name="builder" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.JsonConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.JsonConfigurationExtensions.AddJsonFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="AddJsonFile">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddJsonFile (this Microsoft.Extensions.Configuration.IConfigurationBuilder builder, string path, bool optional, bool reloadOnChange);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddJsonFile(class Microsoft.Extensions.Configuration.IConfigurationBuilder builder, string path, bool optional, bool reloadOnChange) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.JsonConfigurationExtensions.AddJsonFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,System.Boolean,System.Boolean)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
          <Parameter Name="path" Type="System.String" />
          <Parameter Name="optional" Type="System.Boolean" />
          <Parameter Name="reloadOnChange" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
          <param name="path">Path relative to the base path stored in 
            <see cref="P:Microsoft.Extensions.Configuration.IConfigurationBuilder.Properties" /> of <paramref name="builder" />.</param>
          <param name="optional">Whether the file is optional.</param>
          <param name="reloadOnChange">Whether the configuration should be reloaded if the file changes.</param>
          <summary>
            Adds the JSON configuration provider at <paramref name="path" /> to <paramref name="builder" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.JsonConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.JsonConfigurationExtensions.AddJsonFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,System.Boolean,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="AddInMemoryCollection">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddInMemoryCollection (this Microsoft.Extensions.Configuration.IConfigurationBuilder configurationBuilder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddInMemoryCollection(class Microsoft.Extensions.Configuration.IConfigurationBuilder configurationBuilder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.MemoryConfigurationBuilderExtensions.AddInMemoryCollection(Microsoft.Extensions.Configuration.IConfigurationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="configurationBuilder" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="configurationBuilder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
          <summary>
            Adds the memory configuration provider to <paramref name="configurationBuilder" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.MemoryConfigurationBuilderExtensions" Member="M:Microsoft.Extensions.Configuration.MemoryConfigurationBuilderExtensions.AddInMemoryCollection(Microsoft.Extensions.Configuration.IConfigurationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="AddInMemoryCollection">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddInMemoryCollection (this Microsoft.Extensions.Configuration.IConfigurationBuilder configurationBuilder, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,string&gt;&gt; initialData);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddInMemoryCollection(class Microsoft.Extensions.Configuration.IConfigurationBuilder configurationBuilder, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, string&gt;&gt; initialData) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.MemoryConfigurationBuilderExtensions.AddInMemoryCollection(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="configurationBuilder" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
          <Parameter Name="initialData" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.String&gt;&gt;" />
        </Parameters>
        <Docs>
          <param name="configurationBuilder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
          <param name="initialData">The data to add to memory configuration provider.</param>
          <summary>
            Adds the memory configuration provider to <paramref name="configurationBuilder" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.MemoryConfigurationBuilderExtensions" Member="M:Microsoft.Extensions.Configuration.MemoryConfigurationBuilderExtensions.AddInMemoryCollection(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="AddUserSecrets">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddUserSecrets (this Microsoft.Extensions.Configuration.IConfigurationBuilder configuration, System.Reflection.Assembly assembly);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddUserSecrets(class Microsoft.Extensions.Configuration.IConfigurationBuilder configuration, class System.Reflection.Assembly assembly) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.UserSecretsConfigurationExtensions.AddUserSecrets(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Reflection.Assembly)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="configuration" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
          <Parameter Name="assembly" Type="System.Reflection.Assembly" />
        </Parameters>
        <Docs>
          <param name="configuration">The configuration builder.</param>
          <param name="assembly">The assembly with the <see cref="T:Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute" />.</param>
          <summary>
            <para>
            Adds the user secrets configuration source. This searches <paramref name="assembly" /> for an instance
            of <see cref="T:Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute" />, which specifies a user secrets ID.
            </para>
            <para>
            A user secrets ID is unique value used to store and identify a collection of secret configuration values.
            </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.UserSecretsConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.UserSecretsConfigurationExtensions.AddUserSecrets(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Reflection.Assembly)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="AddUserSecrets">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddUserSecrets (this Microsoft.Extensions.Configuration.IConfigurationBuilder configuration, System.Reflection.Assembly assembly, bool optional);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddUserSecrets(class Microsoft.Extensions.Configuration.IConfigurationBuilder configuration, class System.Reflection.Assembly assembly, bool optional) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.UserSecretsConfigurationExtensions.AddUserSecrets(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Reflection.Assembly,System.Boolean)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="configuration" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
          <Parameter Name="assembly" Type="System.Reflection.Assembly" />
          <Parameter Name="optional" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="configuration">The configuration builder.</param>
          <param name="assembly">The assembly with the <see cref="T:Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute" />.</param>
          <param name="optional">Whether loading secrets is optional. When false, this method may throw.</param>
          <summary>
            <para>
            Adds the user secrets configuration source. This searches <paramref name="assembly" /> for an instance
            of <see cref="T:Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute" />, which specifies a user secrets ID.
            </para>
            <para>
            A user secrets ID is unique value used to store and identify a collection of secret configuration values.
            </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.UserSecretsConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.UserSecretsConfigurationExtensions.AddUserSecrets(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Reflection.Assembly,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="AddUserSecrets">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddUserSecrets (this Microsoft.Extensions.Configuration.IConfigurationBuilder configuration, string userSecretsId);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddUserSecrets(class Microsoft.Extensions.Configuration.IConfigurationBuilder configuration, string userSecretsId) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.UserSecretsConfigurationExtensions.AddUserSecrets(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="configuration" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
          <Parameter Name="userSecretsId" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="configuration">The configuration builder.</param>
          <param name="userSecretsId">The user secrets ID.</param>
          <summary>
            <para>
            Adds the user secrets configuration source with specified user secrets ID.
            </para>
            <para>
            A user secrets ID is unique value used to store and identify a collection of secret configuration values.
            </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.UserSecretsConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.UserSecretsConfigurationExtensions.AddUserSecrets(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="AddUserSecrets&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddUserSecrets&lt;T&gt; (this Microsoft.Extensions.Configuration.IConfigurationBuilder configuration) where T : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddUserSecrets&lt;class T&gt;(class Microsoft.Extensions.Configuration.IConfigurationBuilder configuration) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.UserSecretsConfigurationExtensions.AddUserSecrets``1(Microsoft.Extensions.Configuration.IConfigurationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="configuration" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type from the assembly to search for an instance of <see cref="T:Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute" />.</typeparam>
          <param name="configuration">The configuration builder.</param>
          <summary>
            <para>
            Adds the user secrets configuration source. Searches the assembly that contains type <typeparamref name="T" />
            for an instance of <see cref="T:Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute" />, which specifies a user secrets ID.
            </para>
            <para>
            A user secrets ID is unique value used to store and identify a collection of secret configuration values.
            </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.UserSecretsConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.UserSecretsConfigurationExtensions.AddUserSecrets``1(Microsoft.Extensions.Configuration.IConfigurationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="AddUserSecrets&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddUserSecrets&lt;T&gt; (this Microsoft.Extensions.Configuration.IConfigurationBuilder configuration, bool optional) where T : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddUserSecrets&lt;class T&gt;(class Microsoft.Extensions.Configuration.IConfigurationBuilder configuration, bool optional) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.UserSecretsConfigurationExtensions.AddUserSecrets``1(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Boolean)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="configuration" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
          <Parameter Name="optional" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type from the assembly to search for an instance of <see cref="T:Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute" />.</typeparam>
          <param name="configuration">The configuration builder.</param>
          <param name="optional">Whether loading secrets is optional. When false, this method may throw.</param>
          <summary>
            <para>
            Adds the user secrets configuration source. Searches the assembly that contains type <typeparamref name="T" />
            for an instance of <see cref="T:Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute" />, which specifies a user secrets ID.
            </para>
            <para>
            A user secrets ID is unique value used to store and identify a collection of secret configuration values.
            </para>
          </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.UserSecretsConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.UserSecretsConfigurationExtensions.AddUserSecrets``1(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="AddXmlFile">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddXmlFile (this Microsoft.Extensions.Configuration.IConfigurationBuilder builder, Microsoft.Extensions.FileProviders.IFileProvider provider, string path, bool optional, bool reloadOnChange);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddXmlFile(class Microsoft.Extensions.Configuration.IConfigurationBuilder builder, class Microsoft.Extensions.FileProviders.IFileProvider provider, string path, bool optional, bool reloadOnChange) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.XmlConfigurationExtensions.AddXmlFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,Microsoft.Extensions.FileProviders.IFileProvider,System.String,System.Boolean,System.Boolean)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
          <Parameter Name="provider" Type="Microsoft.Extensions.FileProviders.IFileProvider" />
          <Parameter Name="path" Type="System.String" />
          <Parameter Name="optional" Type="System.Boolean" />
          <Parameter Name="reloadOnChange" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
          <param name="provider">The <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider" /> to use to access the file.</param>
          <param name="path">Path relative to the base path stored in 
            <see cref="P:Microsoft.Extensions.Configuration.IConfigurationBuilder.Properties" /> of <paramref name="builder" />.</param>
          <param name="optional">Whether the file is optional.</param>
          <param name="reloadOnChange">Whether the configuration should be reloaded if the file changes.</param>
          <summary>
            Adds a XML configuration source to <paramref name="builder" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.XmlConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.XmlConfigurationExtensions.AddXmlFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,Microsoft.Extensions.FileProviders.IFileProvider,System.String,System.Boolean,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="AddXmlFile">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddXmlFile (this Microsoft.Extensions.Configuration.IConfigurationBuilder builder, Action&lt;Microsoft.Extensions.Configuration.Xml.XmlConfigurationSource&gt; configureSource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddXmlFile(class Microsoft.Extensions.Configuration.IConfigurationBuilder builder, class System.Action`1&lt;class Microsoft.Extensions.Configuration.Xml.XmlConfigurationSource&gt; configureSource) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.XmlConfigurationExtensions.AddXmlFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Action{Microsoft.Extensions.Configuration.Xml.XmlConfigurationSource})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
          <Parameter Name="configureSource" Type="System.Action&lt;Microsoft.Extensions.Configuration.Xml.XmlConfigurationSource&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
          <param name="configureSource">Configures the source.</param>
          <summary>
            Adds a XML configuration source to <paramref name="builder" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.XmlConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.XmlConfigurationExtensions.AddXmlFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Action{Microsoft.Extensions.Configuration.Xml.XmlConfigurationSource})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="AddXmlFile">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddXmlFile (this Microsoft.Extensions.Configuration.IConfigurationBuilder builder, string path);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddXmlFile(class Microsoft.Extensions.Configuration.IConfigurationBuilder builder, string path) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.XmlConfigurationExtensions.AddXmlFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
          <Parameter Name="path" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
          <param name="path">Path relative to the base path stored in 
            <see cref="P:Microsoft.Extensions.Configuration.IConfigurationBuilder.Properties" /> of <paramref name="builder" />.</param>
          <summary>
            Adds the XML configuration provider at <paramref name="path" /> to <paramref name="builder" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.XmlConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.XmlConfigurationExtensions.AddXmlFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="AddXmlFile">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddXmlFile (this Microsoft.Extensions.Configuration.IConfigurationBuilder builder, string path, bool optional);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddXmlFile(class Microsoft.Extensions.Configuration.IConfigurationBuilder builder, string path, bool optional) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.XmlConfigurationExtensions.AddXmlFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,System.Boolean)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
          <Parameter Name="path" Type="System.String" />
          <Parameter Name="optional" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
          <param name="path">Path relative to the base path stored in 
            <see cref="P:Microsoft.Extensions.Configuration.IConfigurationBuilder.Properties" /> of <paramref name="builder" />.</param>
          <param name="optional">Whether the file is optional.</param>
          <summary>
            Adds the XML configuration provider at <paramref name="path" /> to <paramref name="builder" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.XmlConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.XmlConfigurationExtensions.AddXmlFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
      </Targets>
      <Member MemberName="AddXmlFile">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddXmlFile (this Microsoft.Extensions.Configuration.IConfigurationBuilder builder, string path, bool optional, bool reloadOnChange);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddXmlFile(class Microsoft.Extensions.Configuration.IConfigurationBuilder builder, string path, bool optional, bool reloadOnChange) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.XmlConfigurationExtensions.AddXmlFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,System.Boolean,System.Boolean)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
          <Parameter Name="path" Type="System.String" />
          <Parameter Name="optional" Type="System.Boolean" />
          <Parameter Name="reloadOnChange" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
          <param name="path">Path relative to the base path stored in 
            <see cref="P:Microsoft.Extensions.Configuration.IConfigurationBuilder.Properties" /> of <paramref name="builder" />.</param>
          <param name="optional">Whether the file is optional.</param>
          <param name="reloadOnChange">Whether the configuration should be reloaded if the file changes.</param>
          <summary>
            Adds the XML configuration provider at <paramref name="path" /> to <paramref name="builder" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Configuration.XmlConfigurationExtensions" Member="M:Microsoft.Extensions.Configuration.XmlConfigurationExtensions.AddXmlFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,System.Boolean,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddMiddlewareAnalysis">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddMiddlewareAnalysis (this Microsoft.Extensions.DependencyInjection.IServiceCollection services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddMiddlewareAnalysis(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.AnalysisServiceCollectionExtensions.AddMiddlewareAnalysis(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
          <summary>
            Adds diagnostic services to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.AnalysisServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.AnalysisServiceCollectionExtensions.AddMiddlewareAnalysis(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddAntiforgery">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddAntiforgery (this Microsoft.Extensions.DependencyInjection.IServiceCollection services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddAntiforgery(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.AntiforgeryServiceCollectionExtensions.AddAntiforgery(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
          <summary>
            Adds antiforgery services to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.AntiforgeryServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.AntiforgeryServiceCollectionExtensions.AddAntiforgery(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddAntiforgery">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddAntiforgery (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.AspNetCore.Antiforgery.AntiforgeryOptions&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddAntiforgery(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.AspNetCore.Antiforgery.AntiforgeryOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.AntiforgeryServiceCollectionExtensions.AddAntiforgery(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Antiforgery.AntiforgeryOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.AspNetCore.Antiforgery.AntiforgeryOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
          <param name="setupAction">An <see cref="T:System.Action`1" /> to configure the provided <see cref="T:Microsoft.AspNetCore.Antiforgery.AntiforgeryOptions" />.</param>
          <summary>
            Adds antiforgery services to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.AntiforgeryServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.AntiforgeryServiceCollectionExtensions.AddAntiforgery(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Antiforgery.AntiforgeryOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IList`1" />
      </Targets>
      <Member MemberName="Add">
        <MemberSignature Language="C#" Value="public static void Add (this System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention&gt; conventions, Microsoft.AspNetCore.Mvc.ApplicationModels.IActionModelConvention actionModelConvention);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Add(class System.Collections.Generic.IList`1&lt;class Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention&gt; conventions, class Microsoft.AspNetCore.Mvc.ApplicationModels.IActionModelConvention actionModelConvention) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ApplicationModelConventionExtensions.Add(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention},Microsoft.AspNetCore.Mvc.ApplicationModels.IActionModelConvention)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="conventions" Type="System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention&gt;" RefType="this" />
          <Parameter Name="actionModelConvention" Type="Microsoft.AspNetCore.Mvc.ApplicationModels.IActionModelConvention" />
        </Parameters>
        <Docs>
          <param name="conventions">The list of <see cref="T:Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention" />
            in <see cref="T:Microsoft.AspNetCore.Mvc.MvcOptions" />.</param>
          <param name="actionModelConvention">The <see cref="T:Microsoft.AspNetCore.Mvc.ApplicationModels.IActionModelConvention" /> which needs to be
            added.</param>
          <summary>
            Adds a <see cref="T:Microsoft.AspNetCore.Mvc.ApplicationModels.IActionModelConvention" /> to all the actions in the application.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ApplicationModelConventionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ApplicationModelConventionExtensions.Add(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention},Microsoft.AspNetCore.Mvc.ApplicationModels.IActionModelConvention)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IList`1" />
      </Targets>
      <Member MemberName="Add">
        <MemberSignature Language="C#" Value="public static void Add (this System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention&gt; conventions, Microsoft.AspNetCore.Mvc.ApplicationModels.IControllerModelConvention controllerModelConvention);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Add(class System.Collections.Generic.IList`1&lt;class Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention&gt; conventions, class Microsoft.AspNetCore.Mvc.ApplicationModels.IControllerModelConvention controllerModelConvention) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ApplicationModelConventionExtensions.Add(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention},Microsoft.AspNetCore.Mvc.ApplicationModels.IControllerModelConvention)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="conventions" Type="System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention&gt;" RefType="this" />
          <Parameter Name="controllerModelConvention" Type="Microsoft.AspNetCore.Mvc.ApplicationModels.IControllerModelConvention" />
        </Parameters>
        <Docs>
          <param name="conventions">The list of <see cref="T:Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention" />
            in <see cref="T:Microsoft.AspNetCore.Mvc.MvcOptions" />.</param>
          <param name="controllerModelConvention">The <see cref="T:Microsoft.AspNetCore.Mvc.ApplicationModels.IControllerModelConvention" /> which needs to be
            added.</param>
          <summary>
            Adds a <see cref="T:Microsoft.AspNetCore.Mvc.ApplicationModels.IControllerModelConvention" /> to all the controllers in the application.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ApplicationModelConventionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ApplicationModelConventionExtensions.Add(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention},Microsoft.AspNetCore.Mvc.ApplicationModels.IControllerModelConvention)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IList`1" />
      </Targets>
      <Member MemberName="Add">
        <MemberSignature Language="C#" Value="public static void Add (this System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention&gt; conventions, Microsoft.AspNetCore.Mvc.ApplicationModels.IParameterModelConvention parameterModelConvention);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Add(class System.Collections.Generic.IList`1&lt;class Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention&gt; conventions, class Microsoft.AspNetCore.Mvc.ApplicationModels.IParameterModelConvention parameterModelConvention) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ApplicationModelConventionExtensions.Add(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention},Microsoft.AspNetCore.Mvc.ApplicationModels.IParameterModelConvention)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="conventions" Type="System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention&gt;" RefType="this" />
          <Parameter Name="parameterModelConvention" Type="Microsoft.AspNetCore.Mvc.ApplicationModels.IParameterModelConvention" />
        </Parameters>
        <Docs>
          <param name="conventions">The list of <see cref="T:Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention" />
            in <see cref="T:Microsoft.AspNetCore.Mvc.MvcOptions" />.</param>
          <param name="parameterModelConvention">The <see cref="T:Microsoft.AspNetCore.Mvc.ApplicationModels.IParameterModelConvention" /> which needs to be
            added.</param>
          <summary>
            Adds a <see cref="T:Microsoft.AspNetCore.Mvc.ApplicationModels.IParameterModelConvention" /> to all the parameters in the application.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ApplicationModelConventionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ApplicationModelConventionExtensions.Add(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention},Microsoft.AspNetCore.Mvc.ApplicationModels.IParameterModelConvention)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IList`1" />
      </Targets>
      <Member MemberName="RemoveType">
        <MemberSignature Language="C#" Value="public static void RemoveType (this System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention&gt; list, Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveType(class System.Collections.Generic.IList`1&lt;class Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention&gt; list, class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ApplicationModelConventionExtensions.RemoveType(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention},System.Type)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="list" Type="System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention&gt;" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="list">The list of <see cref="T:Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention" />s.</param>
          <param name="type">The type to remove.</param>
          <summary>
            Removes all application model conventions of the specified type.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ApplicationModelConventionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ApplicationModelConventionExtensions.RemoveType(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention},System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IList`1" />
      </Targets>
      <Member MemberName="RemoveType&lt;TApplicationModelConvention&gt;">
        <MemberSignature Language="C#" Value="public static void RemoveType&lt;TApplicationModelConvention&gt; (this System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention&gt; list) where TApplicationModelConvention : Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveType&lt;(class Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention) TApplicationModelConvention&gt;(class System.Collections.Generic.IList`1&lt;class Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention&gt; list) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ApplicationModelConventionExtensions.RemoveType``1(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TApplicationModelConvention">
            <Constraints>
              <InterfaceName>Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="list" Type="System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TApplicationModelConvention">The type to remove.</typeparam>
          <param name="list">The list of <see cref="T:Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention" />s.</param>
          <summary>
            Removes all application model conventions of the specified type.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ApplicationModelConventionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ApplicationModelConventionExtensions.RemoveType``1(System.Collections.Generic.IList{Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddAuthenticationCore">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddAuthenticationCore (this Microsoft.Extensions.DependencyInjection.IServiceCollection services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddAuthenticationCore(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.AuthenticationCoreServiceCollectionExtensions.AddAuthenticationCore(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</param>
          <summary>
            Add core authentication services needed for <see cref="T:Microsoft.AspNetCore.Authentication.IAuthenticationService" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.AuthenticationCoreServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.AuthenticationCoreServiceCollectionExtensions.AddAuthenticationCore(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddAuthenticationCore">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddAuthenticationCore (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.AspNetCore.Authentication.AuthenticationOptions&gt; configureOptions);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddAuthenticationCore(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.AspNetCore.Authentication.AuthenticationOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.AuthenticationCoreServiceCollectionExtensions.AddAuthenticationCore(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Authentication.AuthenticationOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="configureOptions" Type="System.Action&lt;Microsoft.AspNetCore.Authentication.AuthenticationOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</param>
          <param name="configureOptions">Used to configure the <see cref="T:Microsoft.AspNetCore.Authentication.AuthenticationOptions" />.</param>
          <summary>
            Add core authentication services needed for <see cref="T:Microsoft.AspNetCore.Authentication.IAuthenticationService" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.AuthenticationCoreServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.AuthenticationCoreServiceCollectionExtensions.AddAuthenticationCore(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Authentication.AuthenticationOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddAuthentication">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddAuthentication (this Microsoft.Extensions.DependencyInjection.IServiceCollection services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddAuthentication(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions.AddAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
          <summary>
            Adds authentication services to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />. 
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions.AddAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddAuthentication">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddAuthentication (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.AspNetCore.Authentication.AuthenticationOptions&gt; configureOptions);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddAuthentication(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.AspNetCore.Authentication.AuthenticationOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions.AddAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Authentication.AuthenticationOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Authentication.AuthenticationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="configureOptions" Type="System.Action&lt;Microsoft.AspNetCore.Authentication.AuthenticationOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="services">To be added.</param>
          <param name="configureOptions">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions.AddAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Authentication.AuthenticationOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddAuthentication">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddAuthentication (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.AspNetCore.Authentication.SharedAuthenticationOptions&gt; configureOptions);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddAuthentication(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.AspNetCore.Authentication.SharedAuthenticationOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions.AddAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Authentication.SharedAuthenticationOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="configureOptions" Type="System.Action&lt;Microsoft.AspNetCore.Authentication.SharedAuthenticationOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
          <param name="configureOptions">An action delegate to configure the provided <see cref="T:Microsoft.AspNetCore.Authentication.SharedAuthenticationOptions" />.</param>
          <summary>
            Adds authentication services to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />. 
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions.AddAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Authentication.SharedAuthenticationOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddAuthentication">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddAuthentication (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string defaultScheme);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddAuthentication(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, string defaultScheme) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions.AddAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Authentication.AuthenticationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="defaultScheme" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="services">To be added.</param>
          <param name="defaultScheme">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions.AddAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddRemoteScheme&lt;TOptions,THandler&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddRemoteScheme&lt;TOptions,THandler&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string authenticationScheme, string displayName, Action&lt;TOptions&gt; configureOptions) where TOptions : Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptionsnew() where THandler : Microsoft.AspNetCore.Authentication.RemoteAuthenticationHandler&lt;TOptions&gt;;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddRemoteScheme&lt;.ctor (class Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions) TOptions, (class Microsoft.AspNetCore.Authentication.RemoteAuthenticationHandler`1&lt;!!TOptions&gt;) THandler&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, string authenticationScheme, string displayName, class System.Action`1&lt;!!TOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions.AddRemoteScheme``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.String,System.Action{``0})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOptions">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <BaseTypeName>Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions</BaseTypeName>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="THandler">
            <Constraints>
              <BaseTypeName>Microsoft.AspNetCore.Authentication.RemoteAuthenticationHandler&lt;TOptions&gt;</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="authenticationScheme" Type="System.String" />
          <Parameter Name="displayName" Type="System.String" />
          <Parameter Name="configureOptions" Type="System.Action&lt;TOptions&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TOptions">To be added.</typeparam>
          <typeparam name="THandler">To be added.</typeparam>
          <param name="services">To be added.</param>
          <param name="authenticationScheme">To be added.</param>
          <param name="displayName">To be added.</param>
          <param name="configureOptions">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions.AddRemoteScheme``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.String,System.Action{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddScheme&lt;TOptions,THandler&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddScheme&lt;TOptions,THandler&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string authenticationScheme, Action&lt;TOptions&gt; configureOptions) where TOptions : Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptionsnew() where THandler : Microsoft.AspNetCore.Authentication.AuthenticationHandler&lt;TOptions&gt;;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddScheme&lt;.ctor (class Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions) TOptions, (class Microsoft.AspNetCore.Authentication.AuthenticationHandler`1&lt;!!TOptions&gt;) THandler&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, string authenticationScheme, class System.Action`1&lt;!!TOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions.AddScheme``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{``0})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOptions">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <BaseTypeName>Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions</BaseTypeName>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="THandler">
            <Constraints>
              <BaseTypeName>Microsoft.AspNetCore.Authentication.AuthenticationHandler&lt;TOptions&gt;</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="authenticationScheme" Type="System.String" />
          <Parameter Name="configureOptions" Type="System.Action&lt;TOptions&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TOptions">To be added.</typeparam>
          <typeparam name="THandler">To be added.</typeparam>
          <param name="services">To be added.</param>
          <param name="authenticationScheme">To be added.</param>
          <param name="configureOptions">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions.AddScheme``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddScheme&lt;TOptions,THandler&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddScheme&lt;TOptions,THandler&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string authenticationScheme, string displayName, Action&lt;TOptions&gt; configureOptions) where TOptions : Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptionsnew() where THandler : Microsoft.AspNetCore.Authentication.AuthenticationHandler&lt;TOptions&gt;;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddScheme&lt;.ctor (class Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions) TOptions, (class Microsoft.AspNetCore.Authentication.AuthenticationHandler`1&lt;!!TOptions&gt;) THandler&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, string authenticationScheme, string displayName, class System.Action`1&lt;!!TOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions.AddScheme``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.String,System.Action{``0})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOptions">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <BaseTypeName>Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions</BaseTypeName>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="THandler">
            <Constraints>
              <BaseTypeName>Microsoft.AspNetCore.Authentication.AuthenticationHandler&lt;TOptions&gt;</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="authenticationScheme" Type="System.String" />
          <Parameter Name="displayName" Type="System.String" />
          <Parameter Name="configureOptions" Type="System.Action&lt;TOptions&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TOptions">To be added.</typeparam>
          <typeparam name="THandler">To be added.</typeparam>
          <param name="services">To be added.</param>
          <param name="authenticationScheme">To be added.</param>
          <param name="displayName">To be added.</param>
          <param name="configureOptions">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions.AddScheme``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.String,System.Action{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddScheme&lt;TOptions,THandler&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddScheme&lt;TOptions,THandler&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string authenticationScheme, string displayName, Action&lt;Microsoft.AspNetCore.Authentication.AuthenticationSchemeBuilder&gt; configureScheme, Action&lt;TOptions&gt; configureOptions) where TOptions : Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptionsnew() where THandler : Microsoft.AspNetCore.Authentication.AuthenticationHandler&lt;TOptions&gt;;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddScheme&lt;.ctor (class Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions) TOptions, (class Microsoft.AspNetCore.Authentication.AuthenticationHandler`1&lt;!!TOptions&gt;) THandler&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, string authenticationScheme, string displayName, class System.Action`1&lt;class Microsoft.AspNetCore.Authentication.AuthenticationSchemeBuilder&gt; configureScheme, class System.Action`1&lt;!!TOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions.AddScheme``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.String,System.Action{Microsoft.AspNetCore.Authentication.AuthenticationSchemeBuilder},System.Action{``0})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOptions">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <BaseTypeName>Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions</BaseTypeName>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="THandler">
            <Constraints>
              <BaseTypeName>Microsoft.AspNetCore.Authentication.AuthenticationHandler&lt;TOptions&gt;</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="authenticationScheme" Type="System.String" />
          <Parameter Name="displayName" Type="System.String" />
          <Parameter Name="configureScheme" Type="System.Action&lt;Microsoft.AspNetCore.Authentication.AuthenticationSchemeBuilder&gt;" />
          <Parameter Name="configureOptions" Type="System.Action&lt;TOptions&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TOptions">To be added.</typeparam>
          <typeparam name="THandler">To be added.</typeparam>
          <param name="services">To be added.</param>
          <param name="authenticationScheme">To be added.</param>
          <param name="displayName">To be added.</param>
          <param name="configureScheme">To be added.</param>
          <param name="configureOptions">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions.AddScheme``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.String,System.Action{Microsoft.AspNetCore.Authentication.AuthenticationSchemeBuilder},System.Action{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddAuthorization">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddAuthorization (this Microsoft.Extensions.DependencyInjection.IServiceCollection services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddAuthorization(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.AuthorizationServiceCollectionExtensions.AddAuthorization(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
          <summary>
            Adds authorization services to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />. 
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.AuthorizationServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.AuthorizationServiceCollectionExtensions.AddAuthorization(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddAuthorization">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddAuthorization (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.AspNetCore.Authorization.AuthorizationOptions&gt; configure);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddAuthorization(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.AspNetCore.Authorization.AuthorizationOptions&gt; configure) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.AuthorizationServiceCollectionExtensions.AddAuthorization(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Authorization.AuthorizationOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="configure" Type="System.Action&lt;Microsoft.AspNetCore.Authorization.AuthorizationOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
          <param name="configure">An action delegate to configure the provided <see cref="T:Microsoft.AspNetCore.Authorization.AuthorizationOptions" />.</param>
          <summary>
            Adds authorization services to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />. 
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.AuthorizationServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.AuthorizationServiceCollectionExtensions.AddAuthorization(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Authorization.AuthorizationOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationBuilder" />
      </Targets>
      <Member MemberName="AddCookie">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddCookie (this Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddCookie(class Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.CookieExtensions.AddCookie(Microsoft.AspNetCore.Authentication.AuthenticationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Authentication.AuthenticationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Authentication.AuthenticationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.CookieExtensions" Member="M:Microsoft.Extensions.DependencyInjection.CookieExtensions.AddCookie(Microsoft.AspNetCore.Authentication.AuthenticationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationBuilder" />
      </Targets>
      <Member MemberName="AddCookie">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddCookie (this Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, Action&lt;Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions&gt; configureOptions);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddCookie(class Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, class System.Action`1&lt;class Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.CookieExtensions.AddCookie(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.Action{Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Authentication.AuthenticationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Authentication.AuthenticationBuilder" RefType="this" />
          <Parameter Name="configureOptions" Type="System.Action&lt;Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="configureOptions">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.CookieExtensions" Member="M:Microsoft.Extensions.DependencyInjection.CookieExtensions.AddCookie(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.Action{Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationBuilder" />
      </Targets>
      <Member MemberName="AddCookie">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddCookie (this Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddCookie(class Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.CookieExtensions.AddCookie(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Authentication.AuthenticationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Authentication.AuthenticationBuilder" RefType="this" />
          <Parameter Name="authenticationScheme" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="authenticationScheme">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.CookieExtensions" Member="M:Microsoft.Extensions.DependencyInjection.CookieExtensions.AddCookie(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationBuilder" />
      </Targets>
      <Member MemberName="AddCookie">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddCookie (this Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme, Action&lt;Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions&gt; configureOptions);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddCookie(class Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme, class System.Action`1&lt;class Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.CookieExtensions.AddCookie(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.Action{Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Authentication.AuthenticationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Authentication.AuthenticationBuilder" RefType="this" />
          <Parameter Name="authenticationScheme" Type="System.String" />
          <Parameter Name="configureOptions" Type="System.Action&lt;Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="authenticationScheme">To be added.</param>
          <param name="configureOptions">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.CookieExtensions" Member="M:Microsoft.Extensions.DependencyInjection.CookieExtensions.AddCookie(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.Action{Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationBuilder" />
      </Targets>
      <Member MemberName="AddCookie">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddCookie (this Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme, string displayName, Action&lt;Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions&gt; configureOptions);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddCookie(class Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme, string displayName, class System.Action`1&lt;class Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.CookieExtensions.AddCookie(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.String,System.Action{Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Authentication.AuthenticationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Authentication.AuthenticationBuilder" RefType="this" />
          <Parameter Name="authenticationScheme" Type="System.String" />
          <Parameter Name="displayName" Type="System.String" />
          <Parameter Name="configureOptions" Type="System.Action&lt;Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="authenticationScheme">To be added.</param>
          <param name="displayName">To be added.</param>
          <param name="configureOptions">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.CookieExtensions" Member="M:Microsoft.Extensions.DependencyInjection.CookieExtensions.AddCookie(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.String,System.Action{Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddCors">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddCors (this Microsoft.Extensions.DependencyInjection.IServiceCollection services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddCors(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.CorsServiceCollectionExtensions.AddCors(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
          <summary>
            Adds cross-origin resource sharing services to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.CorsServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.CorsServiceCollectionExtensions.AddCors(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddCors">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddCors (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddCors(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.CorsServiceCollectionExtensions.AddCors(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
          <param name="setupAction">An <see cref="T:System.Action`1" /> to configure the provided <see cref="T:Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions" />.</param>
          <summary>
            Adds cross-origin resource sharing services to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.CorsServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.CorsServiceCollectionExtensions.AddCors(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddDataProtection">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder AddDataProtection (this Microsoft.Extensions.DependencyInjection.IServiceCollection services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder AddDataProtection(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.DataProtectionServiceCollectionExtensions.AddDataProtection(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
          <summary>
            Adds data protection services to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.DataProtectionServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.DataProtectionServiceCollectionExtensions.AddDataProtection(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddDataProtection">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder AddDataProtection (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.AspNetCore.DataProtection.DataProtectionOptions&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder AddDataProtection(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.AspNetCore.DataProtection.DataProtectionOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.DataProtectionServiceCollectionExtensions.AddDataProtection(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.DataProtection.DataProtectionOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.AspNetCore.DataProtection.DataProtectionOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
          <param name="setupAction">An <see cref="T:System.Action`1" /> to configure the provided <see cref="T:Microsoft.AspNetCore.DataProtection.DataProtectionOptions" />.</param>
          <summary>
            Adds data protection services to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.DataProtectionServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.DataProtectionServiceCollectionExtensions.AddDataProtection(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.DataProtection.DataProtectionOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddDirectoryBrowser">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDirectoryBrowser (this Microsoft.Extensions.DependencyInjection.IServiceCollection services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDirectoryBrowser(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.DirectoryBrowserServiceExtensions.AddDirectoryBrowser(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
          <summary>
            Adds directory browser middleware services.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.DirectoryBrowserServiceExtensions" Member="M:Microsoft.Extensions.DependencyInjection.DirectoryBrowserServiceExtensions.AddDirectoryBrowser(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddElm">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddElm (this Microsoft.Extensions.DependencyInjection.IServiceCollection services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddElm(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ElmServiceCollectionExtensions.AddElm(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
          <summary>
            Adds error logging middleware services to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ElmServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ElmServiceCollectionExtensions.AddElm(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddElm">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddElm (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.AspNetCore.Diagnostics.Elm.ElmOptions&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddElm(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.AspNetCore.Diagnostics.Elm.ElmOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ElmServiceCollectionExtensions.AddElm(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Diagnostics.Elm.ElmOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.AspNetCore.Diagnostics.Elm.ElmOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
          <param name="setupAction">An <see cref="T:System.Action`1" /> to configure the provided <see cref="T:Microsoft.AspNetCore.Diagnostics.Elm.ElmOptions" />.</param>
          <summary>
            Adds error logging middleware services to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ElmServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ElmServiceCollectionExtensions.AddElm(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Diagnostics.Elm.ElmOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddWebEncoders">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddWebEncoders (this Microsoft.Extensions.DependencyInjection.IServiceCollection services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddWebEncoders(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EncoderServiceCollectionExtensions.AddWebEncoders(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</param>
          <summary>
            Adds <see cref="T:System.Text.Encodings.Web.HtmlEncoder" />, <see cref="T:System.Text.Encodings.Web.JavaScriptEncoder" /> and <see cref="T:System.Text.Encodings.Web.UrlEncoder" />
            to the specified <paramref name="services" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.EncoderServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.EncoderServiceCollectionExtensions.AddWebEncoders(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddWebEncoders">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddWebEncoders (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.Extensions.WebEncoders.WebEncoderOptions&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddWebEncoders(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.Extensions.WebEncoders.WebEncoderOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EncoderServiceCollectionExtensions.AddWebEncoders(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.WebEncoders.WebEncoderOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.Extensions.WebEncoders.WebEncoderOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</param>
          <param name="setupAction">An <see cref="T:System.Action`1" /> to configure the provided <see cref="T:Microsoft.Extensions.WebEncoders.WebEncoderOptions" />.</param>
          <summary>
            Adds <see cref="T:System.Text.Encodings.Web.HtmlEncoder" />, <see cref="T:System.Text.Encodings.Web.JavaScriptEncoder" /> and <see cref="T:System.Text.Encodings.Web.UrlEncoder" />
            to the specified <paramref name="services" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.EncoderServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.EncoderServiceCollectionExtensions.AddWebEncoders(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.WebEncoders.WebEncoderOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="Add">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection Add (this Microsoft.Extensions.DependencyInjection.IServiceCollection collection, Microsoft.Extensions.DependencyInjection.ServiceDescriptor descriptor);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection Add(class Microsoft.Extensions.DependencyInjection.IServiceCollection collection, class Microsoft.Extensions.DependencyInjection.ServiceDescriptor descriptor) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.Add(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceDescriptor)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="descriptor" Type="Microsoft.Extensions.DependencyInjection.ServiceDescriptor" />
        </Parameters>
        <Docs>
          <param name="collection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</param>
          <param name="descriptor">The <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceDescriptor" />.</param>
          <summary>
            Adds the specified <paramref name="descriptor" /> to the <paramref name="collection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions" Member="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.Add(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceDescriptor)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="Add">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection Add (this Microsoft.Extensions.DependencyInjection.IServiceCollection collection, System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.DependencyInjection.ServiceDescriptor&gt; descriptors);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection Add(class Microsoft.Extensions.DependencyInjection.IServiceCollection collection, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Extensions.DependencyInjection.ServiceDescriptor&gt; descriptors) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.Add(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{Microsoft.Extensions.DependencyInjection.ServiceDescriptor})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="descriptors" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.DependencyInjection.ServiceDescriptor&gt;" />
        </Parameters>
        <Docs>
          <param name="collection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</param>
          <param name="descriptors">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceDescriptor" />s to add.</param>
          <summary>
            Adds a sequence of <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceDescriptor" /> to the <paramref name="collection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions" Member="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.Add(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{Microsoft.Extensions.DependencyInjection.ServiceDescriptor})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="RemoveAll">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection RemoveAll (this Microsoft.Extensions.DependencyInjection.IServiceCollection collection, Type serviceType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection RemoveAll(class Microsoft.Extensions.DependencyInjection.IServiceCollection collection, class System.Type serviceType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.RemoveAll(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="serviceType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="collection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</param>
          <param name="serviceType">The service type to remove.</param>
          <summary>
            Removes all services of type <paramef name="serviceType" /> in <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions" Member="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.RemoveAll(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="RemoveAll&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection RemoveAll&lt;T&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection collection);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection RemoveAll&lt;T&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection collection) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.RemoveAll``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="collection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="collection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</param>
          <summary>
            Removes all services of type <typeparamef name="T" /> in <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions" Member="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.RemoveAll``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="Replace">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection Replace (this Microsoft.Extensions.DependencyInjection.IServiceCollection collection, Microsoft.Extensions.DependencyInjection.ServiceDescriptor descriptor);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection Replace(class Microsoft.Extensions.DependencyInjection.IServiceCollection collection, class Microsoft.Extensions.DependencyInjection.ServiceDescriptor descriptor) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.Replace(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceDescriptor)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="descriptor" Type="Microsoft.Extensions.DependencyInjection.ServiceDescriptor" />
        </Parameters>
        <Docs>
          <param name="collection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</param>
          <param name="descriptor">The <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceDescriptor" /> to replace with.</param>
          <summary>
            Removes the first service in <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> with the same service type
            as <paramref name="descriptor" /> and adds <paramef name="descriptor" /> to the collection.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions" Member="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.Replace(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceDescriptor)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="TryAdd">
        <MemberSignature Language="C#" Value="public static void TryAdd (this Microsoft.Extensions.DependencyInjection.IServiceCollection collection, Microsoft.Extensions.DependencyInjection.ServiceDescriptor descriptor);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryAdd(class Microsoft.Extensions.DependencyInjection.IServiceCollection collection, class Microsoft.Extensions.DependencyInjection.ServiceDescriptor descriptor) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceDescriptor)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="descriptor" Type="Microsoft.Extensions.DependencyInjection.ServiceDescriptor" />
        </Parameters>
        <Docs>
          <param name="collection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</param>
          <param name="descriptor">The <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceDescriptor" />.</param>
          <summary>
            Adds the specified <paramref name="descriptor" /> to the <paramref name="collection" /> if the
            service type hasn't been already registered.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions" Member="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceDescriptor)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="TryAdd">
        <MemberSignature Language="C#" Value="public static void TryAdd (this Microsoft.Extensions.DependencyInjection.IServiceCollection collection, System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.DependencyInjection.ServiceDescriptor&gt; descriptors);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryAdd(class Microsoft.Extensions.DependencyInjection.IServiceCollection collection, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Extensions.DependencyInjection.ServiceDescriptor&gt; descriptors) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{Microsoft.Extensions.DependencyInjection.ServiceDescriptor})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="descriptors" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.DependencyInjection.ServiceDescriptor&gt;" />
        </Parameters>
        <Docs>
          <param name="collection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</param>
          <param name="descriptors">The <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceDescriptor" />s.</param>
          <summary>
            Adds the specified <paramref name="descriptors" /> to the <paramref name="collection" /> if the
            service type hasn't been already registered.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions" Member="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{Microsoft.Extensions.DependencyInjection.ServiceDescriptor})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="TryAddEnumerable">
        <MemberSignature Language="C#" Value="public static void TryAddEnumerable (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.DependencyInjection.ServiceDescriptor descriptor);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryAddEnumerable(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class Microsoft.Extensions.DependencyInjection.ServiceDescriptor descriptor) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddEnumerable(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceDescriptor)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="descriptor" Type="Microsoft.Extensions.DependencyInjection.ServiceDescriptor" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</param>
          <param name="descriptor">The <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceDescriptor" />.</param>
          <summary>
            Adds a <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceDescriptor" /> if an existing descriptor with the same
            <see cref="P:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ServiceType" /> and an implementation that does not already exist
            in <paramref name="services.." />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions" Member="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddEnumerable(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceDescriptor)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="TryAddEnumerable">
        <MemberSignature Language="C#" Value="public static void TryAddEnumerable (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.DependencyInjection.ServiceDescriptor&gt; descriptors);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryAddEnumerable(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Extensions.DependencyInjection.ServiceDescriptor&gt; descriptors) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddEnumerable(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{Microsoft.Extensions.DependencyInjection.ServiceDescriptor})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="descriptors" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.DependencyInjection.ServiceDescriptor&gt;" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</param>
          <param name="descriptors">The <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceDescriptor" />s.</param>
          <summary>
            Adds the specified <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceDescriptor" />s if an existing descriptor with the same
            <see cref="P:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ServiceType" /> and an implementation that does not already exist
            in <paramref name="services.." />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions" Member="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddEnumerable(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{Microsoft.Extensions.DependencyInjection.ServiceDescriptor})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="TryAddScoped">
        <MemberSignature Language="C#" Value="public static void TryAddScoped (this Microsoft.Extensions.DependencyInjection.IServiceCollection collection, Type service);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryAddScoped(class Microsoft.Extensions.DependencyInjection.IServiceCollection collection, class System.Type service) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="service" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="collection">To be added.</param>
          <param name="service">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions" Member="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="TryAddScoped">
        <MemberSignature Language="C#" Value="public static void TryAddScoped (this Microsoft.Extensions.DependencyInjection.IServiceCollection collection, Type service, Func&lt;IServiceProvider,object&gt; implementationFactory);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryAddScoped(class Microsoft.Extensions.DependencyInjection.IServiceCollection collection, class System.Type service, class System.Func`2&lt;class System.IServiceProvider, object&gt; implementationFactory) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="service" Type="System.Type" />
          <Parameter Name="implementationFactory" Type="System.Func&lt;System.IServiceProvider,System.Object&gt;" />
        </Parameters>
        <Docs>
          <param name="collection">To be added.</param>
          <param name="service">To be added.</param>
          <param name="implementationFactory">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions" Member="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="TryAddScoped">
        <MemberSignature Language="C#" Value="public static void TryAddScoped (this Microsoft.Extensions.DependencyInjection.IServiceCollection collection, Type service, Type implementationType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryAddScoped(class Microsoft.Extensions.DependencyInjection.IServiceCollection collection, class System.Type service, class System.Type implementationType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="service" Type="System.Type" />
          <Parameter Name="implementationType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="collection">To be added.</param>
          <param name="service">To be added.</param>
          <param name="implementationType">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions" Member="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="TryAddScoped&lt;TService&gt;">
        <MemberSignature Language="C#" Value="public static void TryAddScoped&lt;TService&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection collection) where TService : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryAddScoped&lt;class TService&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection collection) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TService">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="collection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TService">To be added.</typeparam>
          <param name="collection">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions" Member="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="TryAddScoped&lt;TService&gt;">
        <MemberSignature Language="C#" Value="public static void TryAddScoped&lt;TService&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Func&lt;IServiceProvider,TService&gt; implementationFactory) where TService : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryAddScoped&lt;class TService&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Func`2&lt;class System.IServiceProvider, !!TService&gt; implementationFactory) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TService">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="implementationFactory" Type="System.Func&lt;System.IServiceProvider,TService&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TService">To be added.</typeparam>
          <param name="services">To be added.</param>
          <param name="implementationFactory">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions" Member="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="TryAddScoped&lt;TService,TImplementation&gt;">
        <MemberSignature Language="C#" Value="public static void TryAddScoped&lt;TService,TImplementation&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection collection) where TService : class where TImplementation : class, TService;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryAddScoped&lt;class TService, class (!!TService) TImplementation&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection collection) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TService">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TImplementation">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
              <BaseTypeName>TService</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="collection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TService">To be added.</typeparam>
          <typeparam name="TImplementation">To be added.</typeparam>
          <param name="collection">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions" Member="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="TryAddSingleton">
        <MemberSignature Language="C#" Value="public static void TryAddSingleton (this Microsoft.Extensions.DependencyInjection.IServiceCollection collection, Type service);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryAddSingleton(class Microsoft.Extensions.DependencyInjection.IServiceCollection collection, class System.Type service) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="service" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="collection">To be added.</param>
          <param name="service">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions" Member="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="TryAddSingleton">
        <MemberSignature Language="C#" Value="public static void TryAddSingleton (this Microsoft.Extensions.DependencyInjection.IServiceCollection collection, Type service, Func&lt;IServiceProvider,object&gt; implementationFactory);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryAddSingleton(class Microsoft.Extensions.DependencyInjection.IServiceCollection collection, class System.Type service, class System.Func`2&lt;class System.IServiceProvider, object&gt; implementationFactory) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="service" Type="System.Type" />
          <Parameter Name="implementationFactory" Type="System.Func&lt;System.IServiceProvider,System.Object&gt;" />
        </Parameters>
        <Docs>
          <param name="collection">To be added.</param>
          <param name="service">To be added.</param>
          <param name="implementationFactory">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions" Member="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="TryAddSingleton">
        <MemberSignature Language="C#" Value="public static void TryAddSingleton (this Microsoft.Extensions.DependencyInjection.IServiceCollection collection, Type service, Type implementationType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryAddSingleton(class Microsoft.Extensions.DependencyInjection.IServiceCollection collection, class System.Type service, class System.Type implementationType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="service" Type="System.Type" />
          <Parameter Name="implementationType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="collection">To be added.</param>
          <param name="service">To be added.</param>
          <param name="implementationType">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions" Member="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="TryAddSingleton&lt;TService&gt;">
        <MemberSignature Language="C#" Value="public static void TryAddSingleton&lt;TService&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection collection) where TService : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryAddSingleton&lt;class TService&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection collection) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TService">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="collection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TService">To be added.</typeparam>
          <param name="collection">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions" Member="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="TryAddSingleton&lt;TService&gt;">
        <MemberSignature Language="C#" Value="public static void TryAddSingleton&lt;TService&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection collection, TService instance) where TService : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryAddSingleton&lt;class TService&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection collection, !!TService instance) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,``0)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TService">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="collection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="instance" Type="TService" />
        </Parameters>
        <Docs>
          <typeparam name="TService">To be added.</typeparam>
          <param name="collection">To be added.</param>
          <param name="instance">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions" Member="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="TryAddSingleton&lt;TService&gt;">
        <MemberSignature Language="C#" Value="public static void TryAddSingleton&lt;TService&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Func&lt;IServiceProvider,TService&gt; implementationFactory) where TService : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryAddSingleton&lt;class TService&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Func`2&lt;class System.IServiceProvider, !!TService&gt; implementationFactory) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TService">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="implementationFactory" Type="System.Func&lt;System.IServiceProvider,TService&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TService">To be added.</typeparam>
          <param name="services">To be added.</param>
          <param name="implementationFactory">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions" Member="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="TryAddSingleton&lt;TService,TImplementation&gt;">
        <MemberSignature Language="C#" Value="public static void TryAddSingleton&lt;TService,TImplementation&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection collection) where TService : class where TImplementation : class, TService;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryAddSingleton&lt;class TService, class (!!TService) TImplementation&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection collection) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TService">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TImplementation">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
              <BaseTypeName>TService</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="collection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TService">To be added.</typeparam>
          <typeparam name="TImplementation">To be added.</typeparam>
          <param name="collection">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions" Member="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="TryAddTransient">
        <MemberSignature Language="C#" Value="public static void TryAddTransient (this Microsoft.Extensions.DependencyInjection.IServiceCollection collection, Type service);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryAddTransient(class Microsoft.Extensions.DependencyInjection.IServiceCollection collection, class System.Type service) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="service" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="collection">To be added.</param>
          <param name="service">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions" Member="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="TryAddTransient">
        <MemberSignature Language="C#" Value="public static void TryAddTransient (this Microsoft.Extensions.DependencyInjection.IServiceCollection collection, Type service, Func&lt;IServiceProvider,object&gt; implementationFactory);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryAddTransient(class Microsoft.Extensions.DependencyInjection.IServiceCollection collection, class System.Type service, class System.Func`2&lt;class System.IServiceProvider, object&gt; implementationFactory) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="service" Type="System.Type" />
          <Parameter Name="implementationFactory" Type="System.Func&lt;System.IServiceProvider,System.Object&gt;" />
        </Parameters>
        <Docs>
          <param name="collection">To be added.</param>
          <param name="service">To be added.</param>
          <param name="implementationFactory">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions" Member="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="TryAddTransient">
        <MemberSignature Language="C#" Value="public static void TryAddTransient (this Microsoft.Extensions.DependencyInjection.IServiceCollection collection, Type service, Type implementationType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryAddTransient(class Microsoft.Extensions.DependencyInjection.IServiceCollection collection, class System.Type service, class System.Type implementationType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="service" Type="System.Type" />
          <Parameter Name="implementationType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="collection">To be added.</param>
          <param name="service">To be added.</param>
          <param name="implementationType">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions" Member="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="TryAddTransient&lt;TService&gt;">
        <MemberSignature Language="C#" Value="public static void TryAddTransient&lt;TService&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection collection) where TService : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryAddTransient&lt;class TService&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection collection) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TService">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="collection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TService">To be added.</typeparam>
          <param name="collection">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions" Member="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="TryAddTransient&lt;TService&gt;">
        <MemberSignature Language="C#" Value="public static void TryAddTransient&lt;TService&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Func&lt;IServiceProvider,TService&gt; implementationFactory) where TService : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryAddTransient&lt;class TService&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Func`2&lt;class System.IServiceProvider, !!TService&gt; implementationFactory) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TService">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="implementationFactory" Type="System.Func&lt;System.IServiceProvider,TService&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TService">To be added.</typeparam>
          <param name="services">To be added.</param>
          <param name="implementationFactory">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions" Member="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="TryAddTransient&lt;TService,TImplementation&gt;">
        <MemberSignature Language="C#" Value="public static void TryAddTransient&lt;TService,TImplementation&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection collection) where TService : class where TImplementation : class, TService;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryAddTransient&lt;class TService, class (!!TService) TImplementation&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection collection) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TService">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TImplementation">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
              <BaseTypeName>TService</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="collection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TService">To be added.</typeparam>
          <typeparam name="TImplementation">To be added.</typeparam>
          <param name="collection">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions" Member="M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationBuilder" />
      </Targets>
      <Member MemberName="AddFacebook">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddFacebook (this Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddFacebook(class Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.FacebookAuthenticationOptionsExtensions.AddFacebook(Microsoft.AspNetCore.Authentication.AuthenticationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Authentication.AuthenticationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Authentication.AuthenticationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.FacebookAuthenticationOptionsExtensions" Member="M:Microsoft.Extensions.DependencyInjection.FacebookAuthenticationOptionsExtensions.AddFacebook(Microsoft.AspNetCore.Authentication.AuthenticationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationBuilder" />
      </Targets>
      <Member MemberName="AddFacebook">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddFacebook (this Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, Action&lt;Microsoft.AspNetCore.Authentication.Facebook.FacebookOptions&gt; configureOptions);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddFacebook(class Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, class System.Action`1&lt;class Microsoft.AspNetCore.Authentication.Facebook.FacebookOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.FacebookAuthenticationOptionsExtensions.AddFacebook(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.Action{Microsoft.AspNetCore.Authentication.Facebook.FacebookOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Authentication.AuthenticationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Authentication.AuthenticationBuilder" RefType="this" />
          <Parameter Name="configureOptions" Type="System.Action&lt;Microsoft.AspNetCore.Authentication.Facebook.FacebookOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="configureOptions">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.FacebookAuthenticationOptionsExtensions" Member="M:Microsoft.Extensions.DependencyInjection.FacebookAuthenticationOptionsExtensions.AddFacebook(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.Action{Microsoft.AspNetCore.Authentication.Facebook.FacebookOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationBuilder" />
      </Targets>
      <Member MemberName="AddFacebook">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddFacebook (this Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme, Action&lt;Microsoft.AspNetCore.Authentication.Facebook.FacebookOptions&gt; configureOptions);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddFacebook(class Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme, class System.Action`1&lt;class Microsoft.AspNetCore.Authentication.Facebook.FacebookOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.FacebookAuthenticationOptionsExtensions.AddFacebook(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.Action{Microsoft.AspNetCore.Authentication.Facebook.FacebookOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Authentication.AuthenticationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Authentication.AuthenticationBuilder" RefType="this" />
          <Parameter Name="authenticationScheme" Type="System.String" />
          <Parameter Name="configureOptions" Type="System.Action&lt;Microsoft.AspNetCore.Authentication.Facebook.FacebookOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="authenticationScheme">To be added.</param>
          <param name="configureOptions">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.FacebookAuthenticationOptionsExtensions" Member="M:Microsoft.Extensions.DependencyInjection.FacebookAuthenticationOptionsExtensions.AddFacebook(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.Action{Microsoft.AspNetCore.Authentication.Facebook.FacebookOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationBuilder" />
      </Targets>
      <Member MemberName="AddFacebook">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddFacebook (this Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme, string displayName, Action&lt;Microsoft.AspNetCore.Authentication.Facebook.FacebookOptions&gt; configureOptions);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddFacebook(class Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme, string displayName, class System.Action`1&lt;class Microsoft.AspNetCore.Authentication.Facebook.FacebookOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.FacebookAuthenticationOptionsExtensions.AddFacebook(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.String,System.Action{Microsoft.AspNetCore.Authentication.Facebook.FacebookOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Authentication.AuthenticationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Authentication.AuthenticationBuilder" RefType="this" />
          <Parameter Name="authenticationScheme" Type="System.String" />
          <Parameter Name="displayName" Type="System.String" />
          <Parameter Name="configureOptions" Type="System.Action&lt;Microsoft.AspNetCore.Authentication.Facebook.FacebookOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="authenticationScheme">To be added.</param>
          <param name="displayName">To be added.</param>
          <param name="configureOptions">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.FacebookAuthenticationOptionsExtensions" Member="M:Microsoft.Extensions.DependencyInjection.FacebookAuthenticationOptionsExtensions.AddFacebook(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.String,System.Action{Microsoft.AspNetCore.Authentication.Facebook.FacebookOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationBuilder" />
      </Targets>
      <Member MemberName="AddGoogle">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddGoogle (this Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddGoogle(class Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.GoogleExtensions.AddGoogle(Microsoft.AspNetCore.Authentication.AuthenticationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Authentication.AuthenticationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Authentication.AuthenticationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.GoogleExtensions" Member="M:Microsoft.Extensions.DependencyInjection.GoogleExtensions.AddGoogle(Microsoft.AspNetCore.Authentication.AuthenticationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationBuilder" />
      </Targets>
      <Member MemberName="AddGoogle">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddGoogle (this Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, Action&lt;Microsoft.AspNetCore.Authentication.Google.GoogleOptions&gt; configureOptions);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddGoogle(class Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, class System.Action`1&lt;class Microsoft.AspNetCore.Authentication.Google.GoogleOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.GoogleExtensions.AddGoogle(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.Action{Microsoft.AspNetCore.Authentication.Google.GoogleOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Authentication.AuthenticationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Authentication.AuthenticationBuilder" RefType="this" />
          <Parameter Name="configureOptions" Type="System.Action&lt;Microsoft.AspNetCore.Authentication.Google.GoogleOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="configureOptions">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.GoogleExtensions" Member="M:Microsoft.Extensions.DependencyInjection.GoogleExtensions.AddGoogle(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.Action{Microsoft.AspNetCore.Authentication.Google.GoogleOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationBuilder" />
      </Targets>
      <Member MemberName="AddGoogle">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddGoogle (this Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme, Action&lt;Microsoft.AspNetCore.Authentication.Google.GoogleOptions&gt; configureOptions);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddGoogle(class Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme, class System.Action`1&lt;class Microsoft.AspNetCore.Authentication.Google.GoogleOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.GoogleExtensions.AddGoogle(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.Action{Microsoft.AspNetCore.Authentication.Google.GoogleOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Authentication.AuthenticationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Authentication.AuthenticationBuilder" RefType="this" />
          <Parameter Name="authenticationScheme" Type="System.String" />
          <Parameter Name="configureOptions" Type="System.Action&lt;Microsoft.AspNetCore.Authentication.Google.GoogleOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="authenticationScheme">To be added.</param>
          <param name="configureOptions">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.GoogleExtensions" Member="M:Microsoft.Extensions.DependencyInjection.GoogleExtensions.AddGoogle(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.Action{Microsoft.AspNetCore.Authentication.Google.GoogleOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationBuilder" />
      </Targets>
      <Member MemberName="AddGoogle">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddGoogle (this Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme, string displayName, Action&lt;Microsoft.AspNetCore.Authentication.Google.GoogleOptions&gt; configureOptions);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddGoogle(class Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme, string displayName, class System.Action`1&lt;class Microsoft.AspNetCore.Authentication.Google.GoogleOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.GoogleExtensions.AddGoogle(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.String,System.Action{Microsoft.AspNetCore.Authentication.Google.GoogleOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Authentication.AuthenticationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Authentication.AuthenticationBuilder" RefType="this" />
          <Parameter Name="authenticationScheme" Type="System.String" />
          <Parameter Name="displayName" Type="System.String" />
          <Parameter Name="configureOptions" Type="System.Action&lt;Microsoft.AspNetCore.Authentication.Google.GoogleOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="authenticationScheme">To be added.</param>
          <param name="displayName">To be added.</param>
          <param name="configureOptions">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.GoogleExtensions" Member="M:Microsoft.Extensions.DependencyInjection.GoogleExtensions.AddGoogle(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.String,System.Action{Microsoft.AspNetCore.Authentication.Google.GoogleOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Identity.IdentityBuilder" />
      </Targets>
      <Member MemberName="AddEntityFrameworkStores&lt;TContext&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Identity.IdentityBuilder AddEntityFrameworkStores&lt;TContext&gt; (this Microsoft.AspNetCore.Identity.IdentityBuilder builder) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Identity.IdentityBuilder AddEntityFrameworkStores&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.AspNetCore.Identity.IdentityBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.IdentityEntityFrameworkBuilderExtensions.AddEntityFrameworkStores``1(Microsoft.AspNetCore.Identity.IdentityBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Identity.IdentityBuilder</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TContext">
            <Constraints>
              <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Identity.IdentityBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TContext">The Entity Framework database context to use.</typeparam>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Identity.IdentityBuilder" /> instance this method extends.</param>
          <summary>
            Adds an Entity Framework implementation of identity information stores.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.IdentityEntityFrameworkBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.IdentityEntityFrameworkBuilderExtensions.AddEntityFrameworkStores``1(Microsoft.AspNetCore.Identity.IdentityBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Identity.IdentityBuilder" />
      </Targets>
      <Member MemberName="AddEntityFrameworkStores&lt;TContext,TKey&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Identity.IdentityBuilder AddEntityFrameworkStores&lt;TContext,TKey&gt; (this Microsoft.AspNetCore.Identity.IdentityBuilder builder) where TContext : Microsoft.EntityFrameworkCore.DbContext where TKey : IEquatable&lt;TKey&gt;;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Identity.IdentityBuilder AddEntityFrameworkStores&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext, (class System.IEquatable`1&lt;!!TKey&gt;) TKey&gt;(class Microsoft.AspNetCore.Identity.IdentityBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.IdentityEntityFrameworkBuilderExtensions.AddEntityFrameworkStores``2(Microsoft.AspNetCore.Identity.IdentityBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Identity.IdentityBuilder</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TContext">
            <Constraints>
              <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TKey">
            <Constraints>
              <InterfaceName>System.IEquatable&lt;TKey&gt;</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Identity.IdentityBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TContext">The Entity Framework database context to use.</typeparam>
          <typeparam name="TKey">The type of the primary key used for the users and roles.</typeparam>
          <param name="builder">The <see cref="T:Microsoft.AspNetCore.Identity.IdentityBuilder" /> instance this method extends.</param>
          <summary>
            Adds an Entity Framework implementation of identity information stores.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.IdentityEntityFrameworkBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.IdentityEntityFrameworkBuilderExtensions.AddEntityFrameworkStores``2(Microsoft.AspNetCore.Identity.IdentityBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddIdentity&lt;TUser,TRole&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Identity.IdentityBuilder AddIdentity&lt;TUser,TRole&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services) where TUser : class where TRole : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Identity.IdentityBuilder AddIdentity&lt;class TUser, class TRole&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.IdentityServiceCollectionExtensions.AddIdentity``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Identity.IdentityBuilder</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TUser">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TRole">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TUser">The type representing a User in the system.</typeparam>
          <typeparam name="TRole">The type representing a Role in the system.</typeparam>
          <param name="services">The services available in the application.</param>
          <summary>
            Adds the default identity system configuration for the specified User and Role types.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.IdentityServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.IdentityServiceCollectionExtensions.AddIdentity``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddIdentity&lt;TUser,TRole&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Identity.IdentityBuilder AddIdentity&lt;TUser,TRole&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.AspNetCore.Builder.IdentityOptions&gt; setupAction) where TUser : class where TRole : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Identity.IdentityBuilder AddIdentity&lt;class TUser, class TRole&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.AspNetCore.Builder.IdentityOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.IdentityServiceCollectionExtensions.AddIdentity``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Builder.IdentityOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Identity.IdentityBuilder</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TUser">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TRole">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.AspNetCore.Builder.IdentityOptions&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TUser">The type representing a User in the system.</typeparam>
          <typeparam name="TRole">The type representing a Role in the system.</typeparam>
          <param name="services">The services available in the application.</param>
          <param name="setupAction">An action to configure the <see cref="T:Microsoft.AspNetCore.Builder.IdentityOptions" />.</param>
          <summary>
            Adds and configures the identity system for the specified User and Role types.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.IdentityServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.IdentityServiceCollectionExtensions.AddIdentity``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Builder.IdentityOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddIdentity&lt;TUser,TRole&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Identity.IdentityBuilder AddIdentity&lt;TUser,TRole&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.AspNetCore.Identity.IdentityOptions&gt; setupAction) where TUser : class where TRole : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Identity.IdentityBuilder AddIdentity&lt;class TUser, class TRole&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.AspNetCore.Identity.IdentityOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.IdentityServiceCollectionExtensions.AddIdentity``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Identity.IdentityOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Identity.IdentityBuilder</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TUser">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TRole">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.AspNetCore.Identity.IdentityOptions&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TUser">The type representing a User in the system.</typeparam>
          <typeparam name="TRole">The type representing a Role in the system.</typeparam>
          <param name="services">The services available in the application.</param>
          <param name="setupAction">An action to configure the <see cref="T:Microsoft.AspNetCore.Identity.IdentityOptions" />.</param>
          <summary>
            Adds and configures the identity system for the specified User and Role types.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.IdentityServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.IdentityServiceCollectionExtensions.AddIdentity``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Identity.IdentityOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddIdentityCore&lt;TUser&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Identity.IdentityBuilder AddIdentityCore&lt;TUser&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.AspNetCore.Identity.IdentityOptions&gt; setupAction) where TUser : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Identity.IdentityBuilder AddIdentityCore&lt;class TUser&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.AspNetCore.Identity.IdentityOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.IdentityServiceCollectionExtensions.AddIdentityCore``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Identity.IdentityOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Identity.IdentityBuilder</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TUser">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.AspNetCore.Identity.IdentityOptions&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TUser">The type representing a User in the system.</typeparam>
          <param name="services">The services available in the application.</param>
          <param name="setupAction">An action to configure the <see cref="T:Microsoft.AspNetCore.Identity.IdentityOptions" />.</param>
          <summary>
            Adds and configures the identity system for the specified User and Role types.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.IdentityServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.IdentityServiceCollectionExtensions.AddIdentityCore``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Identity.IdentityOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="ConfigureApplicationCookie">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureApplicationCookie (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions&gt; configure);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureApplicationCookie(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions&gt; configure) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.IdentityServiceCollectionExtensions.ConfigureApplicationCookie(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="configure" Type="System.Action&lt;Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="services">The services available in the application.</param>
          <param name="configure">An action to configure the <see cref="T:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions" />.</param>
          <summary>
            Configures the application cookie.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.IdentityServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.IdentityServiceCollectionExtensions.ConfigureApplicationCookie(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="ConfigureExternalCookie">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureExternalCookie (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions&gt; configure);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureExternalCookie(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions&gt; configure) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.IdentityServiceCollectionExtensions.ConfigureExternalCookie(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="configure" Type="System.Action&lt;Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="services">The services available in the application.</param>
          <param name="configure">An action to configure the <see cref="T:Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions" />.</param>
          <summary>
            Configure the external cookie.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.IdentityServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.IdentityServiceCollectionExtensions.ConfigureExternalCookie(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationBuilder" />
      </Targets>
      <Member MemberName="AddJwtBearer">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddJwtBearer (this Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddJwtBearer(class Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.JwtBearerExtensions.AddJwtBearer(Microsoft.AspNetCore.Authentication.AuthenticationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Authentication.AuthenticationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Authentication.AuthenticationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.JwtBearerExtensions" Member="M:Microsoft.Extensions.DependencyInjection.JwtBearerExtensions.AddJwtBearer(Microsoft.AspNetCore.Authentication.AuthenticationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationBuilder" />
      </Targets>
      <Member MemberName="AddJwtBearer">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddJwtBearer (this Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, Action&lt;Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerOptions&gt; configureOptions);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddJwtBearer(class Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, class System.Action`1&lt;class Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.JwtBearerExtensions.AddJwtBearer(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.Action{Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Authentication.AuthenticationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Authentication.AuthenticationBuilder" RefType="this" />
          <Parameter Name="configureOptions" Type="System.Action&lt;Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="configureOptions">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.JwtBearerExtensions" Member="M:Microsoft.Extensions.DependencyInjection.JwtBearerExtensions.AddJwtBearer(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.Action{Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationBuilder" />
      </Targets>
      <Member MemberName="AddJwtBearer">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddJwtBearer (this Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme, Action&lt;Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerOptions&gt; configureOptions);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddJwtBearer(class Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme, class System.Action`1&lt;class Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.JwtBearerExtensions.AddJwtBearer(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.Action{Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Authentication.AuthenticationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Authentication.AuthenticationBuilder" RefType="this" />
          <Parameter Name="authenticationScheme" Type="System.String" />
          <Parameter Name="configureOptions" Type="System.Action&lt;Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="authenticationScheme">To be added.</param>
          <param name="configureOptions">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.JwtBearerExtensions" Member="M:Microsoft.Extensions.DependencyInjection.JwtBearerExtensions.AddJwtBearer(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.Action{Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationBuilder" />
      </Targets>
      <Member MemberName="AddJwtBearer">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddJwtBearer (this Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme, string displayName, Action&lt;Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerOptions&gt; configureOptions);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddJwtBearer(class Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme, string displayName, class System.Action`1&lt;class Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.JwtBearerExtensions.AddJwtBearer(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.String,System.Action{Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Authentication.AuthenticationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Authentication.AuthenticationBuilder" RefType="this" />
          <Parameter Name="authenticationScheme" Type="System.String" />
          <Parameter Name="displayName" Type="System.String" />
          <Parameter Name="configureOptions" Type="System.Action&lt;Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="authenticationScheme">To be added.</param>
          <param name="displayName">To be added.</param>
          <param name="configureOptions">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.JwtBearerExtensions" Member="M:Microsoft.Extensions.DependencyInjection.JwtBearerExtensions.AddJwtBearer(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.String,System.Action{Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddLocalization">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddLocalization (this Microsoft.Extensions.DependencyInjection.IServiceCollection services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddLocalization(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.LocalizationServiceCollectionExtensions.AddLocalization(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the services to.</param>
          <summary>
            Adds services required for application localization.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.LocalizationServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.LocalizationServiceCollectionExtensions.AddLocalization(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddLocalization">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddLocalization (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.Extensions.Localization.LocalizationOptions&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddLocalization(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.Extensions.Localization.LocalizationOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.LocalizationServiceCollectionExtensions.AddLocalization(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.Localization.LocalizationOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.Extensions.Localization.LocalizationOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the services to.</param>
          <param name="setupAction">
            An <see cref="T:System.Action`1" /> to configure the <see cref="T:Microsoft.Extensions.Localization.LocalizationOptions" />.
            </param>
          <summary>
            Adds services required for application localization.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.LocalizationServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.LocalizationServiceCollectionExtensions.AddLocalization(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.Localization.LocalizationOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddLogging">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddLogging (this Microsoft.Extensions.DependencyInjection.IServiceCollection services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddLogging(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions.AddLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
          <summary>
            Adds logging services to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions.AddLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddLogging">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddLogging (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.Extensions.Logging.ILoggingBuilder&gt; configure);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddLogging(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.Extensions.Logging.ILoggingBuilder&gt; configure) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions.AddLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.Logging.ILoggingBuilder})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="configure" Type="System.Action&lt;Microsoft.Extensions.Logging.ILoggingBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
          <param name="configure">The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> configuration delegate.</param>
          <summary>
            Adds logging services to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions.AddLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.Logging.ILoggingBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddDistributedMemoryCache">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDistributedMemoryCache (this Microsoft.Extensions.DependencyInjection.IServiceCollection services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDistributedMemoryCache(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MemoryCacheServiceCollectionExtensions.AddDistributedMemoryCache(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
          <summary>
            Adds a default implementation of <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache" /> that stores items in memory
            to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />. Frameworks that require a distributed cache to work
            can safely add this dependency as part of their dependency list to ensure that there is at least
            one implementation available.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MemoryCacheServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MemoryCacheServiceCollectionExtensions.AddDistributedMemoryCache(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddDistributedMemoryCache">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDistributedMemoryCache (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.Extensions.Caching.Memory.MemoryDistributedCacheOptions&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDistributedMemoryCache(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.Extensions.Caching.Memory.MemoryDistributedCacheOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MemoryCacheServiceCollectionExtensions.AddDistributedMemoryCache(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.Caching.Memory.MemoryDistributedCacheOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.Extensions.Caching.Memory.MemoryDistributedCacheOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
          <param name="setupAction">
            The <see cref="T:System.Action`1" /> to configure the provided <see cref="T:Microsoft.Extensions.Caching.Memory.MemoryDistributedCacheOptions" />.
            </param>
          <summary>
            Adds a default implementation of <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache" /> that stores items in memory
            to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />. Frameworks that require a distributed cache to work
            can safely add this dependency as part of their dependency list to ensure that there is at least
            one implementation available.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MemoryCacheServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MemoryCacheServiceCollectionExtensions.AddDistributedMemoryCache(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.Caching.Memory.MemoryDistributedCacheOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddMemoryCache">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddMemoryCache (this Microsoft.Extensions.DependencyInjection.IServiceCollection services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddMemoryCache(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MemoryCacheServiceCollectionExtensions.AddMemoryCache(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
          <summary>
            Adds a non distributed in memory implementation of <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" /> to the
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MemoryCacheServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MemoryCacheServiceCollectionExtensions.AddMemoryCache(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddMemoryCache">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddMemoryCache (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.Extensions.Caching.Memory.MemoryCacheOptions&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddMemoryCache(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.Extensions.Caching.Memory.MemoryCacheOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MemoryCacheServiceCollectionExtensions.AddMemoryCache(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.Caching.Memory.MemoryCacheOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.Extensions.Caching.Memory.MemoryCacheOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
          <param name="setupAction">
            The <see cref="T:System.Action`1" /> to configure the provided <see cref="T:Microsoft.Extensions.Caching.Memory.MemoryCacheOptions" />.
            </param>
          <summary>
            Adds a non distributed in memory implementation of <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" /> to the
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MemoryCacheServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MemoryCacheServiceCollectionExtensions.AddMemoryCache(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.Caching.Memory.MemoryCacheOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationBuilder" />
      </Targets>
      <Member MemberName="AddMicrosoftAccount">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddMicrosoftAccount (this Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddMicrosoftAccount(class Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MicrosoftAccountExtensions.AddMicrosoftAccount(Microsoft.AspNetCore.Authentication.AuthenticationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Authentication.AuthenticationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Authentication.AuthenticationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MicrosoftAccountExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MicrosoftAccountExtensions.AddMicrosoftAccount(Microsoft.AspNetCore.Authentication.AuthenticationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationBuilder" />
      </Targets>
      <Member MemberName="AddMicrosoftAccount">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddMicrosoftAccount (this Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, Action&lt;Microsoft.AspNetCore.Authentication.MicrosoftAccount.MicrosoftAccountOptions&gt; configureOptions);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddMicrosoftAccount(class Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, class System.Action`1&lt;class Microsoft.AspNetCore.Authentication.MicrosoftAccount.MicrosoftAccountOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MicrosoftAccountExtensions.AddMicrosoftAccount(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.Action{Microsoft.AspNetCore.Authentication.MicrosoftAccount.MicrosoftAccountOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Authentication.AuthenticationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Authentication.AuthenticationBuilder" RefType="this" />
          <Parameter Name="configureOptions" Type="System.Action&lt;Microsoft.AspNetCore.Authentication.MicrosoftAccount.MicrosoftAccountOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="configureOptions">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MicrosoftAccountExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MicrosoftAccountExtensions.AddMicrosoftAccount(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.Action{Microsoft.AspNetCore.Authentication.MicrosoftAccount.MicrosoftAccountOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationBuilder" />
      </Targets>
      <Member MemberName="AddMicrosoftAccount">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddMicrosoftAccount (this Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme, Action&lt;Microsoft.AspNetCore.Authentication.MicrosoftAccount.MicrosoftAccountOptions&gt; configureOptions);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddMicrosoftAccount(class Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme, class System.Action`1&lt;class Microsoft.AspNetCore.Authentication.MicrosoftAccount.MicrosoftAccountOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MicrosoftAccountExtensions.AddMicrosoftAccount(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.Action{Microsoft.AspNetCore.Authentication.MicrosoftAccount.MicrosoftAccountOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Authentication.AuthenticationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Authentication.AuthenticationBuilder" RefType="this" />
          <Parameter Name="authenticationScheme" Type="System.String" />
          <Parameter Name="configureOptions" Type="System.Action&lt;Microsoft.AspNetCore.Authentication.MicrosoftAccount.MicrosoftAccountOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="authenticationScheme">To be added.</param>
          <param name="configureOptions">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MicrosoftAccountExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MicrosoftAccountExtensions.AddMicrosoftAccount(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.Action{Microsoft.AspNetCore.Authentication.MicrosoftAccount.MicrosoftAccountOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationBuilder" />
      </Targets>
      <Member MemberName="AddMicrosoftAccount">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddMicrosoftAccount (this Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme, string displayName, Action&lt;Microsoft.AspNetCore.Authentication.MicrosoftAccount.MicrosoftAccountOptions&gt; configureOptions);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddMicrosoftAccount(class Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme, string displayName, class System.Action`1&lt;class Microsoft.AspNetCore.Authentication.MicrosoftAccount.MicrosoftAccountOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MicrosoftAccountExtensions.AddMicrosoftAccount(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.String,System.Action{Microsoft.AspNetCore.Authentication.MicrosoftAccount.MicrosoftAccountOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Authentication.AuthenticationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Authentication.AuthenticationBuilder" RefType="this" />
          <Parameter Name="authenticationScheme" Type="System.String" />
          <Parameter Name="displayName" Type="System.String" />
          <Parameter Name="configureOptions" Type="System.Action&lt;Microsoft.AspNetCore.Authentication.MicrosoftAccount.MicrosoftAccountOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="authenticationScheme">To be added.</param>
          <param name="displayName">To be added.</param>
          <param name="configureOptions">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MicrosoftAccountExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MicrosoftAccountExtensions.AddMicrosoftAccount(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.String,System.Action{Microsoft.AspNetCore.Authentication.MicrosoftAccount.MicrosoftAccountOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />
      </Targets>
      <Member MemberName="AddApiExplorer">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddApiExplorer (this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddApiExplorer(class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcApiExplorerMvcCoreBuilderExtensions.AddApiExplorer(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcApiExplorerMvcCoreBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcApiExplorerMvcCoreBuilderExtensions.AddApiExplorer(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />
      </Targets>
      <Member MemberName="AddApplicationPart">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcBuilder AddApplicationPart (this Microsoft.Extensions.DependencyInjection.IMvcBuilder builder, System.Reflection.Assembly assembly);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcBuilder AddApplicationPart(class Microsoft.Extensions.DependencyInjection.IMvcBuilder builder, class System.Reflection.Assembly assembly) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.AddApplicationPart(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Reflection.Assembly)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcBuilder" RefType="this" />
          <Parameter Name="assembly" Type="System.Reflection.Assembly" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />.</param>
          <param name="assembly">The <see cref="T:System.Reflection.Assembly" /> of the <see cref="T:Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart" />.</param>
          <summary>
            Adds an <see cref="T:Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart" /> to the list of <see cref="P:Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager.ApplicationParts" /> on the
            <see cref="P:Microsoft.Extensions.DependencyInjection.IMvcBuilder.PartManager" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.AddApplicationPart(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Reflection.Assembly)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />
      </Targets>
      <Member MemberName="AddControllersAsServices">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcBuilder AddControllersAsServices (this Microsoft.Extensions.DependencyInjection.IMvcBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcBuilder AddControllersAsServices(class Microsoft.Extensions.DependencyInjection.IMvcBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.AddControllersAsServices(Microsoft.Extensions.DependencyInjection.IMvcBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />.</param>
          <summary>
            Registers discovered controllers as services in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.AddControllersAsServices(Microsoft.Extensions.DependencyInjection.IMvcBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />
      </Targets>
      <Member MemberName="AddFormatterMappings">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcBuilder AddFormatterMappings (this Microsoft.Extensions.DependencyInjection.IMvcBuilder builder, Action&lt;Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcBuilder AddFormatterMappings(class Microsoft.Extensions.DependencyInjection.IMvcBuilder builder, class System.Action`1&lt;class Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.AddFormatterMappings(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcBuilder" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="setupAction">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.AddFormatterMappings(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />
      </Targets>
      <Member MemberName="AddMvcOptions">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcBuilder AddMvcOptions (this Microsoft.Extensions.DependencyInjection.IMvcBuilder builder, Action&lt;Microsoft.AspNetCore.Mvc.MvcOptions&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcBuilder AddMvcOptions(class Microsoft.Extensions.DependencyInjection.IMvcBuilder builder, class System.Action`1&lt;class Microsoft.AspNetCore.Mvc.MvcOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.AddMvcOptions(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.MvcOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcBuilder" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.AspNetCore.Mvc.MvcOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />.</param>
          <param name="setupAction">An <see cref="T:System.Action`1" />.</param>
          <summary>
            Registers an action to configure <see cref="T:Microsoft.AspNetCore.Mvc.MvcOptions" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.AddMvcOptions(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.MvcOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />
      </Targets>
      <Member MemberName="ConfigureApplicationPartManager">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcBuilder ConfigureApplicationPartManager (this Microsoft.Extensions.DependencyInjection.IMvcBuilder builder, Action&lt;Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcBuilder ConfigureApplicationPartManager(class Microsoft.Extensions.DependencyInjection.IMvcBuilder builder, class System.Action`1&lt;class Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.ConfigureApplicationPartManager(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcBuilder" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />.</param>
          <param name="setupAction">The <see cref="T:System.Action`1" /></param>
          <summary>
            Configures the <see cref="T:Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager" /> of the <see cref="P:Microsoft.Extensions.DependencyInjection.IMvcBuilder.PartManager" /> using
            the given <see cref="T:System.Action`1" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.ConfigureApplicationPartManager(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />
      </Targets>
      <Member MemberName="AddApplicationPart">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddApplicationPart (this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, System.Reflection.Assembly assembly);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddApplicationPart(class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, class System.Reflection.Assembly assembly) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddApplicationPart(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Reflection.Assembly)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" RefType="this" />
          <Parameter Name="assembly" Type="System.Reflection.Assembly" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />.</param>
          <param name="assembly">The <see cref="T:System.Reflection.Assembly" /> of the <see cref="T:Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart" />.</param>
          <summary>
            Adds an <see cref="T:Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart" /> to the list of <see cref="P:Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager.ApplicationParts" /> on the
            <see cref="P:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder.PartManager" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddApplicationPart(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Reflection.Assembly)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />
      </Targets>
      <Member MemberName="AddAuthorization">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddAuthorization (this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddAuthorization(class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddAuthorization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddAuthorization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />
      </Targets>
      <Member MemberName="AddAuthorization">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddAuthorization (this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, Action&lt;Microsoft.AspNetCore.Authorization.AuthorizationOptions&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddAuthorization(class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, class System.Action`1&lt;class Microsoft.AspNetCore.Authorization.AuthorizationOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddAuthorization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Authorization.AuthorizationOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.AspNetCore.Authorization.AuthorizationOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="setupAction">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddAuthorization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Authorization.AuthorizationOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />
      </Targets>
      <Member MemberName="AddControllersAsServices">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddControllersAsServices (this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddControllersAsServices(class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddControllersAsServices(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />.</param>
          <summary>
            Registers discovered controllers as services in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddControllersAsServices(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />
      </Targets>
      <Member MemberName="AddFormatterMappings">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddFormatterMappings (this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddFormatterMappings(class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddFormatterMappings(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddFormatterMappings(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />
      </Targets>
      <Member MemberName="AddFormatterMappings">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddFormatterMappings (this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, Action&lt;Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddFormatterMappings(class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, class System.Action`1&lt;class Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddFormatterMappings(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="setupAction">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddFormatterMappings(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />
      </Targets>
      <Member MemberName="AddMvcOptions">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddMvcOptions (this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, Action&lt;Microsoft.AspNetCore.Mvc.MvcOptions&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddMvcOptions(class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, class System.Action`1&lt;class Microsoft.AspNetCore.Mvc.MvcOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddMvcOptions(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Mvc.MvcOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.AspNetCore.Mvc.MvcOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />.</param>
          <param name="setupAction">An <see cref="T:System.Action`1" />.</param>
          <summary>
            Registers an action to configure <see cref="T:Microsoft.AspNetCore.Mvc.MvcOptions" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddMvcOptions(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Mvc.MvcOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />
      </Targets>
      <Member MemberName="ConfigureApplicationPartManager">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder ConfigureApplicationPartManager (this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, Action&lt;Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder ConfigureApplicationPartManager(class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, class System.Action`1&lt;class Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.ConfigureApplicationPartManager(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />.</param>
          <param name="setupAction">The <see cref="T:System.Action`1" /></param>
          <summary>
            Configures the <see cref="T:Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager" /> of the <see cref="P:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder.PartManager" /> using
            the given <see cref="T:System.Action`1" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.ConfigureApplicationPartManager(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddMvcCore">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddMvcCore (this Microsoft.Extensions.DependencyInjection.IServiceCollection services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddMvcCore(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcCoreServiceCollectionExtensions.AddMvcCore(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
          <summary>
            Adds essential MVC services to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcCoreServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcCoreServiceCollectionExtensions.AddMvcCore(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddMvcCore">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddMvcCore (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.AspNetCore.Mvc.MvcOptions&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddMvcCore(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.AspNetCore.Mvc.MvcOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcCoreServiceCollectionExtensions.AddMvcCore(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Mvc.MvcOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.AspNetCore.Mvc.MvcOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
          <param name="setupAction">An <see cref="T:System.Action`1" /> to configure the provided <see cref="T:Microsoft.AspNetCore.Mvc.MvcOptions" />.</param>
          <summary>
            Adds essential MVC services to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcCoreServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcCoreServiceCollectionExtensions.AddMvcCore(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Mvc.MvcOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />
      </Targets>
      <Member MemberName="AddCors">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddCors (this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddCors(class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcCorsMvcCoreBuilderExtensions.AddCors(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcCorsMvcCoreBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcCorsMvcCoreBuilderExtensions.AddCors(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />
      </Targets>
      <Member MemberName="AddCors">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddCors (this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, Action&lt;Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddCors(class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, class System.Action`1&lt;class Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcCorsMvcCoreBuilderExtensions.AddCors(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="setupAction">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcCorsMvcCoreBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcCorsMvcCoreBuilderExtensions.AddCors(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />
      </Targets>
      <Member MemberName="ConfigureCors">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder ConfigureCors (this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, Action&lt;Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder ConfigureCors(class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, class System.Action`1&lt;class Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcCorsMvcCoreBuilderExtensions.ConfigureCors(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="setupAction">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcCorsMvcCoreBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcCorsMvcCoreBuilderExtensions.ConfigureCors(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />
      </Targets>
      <Member MemberName="AddDataAnnotationsLocalization">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcBuilder AddDataAnnotationsLocalization (this Microsoft.Extensions.DependencyInjection.IMvcBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcBuilder AddDataAnnotationsLocalization(class Microsoft.Extensions.DependencyInjection.IMvcBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcDataAnnotationsMvcBuilderExtensions.AddDataAnnotationsLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />.</param>
          <summary>
            Adds MVC data annotations localization to the application.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcDataAnnotationsMvcBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcDataAnnotationsMvcBuilderExtensions.AddDataAnnotationsLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />
      </Targets>
      <Member MemberName="AddDataAnnotationsLocalization">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcBuilder AddDataAnnotationsLocalization (this Microsoft.Extensions.DependencyInjection.IMvcBuilder builder, Action&lt;Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcBuilder AddDataAnnotationsLocalization(class Microsoft.Extensions.DependencyInjection.IMvcBuilder builder, class System.Action`1&lt;class Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcDataAnnotationsMvcBuilderExtensions.AddDataAnnotationsLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcBuilder" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />.</param>
          <param name="setupAction">The action to configure <see cref="T:Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions" />.
            </param>
          <summary>
            Adds MVC data annotations localization to the application.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcDataAnnotationsMvcBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcDataAnnotationsMvcBuilderExtensions.AddDataAnnotationsLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />
      </Targets>
      <Member MemberName="AddDataAnnotations">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddDataAnnotations (this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddDataAnnotations(class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcDataAnnotationsMvcCoreBuilderExtensions.AddDataAnnotations(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />.</param>
          <summary>
            Registers MVC data annotations.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcDataAnnotationsMvcCoreBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcDataAnnotationsMvcCoreBuilderExtensions.AddDataAnnotations(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />
      </Targets>
      <Member MemberName="AddDataAnnotationsLocalization">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddDataAnnotationsLocalization (this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddDataAnnotationsLocalization(class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcDataAnnotationsMvcCoreBuilderExtensions.AddDataAnnotationsLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />.</param>
          <summary>
            Adds MVC data annotations localization to the application.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcDataAnnotationsMvcCoreBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcDataAnnotationsMvcCoreBuilderExtensions.AddDataAnnotationsLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />
      </Targets>
      <Member MemberName="AddDataAnnotationsLocalization">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddDataAnnotationsLocalization (this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, Action&lt;Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddDataAnnotationsLocalization(class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, class System.Action`1&lt;class Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcDataAnnotationsMvcCoreBuilderExtensions.AddDataAnnotationsLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />.</param>
          <param name="setupAction">An <see cref="T:System.Action`1" />.</param>
          <summary>
            Registers an action to configure <see cref="T:Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions" /> for MVC data
            annotations localization.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcDataAnnotationsMvcCoreBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcDataAnnotationsMvcCoreBuilderExtensions.AddDataAnnotationsLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Mvc.DataAnnotations.MvcDataAnnotationsLocalizationOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />
      </Targets>
      <Member MemberName="AddJsonOptions">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcBuilder AddJsonOptions (this Microsoft.Extensions.DependencyInjection.IMvcBuilder builder, Action&lt;Microsoft.AspNetCore.Mvc.MvcJsonOptions&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcBuilder AddJsonOptions(class Microsoft.Extensions.DependencyInjection.IMvcBuilder builder, class System.Action`1&lt;class Microsoft.AspNetCore.Mvc.MvcJsonOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcJsonMvcBuilderExtensions.AddJsonOptions(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.MvcJsonOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcBuilder" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.AspNetCore.Mvc.MvcJsonOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />.</param>
          <param name="setupAction">The <see cref="T:Microsoft.AspNetCore.Mvc.MvcJsonOptions" /> which need to be configured.</param>
          <summary>
            Adds configuration of <see cref="T:Microsoft.AspNetCore.Mvc.MvcJsonOptions" /> for the application.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcJsonMvcBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcJsonMvcBuilderExtensions.AddJsonOptions(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.MvcJsonOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />
      </Targets>
      <Member MemberName="AddJsonFormatters">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddJsonFormatters (this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddJsonFormatters(class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcJsonMvcCoreBuilderExtensions.AddJsonFormatters(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcJsonMvcCoreBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcJsonMvcCoreBuilderExtensions.AddJsonFormatters(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />
      </Targets>
      <Member MemberName="AddJsonFormatters">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddJsonFormatters (this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, Action&lt;Newtonsoft.Json.JsonSerializerSettings&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddJsonFormatters(class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, class System.Action`1&lt;class Newtonsoft.Json.JsonSerializerSettings&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcJsonMvcCoreBuilderExtensions.AddJsonFormatters(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Newtonsoft.Json.JsonSerializerSettings})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Newtonsoft.Json.JsonSerializerSettings&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="setupAction">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcJsonMvcCoreBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcJsonMvcCoreBuilderExtensions.AddJsonFormatters(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Newtonsoft.Json.JsonSerializerSettings})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />
      </Targets>
      <Member MemberName="AddJsonOptions">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddJsonOptions (this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, Action&lt;Microsoft.AspNetCore.Mvc.MvcJsonOptions&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddJsonOptions(class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, class System.Action`1&lt;class Microsoft.AspNetCore.Mvc.MvcJsonOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcJsonMvcCoreBuilderExtensions.AddJsonOptions(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Mvc.MvcJsonOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.AspNetCore.Mvc.MvcJsonOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />.</param>
          <param name="setupAction">The <see cref="T:Microsoft.AspNetCore.Mvc.MvcJsonOptions" /> which need to be configured.</param>
          <summary>
            Adds configuration of <see cref="T:Microsoft.AspNetCore.Mvc.MvcJsonOptions" /> for the application.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcJsonMvcCoreBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcJsonMvcCoreBuilderExtensions.AddJsonOptions(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Mvc.MvcJsonOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />
      </Targets>
      <Member MemberName="AddViewLocalization">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcBuilder AddViewLocalization (this Microsoft.Extensions.DependencyInjection.IMvcBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcBuilder AddViewLocalization(class Microsoft.Extensions.DependencyInjection.IMvcBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />.</param>
          <summary>
            Adds MVC view localization to the application.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />
      </Targets>
      <Member MemberName="AddViewLocalization">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcBuilder AddViewLocalization (this Microsoft.Extensions.DependencyInjection.IMvcBuilder builder, Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat format);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcBuilder AddViewLocalization(class Microsoft.Extensions.DependencyInjection.IMvcBuilder builder, valuetype Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat format) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder,Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcBuilder" RefType="this" />
          <Parameter Name="format" Type="Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />.</param>
          <param name="format">The view format for localized views.</param>
          <summary>
             Adds MVC view localization to the application.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder,Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />
      </Targets>
      <Member MemberName="AddViewLocalization">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcBuilder AddViewLocalization (this Microsoft.Extensions.DependencyInjection.IMvcBuilder builder, Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat format, Action&lt;Microsoft.Extensions.Localization.LocalizationOptions&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcBuilder AddViewLocalization(class Microsoft.Extensions.DependencyInjection.IMvcBuilder builder, valuetype Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat format, class System.Action`1&lt;class Microsoft.Extensions.Localization.LocalizationOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder,Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat,System.Action{Microsoft.Extensions.Localization.LocalizationOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcBuilder" RefType="this" />
          <Parameter Name="format" Type="Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.Extensions.Localization.LocalizationOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />.</param>
          <param name="format">The view format for localized views.</param>
          <param name="setupAction">An action to configure the <see cref="T:Microsoft.Extensions.Localization.LocalizationOptions" />.</param>
          <summary>
             Adds MVC view localization to the application.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder,Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat,System.Action{Microsoft.Extensions.Localization.LocalizationOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />
      </Targets>
      <Member MemberName="AddViewLocalization">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcBuilder AddViewLocalization (this Microsoft.Extensions.DependencyInjection.IMvcBuilder builder, Action&lt;Microsoft.Extensions.Localization.LocalizationOptions&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcBuilder AddViewLocalization(class Microsoft.Extensions.DependencyInjection.IMvcBuilder builder, class System.Action`1&lt;class Microsoft.Extensions.Localization.LocalizationOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.Extensions.Localization.LocalizationOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcBuilder" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.Extensions.Localization.LocalizationOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />.</param>
          <param name="setupAction">An action to configure the <see cref="T:Microsoft.Extensions.Localization.LocalizationOptions" />.</param>
          <summary>
             Adds MVC view localization to the application.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcBuilderExtensions.AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.Extensions.Localization.LocalizationOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />
      </Targets>
      <Member MemberName="AddViewLocalization">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddViewLocalization (this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddViewLocalization(class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />.</param>
          <summary>
            Adds MVC localization to the application.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />
      </Targets>
      <Member MemberName="AddViewLocalization">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddViewLocalization (this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat format);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddViewLocalization(class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, valuetype Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat format) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" RefType="this" />
          <Parameter Name="format" Type="Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />.</param>
          <param name="format">The view format for localized views.</param>
          <summary>
             Adds MVC localization to the application.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />
      </Targets>
      <Member MemberName="AddViewLocalization">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddViewLocalization (this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat format, Action&lt;Microsoft.Extensions.Localization.LocalizationOptions&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddViewLocalization(class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, valuetype Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat format, class System.Action`1&lt;class Microsoft.Extensions.Localization.LocalizationOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat,System.Action{Microsoft.Extensions.Localization.LocalizationOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" RefType="this" />
          <Parameter Name="format" Type="Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.Extensions.Localization.LocalizationOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />.</param>
          <param name="format">The view format for localized views.</param>
          <param name="setupAction">An action to configure the <see cref="T:Microsoft.Extensions.Localization.LocalizationOptions" />.</param>
          <summary>
             Adds MVC localization to the application.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat,System.Action{Microsoft.Extensions.Localization.LocalizationOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />
      </Targets>
      <Member MemberName="AddViewLocalization">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddViewLocalization (this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, Action&lt;Microsoft.Extensions.Localization.LocalizationOptions&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddViewLocalization(class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, class System.Action`1&lt;class Microsoft.Extensions.Localization.LocalizationOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.Extensions.Localization.LocalizationOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.Extensions.Localization.LocalizationOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />.</param>
          <param name="setupAction">An action to configure the <see cref="T:Microsoft.Extensions.Localization.LocalizationOptions" />.</param>
          <summary>
            Adds MVC localization to the application.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcLocalizationMvcCoreBuilderExtensions.AddViewLocalization(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.Extensions.Localization.LocalizationOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />
      </Targets>
      <Member MemberName="AddRazorOptions">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcBuilder AddRazorOptions (this Microsoft.Extensions.DependencyInjection.IMvcBuilder builder, Action&lt;Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcBuilder AddRazorOptions(class Microsoft.Extensions.DependencyInjection.IMvcBuilder builder, class System.Action`1&lt;class Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcRazorMvcBuilderExtensions.AddRazorOptions(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcBuilder" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />.</param>
          <param name="setupAction">An action to configure the <see cref="T:Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions" />.</param>
          <summary>
            Configures a set of <see cref="T:Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions" /> for the application.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcRazorMvcBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcRazorMvcBuilderExtensions.AddRazorOptions(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />
      </Targets>
      <Member MemberName="AddTagHelpersAsServices">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcBuilder AddTagHelpersAsServices (this Microsoft.Extensions.DependencyInjection.IMvcBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcBuilder AddTagHelpersAsServices(class Microsoft.Extensions.DependencyInjection.IMvcBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcRazorMvcBuilderExtensions.AddTagHelpersAsServices(Microsoft.Extensions.DependencyInjection.IMvcBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" /> instance this method extends.</param>
          <summary>
            Registers tag helpers as services and replaces the existing <see cref="T:Microsoft.AspNetCore.Mvc.Razor.ITagHelperActivator" />
            with an <see cref="T:Microsoft.AspNetCore.Mvc.Razor.Internal.ServiceBasedTagHelperActivator" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcRazorMvcBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcRazorMvcBuilderExtensions.AddTagHelpersAsServices(Microsoft.Extensions.DependencyInjection.IMvcBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />
      </Targets>
      <Member MemberName="InitializeTagHelper&lt;TTagHelper&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcBuilder InitializeTagHelper&lt;TTagHelper&gt; (this Microsoft.Extensions.DependencyInjection.IMvcBuilder builder, Action&lt;TTagHelper,Microsoft.AspNetCore.Mvc.Rendering.ViewContext&gt; initialize) where TTagHelper : Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcBuilder InitializeTagHelper&lt;(class Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper) TTagHelper&gt;(class Microsoft.Extensions.DependencyInjection.IMvcBuilder builder, class System.Action`2&lt;!!TTagHelper, class Microsoft.AspNetCore.Mvc.Rendering.ViewContext&gt; initialize) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcRazorMvcBuilderExtensions.InitializeTagHelper``1(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{``0,Microsoft.AspNetCore.Mvc.Rendering.ViewContext})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcBuilder</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TTagHelper">
            <Constraints>
              <InterfaceName>Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcBuilder" RefType="this" />
          <Parameter Name="initialize" Type="System.Action&lt;TTagHelper,Microsoft.AspNetCore.Mvc.Rendering.ViewContext&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TTagHelper">The type of <see cref="T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper" /> being initialized.</typeparam>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" /> instance this method extends.</param>
          <param name="initialize">An action to initialize the <typeparamref name="TTagHelper" />.</param>
          <summary>
            Adds an initialization callback for a given <typeparamref name="TTagHelper" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcRazorMvcBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcRazorMvcBuilderExtensions.InitializeTagHelper``1(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{``0,Microsoft.AspNetCore.Mvc.Rendering.ViewContext})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />
      </Targets>
      <Member MemberName="AddRazorViewEngine">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddRazorViewEngine (this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddRazorViewEngine(class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcRazorMvcCoreBuilderExtensions.AddRazorViewEngine(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcRazorMvcCoreBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcRazorMvcCoreBuilderExtensions.AddRazorViewEngine(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />
      </Targets>
      <Member MemberName="AddRazorViewEngine">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddRazorViewEngine (this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, Action&lt;Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddRazorViewEngine(class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, class System.Action`1&lt;class Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcRazorMvcCoreBuilderExtensions.AddRazorViewEngine(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="setupAction">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcRazorMvcCoreBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcRazorMvcCoreBuilderExtensions.AddRazorViewEngine(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />
      </Targets>
      <Member MemberName="AddTagHelpersAsServices">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddTagHelpersAsServices (this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddTagHelpersAsServices(class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcRazorMvcCoreBuilderExtensions.AddTagHelpersAsServices(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" /> instance this method extends.</param>
          <summary>
            Registers discovered tag helpers as services and changes the existing <see cref="T:Microsoft.AspNetCore.Mvc.Razor.ITagHelperActivator" />
            for an <see cref="T:Microsoft.AspNetCore.Mvc.Razor.Internal.ServiceBasedTagHelperActivator" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcRazorMvcCoreBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcRazorMvcCoreBuilderExtensions.AddTagHelpersAsServices(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />
      </Targets>
      <Member MemberName="InitializeTagHelper&lt;TTagHelper&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder InitializeTagHelper&lt;TTagHelper&gt; (this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, Action&lt;TTagHelper,Microsoft.AspNetCore.Mvc.Rendering.ViewContext&gt; initialize) where TTagHelper : Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder InitializeTagHelper&lt;(class Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper) TTagHelper&gt;(class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, class System.Action`2&lt;!!TTagHelper, class Microsoft.AspNetCore.Mvc.Rendering.ViewContext&gt; initialize) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcRazorMvcCoreBuilderExtensions.InitializeTagHelper``1(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{``0,Microsoft.AspNetCore.Mvc.Rendering.ViewContext})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TTagHelper">
            <Constraints>
              <InterfaceName>Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" RefType="this" />
          <Parameter Name="initialize" Type="System.Action&lt;TTagHelper,Microsoft.AspNetCore.Mvc.Rendering.ViewContext&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TTagHelper">The type of <see cref="T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper" /> being initialized.</typeparam>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" /> instance this method extends.</param>
          <param name="initialize">An action to initialize the <typeparamref name="TTagHelper" />.</param>
          <summary>
            Adds an initialization callback for a given <typeparamref name="TTagHelper" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcRazorMvcCoreBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcRazorMvcCoreBuilderExtensions.InitializeTagHelper``1(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{``0,Microsoft.AspNetCore.Mvc.Rendering.ViewContext})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />
      </Targets>
      <Member MemberName="AddRazorPagesOptions">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcBuilder AddRazorPagesOptions (this Microsoft.Extensions.DependencyInjection.IMvcBuilder builder, Action&lt;Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcBuilder AddRazorPagesOptions(class Microsoft.Extensions.DependencyInjection.IMvcBuilder builder, class System.Action`1&lt;class Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcBuilderExtensions.AddRazorPagesOptions(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcBuilder" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />.</param>
          <param name="setupAction">An action to configure the <see cref="T:Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions" />.</param>
          <summary>
            Configures a set of <see cref="T:Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions" /> for the application.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcBuilderExtensions.AddRazorPagesOptions(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />
      </Targets>
      <Member MemberName="WithRazorPagesAtContentRoot">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcBuilder WithRazorPagesAtContentRoot (this Microsoft.Extensions.DependencyInjection.IMvcBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcBuilder WithRazorPagesAtContentRoot(class Microsoft.Extensions.DependencyInjection.IMvcBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcBuilderExtensions.WithRazorPagesAtContentRoot(Microsoft.Extensions.DependencyInjection.IMvcBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />.</param>
          <summary>
            Configures Razor Pages to be rooted at the content root (<see cref="P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.ContentRootPath" />).
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcBuilderExtensions.WithRazorPagesAtContentRoot(Microsoft.Extensions.DependencyInjection.IMvcBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />
      </Targets>
      <Member MemberName="WithRazorPagesRoot">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcBuilder WithRazorPagesRoot (this Microsoft.Extensions.DependencyInjection.IMvcBuilder builder, string rootDirectory);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcBuilder WithRazorPagesRoot(class Microsoft.Extensions.DependencyInjection.IMvcBuilder builder, string rootDirectory) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcBuilderExtensions.WithRazorPagesRoot(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcBuilder" RefType="this" />
          <Parameter Name="rootDirectory" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />.</param>
          <param name="rootDirectory">The application relative path to use as the root directory.</param>
          <summary>
            Configures Razor Pages to use the specified <paramref name="rootDirectory" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcBuilderExtensions.WithRazorPagesRoot(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />
      </Targets>
      <Member MemberName="AddRazorPages">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddRazorPages (this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddRazorPages(class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcCoreBuilderExtensions.AddRazorPages(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcCoreBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcCoreBuilderExtensions.AddRazorPages(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />
      </Targets>
      <Member MemberName="AddRazorPages">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddRazorPages (this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, Action&lt;Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddRazorPages(class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, class System.Action`1&lt;class Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcCoreBuilderExtensions.AddRazorPages(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="setupAction">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcCoreBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcCoreBuilderExtensions.AddRazorPages(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Mvc.RazorPages.RazorPagesOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />
      </Targets>
      <Member MemberName="WithRazorPagesRoot">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder WithRazorPagesRoot (this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, string rootDirectory);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder WithRazorPagesRoot(class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, string rootDirectory) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcCoreBuilderExtensions.WithRazorPagesRoot(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" RefType="this" />
          <Parameter Name="rootDirectory" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />.</param>
          <param name="rootDirectory">The application relative path to use as the root directory.</param>
          <summary>
            Configures Razor Pages to use the specified <paramref name="rootDirectory" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcCoreBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcRazorPagesMvcCoreBuilderExtensions.WithRazorPagesRoot(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddMvc">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcBuilder AddMvc (this Microsoft.Extensions.DependencyInjection.IServiceCollection services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcBuilder AddMvc(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions.AddMvc(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
          <summary>
            Adds MVC services to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions.AddMvc(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddMvc">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcBuilder AddMvc (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.AspNetCore.Mvc.MvcOptions&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcBuilder AddMvc(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.AspNetCore.Mvc.MvcOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions.AddMvc(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Mvc.MvcOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.AspNetCore.Mvc.MvcOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
          <param name="setupAction">An <see cref="T:System.Action`1" /> to configure the provided <see cref="T:Microsoft.AspNetCore.Mvc.MvcOptions" />.</param>
          <summary>
            Adds MVC services to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions.AddMvc(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Mvc.MvcOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />
      </Targets>
      <Member MemberName="AddCookieTempDataProvider">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcBuilder AddCookieTempDataProvider (this Microsoft.Extensions.DependencyInjection.IMvcBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcBuilder AddCookieTempDataProvider(class Microsoft.Extensions.DependencyInjection.IMvcBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcBuilderExtensions.AddCookieTempDataProvider(Microsoft.Extensions.DependencyInjection.IMvcBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />.</param>
          <summary>
            Registers <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.CookieTempDataProvider" /> as the default <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataProvider" /> in the
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcBuilderExtensions.AddCookieTempDataProvider(Microsoft.Extensions.DependencyInjection.IMvcBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />
      </Targets>
      <Member MemberName="AddCookieTempDataProvider">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcBuilder AddCookieTempDataProvider (this Microsoft.Extensions.DependencyInjection.IMvcBuilder builder, Action&lt;Microsoft.AspNetCore.Mvc.CookieTempDataProviderOptions&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcBuilder AddCookieTempDataProvider(class Microsoft.Extensions.DependencyInjection.IMvcBuilder builder, class System.Action`1&lt;class Microsoft.AspNetCore.Mvc.CookieTempDataProviderOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcBuilderExtensions.AddCookieTempDataProvider(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.CookieTempDataProviderOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcBuilder" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.AspNetCore.Mvc.CookieTempDataProviderOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />.</param>
          <param name="setupAction">
            An <see cref="T:System.Action`1" /> to configure the provided
            <see cref="T:Microsoft.AspNetCore.Mvc.CookieTempDataProviderOptions" />.
            </param>
          <summary>
            Registers <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.CookieTempDataProvider" /> as the default <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataProvider" /> in the
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcBuilderExtensions.AddCookieTempDataProvider(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.CookieTempDataProviderOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />
      </Targets>
      <Member MemberName="AddSessionStateTempDataProvider">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcBuilder AddSessionStateTempDataProvider (this Microsoft.Extensions.DependencyInjection.IMvcBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcBuilder AddSessionStateTempDataProvider(class Microsoft.Extensions.DependencyInjection.IMvcBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcBuilderExtensions.AddSessionStateTempDataProvider(Microsoft.Extensions.DependencyInjection.IMvcBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />.</param>
          <summary>
            Registers <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.SessionStateTempDataProvider" /> as the default <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataProvider" />
            in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcBuilderExtensions.AddSessionStateTempDataProvider(Microsoft.Extensions.DependencyInjection.IMvcBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />
      </Targets>
      <Member MemberName="AddViewComponentsAsServices">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcBuilder AddViewComponentsAsServices (this Microsoft.Extensions.DependencyInjection.IMvcBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcBuilder AddViewComponentsAsServices(class Microsoft.Extensions.DependencyInjection.IMvcBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcBuilderExtensions.AddViewComponentsAsServices(Microsoft.Extensions.DependencyInjection.IMvcBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />.</param>
          <summary>
            Registers discovered view components as services in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcBuilderExtensions.AddViewComponentsAsServices(Microsoft.Extensions.DependencyInjection.IMvcBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />
      </Targets>
      <Member MemberName="AddViewOptions">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcBuilder AddViewOptions (this Microsoft.Extensions.DependencyInjection.IMvcBuilder builder, Action&lt;Microsoft.AspNetCore.Mvc.MvcViewOptions&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcBuilder AddViewOptions(class Microsoft.Extensions.DependencyInjection.IMvcBuilder builder, class System.Action`1&lt;class Microsoft.AspNetCore.Mvc.MvcViewOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcBuilderExtensions.AddViewOptions(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.MvcViewOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcBuilder" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.AspNetCore.Mvc.MvcViewOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />.</param>
          <param name="setupAction">The <see cref="T:Microsoft.AspNetCore.Mvc.MvcViewOptions" /> which need to be configured.</param>
          <summary>
            Adds configuration of <see cref="T:Microsoft.AspNetCore.Mvc.MvcViewOptions" /> for the application.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcBuilderExtensions.AddViewOptions(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.MvcViewOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />
      </Targets>
      <Member MemberName="AddCookieTempDataProvider">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddCookieTempDataProvider (this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddCookieTempDataProvider(class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcCoreBuilderExtensions.AddCookieTempDataProvider(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />.</param>
          <summary>
            Registers <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.CookieTempDataProvider" /> as the default <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataProvider" /> in the
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />. Also registers the default view services.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcCoreBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcCoreBuilderExtensions.AddCookieTempDataProvider(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />
      </Targets>
      <Member MemberName="AddCookieTempDataProvider">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddCookieTempDataProvider (this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, Action&lt;Microsoft.AspNetCore.Mvc.CookieTempDataProviderOptions&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddCookieTempDataProvider(class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, class System.Action`1&lt;class Microsoft.AspNetCore.Mvc.CookieTempDataProviderOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcCoreBuilderExtensions.AddCookieTempDataProvider(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Mvc.CookieTempDataProviderOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.AspNetCore.Mvc.CookieTempDataProviderOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />.</param>
          <param name="setupAction">
            An <see cref="T:System.Action`1" /> to configure the provided
            <see cref="T:Microsoft.AspNetCore.Mvc.CookieTempDataProviderOptions" />.
            </param>
          <summary>
            Registers <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.CookieTempDataProvider" /> as the default <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataProvider" /> in the
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />. Also registers the default view services.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcCoreBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcCoreBuilderExtensions.AddCookieTempDataProvider(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Mvc.CookieTempDataProviderOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />
      </Targets>
      <Member MemberName="AddViews">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddViews (this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddViews(class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcCoreBuilderExtensions.AddViews(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcCoreBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcCoreBuilderExtensions.AddViews(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />
      </Targets>
      <Member MemberName="AddViews">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddViews (this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, Action&lt;Microsoft.AspNetCore.Mvc.MvcViewOptions&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddViews(class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, class System.Action`1&lt;class Microsoft.AspNetCore.Mvc.MvcViewOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcCoreBuilderExtensions.AddViews(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Mvc.MvcViewOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.AspNetCore.Mvc.MvcViewOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="setupAction">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcCoreBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcCoreBuilderExtensions.AddViews(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Mvc.MvcViewOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />
      </Targets>
      <Member MemberName="ConfigureViews">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder ConfigureViews (this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, Action&lt;Microsoft.AspNetCore.Mvc.MvcViewOptions&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder ConfigureViews(class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, class System.Action`1&lt;class Microsoft.AspNetCore.Mvc.MvcViewOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcCoreBuilderExtensions.ConfigureViews(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Mvc.MvcViewOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.AspNetCore.Mvc.MvcViewOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="setupAction">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcCoreBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcViewFeaturesMvcCoreBuilderExtensions.ConfigureViews(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Mvc.MvcViewOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />
      </Targets>
      <Member MemberName="AddXmlDataContractSerializerFormatters">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcBuilder AddXmlDataContractSerializerFormatters (this Microsoft.Extensions.DependencyInjection.IMvcBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcBuilder AddXmlDataContractSerializerFormatters(class Microsoft.Extensions.DependencyInjection.IMvcBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcXmlMvcBuilderExtensions.AddXmlDataContractSerializerFormatters(Microsoft.Extensions.DependencyInjection.IMvcBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />.</param>
          <summary>
            Adds the XML DataContractSerializer formatters to MVC.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcXmlMvcBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcXmlMvcBuilderExtensions.AddXmlDataContractSerializerFormatters(Microsoft.Extensions.DependencyInjection.IMvcBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />
      </Targets>
      <Member MemberName="AddXmlSerializerFormatters">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcBuilder AddXmlSerializerFormatters (this Microsoft.Extensions.DependencyInjection.IMvcBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcBuilder AddXmlSerializerFormatters(class Microsoft.Extensions.DependencyInjection.IMvcBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcXmlMvcBuilderExtensions.AddXmlSerializerFormatters(Microsoft.Extensions.DependencyInjection.IMvcBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />.</param>
          <summary>
            Adds the XML Serializer formatters to MVC.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcXmlMvcBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcXmlMvcBuilderExtensions.AddXmlSerializerFormatters(Microsoft.Extensions.DependencyInjection.IMvcBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />
      </Targets>
      <Member MemberName="AddXmlDataContractSerializerFormatters">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddXmlDataContractSerializerFormatters (this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddXmlDataContractSerializerFormatters(class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcXmlMvcCoreBuilderExtensions.AddXmlDataContractSerializerFormatters(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />.</param>
          <summary>
            Adds the XML DataContractSerializer formatters to MVC.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcXmlMvcCoreBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcXmlMvcCoreBuilderExtensions.AddXmlDataContractSerializerFormatters(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />
      </Targets>
      <Member MemberName="AddXmlSerializerFormatters">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddXmlSerializerFormatters (this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddXmlSerializerFormatters(class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.MvcXmlMvcCoreBuilderExtensions.AddXmlSerializerFormatters(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />.</param>
          <summary>
            Adds the XML Serializer formatters to MVC.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.MvcXmlMvcCoreBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.MvcXmlMvcCoreBuilderExtensions.AddXmlSerializerFormatters(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddNodeServices">
        <MemberSignature Language="C#" Value="public static void AddNodeServices (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddNodeServices(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.NodeServicesServiceCollectionExtensions.AddNodeServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</param>
          <summary>
            Adds NodeServices support to the <paramref name="serviceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.NodeServicesServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.NodeServicesServiceCollectionExtensions.AddNodeServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddNodeServices">
        <MemberSignature Language="C#" Value="public static void AddNodeServices (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Action&lt;Microsoft.AspNetCore.NodeServices.NodeServicesOptions&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddNodeServices(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, class System.Action`1&lt;class Microsoft.AspNetCore.NodeServices.NodeServicesOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.NodeServicesServiceCollectionExtensions.AddNodeServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.NodeServices.NodeServicesOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.AspNetCore.NodeServices.NodeServicesOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</param>
          <param name="setupAction">A callback that will be invoked to populate the <see cref="T:Microsoft.AspNetCore.NodeServices.NodeServicesOptions" />.</param>
          <summary>
            Adds NodeServices support to the <paramref name="serviceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.NodeServicesServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.NodeServicesServiceCollectionExtensions.AddNodeServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.NodeServices.NodeServicesOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationBuilder" />
      </Targets>
      <Member MemberName="AddOAuth">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddOAuth (this Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme, Action&lt;Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions&gt; configureOptions);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddOAuth(class Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme, class System.Action`1&lt;class Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.OAuthExtensions.AddOAuth(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.Action{Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Authentication.AuthenticationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Authentication.AuthenticationBuilder" RefType="this" />
          <Parameter Name="authenticationScheme" Type="System.String" />
          <Parameter Name="configureOptions" Type="System.Action&lt;Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="authenticationScheme">To be added.</param>
          <param name="configureOptions">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.OAuthExtensions" Member="M:Microsoft.Extensions.DependencyInjection.OAuthExtensions.AddOAuth(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.Action{Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationBuilder" />
      </Targets>
      <Member MemberName="AddOAuth">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddOAuth (this Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme, string displayName, Action&lt;Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions&gt; configureOptions);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddOAuth(class Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme, string displayName, class System.Action`1&lt;class Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.OAuthExtensions.AddOAuth(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.String,System.Action{Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Authentication.AuthenticationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Authentication.AuthenticationBuilder" RefType="this" />
          <Parameter Name="authenticationScheme" Type="System.String" />
          <Parameter Name="displayName" Type="System.String" />
          <Parameter Name="configureOptions" Type="System.Action&lt;Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="authenticationScheme">To be added.</param>
          <param name="displayName">To be added.</param>
          <param name="configureOptions">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.OAuthExtensions" Member="M:Microsoft.Extensions.DependencyInjection.OAuthExtensions.AddOAuth(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.String,System.Action{Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationBuilder" />
      </Targets>
      <Member MemberName="AddOAuth&lt;TOptions,THandler&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddOAuth&lt;TOptions,THandler&gt; (this Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme, Action&lt;TOptions&gt; configureOptions) where TOptions : Microsoft.AspNetCore.Authentication.OAuth.OAuthOptionsnew() where THandler : Microsoft.AspNetCore.Authentication.OAuth.OAuthHandler&lt;TOptions&gt;;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddOAuth&lt;.ctor (class Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions) TOptions, (class Microsoft.AspNetCore.Authentication.OAuth.OAuthHandler`1&lt;!!TOptions&gt;) THandler&gt;(class Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme, class System.Action`1&lt;!!TOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.OAuthExtensions.AddOAuth``2(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.Action{``0})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Authentication.AuthenticationBuilder</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOptions">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <BaseTypeName>Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions</BaseTypeName>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="THandler">
            <Constraints>
              <BaseTypeName>Microsoft.AspNetCore.Authentication.OAuth.OAuthHandler&lt;TOptions&gt;</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Authentication.AuthenticationBuilder" RefType="this" />
          <Parameter Name="authenticationScheme" Type="System.String" />
          <Parameter Name="configureOptions" Type="System.Action&lt;TOptions&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TOptions">To be added.</typeparam>
          <typeparam name="THandler">To be added.</typeparam>
          <param name="builder">To be added.</param>
          <param name="authenticationScheme">To be added.</param>
          <param name="configureOptions">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.OAuthExtensions" Member="M:Microsoft.Extensions.DependencyInjection.OAuthExtensions.AddOAuth``2(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.Action{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationBuilder" />
      </Targets>
      <Member MemberName="AddOAuth&lt;TOptions,THandler&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddOAuth&lt;TOptions,THandler&gt; (this Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme, string displayName, Action&lt;TOptions&gt; configureOptions) where TOptions : Microsoft.AspNetCore.Authentication.OAuth.OAuthOptionsnew() where THandler : Microsoft.AspNetCore.Authentication.OAuth.OAuthHandler&lt;TOptions&gt;;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddOAuth&lt;.ctor (class Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions) TOptions, (class Microsoft.AspNetCore.Authentication.OAuth.OAuthHandler`1&lt;!!TOptions&gt;) THandler&gt;(class Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme, string displayName, class System.Action`1&lt;!!TOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.OAuthExtensions.AddOAuth``2(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.String,System.Action{``0})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Authentication.AuthenticationBuilder</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOptions">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <BaseTypeName>Microsoft.AspNetCore.Authentication.OAuth.OAuthOptions</BaseTypeName>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="THandler">
            <Constraints>
              <BaseTypeName>Microsoft.AspNetCore.Authentication.OAuth.OAuthHandler&lt;TOptions&gt;</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Authentication.AuthenticationBuilder" RefType="this" />
          <Parameter Name="authenticationScheme" Type="System.String" />
          <Parameter Name="displayName" Type="System.String" />
          <Parameter Name="configureOptions" Type="System.Action&lt;TOptions&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TOptions">To be added.</typeparam>
          <typeparam name="THandler">To be added.</typeparam>
          <param name="builder">To be added.</param>
          <param name="authenticationScheme">To be added.</param>
          <param name="displayName">To be added.</param>
          <param name="configureOptions">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.OAuthExtensions" Member="M:Microsoft.Extensions.DependencyInjection.OAuthExtensions.AddOAuth``2(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.String,System.Action{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationBuilder" />
      </Targets>
      <Member MemberName="AddOpenIdConnect">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddOpenIdConnect (this Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddOpenIdConnect(class Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.OpenIdConnectExtensions.AddOpenIdConnect(Microsoft.AspNetCore.Authentication.AuthenticationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Authentication.AuthenticationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Authentication.AuthenticationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.OpenIdConnectExtensions" Member="M:Microsoft.Extensions.DependencyInjection.OpenIdConnectExtensions.AddOpenIdConnect(Microsoft.AspNetCore.Authentication.AuthenticationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationBuilder" />
      </Targets>
      <Member MemberName="AddOpenIdConnect">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddOpenIdConnect (this Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, Action&lt;Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectOptions&gt; configureOptions);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddOpenIdConnect(class Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, class System.Action`1&lt;class Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.OpenIdConnectExtensions.AddOpenIdConnect(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.Action{Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Authentication.AuthenticationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Authentication.AuthenticationBuilder" RefType="this" />
          <Parameter Name="configureOptions" Type="System.Action&lt;Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="configureOptions">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.OpenIdConnectExtensions" Member="M:Microsoft.Extensions.DependencyInjection.OpenIdConnectExtensions.AddOpenIdConnect(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.Action{Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationBuilder" />
      </Targets>
      <Member MemberName="AddOpenIdConnect">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddOpenIdConnect (this Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme, Action&lt;Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectOptions&gt; configureOptions);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddOpenIdConnect(class Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme, class System.Action`1&lt;class Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.OpenIdConnectExtensions.AddOpenIdConnect(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.Action{Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Authentication.AuthenticationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Authentication.AuthenticationBuilder" RefType="this" />
          <Parameter Name="authenticationScheme" Type="System.String" />
          <Parameter Name="configureOptions" Type="System.Action&lt;Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="authenticationScheme">To be added.</param>
          <param name="configureOptions">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.OpenIdConnectExtensions" Member="M:Microsoft.Extensions.DependencyInjection.OpenIdConnectExtensions.AddOpenIdConnect(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.Action{Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationBuilder" />
      </Targets>
      <Member MemberName="AddOpenIdConnect">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddOpenIdConnect (this Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme, string displayName, Action&lt;Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectOptions&gt; configureOptions);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddOpenIdConnect(class Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme, string displayName, class System.Action`1&lt;class Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.OpenIdConnectExtensions.AddOpenIdConnect(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.String,System.Action{Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Authentication.AuthenticationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Authentication.AuthenticationBuilder" RefType="this" />
          <Parameter Name="authenticationScheme" Type="System.String" />
          <Parameter Name="displayName" Type="System.String" />
          <Parameter Name="configureOptions" Type="System.Action&lt;Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="authenticationScheme">To be added.</param>
          <param name="displayName">To be added.</param>
          <param name="configureOptions">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.OpenIdConnectExtensions" Member="M:Microsoft.Extensions.DependencyInjection.OpenIdConnectExtensions.AddOpenIdConnect(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.String,System.Action{Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="Configure&lt;TOptions&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection Configure&lt;TOptions&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.Configuration.IConfiguration config) where TOptions : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection Configure&lt;class TOptions&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class Microsoft.Extensions.Configuration.IConfiguration config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.OptionsConfigurationServiceCollectionExtensions.Configure``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOptions">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="config" Type="Microsoft.Extensions.Configuration.IConfiguration" />
        </Parameters>
        <Docs>
          <typeparam name="TOptions">The type of options being configured.</typeparam>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the services to.</param>
          <param name="config">The configuration being bound.</param>
          <summary>
            Registers a configuration instance which TOptions will bind against.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.OptionsConfigurationServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.OptionsConfigurationServiceCollectionExtensions.Configure``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="Configure&lt;TOptions&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection Configure&lt;TOptions&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string name, Microsoft.Extensions.Configuration.IConfiguration config) where TOptions : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection Configure&lt;class TOptions&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, string name, class Microsoft.Extensions.Configuration.IConfiguration config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.OptionsConfigurationServiceCollectionExtensions.Configure``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,Microsoft.Extensions.Configuration.IConfiguration)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOptions">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="config" Type="Microsoft.Extensions.Configuration.IConfiguration" />
        </Parameters>
        <Docs>
          <typeparam name="TOptions">The type of options being configured.</typeparam>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the services to.</param>
          <param name="name">The name of the options instance.</param>
          <param name="config">The configuration being bound.</param>
          <summary>
            Registers a configuration instance which TOptions will bind against.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.OptionsConfigurationServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.OptionsConfigurationServiceCollectionExtensions.Configure``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,Microsoft.Extensions.Configuration.IConfiguration)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddOptions">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddOptions (this Microsoft.Extensions.DependencyInjection.IServiceCollection services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddOptions(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.AddOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the services to.</param>
          <summary>
            Adds services required for using options.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.AddOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="Configure&lt;TOptions&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection Configure&lt;TOptions&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;TOptions&gt; configureOptions) where TOptions : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection Configure&lt;class TOptions&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;!!TOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.Configure``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{``0})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOptions">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="configureOptions" Type="System.Action&lt;TOptions&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TOptions">The options type to be configured.</typeparam>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the services to.</param>
          <param name="configureOptions">The action used to configure the options.</param>
          <summary>
            Registers an action used to configure a particular type of options.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.Configure``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="Configure&lt;TOptions&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection Configure&lt;TOptions&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string name, Action&lt;TOptions&gt; configureOptions) where TOptions : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection Configure&lt;class TOptions&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, string name, class System.Action`1&lt;!!TOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.Configure``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{``0})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOptions">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="configureOptions" Type="System.Action&lt;TOptions&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TOptions">The options type to be configured.</typeparam>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the services to.</param>
          <param name="name">The name of the options instance.</param>
          <param name="configureOptions">The action used to configure the options.</param>
          <summary>
            Registers an action used to configure a particular type of options.
            Note: These are run before all <seealso cref="M:Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.PostConfigure``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{``0})" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.Configure``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="ConfigureAll&lt;TOptions&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureAll&lt;TOptions&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;TOptions&gt; configureOptions) where TOptions : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureAll&lt;class TOptions&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;!!TOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.ConfigureAll``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{``0})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOptions">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="configureOptions" Type="System.Action&lt;TOptions&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TOptions">The options type to be configured.</typeparam>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the services to.</param>
          <param name="configureOptions">The action used to configure the options.</param>
          <summary>
            Registers an action used to configure all instances of a particular type of options.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.ConfigureAll``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="PostConfigure&lt;TOptions&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection PostConfigure&lt;TOptions&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;TOptions&gt; configureOptions) where TOptions : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection PostConfigure&lt;class TOptions&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;!!TOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.PostConfigure``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{``0})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOptions">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="configureOptions" Type="System.Action&lt;TOptions&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TOptions">The options type to be configured.</typeparam>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the services to.</param>
          <param name="configureOptions">The action used to configure the options.</param>
          <summary>
            Registers an action used to initialize a particular type of options.
            Note: These are run after all <seealso cref="M:Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.Configure``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{``0})" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.PostConfigure``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="PostConfigure&lt;TOptions&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection PostConfigure&lt;TOptions&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string name, Action&lt;TOptions&gt; configureOptions) where TOptions : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection PostConfigure&lt;class TOptions&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, string name, class System.Action`1&lt;!!TOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.PostConfigure``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{``0})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOptions">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="configureOptions" Type="System.Action&lt;TOptions&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TOptions">The options type to be configure.</typeparam>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the services to.</param>
          <param name="name">The name of the options instance.</param>
          <param name="configureOptions">The action used to configure the options.</param>
          <summary>
            Registers an action used to configure a particular type of options.
            Note: These are run after all <seealso cref="M:Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.Configure``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{``0})" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.PostConfigure``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="PostConfigureAll&lt;TOptions&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection PostConfigureAll&lt;TOptions&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;TOptions&gt; configureOptions) where TOptions : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection PostConfigureAll&lt;class TOptions&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;!!TOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.PostConfigureAll``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{``0})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOptions">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="configureOptions" Type="System.Action&lt;TOptions&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TOptions">The options type to be configured.</typeparam>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the services to.</param>
          <param name="configureOptions">The action used to configure the options.</param>
          <summary>
            Registers an action used to post configure all instances of a particular type of options.
            Note: These are run after all <seealso cref="M:Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.Configure``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{``0})" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.OptionsServiceCollectionExtensions.PostConfigureAll``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection" />
      </Targets>
      <Member MemberName="AddPageRoute">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AddPageRoute (this Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection conventions, string pageName, string route);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AddPageRoute(class Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection conventions, string pageName, string route) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AddPageRoute(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="conventions" Type="Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection" RefType="this" />
          <Parameter Name="pageName" Type="System.String" />
          <Parameter Name="route" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="conventions">The <see cref="T:Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection" />.</param>
          <param name="pageName">The page name.</param>
          <param name="route">The route to associate with the page.</param>
          <summary>
            Adds the specified <paramref name="route" /> to the page at the specified <paramref name="pageName" />.
            <para>
            The page can be routed via <paramref name="route" /> in addition to the default set of path based routes.
            All links generated for this page will use the specified route.
            </para></summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AddPageRoute(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection" />
      </Targets>
      <Member MemberName="AllowAnonymousToFolder">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AllowAnonymousToFolder (this Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection conventions, string folderPath);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AllowAnonymousToFolder(class Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection conventions, string folderPath) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AllowAnonymousToFolder(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="conventions" Type="Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection" RefType="this" />
          <Parameter Name="folderPath" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="conventions">The <see cref="T:Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection" /> to configure.</param>
          <param name="folderPath">The folder path.</param>
          <summary>
            Adds a <see cref="T:Microsoft.AspNetCore.Mvc.Authorization.AllowAnonymousFilter" /> to all pages under the specified folder.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AllowAnonymousToFolder(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection" />
      </Targets>
      <Member MemberName="AllowAnonymousToPage">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AllowAnonymousToPage (this Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection conventions, string pageName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AllowAnonymousToPage(class Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection conventions, string pageName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AllowAnonymousToPage(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="conventions" Type="Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection" RefType="this" />
          <Parameter Name="pageName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="conventions">The <see cref="T:Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection" /> to configure.</param>
          <param name="pageName">The page name.</param>
          <summary>
            Adds a <see cref="T:Microsoft.AspNetCore.Mvc.Authorization.AllowAnonymousFilter" /> to the page with the specified name.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AllowAnonymousToPage(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection" />
      </Targets>
      <Member MemberName="AuthorizeFolder">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AuthorizeFolder (this Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection conventions, string folderPath);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AuthorizeFolder(class Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection conventions, string folderPath) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AuthorizeFolder(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="conventions" Type="Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection" RefType="this" />
          <Parameter Name="folderPath" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="conventions">The <see cref="T:Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection" /> to configure.</param>
          <param name="folderPath">The folder path.</param>
          <summary>
            Adds a <see cref="T:Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter" /> to all pages under the specified folder.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AuthorizeFolder(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection" />
      </Targets>
      <Member MemberName="AuthorizeFolder">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AuthorizeFolder (this Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection conventions, string folderPath, string policy);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AuthorizeFolder(class Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection conventions, string folderPath, string policy) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AuthorizeFolder(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="conventions" Type="Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection" RefType="this" />
          <Parameter Name="folderPath" Type="System.String" />
          <Parameter Name="policy" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="conventions">The <see cref="T:Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection" /> to configure.</param>
          <param name="folderPath">The folder path.</param>
          <param name="policy">The authorization policy.</param>
          <summary>
            Adds a <see cref="T:Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter" /> with the specified policy to all pages under the specified folder.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AuthorizeFolder(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection" />
      </Targets>
      <Member MemberName="AuthorizePage">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AuthorizePage (this Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection conventions, string pageName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AuthorizePage(class Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection conventions, string pageName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AuthorizePage(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="conventions" Type="Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection" RefType="this" />
          <Parameter Name="pageName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="conventions">The <see cref="T:Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection" /> to configure.</param>
          <param name="pageName">The page name.</param>
          <summary>
            Adds a <see cref="T:Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter" /> to the page with the specified name.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AuthorizePage(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection" />
      </Targets>
      <Member MemberName="AuthorizePage">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AuthorizePage (this Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection conventions, string pageName, string policy);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection AuthorizePage(class Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection conventions, string pageName, string policy) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AuthorizePage(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="conventions" Type="Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection" RefType="this" />
          <Parameter Name="pageName" Type="System.String" />
          <Parameter Name="policy" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="conventions">The <see cref="T:Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection" /> to configure.</param>
          <param name="pageName">The page name.</param>
          <param name="policy">The authorization policy.</param>
          <summary>
            Adds a <see cref="T:Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter" /> with the specified policy to the page with the specified name.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.AuthorizePage(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection" />
      </Targets>
      <Member MemberName="ConfigureFilter">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection ConfigureFilter (this Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection conventions, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection ConfigureFilter(class Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection conventions, class Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.ConfigureFilter(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection,Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="conventions" Type="Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection" RefType="this" />
          <Parameter Name="filter" Type="Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata" />
        </Parameters>
        <Docs>
          <param name="conventions">The <see cref="T:Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection" /> to configure.</param>
          <param name="filter">The <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata" /> to add.</param>
          <summary>
            Configures the specified <paramref name="filter" /> to apply to all Razor Pages.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.ConfigureFilter(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection,Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection" />
      </Targets>
      <Member MemberName="ConfigureFilter">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelConvention ConfigureFilter (this Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection conventions, Func&lt;Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel,Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata&gt; factory);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelConvention ConfigureFilter(class Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection conventions, class System.Func`2&lt;class Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel, class Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata&gt; factory) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.ConfigureFilter(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection,System.Func{Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel,Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Mvc.ApplicationModels.IPageApplicationModelConvention</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="conventions" Type="Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection" RefType="this" />
          <Parameter Name="factory" Type="System.Func&lt;Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel,Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata&gt;" />
        </Parameters>
        <Docs>
          <param name="conventions">The <see cref="T:Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection" /> to configure.</param>
          <param name="factory">The factory to create filters.</param>
          <summary>
            Configures the specified <paramref name="factory" /> to apply filters to all Razor Pages.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.PageConventionCollectionExtensions.ConfigureFilter(Microsoft.AspNetCore.Mvc.ApplicationModels.PageConventionCollection,System.Func{Microsoft.AspNetCore.Mvc.ApplicationModels.PageApplicationModel,Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddAuthorizationPolicyEvaluator">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddAuthorizationPolicyEvaluator (this Microsoft.Extensions.DependencyInjection.IServiceCollection services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddAuthorizationPolicyEvaluator(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.PolicyServiceCollectionExtensions.AddAuthorizationPolicyEvaluator(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
          <summary>
            Adds authorization policy services to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />. 
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.PolicyServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.PolicyServiceCollectionExtensions.AddAuthorizationPolicyEvaluator(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddSpaPrerenderer">
        <MemberSignature Language="C#" Value="public static void AddSpaPrerenderer (this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddSpaPrerenderer(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.PrerenderingServiceCollectionExtensions.AddSpaPrerenderer(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</param>
          <summary>
            Configures the dependency injection system to supply an implementation
            of <see cref="T:Microsoft.AspNetCore.SpaServices.Prerendering.ISpaPrerenderer" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.PrerenderingServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.PrerenderingServiceCollectionExtensions.AddSpaPrerenderer(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddDistributedRedisCache">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDistributedRedisCache (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.Extensions.Caching.Redis.RedisCacheOptions&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDistributedRedisCache(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.Extensions.Caching.Redis.RedisCacheOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.RedisCacheServiceCollectionExtensions.AddDistributedRedisCache(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.Caching.Redis.RedisCacheOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.Extensions.Caching.Redis.RedisCacheOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
          <param name="setupAction">An <see cref="T:System.Action`1" /> to configure the provided
            <see cref="T:Microsoft.Extensions.Caching.Redis.RedisCacheOptions" />.</param>
          <summary>
            Adds Redis distributed caching services to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.RedisCacheServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.RedisCacheServiceCollectionExtensions.AddDistributedRedisCache(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.Caching.Redis.RedisCacheOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddResponseCaching">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddResponseCaching (this Microsoft.Extensions.DependencyInjection.IServiceCollection services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddResponseCaching(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ResponseCachingServicesExtensions.AddResponseCaching(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> for adding services.</param>
          <summary>
            Add response caching services.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ResponseCachingServicesExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ResponseCachingServicesExtensions.AddResponseCaching(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddResponseCaching">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddResponseCaching (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.AspNetCore.ResponseCaching.ResponseCachingOptions&gt; configureOptions);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddResponseCaching(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.AspNetCore.ResponseCaching.ResponseCachingOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ResponseCachingServicesExtensions.AddResponseCaching(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.ResponseCaching.ResponseCachingOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="configureOptions" Type="System.Action&lt;Microsoft.AspNetCore.ResponseCaching.ResponseCachingOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> for adding services.</param>
          <param name="configureOptions">A delegate to configure the <see cref="T:Microsoft.AspNetCore.ResponseCaching.ResponseCachingOptions" />.</param>
          <summary>
            Add response caching services and configure the related options.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ResponseCachingServicesExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ResponseCachingServicesExtensions.AddResponseCaching(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.ResponseCaching.ResponseCachingOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddRouting">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddRouting (this Microsoft.Extensions.DependencyInjection.IServiceCollection services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddRouting(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.RoutingServiceCollectionExtensions.AddRouting(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the services to.</param>
          <summary>
            Adds services required for routing requests.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.RoutingServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.RoutingServiceCollectionExtensions.AddRouting(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddRouting">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddRouting (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.AspNetCore.Routing.RouteOptions&gt; configureOptions);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddRouting(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.AspNetCore.Routing.RouteOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.RoutingServiceCollectionExtensions.AddRouting(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Routing.RouteOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="configureOptions" Type="System.Action&lt;Microsoft.AspNetCore.Routing.RouteOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the services to.</param>
          <param name="configureOptions">The routing options to configure the middleware with.</param>
          <summary>
            Adds services required for routing requests.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.RoutingServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.RoutingServiceCollectionExtensions.AddRouting(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Routing.RouteOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="BuildServiceProvider">
        <MemberSignature Language="C#" Value="public static IServiceProvider BuildServiceProvider (this Microsoft.Extensions.DependencyInjection.IServiceCollection services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IServiceProvider BuildServiceProvider(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.IServiceProvider</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="BuildServiceProvider">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.ServiceProvider BuildServiceProvider (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.DependencyInjection.ServiceProviderOptions options);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.ServiceProvider BuildServiceProvider(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class Microsoft.Extensions.DependencyInjection.ServiceProviderOptions options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceProviderOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.ServiceProvider</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="options" Type="Microsoft.Extensions.DependencyInjection.ServiceProviderOptions" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> containing service descriptors.</param>
          <param name="options">
            Configures various service provider behaviors.
            </param>
          <summary>
            Creates an <see cref="T:System.IServiceProvider" /> containing services from the provided <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
            optionaly enabling scope validation.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceProviderOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="BuildServiceProvider">
        <MemberSignature Language="C#" Value="public static IServiceProvider BuildServiceProvider (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, bool validateScopes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IServiceProvider BuildServiceProvider(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, bool validateScopes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.IServiceProvider</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="validateScopes" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> containing service descriptors.</param>
          <param name="validateScopes">
            <c>true</c> to perform check verifying that scoped services never gets resolved from root provider; otherwise <c>false</c>.
            </param>
          <summary>
            Creates an <see cref="T:System.IServiceProvider" /> containing services from the provided <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
            optionaly enabling scope validation.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddScoped">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddScoped (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Type serviceType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddScoped(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Type serviceType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="serviceType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the service to.</param>
          <param name="serviceType">The type of the service to register and the implementation to use.</param>
          <summary>
            Adds a scoped service of the type specified in <paramref name="serviceType" /> to the
            specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddScoped">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddScoped (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Type serviceType, Func&lt;IServiceProvider,object&gt; implementationFactory);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddScoped(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Type serviceType, class System.Func`2&lt;class System.IServiceProvider, object&gt; implementationFactory) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="serviceType" Type="System.Type" />
          <Parameter Name="implementationFactory" Type="System.Func&lt;System.IServiceProvider,System.Object&gt;" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the service to.</param>
          <param name="serviceType">The type of the service to register.</param>
          <param name="implementationFactory">The factory that creates the service.</param>
          <summary>
            Adds a scoped service of the type specified in <paramref name="serviceType" /> with a
            factory specified in <paramref name="implementationFactory" /> to the
            specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddScoped">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddScoped (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Type serviceType, Type implementationType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddScoped(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Type serviceType, class System.Type implementationType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="serviceType" Type="System.Type" />
          <Parameter Name="implementationType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the service to.</param>
          <param name="serviceType">The type of the service to register.</param>
          <param name="implementationType">The implementation type of the service.</param>
          <summary>
            Adds a scoped service of the type specified in <paramref name="serviceType" /> with an
            implementation of the type specified in <paramref name="implementationType" /> to the
            specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddScoped&lt;TService&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddScoped&lt;TService&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services) where TService : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddScoped&lt;class TService&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TService">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TService">The type of the service to add.</typeparam>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the service to.</param>
          <summary>
            Adds a scoped service of the type specified in <typeparamref name="TService" /> to the
            specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddScoped&lt;TService&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddScoped&lt;TService&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Func&lt;IServiceProvider,TService&gt; implementationFactory) where TService : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddScoped&lt;class TService&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Func`2&lt;class System.IServiceProvider, !!TService&gt; implementationFactory) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TService">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="implementationFactory" Type="System.Func&lt;System.IServiceProvider,TService&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TService">The type of the service to add.</typeparam>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the service to.</param>
          <param name="implementationFactory">The factory that creates the service.</param>
          <summary>
            Adds a scoped service of the type specified in <typeparamref name="TService" /> with a
            factory specified in <paramref name="implementationFactory" /> to the
            specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddScoped&lt;TService,TImplementation&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddScoped&lt;TService,TImplementation&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services) where TService : class where TImplementation : class, TService;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddScoped&lt;class TService, class (!!TService) TImplementation&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TService">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TImplementation">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
              <BaseTypeName>TService</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TService">The type of the service to add.</typeparam>
          <typeparam name="TImplementation">The type of the implementation to use.</typeparam>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the service to.</param>
          <summary>
            Adds a scoped service of the type specified in <typeparamref name="TService" /> with an
            implementation type specified in <typeparamref name="TImplementation" /> to the
            specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddScoped&lt;TService,TImplementation&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddScoped&lt;TService,TImplementation&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Func&lt;IServiceProvider,TImplementation&gt; implementationFactory) where TService : class where TImplementation : class, TService;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddScoped&lt;class TService, class (!!TService) TImplementation&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Func`2&lt;class System.IServiceProvider, !!TImplementation&gt; implementationFactory) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``1})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TService">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TImplementation">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
              <BaseTypeName>TService</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="implementationFactory" Type="System.Func&lt;System.IServiceProvider,TImplementation&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TService">The type of the service to add.</typeparam>
          <typeparam name="TImplementation">The type of the implementation to use.</typeparam>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the service to.</param>
          <param name="implementationFactory">The factory that creates the service.</param>
          <summary>
            Adds a scoped service of the type specified in <typeparamref name="TService" /> with an
            implementation type specified in <typeparamref name="TImplementation" /> using the
            factory specified in <paramref name="implementationFactory" /> to the
            specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddSingleton">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddSingleton (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Type serviceType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddSingleton(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Type serviceType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="serviceType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the service to.</param>
          <param name="serviceType">The type of the service to register and the implementation to use.</param>
          <summary>
            Adds a singleton service of the type specified in <paramref name="serviceType" /> to the
            specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddSingleton">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddSingleton (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Type serviceType, Func&lt;IServiceProvider,object&gt; implementationFactory);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddSingleton(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Type serviceType, class System.Func`2&lt;class System.IServiceProvider, object&gt; implementationFactory) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="serviceType" Type="System.Type" />
          <Parameter Name="implementationFactory" Type="System.Func&lt;System.IServiceProvider,System.Object&gt;" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the service to.</param>
          <param name="serviceType">The type of the service to register.</param>
          <param name="implementationFactory">The factory that creates the service.</param>
          <summary>
            Adds a singleton service of the type specified in <paramref name="serviceType" /> with a
            factory specified in <paramref name="implementationFactory" /> to the
            specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddSingleton">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddSingleton (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Type serviceType, object implementationInstance);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddSingleton(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Type serviceType, object implementationInstance) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="serviceType" Type="System.Type" />
          <Parameter Name="implementationInstance" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the service to.</param>
          <param name="serviceType">The type of the service to register.</param>
          <param name="implementationInstance">The instance of the service.</param>
          <summary>
            Adds a singleton service of the type specified in <paramref name="serviceType" /> with an
            instance specified in <paramref name="implementationInstance" /> to the
            specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddSingleton">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddSingleton (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Type serviceType, Type implementationType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddSingleton(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Type serviceType, class System.Type implementationType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="serviceType" Type="System.Type" />
          <Parameter Name="implementationType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the service to.</param>
          <param name="serviceType">The type of the service to register.</param>
          <param name="implementationType">The implementation type of the service.</param>
          <summary>
            Adds a singleton service of the type specified in <paramref name="serviceType" /> with an
            implementation of the type specified in <paramref name="implementationType" /> to the
            specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddSingleton&lt;TService&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddSingleton&lt;TService&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services) where TService : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddSingleton&lt;class TService&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TService">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TService">The type of the service to add.</typeparam>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the service to.</param>
          <summary>
            Adds a singleton service of the type specified in <typeparamref name="TService" /> to the
            specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddSingleton&lt;TService&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddSingleton&lt;TService&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, TService implementationInstance) where TService : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddSingleton&lt;class TService&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, !!TService implementationInstance) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,``0)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TService">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="implementationInstance" Type="TService" />
        </Parameters>
        <Docs>
          <typeparam name="TService">To be added.</typeparam>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the service to.</param>
          <param name="implementationInstance">The instance of the service.</param>
          <summary>
            Adds a singleton service of the type specified in <typeparamref name="TService" /> with an
            instance specified in <paramref name="implementationInstance" /> to the
            specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddSingleton&lt;TService&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddSingleton&lt;TService&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Func&lt;IServiceProvider,TService&gt; implementationFactory) where TService : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddSingleton&lt;class TService&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Func`2&lt;class System.IServiceProvider, !!TService&gt; implementationFactory) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TService">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="implementationFactory" Type="System.Func&lt;System.IServiceProvider,TService&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TService">The type of the service to add.</typeparam>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the service to.</param>
          <param name="implementationFactory">The factory that creates the service.</param>
          <summary>
            Adds a singleton service of the type specified in <typeparamref name="TService" /> with a
            factory specified in <paramref name="implementationFactory" /> to the
            specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddSingleton&lt;TService,TImplementation&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddSingleton&lt;TService,TImplementation&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services) where TService : class where TImplementation : class, TService;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddSingleton&lt;class TService, class (!!TService) TImplementation&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TService">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TImplementation">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
              <BaseTypeName>TService</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TService">The type of the service to add.</typeparam>
          <typeparam name="TImplementation">The type of the implementation to use.</typeparam>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the service to.</param>
          <summary>
            Adds a singleton service of the type specified in <typeparamref name="TService" /> with an
            implementation type specified in <typeparamref name="TImplementation" /> to the
            specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddSingleton&lt;TService,TImplementation&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddSingleton&lt;TService,TImplementation&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Func&lt;IServiceProvider,TImplementation&gt; implementationFactory) where TService : class where TImplementation : class, TService;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddSingleton&lt;class TService, class (!!TService) TImplementation&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Func`2&lt;class System.IServiceProvider, !!TImplementation&gt; implementationFactory) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``1})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TService">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TImplementation">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
              <BaseTypeName>TService</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="implementationFactory" Type="System.Func&lt;System.IServiceProvider,TImplementation&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TService">The type of the service to add.</typeparam>
          <typeparam name="TImplementation">The type of the implementation to use.</typeparam>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the service to.</param>
          <param name="implementationFactory">The factory that creates the service.</param>
          <summary>
            Adds a singleton service of the type specified in <typeparamref name="TService" /> with an
            implementation type specified in <typeparamref name="TImplementation" /> using the
            factory specified in <paramref name="implementationFactory" /> to the
            specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddTransient">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddTransient (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Type serviceType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddTransient(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Type serviceType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="serviceType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the service to.</param>
          <param name="serviceType">The type of the service to register and the implementation to use.</param>
          <summary>
            Adds a transient service of the type specified in <paramref name="serviceType" /> to the
            specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddTransient">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddTransient (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Type serviceType, Func&lt;IServiceProvider,object&gt; implementationFactory);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddTransient(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Type serviceType, class System.Func`2&lt;class System.IServiceProvider, object&gt; implementationFactory) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="serviceType" Type="System.Type" />
          <Parameter Name="implementationFactory" Type="System.Func&lt;System.IServiceProvider,System.Object&gt;" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the service to.</param>
          <param name="serviceType">The type of the service to register.</param>
          <param name="implementationFactory">The factory that creates the service.</param>
          <summary>
            Adds a transient service of the type specified in <paramref name="serviceType" /> with a
            factory specified in <paramref name="implementationFactory" /> to the
            specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddTransient">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddTransient (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Type serviceType, Type implementationType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddTransient(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Type serviceType, class System.Type implementationType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="serviceType" Type="System.Type" />
          <Parameter Name="implementationType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the service to.</param>
          <param name="serviceType">The type of the service to register.</param>
          <param name="implementationType">The implementation type of the service.</param>
          <summary>
            Adds a transient service of the type specified in <paramref name="serviceType" /> with an
            implementation of the type specified in <paramref name="implementationType" /> to the
            specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddTransient&lt;TService&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddTransient&lt;TService&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services) where TService : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddTransient&lt;class TService&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TService">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TService">The type of the service to add.</typeparam>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the service to.</param>
          <summary>
            Adds a transient service of the type specified in <typeparamref name="TService" /> to the
            specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddTransient&lt;TService&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddTransient&lt;TService&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Func&lt;IServiceProvider,TService&gt; implementationFactory) where TService : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddTransient&lt;class TService&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Func`2&lt;class System.IServiceProvider, !!TService&gt; implementationFactory) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TService">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="implementationFactory" Type="System.Func&lt;System.IServiceProvider,TService&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TService">The type of the service to add.</typeparam>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the service to.</param>
          <param name="implementationFactory">The factory that creates the service.</param>
          <summary>
            Adds a transient service of the type specified in <typeparamref name="TService" /> with a
            factory specified in <paramref name="implementationFactory" /> to the
            specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddTransient&lt;TService,TImplementation&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddTransient&lt;TService,TImplementation&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services) where TService : class where TImplementation : class, TService;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddTransient&lt;class TService, class (!!TService) TImplementation&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TService">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TImplementation">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
              <BaseTypeName>TService</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TService">The type of the service to add.</typeparam>
          <typeparam name="TImplementation">The type of the implementation to use.</typeparam>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the service to.</param>
          <summary>
            Adds a transient service of the type specified in <typeparamref name="TService" /> with an
            implementation type specified in <typeparamref name="TImplementation" /> to the
            specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddTransient&lt;TService,TImplementation&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddTransient&lt;TService,TImplementation&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Func&lt;IServiceProvider,TImplementation&gt; implementationFactory) where TService : class where TImplementation : class, TService;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddTransient&lt;class TService, class (!!TService) TImplementation&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Func`2&lt;class System.IServiceProvider, !!TImplementation&gt; implementationFactory) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``1})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TService">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TImplementation">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
              <BaseTypeName>TService</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="implementationFactory" Type="System.Func&lt;System.IServiceProvider,TImplementation&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TService">The type of the service to add.</typeparam>
          <typeparam name="TImplementation">The type of the implementation to use.</typeparam>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the service to.</param>
          <param name="implementationFactory">The factory that creates the service.</param>
          <summary>
            Adds a transient service of the type specified in <typeparamref name="TService" /> with an
            implementation type specified in <typeparamref name="TImplementation" /> using the
            factory specified in <paramref name="implementationFactory" /> to the
            specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IServiceProvider" />
      </Targets>
      <Member MemberName="CreateScope">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceScope CreateScope (this IServiceProvider provider);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceScope CreateScope(class System.IServiceProvider provider) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.CreateScope(System.IServiceProvider)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceScope</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="provider" Type="System.IServiceProvider" RefType="this" />
        </Parameters>
        <Docs>
          <param name="provider">The <see cref="T:System.IServiceProvider" /> to create the scope from.</param>
          <summary>
            Creates a new <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceScope" /> that can be used to resolve scoped services.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.CreateScope(System.IServiceProvider)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IServiceProvider" />
      </Targets>
      <Member MemberName="GetRequiredService">
        <MemberSignature Language="C#" Value="public static object GetRequiredService (this IServiceProvider provider, Type serviceType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetRequiredService(class System.IServiceProvider provider, class System.Type serviceType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(System.IServiceProvider,System.Type)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Object</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="provider" Type="System.IServiceProvider" RefType="this" />
          <Parameter Name="serviceType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="provider">The <see cref="T:System.IServiceProvider" /> to retrieve the service object from.</param>
          <param name="serviceType">An object that specifies the type of service object to get.</param>
          <summary>
            Get service of type <paramref name="serviceType" /> from the <see cref="T:System.IServiceProvider" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(System.IServiceProvider,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IServiceProvider" />
      </Targets>
      <Member MemberName="GetRequiredService&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T GetRequiredService&lt;T&gt; (this IServiceProvider provider);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetRequiredService&lt;T&gt;(class System.IServiceProvider provider) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService``1(System.IServiceProvider)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="provider" Type="System.IServiceProvider" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of service object to get.</typeparam>
          <param name="provider">The <see cref="T:System.IServiceProvider" /> to retrieve the service object from.</param>
          <summary>
            Get service of type <typeparamref name="T" /> from the <see cref="T:System.IServiceProvider" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService``1(System.IServiceProvider)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IServiceProvider" />
      </Targets>
      <Member MemberName="GetService&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T GetService&lt;T&gt; (this IServiceProvider provider);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetService&lt;T&gt;(class System.IServiceProvider provider) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetService``1(System.IServiceProvider)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="provider" Type="System.IServiceProvider" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of service object to get.</typeparam>
          <param name="provider">The <see cref="T:System.IServiceProvider" /> to retrieve the service object from.</param>
          <summary>
            Get service of type <typeparamref name="T" /> from the <see cref="T:System.IServiceProvider" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetService``1(System.IServiceProvider)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IServiceProvider" />
      </Targets>
      <Member MemberName="GetServices">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;object&gt; GetServices (this IServiceProvider provider, Type serviceType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;object&gt; GetServices(class System.IServiceProvider provider, class System.Type serviceType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetServices(System.IServiceProvider,System.Type)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Object&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="provider" Type="System.IServiceProvider" RefType="this" />
          <Parameter Name="serviceType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="provider">The <see cref="T:System.IServiceProvider" /> to retrieve the services from.</param>
          <param name="serviceType">An object that specifies the type of service object to get.</param>
          <summary>
            Get an enumeration of services of type <paramref name="serviceType" /> from the <see cref="T:System.IServiceProvider" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetServices(System.IServiceProvider,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IServiceProvider" />
      </Targets>
      <Member MemberName="GetServices&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;T&gt; GetServices&lt;T&gt; (this IServiceProvider provider);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; GetServices&lt;T&gt;(class System.IServiceProvider provider) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetServices``1(System.IServiceProvider)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="provider" Type="System.IServiceProvider" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of service object to get.</typeparam>
          <param name="provider">The <see cref="T:System.IServiceProvider" /> to retrieve the services from.</param>
          <summary>
            Get an enumeration of services of type <typeparamref name="T" /> from the <see cref="T:System.IServiceProvider" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions" Member="M:Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetServices``1(System.IServiceProvider)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddSession">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddSession (this Microsoft.Extensions.DependencyInjection.IServiceCollection services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddSession(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.SessionServiceCollectionExtensions.AddSession(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the services to.</param>
          <summary>
            Adds services required for application session state.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.SessionServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.SessionServiceCollectionExtensions.AddSession(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddSession">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddSession (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.AspNetCore.Builder.SessionOptions&gt; configure);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddSession(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.AspNetCore.Builder.SessionOptions&gt; configure) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.SessionServiceCollectionExtensions.AddSession(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Builder.SessionOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="configure" Type="System.Action&lt;Microsoft.AspNetCore.Builder.SessionOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the services to.</param>
          <param name="configure">The session options to configure the middleware with.</param>
          <summary>
            Adds services required for application session state.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.SessionServiceCollectionExtensions" Member="M:Microsoft.Extensions.DependencyInjection.SessionServiceCollectionExtensions.AddSession(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Builder.SessionOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddDistributedSqlServerCache">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDistributedSqlServerCache (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.Extensions.Caching.SqlServer.SqlServerCacheOptions&gt; setupAction);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddDistributedSqlServerCache(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.Extensions.Caching.SqlServer.SqlServerCacheOptions&gt; setupAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.SqlServerCachingServicesExtensions.AddDistributedSqlServerCache(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.Caching.SqlServer.SqlServerCacheOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="setupAction" Type="System.Action&lt;Microsoft.Extensions.Caching.SqlServer.SqlServerCacheOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
          <param name="setupAction">An <see cref="T:System.Action`1" /> to configure the provided <see cref="T:Microsoft.Extensions.Caching.SqlServer.SqlServerCacheOptions" />.</param>
          <summary>
            Adds Microsoft SQL Server distributed caching services to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.SqlServerCachingServicesExtensions" Member="M:Microsoft.Extensions.DependencyInjection.SqlServerCachingServicesExtensions.AddDistributedSqlServerCache(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.Caching.SqlServer.SqlServerCacheOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />
      </Targets>
      <Member MemberName="AddCacheTagHelper">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddCacheTagHelper (this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddCacheTagHelper(class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.TagHelperServicesExtensions.AddCacheTagHelper(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />.</param>
          <summary>
             Adds MVC cache tag helper services to the application.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.TagHelperServicesExtensions" Member="M:Microsoft.Extensions.DependencyInjection.TagHelperServicesExtensions.AddCacheTagHelper(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />
      </Targets>
      <Member MemberName="AddCacheTagHelperLimits">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcBuilder AddCacheTagHelperLimits (this Microsoft.Extensions.DependencyInjection.IMvcBuilder builder, Action&lt;Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperOptions&gt; configure);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcBuilder AddCacheTagHelperLimits(class Microsoft.Extensions.DependencyInjection.IMvcBuilder builder, class System.Action`1&lt;class Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperOptions&gt; configure) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.TagHelperServicesExtensions.AddCacheTagHelperLimits(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcBuilder" RefType="this" />
          <Parameter Name="configure" Type="System.Action&lt;Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />.</param>
          <param name="configure">The <see cref="T:System.Action`1" />to configure the cache options.</param>
          <summary>
             Configures the memory size limits on the cache of the <see cref="T:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelper" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.TagHelperServicesExtensions" Member="M:Microsoft.Extensions.DependencyInjection.TagHelperServicesExtensions.AddCacheTagHelperLimits(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />
      </Targets>
      <Member MemberName="AddCacheTagHelperLimits">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddCacheTagHelperLimits (this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, Action&lt;Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperOptions&gt; configure);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder AddCacheTagHelperLimits(class Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder builder, class System.Action`1&lt;class Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperOptions&gt; configure) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.TagHelperServicesExtensions.AddCacheTagHelperLimits(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" RefType="this" />
          <Parameter Name="configure" Type="System.Action&lt;Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder" />.</param>
          <param name="configure">The <see cref="T:System.Action`1" />to configure the cache options.</param>
          <summary>
             Configures the memory size limits on the cache of the <see cref="T:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelper" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.TagHelperServicesExtensions" Member="M:Microsoft.Extensions.DependencyInjection.TagHelperServicesExtensions.AddCacheTagHelperLimits(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,System.Action{Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationBuilder" />
      </Targets>
      <Member MemberName="AddTwitter">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddTwitter (this Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddTwitter(class Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.TwitterExtensions.AddTwitter(Microsoft.AspNetCore.Authentication.AuthenticationBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Authentication.AuthenticationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Authentication.AuthenticationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.TwitterExtensions" Member="M:Microsoft.Extensions.DependencyInjection.TwitterExtensions.AddTwitter(Microsoft.AspNetCore.Authentication.AuthenticationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationBuilder" />
      </Targets>
      <Member MemberName="AddTwitter">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddTwitter (this Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, Action&lt;Microsoft.AspNetCore.Authentication.Twitter.TwitterOptions&gt; configureOptions);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddTwitter(class Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, class System.Action`1&lt;class Microsoft.AspNetCore.Authentication.Twitter.TwitterOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.TwitterExtensions.AddTwitter(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.Action{Microsoft.AspNetCore.Authentication.Twitter.TwitterOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Authentication.AuthenticationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Authentication.AuthenticationBuilder" RefType="this" />
          <Parameter Name="configureOptions" Type="System.Action&lt;Microsoft.AspNetCore.Authentication.Twitter.TwitterOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="configureOptions">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.TwitterExtensions" Member="M:Microsoft.Extensions.DependencyInjection.TwitterExtensions.AddTwitter(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.Action{Microsoft.AspNetCore.Authentication.Twitter.TwitterOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationBuilder" />
      </Targets>
      <Member MemberName="AddTwitter">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddTwitter (this Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme, Action&lt;Microsoft.AspNetCore.Authentication.Twitter.TwitterOptions&gt; configureOptions);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddTwitter(class Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme, class System.Action`1&lt;class Microsoft.AspNetCore.Authentication.Twitter.TwitterOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.TwitterExtensions.AddTwitter(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.Action{Microsoft.AspNetCore.Authentication.Twitter.TwitterOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Authentication.AuthenticationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Authentication.AuthenticationBuilder" RefType="this" />
          <Parameter Name="authenticationScheme" Type="System.String" />
          <Parameter Name="configureOptions" Type="System.Action&lt;Microsoft.AspNetCore.Authentication.Twitter.TwitterOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="authenticationScheme">To be added.</param>
          <param name="configureOptions">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.TwitterExtensions" Member="M:Microsoft.Extensions.DependencyInjection.TwitterExtensions.AddTwitter(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.Action{Microsoft.AspNetCore.Authentication.Twitter.TwitterOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationBuilder" />
      </Targets>
      <Member MemberName="AddTwitter">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddTwitter (this Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme, string displayName, Action&lt;Microsoft.AspNetCore.Authentication.Twitter.TwitterOptions&gt; configureOptions);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddTwitter(class Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme, string displayName, class System.Action`1&lt;class Microsoft.AspNetCore.Authentication.Twitter.TwitterOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.TwitterExtensions.AddTwitter(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.String,System.Action{Microsoft.AspNetCore.Authentication.Twitter.TwitterOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Authentication.AuthenticationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Authentication.AuthenticationBuilder" RefType="this" />
          <Parameter Name="authenticationScheme" Type="System.String" />
          <Parameter Name="displayName" Type="System.String" />
          <Parameter Name="configureOptions" Type="System.Action&lt;Microsoft.AspNetCore.Authentication.Twitter.TwitterOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="authenticationScheme">To be added.</param>
          <param name="displayName">To be added.</param>
          <param name="configureOptions">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.TwitterExtensions" Member="M:Microsoft.Extensions.DependencyInjection.TwitterExtensions.AddTwitter(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.String,System.Action{Microsoft.AspNetCore.Authentication.Twitter.TwitterOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder" />
      </Targets>
      <Member MemberName="AddWebApiConventions">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IMvcBuilder AddWebApiConventions (this Microsoft.Extensions.DependencyInjection.IMvcBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IMvcBuilder AddWebApiConventions(class Microsoft.Extensions.DependencyInjection.IMvcBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.WebApiCompatShimMvcBuilderExtensions.AddWebApiConventions(Microsoft.Extensions.DependencyInjection.IMvcBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IMvcBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IMvcBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.DependencyInjection.WebApiCompatShimMvcBuilderExtensions" Member="M:Microsoft.Extensions.DependencyInjection.WebApiCompatShimMvcBuilderExtensions.AddWebApiConventions(Microsoft.Extensions.DependencyInjection.IMvcBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.FileSystemGlobbing.Matcher" />
      </Targets>
      <Member MemberName="AddExcludePatterns">
        <MemberSignature Language="C#" Value="public static void AddExcludePatterns (this Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, System.Collections.Generic.IEnumerable&lt;string&gt;[] excludePatternsGroups);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddExcludePatterns(class Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, class System.Collections.Generic.IEnumerable`1&lt;string&gt;[] excludePatternsGroups) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.AddExcludePatterns(Microsoft.Extensions.FileSystemGlobbing.Matcher,System.Collections.Generic.IEnumerable{System.String}[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="matcher" Type="Microsoft.Extensions.FileSystemGlobbing.Matcher" RefType="this" />
          <Parameter Name="excludePatternsGroups" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="matcher">To be added.</param>
          <param name="excludePatternsGroups">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions" Member="M:Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.AddExcludePatterns(Microsoft.Extensions.FileSystemGlobbing.Matcher,System.Collections.Generic.IEnumerable{System.String}[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.FileSystemGlobbing.Matcher" />
      </Targets>
      <Member MemberName="AddIncludePatterns">
        <MemberSignature Language="C#" Value="public static void AddIncludePatterns (this Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, System.Collections.Generic.IEnumerable&lt;string&gt;[] includePatternsGroups);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddIncludePatterns(class Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, class System.Collections.Generic.IEnumerable`1&lt;string&gt;[] includePatternsGroups) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.AddIncludePatterns(Microsoft.Extensions.FileSystemGlobbing.Matcher,System.Collections.Generic.IEnumerable{System.String}[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="matcher" Type="Microsoft.Extensions.FileSystemGlobbing.Matcher" RefType="this" />
          <Parameter Name="includePatternsGroups" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="matcher">To be added.</param>
          <param name="includePatternsGroups">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions" Member="M:Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.AddIncludePatterns(Microsoft.Extensions.FileSystemGlobbing.Matcher,System.Collections.Generic.IEnumerable{System.String}[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.FileSystemGlobbing.Matcher" />
      </Targets>
      <Member MemberName="GetResultsInFullPath">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; GetResultsInFullPath (this Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string directoryPath);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; GetResultsInFullPath(class Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string directoryPath) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.GetResultsInFullPath(Microsoft.Extensions.FileSystemGlobbing.Matcher,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="matcher" Type="Microsoft.Extensions.FileSystemGlobbing.Matcher" RefType="this" />
          <Parameter Name="directoryPath" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="matcher">To be added.</param>
          <param name="directoryPath">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions" Member="M:Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.GetResultsInFullPath(Microsoft.Extensions.FileSystemGlobbing.Matcher,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.FileSystemGlobbing.Matcher" />
      </Targets>
      <Member MemberName="Match">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.FileSystemGlobbing.PatternMatchingResult Match (this Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, System.Collections.Generic.IEnumerable&lt;string&gt; files);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.FileSystemGlobbing.PatternMatchingResult Match(class Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, class System.Collections.Generic.IEnumerable`1&lt;string&gt; files) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher,System.Collections.Generic.IEnumerable{System.String})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.FileSystemGlobbing.PatternMatchingResult</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="matcher" Type="Microsoft.Extensions.FileSystemGlobbing.Matcher" RefType="this" />
          <Parameter Name="files" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        </Parameters>
        <Docs>
          <param name="matcher">The matcher that holds the patterns and pattern matching type.</param>
          <param name="files">The files to run the matcher against.</param>
          <summary>
            Matches the files passed in with the patterns in the matcher without going to disk.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions" Member="M:Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher,System.Collections.Generic.IEnumerable{System.String})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.FileSystemGlobbing.Matcher" />
      </Targets>
      <Member MemberName="Match">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.FileSystemGlobbing.PatternMatchingResult Match (this Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.FileSystemGlobbing.PatternMatchingResult Match(class Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.FileSystemGlobbing.PatternMatchingResult</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="matcher" Type="Microsoft.Extensions.FileSystemGlobbing.Matcher" RefType="this" />
          <Parameter Name="file" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="matcher">The matcher that holds the patterns and pattern matching type.</param>
          <param name="file">The file to run the matcher against.</param>
          <summary>
            Matches the file passed in with the patterns in the matcher without going to disk.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions" Member="M:Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.FileSystemGlobbing.Matcher" />
      </Targets>
      <Member MemberName="Match">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.FileSystemGlobbing.PatternMatchingResult Match (this Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable&lt;string&gt; files);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.FileSystemGlobbing.PatternMatchingResult Match(class Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, class System.Collections.Generic.IEnumerable`1&lt;string&gt; files) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher,System.String,System.Collections.Generic.IEnumerable{System.String})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.FileSystemGlobbing.PatternMatchingResult</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="matcher" Type="Microsoft.Extensions.FileSystemGlobbing.Matcher" RefType="this" />
          <Parameter Name="rootDir" Type="System.String" />
          <Parameter Name="files" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        </Parameters>
        <Docs>
          <param name="matcher">The matcher that holds the patterns and pattern matching type.</param>
          <param name="rootDir">The root directory for the matcher to match the files from.</param>
          <param name="files">The files to run the matcher against.</param>
          <summary>
            Matches the files passed in with the patterns in the matcher without going to disk.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions" Member="M:Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher,System.String,System.Collections.Generic.IEnumerable{System.String})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.FileSystemGlobbing.Matcher" />
      </Targets>
      <Member MemberName="Match">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.FileSystemGlobbing.PatternMatchingResult Match (this Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, string file);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.FileSystemGlobbing.PatternMatchingResult Match(class Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, string file) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher,System.String,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.FileSystemGlobbing.PatternMatchingResult</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="matcher" Type="Microsoft.Extensions.FileSystemGlobbing.Matcher" RefType="this" />
          <Parameter Name="rootDir" Type="System.String" />
          <Parameter Name="file" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="matcher">The matcher that holds the patterns and pattern matching type.</param>
          <param name="rootDir">The root directory for the matcher to match the file from.</param>
          <param name="file">The file to run the matcher against.</param>
          <summary>
            Matches the file passed in with the patterns in the matcher without going to disk.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions" Member="M:Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Localization.IStringLocalizer" />
      </Targets>
      <Member MemberName="GetAllStrings">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.Localization.LocalizedString&gt; GetAllStrings (this Microsoft.Extensions.Localization.IStringLocalizer stringLocalizer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Extensions.Localization.LocalizedString&gt; GetAllStrings(class Microsoft.Extensions.Localization.IStringLocalizer stringLocalizer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Localization.StringLocalizerExtensions.GetAllStrings(Microsoft.Extensions.Localization.IStringLocalizer)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.Localization.LocalizedString&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stringLocalizer" Type="Microsoft.Extensions.Localization.IStringLocalizer" RefType="this" />
        </Parameters>
        <Docs>
          <param name="stringLocalizer">The <see cref="T:Microsoft.Extensions.Localization.IStringLocalizer" />.</param>
          <summary>
            Gets all string resources including those for parent cultures.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Localization.StringLocalizerExtensions" Member="M:Microsoft.Extensions.Localization.StringLocalizerExtensions.GetAllStrings(Microsoft.Extensions.Localization.IStringLocalizer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Localization.IStringLocalizer" />
      </Targets>
      <Member MemberName="GetString">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Localization.LocalizedString GetString (this Microsoft.Extensions.Localization.IStringLocalizer stringLocalizer, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Localization.LocalizedString GetString(class Microsoft.Extensions.Localization.IStringLocalizer stringLocalizer, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Localization.StringLocalizerExtensions.GetString(Microsoft.Extensions.Localization.IStringLocalizer,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Localization.LocalizedString</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stringLocalizer" Type="Microsoft.Extensions.Localization.IStringLocalizer" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="stringLocalizer">The <see cref="T:Microsoft.Extensions.Localization.IStringLocalizer" />.</param>
          <param name="name">The name of the string resource.</param>
          <summary>
            Gets the string resource with the given name.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Localization.StringLocalizerExtensions" Member="M:Microsoft.Extensions.Localization.StringLocalizerExtensions.GetString(Microsoft.Extensions.Localization.IStringLocalizer,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Localization.IStringLocalizer" />
      </Targets>
      <Member MemberName="GetString">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Localization.LocalizedString GetString (this Microsoft.Extensions.Localization.IStringLocalizer stringLocalizer, string name, object[] arguments);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Localization.LocalizedString GetString(class Microsoft.Extensions.Localization.IStringLocalizer stringLocalizer, string name, object[] arguments) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Localization.StringLocalizerExtensions.GetString(Microsoft.Extensions.Localization.IStringLocalizer,System.String,System.Object[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Localization.LocalizedString</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stringLocalizer" Type="Microsoft.Extensions.Localization.IStringLocalizer" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="arguments" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="stringLocalizer">The <see cref="T:Microsoft.Extensions.Localization.IStringLocalizer" />.</param>
          <param name="name">The name of the string resource.</param>
          <param name="arguments">The values to format the string with.</param>
          <summary>
            Gets the string resource with the given name and formatted with the supplied arguments.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Localization.StringLocalizerExtensions" Member="M:Microsoft.Extensions.Localization.StringLocalizerExtensions.GetString(Microsoft.Extensions.Localization.IStringLocalizer,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggerFactory" />
      </Targets>
      <Member MemberName="AddAzureWebAppDiagnostics">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggerFactory AddAzureWebAppDiagnostics (this Microsoft.Extensions.Logging.ILoggerFactory factory);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggerFactory AddAzureWebAppDiagnostics(class Microsoft.Extensions.Logging.ILoggerFactory factory) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.AzureAppServicesLoggerFactoryExtensions.AddAzureWebAppDiagnostics(Microsoft.Extensions.Logging.ILoggerFactory)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggerFactory</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="factory" Type="Microsoft.Extensions.Logging.ILoggerFactory" RefType="this" />
        </Parameters>
        <Docs>
          <param name="factory">The extension method argument</param>
          <summary>
            Adds an Azure Web Apps diagnostics logger.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.AzureAppServicesLoggerFactoryExtensions" Member="M:Microsoft.Extensions.Logging.AzureAppServicesLoggerFactoryExtensions.AddAzureWebAppDiagnostics(Microsoft.Extensions.Logging.ILoggerFactory)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggerFactory" />
      </Targets>
      <Member MemberName="AddAzureWebAppDiagnostics">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggerFactory AddAzureWebAppDiagnostics (this Microsoft.Extensions.Logging.ILoggerFactory factory, Microsoft.Extensions.Logging.AzureAppServices.AzureAppServicesDiagnosticsSettings settings);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggerFactory AddAzureWebAppDiagnostics(class Microsoft.Extensions.Logging.ILoggerFactory factory, class Microsoft.Extensions.Logging.AzureAppServices.AzureAppServicesDiagnosticsSettings settings) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.AzureAppServicesLoggerFactoryExtensions.AddAzureWebAppDiagnostics(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Logging.AzureAppServices.AzureAppServicesDiagnosticsSettings)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggerFactory</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="factory" Type="Microsoft.Extensions.Logging.ILoggerFactory" RefType="this" />
          <Parameter Name="settings" Type="Microsoft.Extensions.Logging.AzureAppServices.AzureAppServicesDiagnosticsSettings" />
        </Parameters>
        <Docs>
          <param name="factory">The extension method argument</param>
          <param name="settings">The setting object to configure loggers.</param>
          <summary>
            Adds an Azure Web Apps diagnostics logger.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.AzureAppServicesLoggerFactoryExtensions" Member="M:Microsoft.Extensions.Logging.AzureAppServicesLoggerFactoryExtensions.AddAzureWebAppDiagnostics(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Logging.AzureAppServices.AzureAppServicesDiagnosticsSettings)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggingBuilder" />
      </Targets>
      <Member MemberName="AddAzureWebAppDiagnostics">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddAzureWebAppDiagnostics (this Microsoft.Extensions.Logging.ILoggingBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddAzureWebAppDiagnostics(class Microsoft.Extensions.Logging.ILoggingBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.AzureAppServicesLoggerFactoryExtensions.AddAzureWebAppDiagnostics(Microsoft.Extensions.Logging.ILoggingBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">The extension method argument</param>
          <summary>
            Adds an Azure Web Apps diagnostics logger.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.AzureAppServicesLoggerFactoryExtensions" Member="M:Microsoft.Extensions.Logging.AzureAppServicesLoggerFactoryExtensions.AddAzureWebAppDiagnostics(Microsoft.Extensions.Logging.ILoggingBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggerFactory" />
      </Targets>
      <Member MemberName="AddConsole">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggerFactory AddConsole (this Microsoft.Extensions.Logging.ILoggerFactory factory);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggerFactory AddConsole(class Microsoft.Extensions.Logging.ILoggerFactory factory) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggerFactory</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="factory" Type="Microsoft.Extensions.Logging.ILoggerFactory" RefType="this" />
        </Parameters>
        <Docs>
          <param name="factory">To be added.</param>
          <summary>
            Adds a console logger that is enabled for <see cref="T:Microsoft.Extensions.Logging.LogLevel" />.Information or higher.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.ConsoleLoggerExtensions" Member="M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggerFactory" />
      </Targets>
      <Member MemberName="AddConsole">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggerFactory AddConsole (this Microsoft.Extensions.Logging.ILoggerFactory factory, Microsoft.Extensions.Configuration.IConfiguration configuration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggerFactory AddConsole(class Microsoft.Extensions.Logging.ILoggerFactory factory, class Microsoft.Extensions.Configuration.IConfiguration configuration) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Configuration.IConfiguration)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggerFactory</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="factory" Type="Microsoft.Extensions.Logging.ILoggerFactory" RefType="this" />
          <Parameter Name="configuration" Type="Microsoft.Extensions.Configuration.IConfiguration" />
        </Parameters>
        <Docs>
          <param name="factory">To be added.</param>
          <param name="configuration">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.ConsoleLoggerExtensions" Member="M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Configuration.IConfiguration)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggerFactory" />
      </Targets>
      <Member MemberName="AddConsole">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggerFactory AddConsole (this Microsoft.Extensions.Logging.ILoggerFactory factory, Microsoft.Extensions.Logging.Console.IConsoleLoggerSettings settings);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggerFactory AddConsole(class Microsoft.Extensions.Logging.ILoggerFactory factory, class Microsoft.Extensions.Logging.Console.IConsoleLoggerSettings settings) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Logging.Console.IConsoleLoggerSettings)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggerFactory</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="factory" Type="Microsoft.Extensions.Logging.ILoggerFactory" RefType="this" />
          <Parameter Name="settings" Type="Microsoft.Extensions.Logging.Console.IConsoleLoggerSettings" />
        </Parameters>
        <Docs>
          <param name="factory">To be added.</param>
          <param name="settings">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.ConsoleLoggerExtensions" Member="M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Logging.Console.IConsoleLoggerSettings)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggerFactory" />
      </Targets>
      <Member MemberName="AddConsole">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggerFactory AddConsole (this Microsoft.Extensions.Logging.ILoggerFactory factory, Microsoft.Extensions.Logging.LogLevel minLevel);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggerFactory AddConsole(class Microsoft.Extensions.Logging.ILoggerFactory factory, valuetype Microsoft.Extensions.Logging.LogLevel minLevel) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Logging.LogLevel)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggerFactory</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="factory" Type="Microsoft.Extensions.Logging.ILoggerFactory" RefType="this" />
          <Parameter Name="minLevel" Type="Microsoft.Extensions.Logging.LogLevel" />
        </Parameters>
        <Docs>
          <param name="factory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /> to use.</param>
          <param name="minLevel">The minimum <see cref="T:Microsoft.Extensions.Logging.LogLevel" /> to be logged</param>
          <summary>
            Adds a console logger that is enabled for <see cref="T:Microsoft.Extensions.Logging.LogLevel" />s of minLevel or higher.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.ConsoleLoggerExtensions" Member="M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Logging.LogLevel)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggerFactory" />
      </Targets>
      <Member MemberName="AddConsole">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggerFactory AddConsole (this Microsoft.Extensions.Logging.ILoggerFactory factory, Microsoft.Extensions.Logging.LogLevel minLevel, bool includeScopes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggerFactory AddConsole(class Microsoft.Extensions.Logging.ILoggerFactory factory, valuetype Microsoft.Extensions.Logging.LogLevel minLevel, bool includeScopes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Logging.LogLevel,System.Boolean)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggerFactory</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="factory" Type="Microsoft.Extensions.Logging.ILoggerFactory" RefType="this" />
          <Parameter Name="minLevel" Type="Microsoft.Extensions.Logging.LogLevel" />
          <Parameter Name="includeScopes" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="factory" />
          <param name="minLevel">The minimum <see cref="T:Microsoft.Extensions.Logging.LogLevel" /> to be logged</param>
          <param name="includeScopes">A value which indicates whether log scope information should be displayed
            in the output.</param>
          <summary>
            Adds a console logger that is enabled for <see cref="T:Microsoft.Extensions.Logging.LogLevel" />s of minLevel or higher.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.ConsoleLoggerExtensions" Member="M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Logging.LogLevel,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggerFactory" />
      </Targets>
      <Member MemberName="AddConsole">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggerFactory AddConsole (this Microsoft.Extensions.Logging.ILoggerFactory factory, bool includeScopes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggerFactory AddConsole(class Microsoft.Extensions.Logging.ILoggerFactory factory, bool includeScopes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,System.Boolean)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggerFactory</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="factory" Type="Microsoft.Extensions.Logging.ILoggerFactory" RefType="this" />
          <Parameter Name="includeScopes" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="factory" />
          <param name="includeScopes">A value which indicates whether log scope information should be displayed
            in the output.</param>
          <summary>
            Adds a console logger that is enabled for <see cref="T:Microsoft.Extensions.Logging.LogLevel" />.Information or higher.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.ConsoleLoggerExtensions" Member="M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggerFactory" />
      </Targets>
      <Member MemberName="AddConsole">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggerFactory AddConsole (this Microsoft.Extensions.Logging.ILoggerFactory factory, Func&lt;string,Microsoft.Extensions.Logging.LogLevel,bool&gt; filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggerFactory AddConsole(class Microsoft.Extensions.Logging.ILoggerFactory factory, class System.Func`3&lt;string, valuetype Microsoft.Extensions.Logging.LogLevel, bool&gt; filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggerFactory</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="factory" Type="Microsoft.Extensions.Logging.ILoggerFactory" RefType="this" />
          <Parameter Name="filter" Type="System.Func&lt;System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <param name="factory" />
          <param name="filter" />
          <summary>
            Adds a console logger that is enabled as defined by the filter function.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.ConsoleLoggerExtensions" Member="M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggerFactory" />
      </Targets>
      <Member MemberName="AddConsole">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggerFactory AddConsole (this Microsoft.Extensions.Logging.ILoggerFactory factory, Func&lt;string,Microsoft.Extensions.Logging.LogLevel,bool&gt; filter, bool includeScopes);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggerFactory AddConsole(class Microsoft.Extensions.Logging.ILoggerFactory factory, class System.Func`3&lt;string, valuetype Microsoft.Extensions.Logging.LogLevel, bool&gt; filter, bool includeScopes) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean},System.Boolean)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggerFactory</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="factory" Type="Microsoft.Extensions.Logging.ILoggerFactory" RefType="this" />
          <Parameter Name="filter" Type="System.Func&lt;System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean&gt;" />
          <Parameter Name="includeScopes" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="factory" />
          <param name="filter" />
          <param name="includeScopes">A value which indicates whether log scope information should be displayed
            in the output.</param>
          <summary>
            Adds a console logger that is enabled as defined by the filter function.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.ConsoleLoggerExtensions" Member="M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean},System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggingBuilder" />
      </Targets>
      <Member MemberName="AddConsole">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddConsole (this Microsoft.Extensions.Logging.ILoggingBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddConsole(class Microsoft.Extensions.Logging.ILoggingBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggingBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> to use.</param>
          <summary>
            Adds a console logger named 'Console' to the factory.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.ConsoleLoggerExtensions" Member="M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggingBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggingBuilder" />
      </Targets>
      <Member MemberName="AddConsole">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddConsole (this Microsoft.Extensions.Logging.ILoggingBuilder builder, Action&lt;Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions&gt; configure);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddConsole(class Microsoft.Extensions.Logging.ILoggingBuilder builder, class System.Action`1&lt;class Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions&gt; configure) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
          <Parameter Name="configure" Type="System.Action&lt;Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> to use.</param>
          <param name="configure" />
          <summary>
            Adds a console logger named 'Console' to the factory.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.ConsoleLoggerExtensions" Member="M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggerFactory" />
      </Targets>
      <Member MemberName="AddDebug">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggerFactory AddDebug (this Microsoft.Extensions.Logging.ILoggerFactory factory);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggerFactory AddDebug(class Microsoft.Extensions.Logging.ILoggerFactory factory) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.DebugLoggerFactoryExtensions.AddDebug(Microsoft.Extensions.Logging.ILoggerFactory)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggerFactory</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="factory" Type="Microsoft.Extensions.Logging.ILoggerFactory" RefType="this" />
        </Parameters>
        <Docs>
          <param name="factory">The extension method argument.</param>
          <summary>
            Adds a debug logger that is enabled for <see cref="T:Microsoft.Extensions.Logging.LogLevel" />.Information or higher.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.DebugLoggerFactoryExtensions" Member="M:Microsoft.Extensions.Logging.DebugLoggerFactoryExtensions.AddDebug(Microsoft.Extensions.Logging.ILoggerFactory)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggerFactory" />
      </Targets>
      <Member MemberName="AddDebug">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggerFactory AddDebug (this Microsoft.Extensions.Logging.ILoggerFactory factory, Microsoft.Extensions.Logging.LogLevel minLevel);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggerFactory AddDebug(class Microsoft.Extensions.Logging.ILoggerFactory factory, valuetype Microsoft.Extensions.Logging.LogLevel minLevel) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.DebugLoggerFactoryExtensions.AddDebug(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Logging.LogLevel)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggerFactory</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="factory" Type="Microsoft.Extensions.Logging.ILoggerFactory" RefType="this" />
          <Parameter Name="minLevel" Type="Microsoft.Extensions.Logging.LogLevel" />
        </Parameters>
        <Docs>
          <param name="factory">The extension method argument.</param>
          <param name="minLevel">The minimum <see cref="T:Microsoft.Extensions.Logging.LogLevel" /> to be logged</param>
          <summary>
            Adds a debug logger that is enabled for <see cref="T:Microsoft.Extensions.Logging.LogLevel" />s of minLevel or higher.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.DebugLoggerFactoryExtensions" Member="M:Microsoft.Extensions.Logging.DebugLoggerFactoryExtensions.AddDebug(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Logging.LogLevel)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggerFactory" />
      </Targets>
      <Member MemberName="AddDebug">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggerFactory AddDebug (this Microsoft.Extensions.Logging.ILoggerFactory factory, Func&lt;string,Microsoft.Extensions.Logging.LogLevel,bool&gt; filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggerFactory AddDebug(class Microsoft.Extensions.Logging.ILoggerFactory factory, class System.Func`3&lt;string, valuetype Microsoft.Extensions.Logging.LogLevel, bool&gt; filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.DebugLoggerFactoryExtensions.AddDebug(Microsoft.Extensions.Logging.ILoggerFactory,System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggerFactory</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="factory" Type="Microsoft.Extensions.Logging.ILoggerFactory" RefType="this" />
          <Parameter Name="filter" Type="System.Func&lt;System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <param name="factory">The extension method argument.</param>
          <param name="filter">The function used to filter events based on the log level.</param>
          <summary>
            Adds a debug logger that is enabled as defined by the filter function.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.DebugLoggerFactoryExtensions" Member="M:Microsoft.Extensions.Logging.DebugLoggerFactoryExtensions.AddDebug(Microsoft.Extensions.Logging.ILoggerFactory,System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggingBuilder" />
      </Targets>
      <Member MemberName="AddDebug">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddDebug (this Microsoft.Extensions.Logging.ILoggingBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddDebug(class Microsoft.Extensions.Logging.ILoggingBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.DebugLoggerFactoryExtensions.AddDebug(Microsoft.Extensions.Logging.ILoggingBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">The extension method argument.</param>
          <summary>
            Adds a debug logger named 'Debug' to the factory.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.DebugLoggerFactoryExtensions" Member="M:Microsoft.Extensions.Logging.DebugLoggerFactoryExtensions.AddDebug(Microsoft.Extensions.Logging.ILoggingBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggerFactory" />
      </Targets>
      <Member MemberName="AddEventLog">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggerFactory AddEventLog (this Microsoft.Extensions.Logging.ILoggerFactory factory);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggerFactory AddEventLog(class Microsoft.Extensions.Logging.ILoggerFactory factory) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.EventLoggerFactoryExtensions.AddEventLog(Microsoft.Extensions.Logging.ILoggerFactory)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggerFactory</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="factory" Type="Microsoft.Extensions.Logging.ILoggerFactory" RefType="this" />
        </Parameters>
        <Docs>
          <param name="factory">The extension method argument.</param>
          <summary>
            Adds an event logger that is enabled for <see cref="T:Microsoft.Extensions.Logging.LogLevel" />.Information or higher.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.EventLoggerFactoryExtensions" Member="M:Microsoft.Extensions.Logging.EventLoggerFactoryExtensions.AddEventLog(Microsoft.Extensions.Logging.ILoggerFactory)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggerFactory" />
      </Targets>
      <Member MemberName="AddEventLog">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggerFactory AddEventLog (this Microsoft.Extensions.Logging.ILoggerFactory factory, Microsoft.Extensions.Logging.EventLog.EventLogSettings settings);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggerFactory AddEventLog(class Microsoft.Extensions.Logging.ILoggerFactory factory, class Microsoft.Extensions.Logging.EventLog.EventLogSettings settings) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.EventLoggerFactoryExtensions.AddEventLog(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Logging.EventLog.EventLogSettings)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggerFactory</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="factory" Type="Microsoft.Extensions.Logging.ILoggerFactory" RefType="this" />
          <Parameter Name="settings" Type="Microsoft.Extensions.Logging.EventLog.EventLogSettings" />
        </Parameters>
        <Docs>
          <param name="factory">The extension method argument.</param>
          <param name="settings">The <see cref="T:Microsoft.Extensions.Logging.EventLog.EventLogSettings" />.</param>
          <summary>
            Adds an event logger. Use <paramref name="settings" /> to enable logging for specific <see cref="T:Microsoft.Extensions.Logging.LogLevel" />s.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.EventLoggerFactoryExtensions" Member="M:Microsoft.Extensions.Logging.EventLoggerFactoryExtensions.AddEventLog(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Logging.EventLog.EventLogSettings)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggerFactory" />
      </Targets>
      <Member MemberName="AddEventLog">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggerFactory AddEventLog (this Microsoft.Extensions.Logging.ILoggerFactory factory, Microsoft.Extensions.Logging.LogLevel minLevel);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggerFactory AddEventLog(class Microsoft.Extensions.Logging.ILoggerFactory factory, valuetype Microsoft.Extensions.Logging.LogLevel minLevel) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.EventLoggerFactoryExtensions.AddEventLog(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Logging.LogLevel)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggerFactory</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="factory" Type="Microsoft.Extensions.Logging.ILoggerFactory" RefType="this" />
          <Parameter Name="minLevel" Type="Microsoft.Extensions.Logging.LogLevel" />
        </Parameters>
        <Docs>
          <param name="factory">The extension method argument.</param>
          <param name="minLevel">The minimum <see cref="T:Microsoft.Extensions.Logging.LogLevel" /> to be logged</param>
          <summary>
            Adds an event logger that is enabled for <see cref="T:Microsoft.Extensions.Logging.LogLevel" />s of minLevel or higher.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.EventLoggerFactoryExtensions" Member="M:Microsoft.Extensions.Logging.EventLoggerFactoryExtensions.AddEventLog(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Logging.LogLevel)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggingBuilder" />
      </Targets>
      <Member MemberName="AddEventLog">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddEventLog (this Microsoft.Extensions.Logging.ILoggingBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddEventLog(class Microsoft.Extensions.Logging.ILoggingBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.EventLoggerFactoryExtensions.AddEventLog(Microsoft.Extensions.Logging.ILoggingBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">The extension method argument.</param>
          <summary>
            Adds an event logger named 'EventLog' to the factory.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.EventLoggerFactoryExtensions" Member="M:Microsoft.Extensions.Logging.EventLoggerFactoryExtensions.AddEventLog(Microsoft.Extensions.Logging.ILoggingBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggingBuilder" />
      </Targets>
      <Member MemberName="AddEventLog">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddEventLog (this Microsoft.Extensions.Logging.ILoggingBuilder builder, Microsoft.Extensions.Logging.EventLog.EventLogSettings settings);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddEventLog(class Microsoft.Extensions.Logging.ILoggingBuilder builder, class Microsoft.Extensions.Logging.EventLog.EventLogSettings settings) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.EventLoggerFactoryExtensions.AddEventLog(Microsoft.Extensions.Logging.ILoggingBuilder,Microsoft.Extensions.Logging.EventLog.EventLogSettings)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
          <Parameter Name="settings" Type="Microsoft.Extensions.Logging.EventLog.EventLogSettings" />
        </Parameters>
        <Docs>
          <param name="builder">The extension method argument.</param>
          <param name="settings">The <see cref="T:Microsoft.Extensions.Logging.EventLog.EventLogSettings" />.</param>
          <summary>
            Adds an event logger. Use <paramref name="settings" /> to enable logging for specific <see cref="T:Microsoft.Extensions.Logging.LogLevel" />s.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.EventLoggerFactoryExtensions" Member="M:Microsoft.Extensions.Logging.EventLoggerFactoryExtensions.AddEventLog(Microsoft.Extensions.Logging.ILoggingBuilder,Microsoft.Extensions.Logging.EventLog.EventLogSettings)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggerFactory" />
      </Targets>
      <Member MemberName="AddEventSourceLogger">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggerFactory AddEventSourceLogger (this Microsoft.Extensions.Logging.ILoggerFactory factory);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggerFactory AddEventSourceLogger(class Microsoft.Extensions.Logging.ILoggerFactory factory) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.EventSourceLoggerFactoryExtensions.AddEventSourceLogger(Microsoft.Extensions.Logging.ILoggerFactory)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggerFactory</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="factory" Type="Microsoft.Extensions.Logging.ILoggerFactory" RefType="this" />
        </Parameters>
        <Docs>
          <param name="factory">The extension method argument.</param>
          <summary>
            Adds an event logger that is enabled for <see cref="T:Microsoft.Extensions.Logging.LogLevel" />.Information or higher.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.EventSourceLoggerFactoryExtensions" Member="M:Microsoft.Extensions.Logging.EventSourceLoggerFactoryExtensions.AddEventSourceLogger(Microsoft.Extensions.Logging.ILoggerFactory)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggingBuilder" />
      </Targets>
      <Member MemberName="AddEventSourceLogger">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddEventSourceLogger (this Microsoft.Extensions.Logging.ILoggingBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddEventSourceLogger(class Microsoft.Extensions.Logging.ILoggingBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.EventSourceLoggerFactoryExtensions.AddEventSourceLogger(Microsoft.Extensions.Logging.ILoggingBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">The extension method argument.</param>
          <summary>
            Adds an event logger named 'EventSource' to the factory.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.EventSourceLoggerFactoryExtensions" Member="M:Microsoft.Extensions.Logging.EventSourceLoggerFactoryExtensions.AddEventSourceLogger(Microsoft.Extensions.Logging.ILoggingBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggerFactory" />
      </Targets>
      <Member MemberName="WithFilter">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggerFactory WithFilter (this Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, Microsoft.Extensions.Logging.IFilterLoggerSettings settings);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggerFactory WithFilter(class Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, class Microsoft.Extensions.Logging.IFilterLoggerSettings settings) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggerFactoryExtensions.WithFilter(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Logging.IFilterLoggerSettings)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggerFactory</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="loggerFactory" Type="Microsoft.Extensions.Logging.ILoggerFactory" RefType="this" />
          <Parameter Name="settings" Type="Microsoft.Extensions.Logging.IFilterLoggerSettings" />
        </Parameters>
        <Docs>
          <param name="loggerFactory">The logger factory.</param>
          <param name="settings">The filter settings which get applied to all registered logger providers.</param>
          <summary>
            Registers a wrapper logger which provides a common way to filter log messages across all registered
             <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider" />s.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.FilterLoggerFactoryExtensions" Member="M:Microsoft.Extensions.Logging.FilterLoggerFactoryExtensions.WithFilter(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Logging.IFilterLoggerSettings)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggingBuilder" />
      </Targets>
      <Member MemberName="AddFilter">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddFilter (this Microsoft.Extensions.Logging.ILoggingBuilder builder, Func&lt;Microsoft.Extensions.Logging.LogLevel,bool&gt; levelFilter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddFilter(class Microsoft.Extensions.Logging.ILoggingBuilder builder, class System.Func`2&lt;valuetype Microsoft.Extensions.Logging.LogLevel, bool&gt; levelFilter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter(Microsoft.Extensions.Logging.ILoggingBuilder,System.Func{Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
          <Parameter Name="levelFilter" Type="System.Func&lt;Microsoft.Extensions.Logging.LogLevel,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="levelFilter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions" Member="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter(Microsoft.Extensions.Logging.ILoggingBuilder,System.Func{Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggingBuilder" />
      </Targets>
      <Member MemberName="AddFilter">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddFilter (this Microsoft.Extensions.Logging.ILoggingBuilder builder, Func&lt;string,Microsoft.Extensions.Logging.LogLevel,bool&gt; categoryLevelFilter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddFilter(class Microsoft.Extensions.Logging.ILoggingBuilder builder, class System.Func`3&lt;string, valuetype Microsoft.Extensions.Logging.LogLevel, bool&gt; categoryLevelFilter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter(Microsoft.Extensions.Logging.ILoggingBuilder,System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
          <Parameter Name="categoryLevelFilter" Type="System.Func&lt;System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="categoryLevelFilter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions" Member="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter(Microsoft.Extensions.Logging.ILoggingBuilder,System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggingBuilder" />
      </Targets>
      <Member MemberName="AddFilter">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddFilter (this Microsoft.Extensions.Logging.ILoggingBuilder builder, Func&lt;string,string,Microsoft.Extensions.Logging.LogLevel,bool&gt; filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddFilter(class Microsoft.Extensions.Logging.ILoggingBuilder builder, class System.Func`4&lt;string, string, valuetype Microsoft.Extensions.Logging.LogLevel, bool&gt; filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter(Microsoft.Extensions.Logging.ILoggingBuilder,System.Func{System.String,System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
          <Parameter Name="filter" Type="System.Func&lt;System.String,System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions" Member="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter(Microsoft.Extensions.Logging.ILoggingBuilder,System.Func{System.String,System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggingBuilder" />
      </Targets>
      <Member MemberName="AddFilter">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddFilter (this Microsoft.Extensions.Logging.ILoggingBuilder builder, string category, Microsoft.Extensions.Logging.LogLevel level);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddFilter(class Microsoft.Extensions.Logging.ILoggingBuilder builder, string category, valuetype Microsoft.Extensions.Logging.LogLevel level) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter(Microsoft.Extensions.Logging.ILoggingBuilder,System.String,Microsoft.Extensions.Logging.LogLevel)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
          <Parameter Name="category" Type="System.String" />
          <Parameter Name="level" Type="Microsoft.Extensions.Logging.LogLevel" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="category">To be added.</param>
          <param name="level">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions" Member="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter(Microsoft.Extensions.Logging.ILoggingBuilder,System.String,Microsoft.Extensions.Logging.LogLevel)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggingBuilder" />
      </Targets>
      <Member MemberName="AddFilter">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddFilter (this Microsoft.Extensions.Logging.ILoggingBuilder builder, string category, Func&lt;Microsoft.Extensions.Logging.LogLevel,bool&gt; levelFilter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddFilter(class Microsoft.Extensions.Logging.ILoggingBuilder builder, string category, class System.Func`2&lt;valuetype Microsoft.Extensions.Logging.LogLevel, bool&gt; levelFilter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter(Microsoft.Extensions.Logging.ILoggingBuilder,System.String,System.Func{Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
          <Parameter Name="category" Type="System.String" />
          <Parameter Name="levelFilter" Type="System.Func&lt;Microsoft.Extensions.Logging.LogLevel,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="category">To be added.</param>
          <param name="levelFilter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions" Member="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter(Microsoft.Extensions.Logging.ILoggingBuilder,System.String,System.Func{Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.LoggerFilterOptions" />
      </Targets>
      <Member MemberName="AddFilter">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.LoggerFilterOptions AddFilter (this Microsoft.Extensions.Logging.LoggerFilterOptions builder, Func&lt;Microsoft.Extensions.Logging.LogLevel,bool&gt; levelFilter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.LoggerFilterOptions AddFilter(class Microsoft.Extensions.Logging.LoggerFilterOptions builder, class System.Func`2&lt;valuetype Microsoft.Extensions.Logging.LogLevel, bool&gt; levelFilter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter(Microsoft.Extensions.Logging.LoggerFilterOptions,System.Func{Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.LoggerFilterOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Logging.LoggerFilterOptions" RefType="this" />
          <Parameter Name="levelFilter" Type="System.Func&lt;Microsoft.Extensions.Logging.LogLevel,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="levelFilter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions" Member="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter(Microsoft.Extensions.Logging.LoggerFilterOptions,System.Func{Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.LoggerFilterOptions" />
      </Targets>
      <Member MemberName="AddFilter">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.LoggerFilterOptions AddFilter (this Microsoft.Extensions.Logging.LoggerFilterOptions builder, Func&lt;string,Microsoft.Extensions.Logging.LogLevel,bool&gt; categoryLevelFilter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.LoggerFilterOptions AddFilter(class Microsoft.Extensions.Logging.LoggerFilterOptions builder, class System.Func`3&lt;string, valuetype Microsoft.Extensions.Logging.LogLevel, bool&gt; categoryLevelFilter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter(Microsoft.Extensions.Logging.LoggerFilterOptions,System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.LoggerFilterOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Logging.LoggerFilterOptions" RefType="this" />
          <Parameter Name="categoryLevelFilter" Type="System.Func&lt;System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="categoryLevelFilter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions" Member="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter(Microsoft.Extensions.Logging.LoggerFilterOptions,System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.LoggerFilterOptions" />
      </Targets>
      <Member MemberName="AddFilter">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.LoggerFilterOptions AddFilter (this Microsoft.Extensions.Logging.LoggerFilterOptions builder, Func&lt;string,string,Microsoft.Extensions.Logging.LogLevel,bool&gt; filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.LoggerFilterOptions AddFilter(class Microsoft.Extensions.Logging.LoggerFilterOptions builder, class System.Func`4&lt;string, string, valuetype Microsoft.Extensions.Logging.LogLevel, bool&gt; filter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter(Microsoft.Extensions.Logging.LoggerFilterOptions,System.Func{System.String,System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.LoggerFilterOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Logging.LoggerFilterOptions" RefType="this" />
          <Parameter Name="filter" Type="System.Func&lt;System.String,System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions" Member="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter(Microsoft.Extensions.Logging.LoggerFilterOptions,System.Func{System.String,System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.LoggerFilterOptions" />
      </Targets>
      <Member MemberName="AddFilter">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.LoggerFilterOptions AddFilter (this Microsoft.Extensions.Logging.LoggerFilterOptions builder, string category, Microsoft.Extensions.Logging.LogLevel level);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.LoggerFilterOptions AddFilter(class Microsoft.Extensions.Logging.LoggerFilterOptions builder, string category, valuetype Microsoft.Extensions.Logging.LogLevel level) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter(Microsoft.Extensions.Logging.LoggerFilterOptions,System.String,Microsoft.Extensions.Logging.LogLevel)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.LoggerFilterOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Logging.LoggerFilterOptions" RefType="this" />
          <Parameter Name="category" Type="System.String" />
          <Parameter Name="level" Type="Microsoft.Extensions.Logging.LogLevel" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="category">To be added.</param>
          <param name="level">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions" Member="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter(Microsoft.Extensions.Logging.LoggerFilterOptions,System.String,Microsoft.Extensions.Logging.LogLevel)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.LoggerFilterOptions" />
      </Targets>
      <Member MemberName="AddFilter">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.LoggerFilterOptions AddFilter (this Microsoft.Extensions.Logging.LoggerFilterOptions builder, string category, Func&lt;Microsoft.Extensions.Logging.LogLevel,bool&gt; levelFilter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.LoggerFilterOptions AddFilter(class Microsoft.Extensions.Logging.LoggerFilterOptions builder, string category, class System.Func`2&lt;valuetype Microsoft.Extensions.Logging.LogLevel, bool&gt; levelFilter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter(Microsoft.Extensions.Logging.LoggerFilterOptions,System.String,System.Func{Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.LoggerFilterOptions</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Logging.LoggerFilterOptions" RefType="this" />
          <Parameter Name="category" Type="System.String" />
          <Parameter Name="levelFilter" Type="System.Func&lt;Microsoft.Extensions.Logging.LogLevel,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="category">To be added.</param>
          <param name="levelFilter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions" Member="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter(Microsoft.Extensions.Logging.LoggerFilterOptions,System.String,System.Func{Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggingBuilder" />
      </Targets>
      <Member MemberName="AddFilter&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddFilter&lt;T&gt; (this Microsoft.Extensions.Logging.ILoggingBuilder builder, Func&lt;Microsoft.Extensions.Logging.LogLevel,bool&gt; levelFilter) where T : Microsoft.Extensions.Logging.ILoggerProvider;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddFilter&lt;(class Microsoft.Extensions.Logging.ILoggerProvider) T&gt;(class Microsoft.Extensions.Logging.ILoggingBuilder builder, class System.Func`2&lt;valuetype Microsoft.Extensions.Logging.LogLevel, bool&gt; levelFilter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter``1(Microsoft.Extensions.Logging.ILoggingBuilder,System.Func{Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <InterfaceName>Microsoft.Extensions.Logging.ILoggerProvider</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
          <Parameter Name="levelFilter" Type="System.Func&lt;Microsoft.Extensions.Logging.LogLevel,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="builder">To be added.</param>
          <param name="levelFilter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions" Member="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter``1(Microsoft.Extensions.Logging.ILoggingBuilder,System.Func{Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggingBuilder" />
      </Targets>
      <Member MemberName="AddFilter&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddFilter&lt;T&gt; (this Microsoft.Extensions.Logging.ILoggingBuilder builder, Func&lt;string,Microsoft.Extensions.Logging.LogLevel,bool&gt; categoryLevelFilter) where T : Microsoft.Extensions.Logging.ILoggerProvider;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddFilter&lt;(class Microsoft.Extensions.Logging.ILoggerProvider) T&gt;(class Microsoft.Extensions.Logging.ILoggingBuilder builder, class System.Func`3&lt;string, valuetype Microsoft.Extensions.Logging.LogLevel, bool&gt; categoryLevelFilter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter``1(Microsoft.Extensions.Logging.ILoggingBuilder,System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <InterfaceName>Microsoft.Extensions.Logging.ILoggerProvider</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
          <Parameter Name="categoryLevelFilter" Type="System.Func&lt;System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="builder">To be added.</param>
          <param name="categoryLevelFilter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions" Member="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter``1(Microsoft.Extensions.Logging.ILoggingBuilder,System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggingBuilder" />
      </Targets>
      <Member MemberName="AddFilter&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddFilter&lt;T&gt; (this Microsoft.Extensions.Logging.ILoggingBuilder builder, string category, Microsoft.Extensions.Logging.LogLevel level) where T : Microsoft.Extensions.Logging.ILoggerProvider;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddFilter&lt;(class Microsoft.Extensions.Logging.ILoggerProvider) T&gt;(class Microsoft.Extensions.Logging.ILoggingBuilder builder, string category, valuetype Microsoft.Extensions.Logging.LogLevel level) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter``1(Microsoft.Extensions.Logging.ILoggingBuilder,System.String,Microsoft.Extensions.Logging.LogLevel)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <InterfaceName>Microsoft.Extensions.Logging.ILoggerProvider</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
          <Parameter Name="category" Type="System.String" />
          <Parameter Name="level" Type="Microsoft.Extensions.Logging.LogLevel" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="builder">To be added.</param>
          <param name="category">To be added.</param>
          <param name="level">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions" Member="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter``1(Microsoft.Extensions.Logging.ILoggingBuilder,System.String,Microsoft.Extensions.Logging.LogLevel)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggingBuilder" />
      </Targets>
      <Member MemberName="AddFilter&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddFilter&lt;T&gt; (this Microsoft.Extensions.Logging.ILoggingBuilder builder, string category, Func&lt;Microsoft.Extensions.Logging.LogLevel,bool&gt; levelFilter) where T : Microsoft.Extensions.Logging.ILoggerProvider;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddFilter&lt;(class Microsoft.Extensions.Logging.ILoggerProvider) T&gt;(class Microsoft.Extensions.Logging.ILoggingBuilder builder, string category, class System.Func`2&lt;valuetype Microsoft.Extensions.Logging.LogLevel, bool&gt; levelFilter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter``1(Microsoft.Extensions.Logging.ILoggingBuilder,System.String,System.Func{Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <InterfaceName>Microsoft.Extensions.Logging.ILoggerProvider</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
          <Parameter Name="category" Type="System.String" />
          <Parameter Name="levelFilter" Type="System.Func&lt;Microsoft.Extensions.Logging.LogLevel,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="builder">To be added.</param>
          <param name="category">To be added.</param>
          <param name="levelFilter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions" Member="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter``1(Microsoft.Extensions.Logging.ILoggingBuilder,System.String,System.Func{Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.LoggerFilterOptions" />
      </Targets>
      <Member MemberName="AddFilter&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.LoggerFilterOptions AddFilter&lt;T&gt; (this Microsoft.Extensions.Logging.LoggerFilterOptions builder, Func&lt;Microsoft.Extensions.Logging.LogLevel,bool&gt; levelFilter) where T : Microsoft.Extensions.Logging.ILoggerProvider;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.LoggerFilterOptions AddFilter&lt;(class Microsoft.Extensions.Logging.ILoggerProvider) T&gt;(class Microsoft.Extensions.Logging.LoggerFilterOptions builder, class System.Func`2&lt;valuetype Microsoft.Extensions.Logging.LogLevel, bool&gt; levelFilter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter``1(Microsoft.Extensions.Logging.LoggerFilterOptions,System.Func{Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.LoggerFilterOptions</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <InterfaceName>Microsoft.Extensions.Logging.ILoggerProvider</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Logging.LoggerFilterOptions" RefType="this" />
          <Parameter Name="levelFilter" Type="System.Func&lt;Microsoft.Extensions.Logging.LogLevel,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="builder">To be added.</param>
          <param name="levelFilter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions" Member="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter``1(Microsoft.Extensions.Logging.LoggerFilterOptions,System.Func{Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.LoggerFilterOptions" />
      </Targets>
      <Member MemberName="AddFilter&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.LoggerFilterOptions AddFilter&lt;T&gt; (this Microsoft.Extensions.Logging.LoggerFilterOptions builder, Func&lt;string,Microsoft.Extensions.Logging.LogLevel,bool&gt; categoryLevelFilter) where T : Microsoft.Extensions.Logging.ILoggerProvider;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.LoggerFilterOptions AddFilter&lt;(class Microsoft.Extensions.Logging.ILoggerProvider) T&gt;(class Microsoft.Extensions.Logging.LoggerFilterOptions builder, class System.Func`3&lt;string, valuetype Microsoft.Extensions.Logging.LogLevel, bool&gt; categoryLevelFilter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter``1(Microsoft.Extensions.Logging.LoggerFilterOptions,System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.LoggerFilterOptions</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <InterfaceName>Microsoft.Extensions.Logging.ILoggerProvider</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Logging.LoggerFilterOptions" RefType="this" />
          <Parameter Name="categoryLevelFilter" Type="System.Func&lt;System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="builder">To be added.</param>
          <param name="categoryLevelFilter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions" Member="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter``1(Microsoft.Extensions.Logging.LoggerFilterOptions,System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.LoggerFilterOptions" />
      </Targets>
      <Member MemberName="AddFilter&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.LoggerFilterOptions AddFilter&lt;T&gt; (this Microsoft.Extensions.Logging.LoggerFilterOptions builder, string category, Microsoft.Extensions.Logging.LogLevel level) where T : Microsoft.Extensions.Logging.ILoggerProvider;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.LoggerFilterOptions AddFilter&lt;(class Microsoft.Extensions.Logging.ILoggerProvider) T&gt;(class Microsoft.Extensions.Logging.LoggerFilterOptions builder, string category, valuetype Microsoft.Extensions.Logging.LogLevel level) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter``1(Microsoft.Extensions.Logging.LoggerFilterOptions,System.String,Microsoft.Extensions.Logging.LogLevel)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.LoggerFilterOptions</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <InterfaceName>Microsoft.Extensions.Logging.ILoggerProvider</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Logging.LoggerFilterOptions" RefType="this" />
          <Parameter Name="category" Type="System.String" />
          <Parameter Name="level" Type="Microsoft.Extensions.Logging.LogLevel" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="builder">To be added.</param>
          <param name="category">To be added.</param>
          <param name="level">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions" Member="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter``1(Microsoft.Extensions.Logging.LoggerFilterOptions,System.String,Microsoft.Extensions.Logging.LogLevel)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.LoggerFilterOptions" />
      </Targets>
      <Member MemberName="AddFilter&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.LoggerFilterOptions AddFilter&lt;T&gt; (this Microsoft.Extensions.Logging.LoggerFilterOptions builder, string category, Func&lt;Microsoft.Extensions.Logging.LogLevel,bool&gt; levelFilter) where T : Microsoft.Extensions.Logging.ILoggerProvider;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.LoggerFilterOptions AddFilter&lt;(class Microsoft.Extensions.Logging.ILoggerProvider) T&gt;(class Microsoft.Extensions.Logging.LoggerFilterOptions builder, string category, class System.Func`2&lt;valuetype Microsoft.Extensions.Logging.LogLevel, bool&gt; levelFilter) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter``1(Microsoft.Extensions.Logging.LoggerFilterOptions,System.String,System.Func{Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.LoggerFilterOptions</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <InterfaceName>Microsoft.Extensions.Logging.ILoggerProvider</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Logging.LoggerFilterOptions" RefType="this" />
          <Parameter Name="category" Type="System.String" />
          <Parameter Name="levelFilter" Type="System.Func&lt;Microsoft.Extensions.Logging.LogLevel,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="builder">To be added.</param>
          <param name="category">To be added.</param>
          <param name="levelFilter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions" Member="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter``1(Microsoft.Extensions.Logging.LoggerFilterOptions,System.String,System.Func{Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="BeginScope">
        <MemberSignature Language="C#" Value="public static IDisposable BeginScope (this Microsoft.Extensions.Logging.ILogger logger, string messageFormat, object[] args);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IDisposable BeginScope(class Microsoft.Extensions.Logging.ILogger logger, string messageFormat, object[] args) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.LoggerExtensions.BeginScope(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.IDisposable</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="messageFormat" Type="System.String" />
          <Parameter Name="args" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger" /> to create the scope in.</param>
          <param name="messageFormat">Format string of the scope message.</param>
          <param name="args">An object array that contains zero or more objects to format.</param>
          <summary>
            Formats the message and creates a scope.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.LoggerExtensions" Member="M:Microsoft.Extensions.Logging.LoggerExtensions.BeginScope(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="LogCritical">
        <MemberSignature Language="C#" Value="public static void LogCritical (this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.EventId eventId, Exception exception, string message, object[] args);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LogCritical(class Microsoft.Extensions.Logging.ILogger logger, valuetype Microsoft.Extensions.Logging.EventId eventId, class System.Exception exception, string message, object[] args) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.LoggerExtensions.LogCritical(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.Exception,System.String,System.Object[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="eventId" Type="Microsoft.Extensions.Logging.EventId" />
          <Parameter Name="exception" Type="System.Exception" />
          <Parameter Name="message" Type="System.String" />
          <Parameter Name="args" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger" /> to write to.</param>
          <param name="eventId">The event id associated with the log.</param>
          <param name="exception">The exception to log.</param>
          <param name="message">Format string of the log message.</param>
          <param name="args">An object array that contains zero or more objects to format.</param>
          <summary>
            Formats and writes a critical log message.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.LoggerExtensions" Member="M:Microsoft.Extensions.Logging.LoggerExtensions.LogCritical(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.Exception,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="LogCritical">
        <MemberSignature Language="C#" Value="public static void LogCritical (this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.EventId eventId, string message, object[] args);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LogCritical(class Microsoft.Extensions.Logging.ILogger logger, valuetype Microsoft.Extensions.Logging.EventId eventId, string message, object[] args) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.LoggerExtensions.LogCritical(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.String,System.Object[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="eventId" Type="Microsoft.Extensions.Logging.EventId" />
          <Parameter Name="message" Type="System.String" />
          <Parameter Name="args" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger" /> to write to.</param>
          <param name="eventId">The event id associated with the log.</param>
          <param name="message">Format string of the log message.</param>
          <param name="args">An object array that contains zero or more objects to format.</param>
          <summary>
            Formats and writes a critical log message.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.LoggerExtensions" Member="M:Microsoft.Extensions.Logging.LoggerExtensions.LogCritical(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="LogCritical">
        <MemberSignature Language="C#" Value="public static void LogCritical (this Microsoft.Extensions.Logging.ILogger logger, Exception exception, string message, object[] args);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LogCritical(class Microsoft.Extensions.Logging.ILogger logger, class System.Exception exception, string message, object[] args) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.LoggerExtensions.LogCritical(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String,System.Object[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="exception" Type="System.Exception" />
          <Parameter Name="message" Type="System.String" />
          <Parameter Name="args" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger" /> to write to.</param>
          <param name="exception">The exception to log.</param>
          <param name="message">Format string of the log message.</param>
          <param name="args">An object array that contains zero or more objects to format.</param>
          <summary>
            Formats and writes a critical log message.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.LoggerExtensions" Member="M:Microsoft.Extensions.Logging.LoggerExtensions.LogCritical(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="LogCritical">
        <MemberSignature Language="C#" Value="public static void LogCritical (this Microsoft.Extensions.Logging.ILogger logger, string message, object[] args);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LogCritical(class Microsoft.Extensions.Logging.ILogger logger, string message, object[] args) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.LoggerExtensions.LogCritical(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="message" Type="System.String" />
          <Parameter Name="args" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger" /> to write to.</param>
          <param name="message">Format string of the log message.</param>
          <param name="args">An object array that contains zero or more objects to format.</param>
          <summary>
            Formats and writes a critical log message.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.LoggerExtensions" Member="M:Microsoft.Extensions.Logging.LoggerExtensions.LogCritical(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="LogDebug">
        <MemberSignature Language="C#" Value="public static void LogDebug (this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.EventId eventId, Exception exception, string message, object[] args);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LogDebug(class Microsoft.Extensions.Logging.ILogger logger, valuetype Microsoft.Extensions.Logging.EventId eventId, class System.Exception exception, string message, object[] args) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.LoggerExtensions.LogDebug(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.Exception,System.String,System.Object[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="eventId" Type="Microsoft.Extensions.Logging.EventId" />
          <Parameter Name="exception" Type="System.Exception" />
          <Parameter Name="message" Type="System.String" />
          <Parameter Name="args" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger" /> to write to.</param>
          <param name="eventId">The event id associated with the log.</param>
          <param name="exception">The exception to log.</param>
          <param name="message">Format string of the log message.</param>
          <param name="args">An object array that contains zero or more objects to format.</param>
          <summary>
            Formats and writes a debug log message.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.LoggerExtensions" Member="M:Microsoft.Extensions.Logging.LoggerExtensions.LogDebug(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.Exception,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="LogDebug">
        <MemberSignature Language="C#" Value="public static void LogDebug (this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.EventId eventId, string message, object[] args);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LogDebug(class Microsoft.Extensions.Logging.ILogger logger, valuetype Microsoft.Extensions.Logging.EventId eventId, string message, object[] args) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.LoggerExtensions.LogDebug(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.String,System.Object[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="eventId" Type="Microsoft.Extensions.Logging.EventId" />
          <Parameter Name="message" Type="System.String" />
          <Parameter Name="args" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger" /> to write to.</param>
          <param name="eventId">The event id associated with the log.</param>
          <param name="message">Format string of the log message.</param>
          <param name="args">An object array that contains zero or more objects to format.</param>
          <summary>
            Formats and writes a debug log message.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.LoggerExtensions" Member="M:Microsoft.Extensions.Logging.LoggerExtensions.LogDebug(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="LogDebug">
        <MemberSignature Language="C#" Value="public static void LogDebug (this Microsoft.Extensions.Logging.ILogger logger, Exception exception, string message, object[] args);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LogDebug(class Microsoft.Extensions.Logging.ILogger logger, class System.Exception exception, string message, object[] args) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.LoggerExtensions.LogDebug(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String,System.Object[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="exception" Type="System.Exception" />
          <Parameter Name="message" Type="System.String" />
          <Parameter Name="args" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger" /> to write to.</param>
          <param name="exception">The exception to log.</param>
          <param name="message">Format string of the log message.</param>
          <param name="args">An object array that contains zero or more objects to format.</param>
          <summary>
            Formats and writes a debug log message.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.LoggerExtensions" Member="M:Microsoft.Extensions.Logging.LoggerExtensions.LogDebug(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="LogDebug">
        <MemberSignature Language="C#" Value="public static void LogDebug (this Microsoft.Extensions.Logging.ILogger logger, string message, object[] args);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LogDebug(class Microsoft.Extensions.Logging.ILogger logger, string message, object[] args) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.LoggerExtensions.LogDebug(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="message" Type="System.String" />
          <Parameter Name="args" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger" /> to write to.</param>
          <param name="message">Format string of the log message.</param>
          <param name="args">An object array that contains zero or more objects to format.</param>
          <summary>
            Formats and writes a debug log message.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.LoggerExtensions" Member="M:Microsoft.Extensions.Logging.LoggerExtensions.LogDebug(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="LogError">
        <MemberSignature Language="C#" Value="public static void LogError (this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.EventId eventId, Exception exception, string message, object[] args);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LogError(class Microsoft.Extensions.Logging.ILogger logger, valuetype Microsoft.Extensions.Logging.EventId eventId, class System.Exception exception, string message, object[] args) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.LoggerExtensions.LogError(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.Exception,System.String,System.Object[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="eventId" Type="Microsoft.Extensions.Logging.EventId" />
          <Parameter Name="exception" Type="System.Exception" />
          <Parameter Name="message" Type="System.String" />
          <Parameter Name="args" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger" /> to write to.</param>
          <param name="eventId">The event id associated with the log.</param>
          <param name="exception">The exception to log.</param>
          <param name="message">Format string of the log message.</param>
          <param name="args">An object array that contains zero or more objects to format.</param>
          <summary>
            Formats and writes an error log message.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.LoggerExtensions" Member="M:Microsoft.Extensions.Logging.LoggerExtensions.LogError(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.Exception,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="LogError">
        <MemberSignature Language="C#" Value="public static void LogError (this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.EventId eventId, string message, object[] args);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LogError(class Microsoft.Extensions.Logging.ILogger logger, valuetype Microsoft.Extensions.Logging.EventId eventId, string message, object[] args) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.LoggerExtensions.LogError(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.String,System.Object[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="eventId" Type="Microsoft.Extensions.Logging.EventId" />
          <Parameter Name="message" Type="System.String" />
          <Parameter Name="args" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger" /> to write to.</param>
          <param name="eventId">The event id associated with the log.</param>
          <param name="message">Format string of the log message.</param>
          <param name="args">An object array that contains zero or more objects to format.</param>
          <summary>
            Formats and writes an error log message.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.LoggerExtensions" Member="M:Microsoft.Extensions.Logging.LoggerExtensions.LogError(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="LogError">
        <MemberSignature Language="C#" Value="public static void LogError (this Microsoft.Extensions.Logging.ILogger logger, Exception exception, string message, object[] args);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LogError(class Microsoft.Extensions.Logging.ILogger logger, class System.Exception exception, string message, object[] args) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.LoggerExtensions.LogError(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String,System.Object[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="exception" Type="System.Exception" />
          <Parameter Name="message" Type="System.String" />
          <Parameter Name="args" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger" /> to write to.</param>
          <param name="exception">The exception to log.</param>
          <param name="message">Format string of the log message.</param>
          <param name="args">An object array that contains zero or more objects to format.</param>
          <summary>
            Formats and writes an error log message.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.LoggerExtensions" Member="M:Microsoft.Extensions.Logging.LoggerExtensions.LogError(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="LogError">
        <MemberSignature Language="C#" Value="public static void LogError (this Microsoft.Extensions.Logging.ILogger logger, string message, object[] args);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LogError(class Microsoft.Extensions.Logging.ILogger logger, string message, object[] args) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.LoggerExtensions.LogError(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="message" Type="System.String" />
          <Parameter Name="args" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger" /> to write to.</param>
          <param name="message">Format string of the log message.</param>
          <param name="args">An object array that contains zero or more objects to format.</param>
          <summary>
            Formats and writes an error log message.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.LoggerExtensions" Member="M:Microsoft.Extensions.Logging.LoggerExtensions.LogError(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="LogInformation">
        <MemberSignature Language="C#" Value="public static void LogInformation (this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.EventId eventId, Exception exception, string message, object[] args);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LogInformation(class Microsoft.Extensions.Logging.ILogger logger, valuetype Microsoft.Extensions.Logging.EventId eventId, class System.Exception exception, string message, object[] args) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.LoggerExtensions.LogInformation(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.Exception,System.String,System.Object[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="eventId" Type="Microsoft.Extensions.Logging.EventId" />
          <Parameter Name="exception" Type="System.Exception" />
          <Parameter Name="message" Type="System.String" />
          <Parameter Name="args" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger" /> to write to.</param>
          <param name="eventId">The event id associated with the log.</param>
          <param name="exception">The exception to log.</param>
          <param name="message">Format string of the log message.</param>
          <param name="args">An object array that contains zero or more objects to format.</param>
          <summary>
            Formats and writes an informational log message.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.LoggerExtensions" Member="M:Microsoft.Extensions.Logging.LoggerExtensions.LogInformation(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.Exception,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="LogInformation">
        <MemberSignature Language="C#" Value="public static void LogInformation (this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.EventId eventId, string message, object[] args);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LogInformation(class Microsoft.Extensions.Logging.ILogger logger, valuetype Microsoft.Extensions.Logging.EventId eventId, string message, object[] args) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.LoggerExtensions.LogInformation(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.String,System.Object[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="eventId" Type="Microsoft.Extensions.Logging.EventId" />
          <Parameter Name="message" Type="System.String" />
          <Parameter Name="args" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger" /> to write to.</param>
          <param name="eventId">The event id associated with the log.</param>
          <param name="message">Format string of the log message.</param>
          <param name="args">An object array that contains zero or more objects to format.</param>
          <summary>
            Formats and writes an informational log message.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.LoggerExtensions" Member="M:Microsoft.Extensions.Logging.LoggerExtensions.LogInformation(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="LogInformation">
        <MemberSignature Language="C#" Value="public static void LogInformation (this Microsoft.Extensions.Logging.ILogger logger, Exception exception, string message, object[] args);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LogInformation(class Microsoft.Extensions.Logging.ILogger logger, class System.Exception exception, string message, object[] args) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.LoggerExtensions.LogInformation(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String,System.Object[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="exception" Type="System.Exception" />
          <Parameter Name="message" Type="System.String" />
          <Parameter Name="args" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger" /> to write to.</param>
          <param name="exception">The exception to log.</param>
          <param name="message">Format string of the log message.</param>
          <param name="args">An object array that contains zero or more objects to format.</param>
          <summary>
            Formats and writes an informational log message.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.LoggerExtensions" Member="M:Microsoft.Extensions.Logging.LoggerExtensions.LogInformation(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="LogInformation">
        <MemberSignature Language="C#" Value="public static void LogInformation (this Microsoft.Extensions.Logging.ILogger logger, string message, object[] args);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LogInformation(class Microsoft.Extensions.Logging.ILogger logger, string message, object[] args) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.LoggerExtensions.LogInformation(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="message" Type="System.String" />
          <Parameter Name="args" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger" /> to write to.</param>
          <param name="message">Format string of the log message.</param>
          <param name="args">An object array that contains zero or more objects to format.</param>
          <summary>
            Formats and writes an informational log message.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.LoggerExtensions" Member="M:Microsoft.Extensions.Logging.LoggerExtensions.LogInformation(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="LogTrace">
        <MemberSignature Language="C#" Value="public static void LogTrace (this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.EventId eventId, Exception exception, string message, object[] args);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LogTrace(class Microsoft.Extensions.Logging.ILogger logger, valuetype Microsoft.Extensions.Logging.EventId eventId, class System.Exception exception, string message, object[] args) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.LoggerExtensions.LogTrace(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.Exception,System.String,System.Object[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="eventId" Type="Microsoft.Extensions.Logging.EventId" />
          <Parameter Name="exception" Type="System.Exception" />
          <Parameter Name="message" Type="System.String" />
          <Parameter Name="args" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger" /> to write to.</param>
          <param name="eventId">The event id associated with the log.</param>
          <param name="exception">The exception to log.</param>
          <param name="message">Format string of the log message.</param>
          <param name="args">An object array that contains zero or more objects to format.</param>
          <summary>
            Formats and writes a trace log message.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.LoggerExtensions" Member="M:Microsoft.Extensions.Logging.LoggerExtensions.LogTrace(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.Exception,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="LogTrace">
        <MemberSignature Language="C#" Value="public static void LogTrace (this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.EventId eventId, string message, object[] args);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LogTrace(class Microsoft.Extensions.Logging.ILogger logger, valuetype Microsoft.Extensions.Logging.EventId eventId, string message, object[] args) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.LoggerExtensions.LogTrace(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.String,System.Object[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="eventId" Type="Microsoft.Extensions.Logging.EventId" />
          <Parameter Name="message" Type="System.String" />
          <Parameter Name="args" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger" /> to write to.</param>
          <param name="eventId">The event id associated with the log.</param>
          <param name="message">Format string of the log message.</param>
          <param name="args">An object array that contains zero or more objects to format.</param>
          <summary>
            Formats and writes a trace log message.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.LoggerExtensions" Member="M:Microsoft.Extensions.Logging.LoggerExtensions.LogTrace(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="LogTrace">
        <MemberSignature Language="C#" Value="public static void LogTrace (this Microsoft.Extensions.Logging.ILogger logger, Exception exception, string message, object[] args);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LogTrace(class Microsoft.Extensions.Logging.ILogger logger, class System.Exception exception, string message, object[] args) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.LoggerExtensions.LogTrace(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String,System.Object[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="exception" Type="System.Exception" />
          <Parameter Name="message" Type="System.String" />
          <Parameter Name="args" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger" /> to write to.</param>
          <param name="exception">The exception to log.</param>
          <param name="message">Format string of the log message.</param>
          <param name="args">An object array that contains zero or more objects to format.</param>
          <summary>
            Formats and writes a trace log message.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.LoggerExtensions" Member="M:Microsoft.Extensions.Logging.LoggerExtensions.LogTrace(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="LogTrace">
        <MemberSignature Language="C#" Value="public static void LogTrace (this Microsoft.Extensions.Logging.ILogger logger, string message, object[] args);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LogTrace(class Microsoft.Extensions.Logging.ILogger logger, string message, object[] args) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.LoggerExtensions.LogTrace(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="message" Type="System.String" />
          <Parameter Name="args" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger" /> to write to.</param>
          <param name="message">Format string of the log message.</param>
          <param name="args">An object array that contains zero or more objects to format.</param>
          <summary>
            Formats and writes a trace log message.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.LoggerExtensions" Member="M:Microsoft.Extensions.Logging.LoggerExtensions.LogTrace(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="LogWarning">
        <MemberSignature Language="C#" Value="public static void LogWarning (this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.EventId eventId, Exception exception, string message, object[] args);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LogWarning(class Microsoft.Extensions.Logging.ILogger logger, valuetype Microsoft.Extensions.Logging.EventId eventId, class System.Exception exception, string message, object[] args) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.LoggerExtensions.LogWarning(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.Exception,System.String,System.Object[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="eventId" Type="Microsoft.Extensions.Logging.EventId" />
          <Parameter Name="exception" Type="System.Exception" />
          <Parameter Name="message" Type="System.String" />
          <Parameter Name="args" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger" /> to write to.</param>
          <param name="eventId">The event id associated with the log.</param>
          <param name="exception">The exception to log.</param>
          <param name="message">Format string of the log message.</param>
          <param name="args">An object array that contains zero or more objects to format.</param>
          <summary>
            Formats and writes a warning log message.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.LoggerExtensions" Member="M:Microsoft.Extensions.Logging.LoggerExtensions.LogWarning(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.Exception,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="LogWarning">
        <MemberSignature Language="C#" Value="public static void LogWarning (this Microsoft.Extensions.Logging.ILogger logger, Microsoft.Extensions.Logging.EventId eventId, string message, object[] args);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LogWarning(class Microsoft.Extensions.Logging.ILogger logger, valuetype Microsoft.Extensions.Logging.EventId eventId, string message, object[] args) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.LoggerExtensions.LogWarning(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.String,System.Object[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="eventId" Type="Microsoft.Extensions.Logging.EventId" />
          <Parameter Name="message" Type="System.String" />
          <Parameter Name="args" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger" /> to write to.</param>
          <param name="eventId">The event id associated with the log.</param>
          <param name="message">Format string of the log message.</param>
          <param name="args">An object array that contains zero or more objects to format.</param>
          <summary>
            Formats and writes a warning log message.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.LoggerExtensions" Member="M:Microsoft.Extensions.Logging.LoggerExtensions.LogWarning(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="LogWarning">
        <MemberSignature Language="C#" Value="public static void LogWarning (this Microsoft.Extensions.Logging.ILogger logger, Exception exception, string message, object[] args);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LogWarning(class Microsoft.Extensions.Logging.ILogger logger, class System.Exception exception, string message, object[] args) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.LoggerExtensions.LogWarning(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String,System.Object[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="exception" Type="System.Exception" />
          <Parameter Name="message" Type="System.String" />
          <Parameter Name="args" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger" /> to write to.</param>
          <param name="exception">The exception to log.</param>
          <param name="message">Format string of the log message.</param>
          <param name="args">An object array that contains zero or more objects to format.</param>
          <summary>
            Formats and writes a warning log message.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.LoggerExtensions" Member="M:Microsoft.Extensions.Logging.LoggerExtensions.LogWarning(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILogger" />
      </Targets>
      <Member MemberName="LogWarning">
        <MemberSignature Language="C#" Value="public static void LogWarning (this Microsoft.Extensions.Logging.ILogger logger, string message, object[] args);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LogWarning(class Microsoft.Extensions.Logging.ILogger logger, string message, object[] args) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.LoggerExtensions.LogWarning(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" RefType="this" />
          <Parameter Name="message" Type="System.String" />
          <Parameter Name="args" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger" /> to write to.</param>
          <param name="message">Format string of the log message.</param>
          <param name="args">An object array that contains zero or more objects to format.</param>
          <summary>
            Formats and writes a warning log message.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.LoggerExtensions" Member="M:Microsoft.Extensions.Logging.LoggerExtensions.LogWarning(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggerFactory" />
      </Targets>
      <Member MemberName="CreateLogger">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILogger CreateLogger (this Microsoft.Extensions.Logging.ILoggerFactory factory, Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILogger CreateLogger(class Microsoft.Extensions.Logging.ILoggerFactory factory, class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.LoggerFactoryExtensions.CreateLogger(Microsoft.Extensions.Logging.ILoggerFactory,System.Type)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILogger</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="factory" Type="Microsoft.Extensions.Logging.ILoggerFactory" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="factory">The factory.</param>
          <param name="type">The type.</param>
          <summary>
            Creates a new ILogger instance using the full name of the given type.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.LoggerFactoryExtensions" Member="M:Microsoft.Extensions.Logging.LoggerFactoryExtensions.CreateLogger(Microsoft.Extensions.Logging.ILoggerFactory,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggerFactory" />
      </Targets>
      <Member MemberName="CreateLogger&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILogger&lt;T&gt; CreateLogger&lt;T&gt; (this Microsoft.Extensions.Logging.ILoggerFactory factory);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILogger`1&lt;!!T&gt; CreateLogger&lt;T&gt;(class Microsoft.Extensions.Logging.ILoggerFactory factory) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.LoggerFactoryExtensions.CreateLogger``1(Microsoft.Extensions.Logging.ILoggerFactory)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILogger&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="factory" Type="Microsoft.Extensions.Logging.ILoggerFactory" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type.</typeparam>
          <param name="factory">The factory.</param>
          <summary>
            Creates a new ILogger instance using the full name of the given type.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.LoggerFactoryExtensions" Member="M:Microsoft.Extensions.Logging.LoggerFactoryExtensions.CreateLogger``1(Microsoft.Extensions.Logging.ILoggerFactory)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggingBuilder" />
      </Targets>
      <Member MemberName="AddConfiguration">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddConfiguration (this Microsoft.Extensions.Logging.ILoggingBuilder builder, Microsoft.Extensions.Configuration.IConfiguration configuration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddConfiguration(class Microsoft.Extensions.Logging.ILoggingBuilder builder, class Microsoft.Extensions.Configuration.IConfiguration configuration) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.LoggingBuilderExtensions.AddConfiguration(Microsoft.Extensions.Logging.ILoggingBuilder,Microsoft.Extensions.Configuration.IConfiguration)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
          <Parameter Name="configuration" Type="Microsoft.Extensions.Configuration.IConfiguration" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> to use.</param>
          <param name="configuration">The <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> to add.</param>
          <summary>
            Configures <see cref="T:Microsoft.Extensions.Logging.LoggerFilterOptions" /> from an instance of <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.LoggingBuilderExtensions" Member="M:Microsoft.Extensions.Logging.LoggingBuilderExtensions.AddConfiguration(Microsoft.Extensions.Logging.ILoggingBuilder,Microsoft.Extensions.Configuration.IConfiguration)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggingBuilder" />
      </Targets>
      <Member MemberName="AddProvider">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddProvider (this Microsoft.Extensions.Logging.ILoggingBuilder builder, Microsoft.Extensions.Logging.ILoggerProvider provider);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddProvider(class Microsoft.Extensions.Logging.ILoggingBuilder builder, class Microsoft.Extensions.Logging.ILoggerProvider provider) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.LoggingBuilderExtensions.AddProvider(Microsoft.Extensions.Logging.ILoggingBuilder,Microsoft.Extensions.Logging.ILoggerProvider)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
          <Parameter Name="provider" Type="Microsoft.Extensions.Logging.ILoggerProvider" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="provider">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.LoggingBuilderExtensions" Member="M:Microsoft.Extensions.Logging.LoggingBuilderExtensions.AddProvider(Microsoft.Extensions.Logging.ILoggingBuilder,Microsoft.Extensions.Logging.ILoggerProvider)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggingBuilder" />
      </Targets>
      <Member MemberName="ClearProviders">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder ClearProviders (this Microsoft.Extensions.Logging.ILoggingBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder ClearProviders(class Microsoft.Extensions.Logging.ILoggingBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.LoggingBuilderExtensions.ClearProviders(Microsoft.Extensions.Logging.ILoggingBuilder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.LoggingBuilderExtensions" Member="M:Microsoft.Extensions.Logging.LoggingBuilderExtensions.ClearProviders(Microsoft.Extensions.Logging.ILoggingBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggingBuilder" />
      </Targets>
      <Member MemberName="SetMinimumLevel">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder SetMinimumLevel (this Microsoft.Extensions.Logging.ILoggingBuilder builder, Microsoft.Extensions.Logging.LogLevel level);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder SetMinimumLevel(class Microsoft.Extensions.Logging.ILoggingBuilder builder, valuetype Microsoft.Extensions.Logging.LogLevel level) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.LoggingBuilderExtensions.SetMinimumLevel(Microsoft.Extensions.Logging.ILoggingBuilder,Microsoft.Extensions.Logging.LogLevel)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
          <Parameter Name="level" Type="Microsoft.Extensions.Logging.LogLevel" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="level">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.LoggingBuilderExtensions" Member="M:Microsoft.Extensions.Logging.LoggingBuilderExtensions.SetMinimumLevel(Microsoft.Extensions.Logging.ILoggingBuilder,Microsoft.Extensions.Logging.LogLevel)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggerFactory" />
      </Targets>
      <Member MemberName="AddTraceSource">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggerFactory AddTraceSource (this Microsoft.Extensions.Logging.ILoggerFactory factory, System.Diagnostics.SourceSwitch sourceSwitch);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggerFactory AddTraceSource(class Microsoft.Extensions.Logging.ILoggerFactory factory, class System.Diagnostics.SourceSwitch sourceSwitch) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.TraceSourceFactoryExtensions.AddTraceSource(Microsoft.Extensions.Logging.ILoggerFactory,System.Diagnostics.SourceSwitch)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggerFactory</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="factory" Type="Microsoft.Extensions.Logging.ILoggerFactory" RefType="this" />
          <Parameter Name="sourceSwitch" Type="System.Diagnostics.SourceSwitch" />
        </Parameters>
        <Docs>
          <param name="factory">To be added.</param>
          <param name="sourceSwitch">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.TraceSourceFactoryExtensions" Member="M:Microsoft.Extensions.Logging.TraceSourceFactoryExtensions.AddTraceSource(Microsoft.Extensions.Logging.ILoggerFactory,System.Diagnostics.SourceSwitch)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggerFactory" />
      </Targets>
      <Member MemberName="AddTraceSource">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggerFactory AddTraceSource (this Microsoft.Extensions.Logging.ILoggerFactory factory, System.Diagnostics.SourceSwitch sourceSwitch, System.Diagnostics.TraceListener listener);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggerFactory AddTraceSource(class Microsoft.Extensions.Logging.ILoggerFactory factory, class System.Diagnostics.SourceSwitch sourceSwitch, class System.Diagnostics.TraceListener listener) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.TraceSourceFactoryExtensions.AddTraceSource(Microsoft.Extensions.Logging.ILoggerFactory,System.Diagnostics.SourceSwitch,System.Diagnostics.TraceListener)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggerFactory</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="factory" Type="Microsoft.Extensions.Logging.ILoggerFactory" RefType="this" />
          <Parameter Name="sourceSwitch" Type="System.Diagnostics.SourceSwitch" />
          <Parameter Name="listener" Type="System.Diagnostics.TraceListener" />
        </Parameters>
        <Docs>
          <param name="factory">To be added.</param>
          <param name="sourceSwitch">To be added.</param>
          <param name="listener">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.TraceSourceFactoryExtensions" Member="M:Microsoft.Extensions.Logging.TraceSourceFactoryExtensions.AddTraceSource(Microsoft.Extensions.Logging.ILoggerFactory,System.Diagnostics.SourceSwitch,System.Diagnostics.TraceListener)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggerFactory" />
      </Targets>
      <Member MemberName="AddTraceSource">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggerFactory AddTraceSource (this Microsoft.Extensions.Logging.ILoggerFactory factory, string switchName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggerFactory AddTraceSource(class Microsoft.Extensions.Logging.ILoggerFactory factory, string switchName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.TraceSourceFactoryExtensions.AddTraceSource(Microsoft.Extensions.Logging.ILoggerFactory,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggerFactory</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="factory" Type="Microsoft.Extensions.Logging.ILoggerFactory" RefType="this" />
          <Parameter Name="switchName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="factory">To be added.</param>
          <param name="switchName">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.TraceSourceFactoryExtensions" Member="M:Microsoft.Extensions.Logging.TraceSourceFactoryExtensions.AddTraceSource(Microsoft.Extensions.Logging.ILoggerFactory,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggerFactory" />
      </Targets>
      <Member MemberName="AddTraceSource">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggerFactory AddTraceSource (this Microsoft.Extensions.Logging.ILoggerFactory factory, string switchName, System.Diagnostics.TraceListener listener);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggerFactory AddTraceSource(class Microsoft.Extensions.Logging.ILoggerFactory factory, string switchName, class System.Diagnostics.TraceListener listener) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.TraceSourceFactoryExtensions.AddTraceSource(Microsoft.Extensions.Logging.ILoggerFactory,System.String,System.Diagnostics.TraceListener)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggerFactory</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="factory" Type="Microsoft.Extensions.Logging.ILoggerFactory" RefType="this" />
          <Parameter Name="switchName" Type="System.String" />
          <Parameter Name="listener" Type="System.Diagnostics.TraceListener" />
        </Parameters>
        <Docs>
          <param name="factory">To be added.</param>
          <param name="switchName">To be added.</param>
          <param name="listener">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.TraceSourceFactoryExtensions" Member="M:Microsoft.Extensions.Logging.TraceSourceFactoryExtensions.AddTraceSource(Microsoft.Extensions.Logging.ILoggerFactory,System.String,System.Diagnostics.TraceListener)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggingBuilder" />
      </Targets>
      <Member MemberName="AddTraceSource">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddTraceSource (this Microsoft.Extensions.Logging.ILoggingBuilder builder, System.Diagnostics.SourceSwitch sourceSwitch);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddTraceSource(class Microsoft.Extensions.Logging.ILoggingBuilder builder, class System.Diagnostics.SourceSwitch sourceSwitch) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.TraceSourceFactoryExtensions.AddTraceSource(Microsoft.Extensions.Logging.ILoggingBuilder,System.Diagnostics.SourceSwitch)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
          <Parameter Name="sourceSwitch" Type="System.Diagnostics.SourceSwitch" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> to use.</param>
          <param name="sourceSwitch">The <see cref="T:System.Diagnostics.SourceSwitch" /> to use.</param>
          <summary>
            Adds a TraceSource logger named 'TraceSource' to the factory.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.TraceSourceFactoryExtensions" Member="M:Microsoft.Extensions.Logging.TraceSourceFactoryExtensions.AddTraceSource(Microsoft.Extensions.Logging.ILoggingBuilder,System.Diagnostics.SourceSwitch)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggingBuilder" />
      </Targets>
      <Member MemberName="AddTraceSource">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddTraceSource (this Microsoft.Extensions.Logging.ILoggingBuilder builder, System.Diagnostics.SourceSwitch sourceSwitch, System.Diagnostics.TraceListener listener);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddTraceSource(class Microsoft.Extensions.Logging.ILoggingBuilder builder, class System.Diagnostics.SourceSwitch sourceSwitch, class System.Diagnostics.TraceListener listener) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.TraceSourceFactoryExtensions.AddTraceSource(Microsoft.Extensions.Logging.ILoggingBuilder,System.Diagnostics.SourceSwitch,System.Diagnostics.TraceListener)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
          <Parameter Name="sourceSwitch" Type="System.Diagnostics.SourceSwitch" />
          <Parameter Name="listener" Type="System.Diagnostics.TraceListener" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.Logging.LoggerFactory" /> to use.</param>
          <param name="sourceSwitch">The <see cref="T:System.Diagnostics.SourceSwitch" /> to use.</param>
          <param name="listener">The <see cref="T:System.Diagnostics.TraceListener" /> to use.</param>
          <summary>
            Adds a TraceSource logger named 'TraceSource' to the factory.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.TraceSourceFactoryExtensions" Member="M:Microsoft.Extensions.Logging.TraceSourceFactoryExtensions.AddTraceSource(Microsoft.Extensions.Logging.ILoggingBuilder,System.Diagnostics.SourceSwitch,System.Diagnostics.TraceListener)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggingBuilder" />
      </Targets>
      <Member MemberName="AddTraceSource">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddTraceSource (this Microsoft.Extensions.Logging.ILoggingBuilder builder, string switchName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddTraceSource(class Microsoft.Extensions.Logging.ILoggingBuilder builder, string switchName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.TraceSourceFactoryExtensions.AddTraceSource(Microsoft.Extensions.Logging.ILoggingBuilder,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
          <Parameter Name="switchName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> to use.</param>
          <param name="switchName">The name of the <see cref="T:System.Diagnostics.SourceSwitch" /> to use.</param>
          <summary>
            Adds a TraceSource logger named 'TraceSource' to the factory.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.TraceSourceFactoryExtensions" Member="M:Microsoft.Extensions.Logging.TraceSourceFactoryExtensions.AddTraceSource(Microsoft.Extensions.Logging.ILoggingBuilder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Logging.ILoggingBuilder" />
      </Targets>
      <Member MemberName="AddTraceSource">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddTraceSource (this Microsoft.Extensions.Logging.ILoggingBuilder builder, string switchName, System.Diagnostics.TraceListener listener);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddTraceSource(class Microsoft.Extensions.Logging.ILoggingBuilder builder, string switchName, class System.Diagnostics.TraceListener listener) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.TraceSourceFactoryExtensions.AddTraceSource(Microsoft.Extensions.Logging.ILoggingBuilder,System.String,System.Diagnostics.TraceListener)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
          <Parameter Name="switchName" Type="System.String" />
          <Parameter Name="listener" Type="System.Diagnostics.TraceListener" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> to use.</param>
          <param name="switchName">The name of the <see cref="T:System.Diagnostics.SourceSwitch" /> to use.</param>
          <param name="listener">The <see cref="T:System.Diagnostics.TraceListener" /> to use.</param>
          <summary>
            Adds a TraceSource logger named 'TraceSource' to the factory.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Logging.TraceSourceFactoryExtensions" Member="M:Microsoft.Extensions.Logging.TraceSourceFactoryExtensions.AddTraceSource(Microsoft.Extensions.Logging.ILoggingBuilder,System.String,System.Diagnostics.TraceListener)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.ObjectPool.ObjectPoolProvider" />
      </Targets>
      <Member MemberName="CreateStringBuilderPool">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.ObjectPool.ObjectPool&lt;System.Text.StringBuilder&gt; CreateStringBuilderPool (this Microsoft.Extensions.ObjectPool.ObjectPoolProvider provider);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.ObjectPool.ObjectPool`1&lt;class System.Text.StringBuilder&gt; CreateStringBuilderPool(class Microsoft.Extensions.ObjectPool.ObjectPoolProvider provider) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.ObjectPool.ObjectPoolProviderExtensions.CreateStringBuilderPool(Microsoft.Extensions.ObjectPool.ObjectPoolProvider)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.ObjectPool.ObjectPool&lt;System.Text.StringBuilder&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="provider" Type="Microsoft.Extensions.ObjectPool.ObjectPoolProvider" RefType="this" />
        </Parameters>
        <Docs>
          <param name="provider">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.ObjectPool.ObjectPoolProviderExtensions" Member="M:Microsoft.Extensions.ObjectPool.ObjectPoolProviderExtensions.CreateStringBuilderPool(Microsoft.Extensions.ObjectPool.ObjectPoolProvider)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.ObjectPool.ObjectPoolProvider" />
      </Targets>
      <Member MemberName="CreateStringBuilderPool">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.ObjectPool.ObjectPool&lt;System.Text.StringBuilder&gt; CreateStringBuilderPool (this Microsoft.Extensions.ObjectPool.ObjectPoolProvider provider, int initialCapacity, int maximumRetainedCapacity);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.ObjectPool.ObjectPool`1&lt;class System.Text.StringBuilder&gt; CreateStringBuilderPool(class Microsoft.Extensions.ObjectPool.ObjectPoolProvider provider, int32 initialCapacity, int32 maximumRetainedCapacity) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.ObjectPool.ObjectPoolProviderExtensions.CreateStringBuilderPool(Microsoft.Extensions.ObjectPool.ObjectPoolProvider,System.Int32,System.Int32)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.ObjectPool.ObjectPool&lt;System.Text.StringBuilder&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="provider" Type="Microsoft.Extensions.ObjectPool.ObjectPoolProvider" RefType="this" />
          <Parameter Name="initialCapacity" Type="System.Int32" />
          <Parameter Name="maximumRetainedCapacity" Type="System.Int32" />
        </Parameters>
        <Docs>
          <param name="provider">To be added.</param>
          <param name="initialCapacity">To be added.</param>
          <param name="maximumRetainedCapacity">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Extensions.ObjectPool.ObjectPoolProviderExtensions" Member="M:Microsoft.Extensions.ObjectPool.ObjectPoolProviderExtensions.CreateStringBuilderPool(Microsoft.Extensions.ObjectPool.ObjectPoolProvider,System.Int32,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.Options.IOptionsMonitor`1" />
      </Targets>
      <Member MemberName="OnChange&lt;TOptions&gt;">
        <MemberSignature Language="C#" Value="public static IDisposable OnChange&lt;TOptions&gt; (this Microsoft.Extensions.Options.IOptionsMonitor&lt;TOptions&gt; monitor, Action&lt;TOptions&gt; listener);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IDisposable OnChange&lt;TOptions&gt;(class Microsoft.Extensions.Options.IOptionsMonitor`1&lt;!!TOptions&gt; monitor, class System.Action`1&lt;!!TOptions&gt; listener) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Options.OptionsMonitorExtensions.OnChange``1(Microsoft.Extensions.Options.IOptionsMonitor{``0},System.Action{``0})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.IDisposable</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOptions" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="monitor" Type="Microsoft.Extensions.Options.IOptionsMonitor&lt;TOptions&gt;" RefType="this" />
          <Parameter Name="listener" Type="System.Action&lt;TOptions&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TOptions">To be added.</typeparam>
          <param name="monitor">The IOptionsMonitor.</param>
          <param name="listener">The action to be invoked when TOptions has changed.</param>
          <summary>
            Registers a listener to be called whenever TOptions changes.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Options.OptionsMonitorExtensions" Member="M:Microsoft.Extensions.Options.OptionsMonitorExtensions.OnChange``1(Microsoft.Extensions.Options.IOptionsMonitor{``0},System.Action{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Text.StringBuilder" />
      </Targets>
      <Member MemberName="Append">
        <MemberSignature Language="C#" Value="public static System.Text.StringBuilder Append (this System.Text.StringBuilder builder, Microsoft.Extensions.Primitives.StringSegment segment);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.StringBuilder Append(class System.Text.StringBuilder builder, valuetype Microsoft.Extensions.Primitives.StringSegment segment) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Primitives.Extensions.Append(System.Text.StringBuilder,Microsoft.Extensions.Primitives.StringSegment)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Text.StringBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="System.Text.StringBuilder" RefType="this" />
          <Parameter Name="segment" Type="Microsoft.Extensions.Primitives.StringSegment" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to add to.</param>
          <param name="segment">The <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> to add.</param>
          <summary>
            Add the given <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> to the <see cref="T:System.Text.StringBuilder" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Extensions.Primitives.Extensions" Member="M:Microsoft.Extensions.Primitives.Extensions.Append(System.Text.StringBuilder,Microsoft.Extensions.Primitives.StringSegment)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Net.Http.Headers.ContentDispositionHeaderValue" />
      </Targets>
      <Member MemberName="IsFileDisposition">
        <MemberSignature Language="C#" Value="public static bool IsFileDisposition (this Microsoft.Net.Http.Headers.ContentDispositionHeaderValue header);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsFileDisposition(class Microsoft.Net.Http.Headers.ContentDispositionHeaderValue header) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Net.Http.Headers.ContentDispositionHeaderValueIdentityExtensions.IsFileDisposition(Microsoft.Net.Http.Headers.ContentDispositionHeaderValue)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="header" Type="Microsoft.Net.Http.Headers.ContentDispositionHeaderValue" RefType="this" />
        </Parameters>
        <Docs>
          <param name="header">The header to check</param>
          <summary>
            Checks if the content disposition header is a file disposition
            </summary>
        </Docs>
        <Link Type="Microsoft.Net.Http.Headers.ContentDispositionHeaderValueIdentityExtensions" Member="M:Microsoft.Net.Http.Headers.ContentDispositionHeaderValueIdentityExtensions.IsFileDisposition(Microsoft.Net.Http.Headers.ContentDispositionHeaderValue)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Net.Http.Headers.ContentDispositionHeaderValue" />
      </Targets>
      <Member MemberName="IsFormDisposition">
        <MemberSignature Language="C#" Value="public static bool IsFormDisposition (this Microsoft.Net.Http.Headers.ContentDispositionHeaderValue header);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsFormDisposition(class Microsoft.Net.Http.Headers.ContentDispositionHeaderValue header) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Net.Http.Headers.ContentDispositionHeaderValueIdentityExtensions.IsFormDisposition(Microsoft.Net.Http.Headers.ContentDispositionHeaderValue)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="header" Type="Microsoft.Net.Http.Headers.ContentDispositionHeaderValue" RefType="this" />
        </Parameters>
        <Docs>
          <param name="header">The header to check</param>
          <summary>
            Checks if the content disposition header is a form disposition
            </summary>
        </Docs>
        <Link Type="Microsoft.Net.Http.Headers.ContentDispositionHeaderValueIdentityExtensions" Member="M:Microsoft.Net.Http.Headers.ContentDispositionHeaderValueIdentityExtensions.IsFormDisposition(Microsoft.Net.Http.Headers.ContentDispositionHeaderValue)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Net.Http.Server.RequestContext" />
      </Targets>
      <Member MemberName="AcceptWebSocketAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.WebSockets.WebSocket&gt; AcceptWebSocketAsync (this Microsoft.Net.Http.Server.RequestContext context);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.WebSockets.WebSocket&gt; AcceptWebSocketAsync(class Microsoft.Net.Http.Server.RequestContext context) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Net.Http.Server.WebSocketExtensions.AcceptWebSocketAsync(Microsoft.Net.Http.Server.RequestContext)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.WebSockets.WebSocket&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.Net.Http.Server.RequestContext" RefType="this" />
        </Parameters>
        <Docs>
          <param name="context">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Net.Http.Server.WebSocketExtensions" Member="M:Microsoft.Net.Http.Server.WebSocketExtensions.AcceptWebSocketAsync(Microsoft.Net.Http.Server.RequestContext)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Net.Http.Server.RequestContext" />
      </Targets>
      <Member MemberName="AcceptWebSocketAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.WebSockets.WebSocket&gt; AcceptWebSocketAsync (this Microsoft.Net.Http.Server.RequestContext context, string subProtocol);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.WebSockets.WebSocket&gt; AcceptWebSocketAsync(class Microsoft.Net.Http.Server.RequestContext context, string subProtocol) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Net.Http.Server.WebSocketExtensions.AcceptWebSocketAsync(Microsoft.Net.Http.Server.RequestContext,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.WebSockets.WebSocket&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.Net.Http.Server.RequestContext" RefType="this" />
          <Parameter Name="subProtocol" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="context">To be added.</param>
          <param name="subProtocol">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Net.Http.Server.WebSocketExtensions" Member="M:Microsoft.Net.Http.Server.WebSocketExtensions.AcceptWebSocketAsync(Microsoft.Net.Http.Server.RequestContext,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Net.Http.Server.RequestContext" />
      </Targets>
      <Member MemberName="AcceptWebSocketAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.WebSockets.WebSocket&gt; AcceptWebSocketAsync (this Microsoft.Net.Http.Server.RequestContext context, string subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.WebSockets.WebSocket&gt; AcceptWebSocketAsync(class Microsoft.Net.Http.Server.RequestContext context, string subProtocol, int32 receiveBufferSize, valuetype System.TimeSpan keepAliveInterval) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Net.Http.Server.WebSocketExtensions.AcceptWebSocketAsync(Microsoft.Net.Http.Server.RequestContext,System.String,System.Int32,System.TimeSpan)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.WebSockets.WebSocket&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.Net.Http.Server.RequestContext" RefType="this" />
          <Parameter Name="subProtocol" Type="System.String" />
          <Parameter Name="receiveBufferSize" Type="System.Int32" />
          <Parameter Name="keepAliveInterval" Type="System.TimeSpan" />
        </Parameters>
        <Docs>
          <param name="context">To be added.</param>
          <param name="subProtocol">To be added.</param>
          <param name="receiveBufferSize">To be added.</param>
          <param name="keepAliveInterval">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Net.Http.Server.WebSocketExtensions" Member="M:Microsoft.Net.Http.Server.WebSocketExtensions.AcceptWebSocketAsync(Microsoft.Net.Http.Server.RequestContext,System.String,System.Int32,System.TimeSpan)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Net.Http.Server.RequestContext" />
      </Targets>
      <Member MemberName="AcceptWebSocketAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.WebSockets.WebSocket&gt; AcceptWebSocketAsync (this Microsoft.Net.Http.Server.RequestContext context, string subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval, ArraySegment&lt;byte&gt; internalBuffer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.WebSockets.WebSocket&gt; AcceptWebSocketAsync(class Microsoft.Net.Http.Server.RequestContext context, string subProtocol, int32 receiveBufferSize, valuetype System.TimeSpan keepAliveInterval, valuetype System.ArraySegment`1&lt;unsigned int8&gt; internalBuffer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Net.Http.Server.WebSocketExtensions.AcceptWebSocketAsync(Microsoft.Net.Http.Server.RequestContext,System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.WebSockets.WebSocket&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.Net.Http.Server.RequestContext" RefType="this" />
          <Parameter Name="subProtocol" Type="System.String" />
          <Parameter Name="receiveBufferSize" Type="System.Int32" />
          <Parameter Name="keepAliveInterval" Type="System.TimeSpan" />
          <Parameter Name="internalBuffer" Type="System.ArraySegment&lt;System.Byte&gt;" />
        </Parameters>
        <Docs>
          <param name="context">To be added.</param>
          <param name="subProtocol">To be added.</param>
          <param name="receiveBufferSize">To be added.</param>
          <param name="keepAliveInterval">To be added.</param>
          <param name="internalBuffer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Net.Http.Server.WebSocketExtensions" Member="M:Microsoft.Net.Http.Server.WebSocketExtensions.AcceptWebSocketAsync(Microsoft.Net.Http.Server.RequestContext,System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Net.Http.Server.RequestContext" />
      </Targets>
      <Member MemberName="AcceptWebSocketAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.WebSockets.WebSocket&gt; AcceptWebSocketAsync (this Microsoft.Net.Http.Server.RequestContext context, string subProtocol, TimeSpan keepAliveInterval);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.WebSockets.WebSocket&gt; AcceptWebSocketAsync(class Microsoft.Net.Http.Server.RequestContext context, string subProtocol, valuetype System.TimeSpan keepAliveInterval) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Net.Http.Server.WebSocketExtensions.AcceptWebSocketAsync(Microsoft.Net.Http.Server.RequestContext,System.String,System.TimeSpan)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.WebSockets.WebSocket&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.Net.Http.Server.RequestContext" RefType="this" />
          <Parameter Name="subProtocol" Type="System.String" />
          <Parameter Name="keepAliveInterval" Type="System.TimeSpan" />
        </Parameters>
        <Docs>
          <param name="context">To be added.</param>
          <param name="subProtocol">To be added.</param>
          <param name="keepAliveInterval">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Net.Http.Server.WebSocketExtensions" Member="M:Microsoft.Net.Http.Server.WebSocketExtensions.AcceptWebSocketAsync(Microsoft.Net.Http.Server.RequestContext,System.String,System.TimeSpan)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Net.Http.Server.RequestContext" />
      </Targets>
      <Member MemberName="IsWebSocketRequest">
        <MemberSignature Language="C#" Value="public static bool IsWebSocketRequest (this Microsoft.Net.Http.Server.RequestContext context);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsWebSocketRequest(class Microsoft.Net.Http.Server.RequestContext context) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Net.Http.Server.WebSocketExtensions.IsWebSocketRequest(Microsoft.Net.Http.Server.RequestContext)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.Net.Http.Server.RequestContext" RefType="this" />
        </Parameters>
        <Docs>
          <param name="context">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Net.Http.Server.WebSocketExtensions" Member="M:Microsoft.Net.Http.Server.WebSocketExtensions.IsWebSocketRequest(Microsoft.Net.Http.Server.RequestContext)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticListener" />
      </Targets>
      <Member MemberName="SubscribeWithAdapter">
        <MemberSignature Language="C#" Value="public static IDisposable SubscribeWithAdapter (this System.Diagnostics.DiagnosticListener diagnostic, object target);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IDisposable SubscribeWithAdapter(class System.Diagnostics.DiagnosticListener diagnostic, object target) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListenerExtensions.SubscribeWithAdapter(System.Diagnostics.DiagnosticListener,System.Object)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.IDisposable</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostic" Type="System.Diagnostics.DiagnosticListener" RefType="this" />
          <Parameter Name="target" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="diagnostic">To be added.</param>
          <param name="target">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Diagnostics.DiagnosticListenerExtensions" Member="M:System.Diagnostics.DiagnosticListenerExtensions.SubscribeWithAdapter(System.Diagnostics.DiagnosticListener,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticListener" />
      </Targets>
      <Member MemberName="SubscribeWithAdapter">
        <MemberSignature Language="C#" Value="public static IDisposable SubscribeWithAdapter (this System.Diagnostics.DiagnosticListener diagnostic, object target, Func&lt;string,bool&gt; isEnabled);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IDisposable SubscribeWithAdapter(class System.Diagnostics.DiagnosticListener diagnostic, object target, class System.Func`2&lt;string, bool&gt; isEnabled) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListenerExtensions.SubscribeWithAdapter(System.Diagnostics.DiagnosticListener,System.Object,System.Func{System.String,System.Boolean})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.IDisposable</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostic" Type="System.Diagnostics.DiagnosticListener" RefType="this" />
          <Parameter Name="target" Type="System.Object" />
          <Parameter Name="isEnabled" Type="System.Func&lt;System.String,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <param name="diagnostic">To be added.</param>
          <param name="target">To be added.</param>
          <param name="isEnabled">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Diagnostics.DiagnosticListenerExtensions" Member="M:System.Diagnostics.DiagnosticListenerExtensions.SubscribeWithAdapter(System.Diagnostics.DiagnosticListener,System.Object,System.Func{System.String,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Diagnostics.DiagnosticListener" />
      </Targets>
      <Member MemberName="SubscribeWithAdapter">
        <MemberSignature Language="C#" Value="public static IDisposable SubscribeWithAdapter (this System.Diagnostics.DiagnosticListener diagnostic, object target, Func&lt;string,object,object,bool&gt; isEnabled);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IDisposable SubscribeWithAdapter(class System.Diagnostics.DiagnosticListener diagnostic, object target, class System.Func`4&lt;string, object, object, bool&gt; isEnabled) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticListenerExtensions.SubscribeWithAdapter(System.Diagnostics.DiagnosticListener,System.Object,System.Func{System.String,System.Object,System.Object,System.Boolean})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.IDisposable</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="diagnostic" Type="System.Diagnostics.DiagnosticListener" RefType="this" />
          <Parameter Name="target" Type="System.Object" />
          <Parameter Name="isEnabled" Type="System.Func&lt;System.String,System.Object,System.Object,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <param name="diagnostic">To be added.</param>
          <param name="target">To be added.</param>
          <param name="isEnabled">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Diagnostics.DiagnosticListenerExtensions" Member="M:System.Diagnostics.DiagnosticListenerExtensions.SubscribeWithAdapter(System.Diagnostics.DiagnosticListener,System.Object,System.Func{System.String,System.Object,System.Object,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="CreateErrorResponse">
        <MemberSignature Language="C#" Value="public static System.Net.Http.HttpResponseMessage CreateErrorResponse (this System.Net.Http.HttpRequestMessage request, System.Net.HttpStatusCode statusCode, Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary modelState);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Http.HttpResponseMessage CreateErrorResponse(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.HttpStatusCode statusCode, class Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary modelState) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
          <Parameter Name="statusCode" Type="System.Net.HttpStatusCode" />
          <Parameter Name="modelState" Type="Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" />
        </Parameters>
        <Docs>
          <param name="request">The request.</param>
          <param name="statusCode">The status code of the created response.</param>
          <param name="modelState">The model state.</param>
          <summary>
            Helper method that performs content negotiation and creates a <see cref="T:System.Net.Http.HttpResponseMessage" />
            representing an error with an instance of <see cref="T:System.Net.Http.ObjectContent`1" /> wrapping an
            <see cref="T:System.Web.Http.HttpError" /> for model state <paramref name="modelState" />. If no formatter is found, this
            method returns a response with status 406 NotAcceptable.
            </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="CreateErrorResponse">
        <MemberSignature Language="C#" Value="public static System.Net.Http.HttpResponseMessage CreateErrorResponse (this System.Net.Http.HttpRequestMessage request, System.Net.HttpStatusCode statusCode, Exception exception);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Http.HttpResponseMessage CreateErrorResponse(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.HttpStatusCode statusCode, class System.Exception exception) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.Exception)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
          <Parameter Name="statusCode" Type="System.Net.HttpStatusCode" />
          <Parameter Name="exception" Type="System.Exception" />
        </Parameters>
        <Docs>
          <param name="request">The request.</param>
          <param name="statusCode">The status code of the created response.</param>
          <param name="exception">The exception.</param>
          <summary>
            Helper method that performs content negotiation and creates a <see cref="T:System.Net.Http.HttpResponseMessage" />
            representing an error with an instance of <see cref="T:System.Net.Http.ObjectContent`1" /> wrapping an
            <see cref="T:System.Web.Http.HttpError" /> for exception <paramref name="exception" />. If no formatter is found, this method
            returns a response with status 406 NotAcceptable.
            </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.Exception)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="CreateErrorResponse">
        <MemberSignature Language="C#" Value="public static System.Net.Http.HttpResponseMessage CreateErrorResponse (this System.Net.Http.HttpRequestMessage request, System.Net.HttpStatusCode statusCode, string message);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Http.HttpResponseMessage CreateErrorResponse(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.HttpStatusCode statusCode, string message) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
          <Parameter Name="statusCode" Type="System.Net.HttpStatusCode" />
          <Parameter Name="message" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="request">The request.</param>
          <param name="statusCode">The status code of the created response.</param>
          <param name="message">The error message.</param>
          <summary>
            Helper method that performs content negotiation and creates a <see cref="T:System.Net.Http.HttpResponseMessage" />
            representing an error with an instance of <see cref="T:System.Net.Http.ObjectContent`1" /> wrapping an
            <see cref="T:System.Web.Http.HttpError" /> with message <paramref name="message" />. If no formatter is found, this method
            returns a response with status 406 NotAcceptable.
            </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="CreateErrorResponse">
        <MemberSignature Language="C#" Value="public static System.Net.Http.HttpResponseMessage CreateErrorResponse (this System.Net.Http.HttpRequestMessage request, System.Net.HttpStatusCode statusCode, string message, Exception exception);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Http.HttpResponseMessage CreateErrorResponse(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.HttpStatusCode statusCode, string message, class System.Exception exception) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.String,System.Exception)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
          <Parameter Name="statusCode" Type="System.Net.HttpStatusCode" />
          <Parameter Name="message" Type="System.String" />
          <Parameter Name="exception" Type="System.Exception" />
        </Parameters>
        <Docs>
          <param name="request">The request.</param>
          <param name="statusCode">The status code of the created response.</param>
          <param name="message">The error message.</param>
          <param name="exception">The exception.</param>
          <summary>
            Helper method that performs content negotiation and creates a <see cref="T:System.Net.Http.HttpResponseMessage" />
            representing an error with an instance of <see cref="T:System.Net.Http.ObjectContent`1" /> wrapping an
            <see cref="T:System.Web.Http.HttpError" /> with error message <paramref name="message" /> for exception
            <paramref name="exception" />. If no formatter is found, this method returns a response with status 406
            NotAcceptable.
            </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.String,System.Exception)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="CreateErrorResponse">
        <MemberSignature Language="C#" Value="public static System.Net.Http.HttpResponseMessage CreateErrorResponse (this System.Net.Http.HttpRequestMessage request, System.Net.HttpStatusCode statusCode, System.Web.Http.HttpError error);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Http.HttpResponseMessage CreateErrorResponse(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.HttpStatusCode statusCode, class System.Web.Http.HttpError error) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.Web.Http.HttpError)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
          <Parameter Name="statusCode" Type="System.Net.HttpStatusCode" />
          <Parameter Name="error" Type="System.Web.Http.HttpError" />
        </Parameters>
        <Docs>
          <param name="request">The request.</param>
          <param name="statusCode">The status code of the created response.</param>
          <param name="error">The error to wrap.</param>
          <summary>
            Helper method that performs content negotiation and creates a <see cref="T:System.Net.Http.HttpResponseMessage" />
            representing an error with an instance of <see cref="T:System.Net.Http.ObjectContent`1" /> wrapping <paramref name="error" />
            as the content. If no formatter is found, this method returns a response with status 406 NotAcceptable.
            </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.Web.Http.HttpError)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="CreateResponse&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Net.Http.HttpResponseMessage CreateResponse&lt;T&gt; (this System.Net.Http.HttpRequestMessage request, T value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Http.HttpResponseMessage CreateResponse&lt;T&gt;(class System.Net.Http.HttpRequestMessage request, !!T value) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,``0)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
          <Parameter Name="value" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the value.</typeparam>
          <param name="request">The request.</param>
          <param name="value">The value to wrap. Can be <c>null</c>.</param>
          <summary>
            Helper method that performs content negotiation and creates a <see cref="T:System.Net.Http.HttpResponseMessage" /> with an
            instance of <see cref="T:System.Net.Http.ObjectContent`1" /> as the content and <see cref="F:System.Net.HttpStatusCode.OK" />
            as the status code if a formatter can be found. If no formatter is found, this method returns a response
            with status 406 NotAcceptable.
            </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="CreateResponse&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Net.Http.HttpResponseMessage CreateResponse&lt;T&gt; (this System.Net.Http.HttpRequestMessage request, System.Net.HttpStatusCode statusCode, T value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Http.HttpResponseMessage CreateResponse&lt;T&gt;(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.HttpStatusCode statusCode, !!T value) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
          <Parameter Name="statusCode" Type="System.Net.HttpStatusCode" />
          <Parameter Name="value" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the value.</typeparam>
          <param name="request">The request.</param>
          <param name="statusCode">The status code of the created response.</param>
          <param name="value">The value to wrap. Can be <c>null</c>.</param>
          <summary>
            Helper method that performs content negotiation and creates a <see cref="T:System.Net.Http.HttpResponseMessage" /> with an
            instance of <see cref="T:System.Net.Http.ObjectContent`1" /> as the content if a formatter can be found. If no formatter is
            found, this method returns a response with status 406 NotAcceptable.
            configuration.
            </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="CreateResponse&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Net.Http.HttpResponseMessage CreateResponse&lt;T&gt; (this System.Net.Http.HttpRequestMessage request, System.Net.HttpStatusCode statusCode, T value, System.Collections.Generic.IEnumerable&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt; formatters);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Http.HttpResponseMessage CreateResponse&lt;T&gt;(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.HttpStatusCode statusCode, !!T value, class System.Collections.Generic.IEnumerable`1&lt;class System.Net.Http.Formatting.MediaTypeFormatter&gt; formatters) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
          <Parameter Name="statusCode" Type="System.Net.HttpStatusCode" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="formatters" Type="System.Collections.Generic.IEnumerable&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the value.</typeparam>
          <param name="request">The request.</param>
          <param name="statusCode">The status code of the created response.</param>
          <param name="value">The value to wrap. Can be <c>null</c>.</param>
          <param name="formatters">The set of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> objects from which to choose.</param>
          <summary>
            Helper method that performs content negotiation and creates a <see cref="T:System.Net.Http.HttpResponseMessage" /> with an
            instance of <see cref="T:System.Net.Http.ObjectContent`1" /> as the content if a formatter can be found. If no formatter is
            found, this method returns a response with status 406 NotAcceptable.
            </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="CreateResponse&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Net.Http.HttpResponseMessage CreateResponse&lt;T&gt; (this System.Net.Http.HttpRequestMessage request, System.Net.HttpStatusCode statusCode, T value, System.Net.Http.Formatting.MediaTypeFormatter formatter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Http.HttpResponseMessage CreateResponse&lt;T&gt;(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.HttpStatusCode statusCode, !!T value, class System.Net.Http.Formatting.MediaTypeFormatter formatter) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
          <Parameter Name="statusCode" Type="System.Net.HttpStatusCode" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="formatter" Type="System.Net.Http.Formatting.MediaTypeFormatter" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the value.</typeparam>
          <param name="request">The request.</param>
          <param name="statusCode">The status code of the created response.</param>
          <param name="value">The value to wrap. Can be <c>null</c>.</param>
          <param name="formatter">The formatter to use.</param>
          <summary>
            Helper method that creates a <see cref="T:System.Net.Http.HttpResponseMessage" /> with an <see cref="T:System.Net.Http.ObjectContent`1" />
            instance containing the provided <paramref name="value" /> and the given <paramref name="formatter" />.
            </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="CreateResponse&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Net.Http.HttpResponseMessage CreateResponse&lt;T&gt; (this System.Net.Http.HttpRequestMessage request, System.Net.HttpStatusCode statusCode, T value, System.Net.Http.Formatting.MediaTypeFormatter formatter, System.Net.Http.Headers.MediaTypeHeaderValue mediaType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Http.HttpResponseMessage CreateResponse&lt;T&gt;(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.HttpStatusCode statusCode, !!T value, class System.Net.Http.Formatting.MediaTypeFormatter formatter, class System.Net.Http.Headers.MediaTypeHeaderValue mediaType) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
          <Parameter Name="statusCode" Type="System.Net.HttpStatusCode" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="formatter" Type="System.Net.Http.Formatting.MediaTypeFormatter" />
          <Parameter Name="mediaType" Type="System.Net.Http.Headers.MediaTypeHeaderValue" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the value.</typeparam>
          <param name="request">The request.</param>
          <param name="statusCode">The status code of the created response.</param>
          <param name="value">The value to wrap. Can be <c>null</c>.</param>
          <param name="formatter">The formatter to use.</param>
          <param name="mediaType">
            The media type override to set on the response's content. Can be <c>null</c>.
            </param>
          <summary>
            Helper method that creates a <see cref="T:System.Net.Http.HttpResponseMessage" /> with an <see cref="T:System.Net.Http.ObjectContent`1" />
            instance containing the provided <paramref name="value" /> and the given <paramref name="formatter" />.
            </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="CreateResponse&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Net.Http.HttpResponseMessage CreateResponse&lt;T&gt; (this System.Net.Http.HttpRequestMessage request, System.Net.HttpStatusCode statusCode, T value, System.Net.Http.Formatting.MediaTypeFormatter formatter, string mediaType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Http.HttpResponseMessage CreateResponse&lt;T&gt;(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.HttpStatusCode statusCode, !!T value, class System.Net.Http.Formatting.MediaTypeFormatter formatter, string mediaType) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
          <Parameter Name="statusCode" Type="System.Net.HttpStatusCode" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="formatter" Type="System.Net.Http.Formatting.MediaTypeFormatter" />
          <Parameter Name="mediaType" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the value.</typeparam>
          <param name="request">The request.</param>
          <param name="statusCode">The status code of the created response.</param>
          <param name="value">The value to wrap. Can be <c>null</c>.</param>
          <param name="formatter">The formatter to use.</param>
          <param name="mediaType">
            The media type override to set on the response's content. Can be <c>null</c>.
            </param>
          <summary>
            Helper method that creates a <see cref="T:System.Net.Http.HttpResponseMessage" /> with an <see cref="T:System.Net.Http.ObjectContent`1" />
            instance containing the provided <paramref name="value" /> and the given <paramref name="formatter" />.
            </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="CreateResponse&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Net.Http.HttpResponseMessage CreateResponse&lt;T&gt; (this System.Net.Http.HttpRequestMessage request, System.Net.HttpStatusCode statusCode, T value, System.Net.Http.Headers.MediaTypeHeaderValue mediaType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Http.HttpResponseMessage CreateResponse&lt;T&gt;(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.HttpStatusCode statusCode, !!T value, class System.Net.Http.Headers.MediaTypeHeaderValue mediaType) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Headers.MediaTypeHeaderValue)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
          <Parameter Name="statusCode" Type="System.Net.HttpStatusCode" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="mediaType" Type="System.Net.Http.Headers.MediaTypeHeaderValue" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the value.</typeparam>
          <param name="request">The request.</param>
          <param name="statusCode">The status code of the created response.</param>
          <param name="value">The value to wrap. Can be <c>null</c>.</param>
          <param name="mediaType">
            The media type used to look up an instance of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />.
            </param>
          <summary>
            Helper method that creates a <see cref="T:System.Net.Http.HttpResponseMessage" /> with an <see cref="T:System.Net.Http.ObjectContent`1" />
            instance containing the provided <paramref name="value" />. The given <paramref name="mediaType" /> is used
            to find an instance of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />.
            </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Headers.MediaTypeHeaderValue)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="CreateResponse&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Net.Http.HttpResponseMessage CreateResponse&lt;T&gt; (this System.Net.Http.HttpRequestMessage request, System.Net.HttpStatusCode statusCode, T value, string mediaType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Http.HttpResponseMessage CreateResponse&lt;T&gt;(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.HttpStatusCode statusCode, !!T value, string mediaType) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
          <Parameter Name="statusCode" Type="System.Net.HttpStatusCode" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="mediaType" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the value.</typeparam>
          <param name="request">The request.</param>
          <param name="statusCode">The status code of the created response.</param>
          <param name="value">The value to wrap. Can be <c>null</c>.</param>
          <param name="mediaType">
            The media type used to look up an instance of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />.
            </param>
          <summary>
            Helper method that creates a <see cref="T:System.Net.Http.HttpResponseMessage" /> with an <see cref="T:System.Net.Http.ObjectContent`1" />
            instance containing the provided <paramref name="value" />. The given <paramref name="mediaType" /> is used
            to find an instance of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />.
            </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Security.Claims.ClaimsPrincipal" />
      </Targets>
      <Member MemberName="FindFirstValue">
        <MemberSignature Language="C#" Value="public static string FindFirstValue (this System.Security.Claims.ClaimsPrincipal principal, string claimType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string FindFirstValue(class System.Security.Claims.ClaimsPrincipal principal, string claimType) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Security.Claims.PrincipalExtensions.FindFirstValue(System.Security.Claims.ClaimsPrincipal,System.String)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" RefType="this" />
          <Parameter Name="claimType" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="principal">The <see cref="T:System.Security.Claims.ClaimsPrincipal" /> instance this method extends.</param>
          <param name="claimType">The claim type whose first value should be returned.</param>
          <summary>
            Returns the value for the first claim of the specified type otherwise null the claim is not present.
            </summary>
        </Docs>
        <Link Type="System.Security.Claims.PrincipalExtensions" Member="M:System.Security.Claims.PrincipalExtensions.FindFirstValue(System.Security.Claims.ClaimsPrincipal,System.String)" />
      </Member>
    </ExtensionMethod>
  </ExtensionMethods>
</Overview>
