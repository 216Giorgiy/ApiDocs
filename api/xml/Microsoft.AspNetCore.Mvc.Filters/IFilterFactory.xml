<Type Name="IFilterFactory" FullName="Microsoft.AspNetCore.Mvc.Filters.IFilterFactory">
  <TypeSignature Language="C#" Value="public interface IFilterFactory : Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFilterFactory implements class Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Mvc.Filters.IFilterFactory" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Mvc.Abstractions</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            An interface for filter metadata which can create an instance of an executable filter.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata CreateInstance (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata CreateInstance(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Filters.IFilterFactory.CreateInstance(System.IServiceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Abstractions</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">The request <see cref="T:System.IServiceProvider" />.</param>
        <summary>
            Creates an instance of the executable filter.
            </summary>
        <returns>An instance of the executable filter.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReusable">
      <MemberSignature Language="C#" Value="public bool IsReusable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReusable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Mvc.Filters.IFilterFactory.IsReusable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Abstractions</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value that indicates if the result of <see cref="M:Microsoft.AspNetCore.Mvc.Filters.IFilterFactory.CreateInstance(System.IServiceProvider)" />
            can be reused across requests.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>