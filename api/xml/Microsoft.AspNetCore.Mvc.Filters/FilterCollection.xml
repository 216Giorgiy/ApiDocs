<Type Name="FilterCollection" FullName="Microsoft.AspNetCore.Mvc.Filters.FilterCollection">
  <TypeSignature Language="C#" Value="public class FilterCollection : System.Collections.ObjectModel.Collection&lt;Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FilterCollection extends System.Collections.ObjectModel.Collection`1&lt;class Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Mvc.Filters.FilterCollection" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Mvc.Core</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Collections.ObjectModel.Collection&lt;Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="!0">Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FilterCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Filters.FilterCollection.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata Add (Type filterType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata Add(class System.Type filterType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Filters.FilterCollection.Add(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filterType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="filterType">Type representing an <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata" />.</param>
        <summary>
            Adds a type representing an <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata" />.
            </summary>
        <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata" /> representing the added type.</returns>
        <remarks>
            Filter instances will be created using
            <see cref="T:Microsoft.Extensions.DependencyInjection.ActivatorUtilities" />.
            Use <see cref="M:Microsoft.AspNetCore.Mvc.Filters.FilterCollection.AddService(System.Type)" /> to register a service as a filter.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata Add (Type filterType, int order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata Add(class System.Type filterType, int32 order) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Filters.FilterCollection.Add(System.Type,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filterType" Type="System.Type" />
        <Parameter Name="order" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="filterType">Type representing an <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata" />.</param>
        <param name="order">The order of the added filter.</param>
        <summary>
            Adds a type representing an <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata" />.
            </summary>
        <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata" /> representing the added type.</returns>
        <remarks>
            Filter instances will be created using
            <see cref="T:Microsoft.Extensions.DependencyInjection.ActivatorUtilities" />.
            Use <see cref="M:Microsoft.AspNetCore.Mvc.Filters.FilterCollection.AddService(System.Type)" /> to register a service as a filter.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add&lt;TFilterType&gt;">
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata Add&lt;TFilterType&gt; () where TFilterType : Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata Add&lt;(class Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata) TFilterType&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Filters.FilterCollection.Add``1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFilterType">
          <Constraints>
            <InterfaceName>Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TFilterType">Type representing an <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata" />.</typeparam>
        <summary>
            Adds a type representing an <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata" />.
            </summary>
        <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata" /> representing the added type.</returns>
        <remarks>
            Filter instances will be created using
            <see cref="T:Microsoft.Extensions.DependencyInjection.ActivatorUtilities" />.
            Use <see cref="M:Microsoft.AspNetCore.Mvc.Filters.FilterCollection.AddService(System.Type)" /> to register a service as a filter.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add&lt;TFilterType&gt;">
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata Add&lt;TFilterType&gt; (int order) where TFilterType : Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata Add&lt;(class Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata) TFilterType&gt;(int32 order) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Filters.FilterCollection.Add``1(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFilterType">
          <Constraints>
            <InterfaceName>Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="order" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TFilterType">Type representing an <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata" />.</typeparam>
        <param name="order">The order of the added filter.</param>
        <summary>
            Adds a type representing an <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata" />.
            </summary>
        <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata" /> representing the added type.</returns>
        <remarks>
            Filter instances will be created using
            <see cref="T:Microsoft.Extensions.DependencyInjection.ActivatorUtilities" />.
            Use <see cref="M:Microsoft.AspNetCore.Mvc.Filters.FilterCollection.AddService(System.Type)" /> to register a service as a filter.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddService">
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata AddService (Type filterType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata AddService(class System.Type filterType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Filters.FilterCollection.AddService(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filterType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="filterType">Type representing an <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata" />.</param>
        <summary>
            Adds a type representing an <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata" />.
            </summary>
        <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata" /> representing the added service type.</returns>
        <remarks>
            Filter instances will be created through dependency injection. Use
            <see cref="M:Microsoft.AspNetCore.Mvc.Filters.FilterCollection.Add(System.Type)" /> to register a service that will be created via
            type activation.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddService">
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata AddService (Type filterType, int order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata AddService(class System.Type filterType, int32 order) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Filters.FilterCollection.AddService(System.Type,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filterType" Type="System.Type" />
        <Parameter Name="order" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="filterType">Type representing an <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata" />.</param>
        <param name="order">The order of the added filter.</param>
        <summary>
            Adds a type representing an <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata" />.
            </summary>
        <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata" /> representing the added service type.</returns>
        <remarks>
            Filter instances will be created through dependency injection. Use
            <see cref="M:Microsoft.AspNetCore.Mvc.Filters.FilterCollection.Add(System.Type)" /> to register a service that will be created via
            type activation.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddService&lt;TFilterType&gt;">
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata AddService&lt;TFilterType&gt; () where TFilterType : Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata AddService&lt;(class Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata) TFilterType&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Filters.FilterCollection.AddService``1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFilterType">
          <Constraints>
            <InterfaceName>Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TFilterType">Type representing an <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata" />.</typeparam>
        <summary>
            Adds a type representing an <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata" />.
            </summary>
        <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata" /> representing the added service type.</returns>
        <remarks>
            Filter instances will be created through dependency injection. Use
            <see cref="M:Microsoft.AspNetCore.Mvc.Filters.FilterCollection.Add(System.Type)" /> to register a service that will be created via
            type activation.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddService&lt;TFilterType&gt;">
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata AddService&lt;TFilterType&gt; (int order) where TFilterType : Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata AddService&lt;(class Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata) TFilterType&gt;(int32 order) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Filters.FilterCollection.AddService``1(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Core</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFilterType">
          <Constraints>
            <InterfaceName>Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="order" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TFilterType">Type representing an <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata" />.</typeparam>
        <param name="order">The order of the added filter.</param>
        <summary>
            Adds a type representing an <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata" />.
            </summary>
        <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata" /> representing the added service type.</returns>
        <remarks>
            Filter instances will be created through dependency injection. Use
            <see cref="M:Microsoft.AspNetCore.Mvc.Filters.FilterCollection.Add(System.Type)" /> to register a service that will be created via
            type activation.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>